//region block: polyfills
if (typeof ArrayBuffer.isView === 'undefined') {
  ArrayBuffer.isView = function (a) {
    return a != null && a.__proto__ != null && a.__proto__.__proto__ === Int8Array.prototype.__proto__;
  };
}
if (typeof Array.prototype.fill === 'undefined') {
  // Polyfill from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill#Polyfill
  Object.defineProperty(Array.prototype, 'fill', {value: function (value) {
    // Steps 1-2.
    if (this == null) {
      throw new TypeError('this is null or not defined');
    }
    var O = Object(this); // Steps 3-5.
    var len = O.length >>> 0; // Steps 6-7.
    var start = arguments[1];
    var relativeStart = start >> 0; // Step 8.
    var k = relativeStart < 0 ? Math.max(len + relativeStart, 0) : Math.min(relativeStart, len); // Steps 9-10.
    var end = arguments[2];
    var relativeEnd = end === undefined ? len : end >> 0; // Step 11.
    var finalValue = relativeEnd < 0 ? Math.max(len + relativeEnd, 0) : Math.min(relativeEnd, len); // Step 12.
    while (k < finalValue) {
      O[k] = value;
      k++;
    }
    ; // Step 13.
    return O;
  }});
}
[Int8Array, Int16Array, Uint16Array, Int32Array, Float32Array, Float64Array].forEach(function (TypedArray) {
  if (typeof TypedArray.prototype.fill === 'undefined') {
    Object.defineProperty(TypedArray.prototype, 'fill', {value: Array.prototype.fill});
  }
});
if (typeof String.prototype.startsWith === 'undefined') {
  Object.defineProperty(String.prototype, 'startsWith', {value: function (searchString, position) {
    position = position || 0;
    return this.lastIndexOf(searchString, position) === position;
  }});
}
if (typeof Math.imul === 'undefined') {
  Math.imul = function imul(a, b) {
    return (a & 4.29490176E9) * (b & 65535) + (a & 65535) * (b | 0) | 0;
  };
}
//endregion
(function (root, factory) {
  if (typeof define === 'function' && define.amd)
    define(['exports'], factory);
  else if (typeof exports === 'object')
    factory(module.exports);
  else
    root.gunnarss = factory(typeof gunnarss === 'undefined' ? {} : gunnarss);
}(this, function (_) {
  'use strict';
  //region block: imports
  var imul = Math.imul;
  var isView = ArrayBuffer.isView;
  //endregion
  //region block: pre-declaration
  Exception.prototype = Object.create(Error.prototype);
  Exception.prototype.constructor = Exception;
  RuntimeException.prototype = Object.create(Exception.prototype);
  RuntimeException.prototype.constructor = RuntimeException;
  KotlinNothingValueException.prototype = Object.create(RuntimeException.prototype);
  KotlinNothingValueException.prototype.constructor = KotlinNothingValueException;
  ListIteratorImpl.prototype = Object.create(IteratorImpl.prototype);
  ListIteratorImpl.prototype.constructor = ListIteratorImpl;
  AbstractList.prototype = Object.create(AbstractCollection.prototype);
  AbstractList.prototype.constructor = AbstractList;
  AbstractSet.prototype = Object.create(AbstractCollection.prototype);
  AbstractSet.prototype.constructor = AbstractSet;
  AbstractMap$keys$1.prototype = Object.create(AbstractSet.prototype);
  AbstractMap$keys$1.prototype.constructor = AbstractMap$keys$1;
  SequenceBuilderIterator.prototype = Object.create(SequenceScope.prototype);
  SequenceBuilderIterator.prototype.constructor = SequenceBuilderIterator;
  function plus(context) {
    var tmp;
    if (context === EmptyCoroutineContext_getInstance()) {
      tmp = this;
    } else {
      tmp = context.h4(this, CoroutineContext$plus$lambda);
    }
    return tmp;
  }
  function get(key) {
    var tmp;
    if (equals_0(this.y1(), key)) {
      tmp = isInterface(this, Element_0) ? this : THROW_CCE();
    } else {
      tmp = null;
    }
    return tmp;
  }
  function fold(initial, operation) {
    return operation(initial, this);
  }
  function minusKey(key) {
    return equals_0(this.y1(), key) ? EmptyCoroutineContext_getInstance() : this;
  }
  function releaseInterceptedContinuation(continuation) {
  }
  function get_0(key) {
    if (key instanceof AbstractCoroutineContextKey) {
      var tmp;
      if (key.f4(this.y1())) {
        var tmp_0 = key.e4(this);
        tmp = (!(tmp_0 == null) ? isInterface(tmp_0, Element_0) : false) ? tmp_0 : null;
      } else {
        tmp = null;
      }
      return tmp;
    }
    var tmp_1;
    if (Key_getInstance() === key) {
      tmp_1 = isInterface(this, Element_0) ? this : THROW_CCE();
    } else {
      tmp_1 = null;
    }
    return tmp_1;
  }
  function minusKey_0(key) {
    if (key instanceof AbstractCoroutineContextKey) {
      return (key.f4(this.y1()) ? !(key.e4(this) == null) : false) ? EmptyCoroutineContext_getInstance() : this;
    }
    return Key_getInstance() === key ? EmptyCoroutineContext_getInstance() : this;
  }
  CoroutineSingletons.prototype = Object.create(Enum.prototype);
  CoroutineSingletons.prototype.constructor = CoroutineSingletons;
  IntRange.prototype = Object.create(IntProgression.prototype);
  IntRange.prototype.constructor = IntRange;
  IntProgressionIterator.prototype = Object.create(IntIterator.prototype);
  IntProgressionIterator.prototype.constructor = IntProgressionIterator;
  Error_0.prototype = Object.create(Error.prototype);
  Error_0.prototype.constructor = Error_0;
  NotImplementedError.prototype = Object.create(Error_0.prototype);
  NotImplementedError.prototype.constructor = NotImplementedError;
  AbstractMutableCollection.prototype = Object.create(AbstractCollection.prototype);
  AbstractMutableCollection.prototype.constructor = AbstractMutableCollection;
  ListIteratorImpl_0.prototype = Object.create(IteratorImpl_0.prototype);
  ListIteratorImpl_0.prototype.constructor = ListIteratorImpl_0;
  AbstractMutableList.prototype = Object.create(AbstractMutableCollection.prototype);
  AbstractMutableList.prototype.constructor = AbstractMutableList;
  SubList.prototype = Object.create(AbstractMutableList.prototype);
  SubList.prototype.constructor = SubList;
  AbstractMutableSet.prototype = Object.create(AbstractMutableCollection.prototype);
  AbstractMutableSet.prototype.constructor = AbstractMutableSet;
  AbstractEntrySet.prototype = Object.create(AbstractMutableSet.prototype);
  AbstractEntrySet.prototype.constructor = AbstractEntrySet;
  AbstractMutableMap$keys$1.prototype = Object.create(AbstractMutableSet.prototype);
  AbstractMutableMap$keys$1.prototype.constructor = AbstractMutableMap$keys$1;
  AbstractMutableMap$values$1.prototype = Object.create(AbstractMutableCollection.prototype);
  AbstractMutableMap$values$1.prototype.constructor = AbstractMutableMap$values$1;
  AbstractMutableMap.prototype = Object.create(AbstractMap.prototype);
  AbstractMutableMap.prototype.constructor = AbstractMutableMap;
  ArrayList.prototype = Object.create(AbstractMutableList.prototype);
  ArrayList.prototype.constructor = ArrayList;
  EntrySet.prototype = Object.create(AbstractEntrySet.prototype);
  EntrySet.prototype.constructor = EntrySet;
  HashMap.prototype = Object.create(AbstractMutableMap.prototype);
  HashMap.prototype.constructor = HashMap;
  HashSet.prototype = Object.create(AbstractMutableSet.prototype);
  HashSet.prototype.constructor = HashSet;
  function createJsMap() {
    var result = Object.create(null);
    result['foo'] = 1;
    jsDeleteProperty(result, 'foo');
    return result;
  }
  ChainEntry.prototype = Object.create(SimpleEntry.prototype);
  ChainEntry.prototype.constructor = ChainEntry;
  EntrySet_0.prototype = Object.create(AbstractEntrySet.prototype);
  EntrySet_0.prototype.constructor = EntrySet_0;
  LinkedHashMap.prototype = Object.create(HashMap.prototype);
  LinkedHashMap.prototype.constructor = LinkedHashMap;
  LinkedHashSet.prototype = Object.create(HashSet.prototype);
  LinkedHashSet.prototype.constructor = LinkedHashSet;
  IllegalStateException.prototype = Object.create(RuntimeException.prototype);
  IllegalStateException.prototype.constructor = IllegalStateException;
  CancellationException.prototype = Object.create(IllegalStateException.prototype);
  CancellationException.prototype.constructor = CancellationException;
  PrimitiveKClassImpl.prototype = Object.create(KClassImpl.prototype);
  PrimitiveKClassImpl.prototype.constructor = PrimitiveKClassImpl;
  NothingKClassImpl.prototype = Object.create(KClassImpl.prototype);
  NothingKClassImpl.prototype.constructor = NothingKClassImpl;
  SimpleKClassImpl.prototype = Object.create(KClassImpl.prototype);
  SimpleKClassImpl.prototype.constructor = SimpleKClassImpl;
  DurationUnit.prototype = Object.create(Enum.prototype);
  DurationUnit.prototype.constructor = DurationUnit;
  intArrayIterator$1.prototype = Object.create(IntIterator.prototype);
  intArrayIterator$1.prototype.constructor = intArrayIterator$1;
  Long.prototype = Object.create(Number_0.prototype);
  Long.prototype.constructor = Long;
  _no_name_provided__qut3iv_3.prototype = Object.create(CoroutineImpl.prototype);
  _no_name_provided__qut3iv_3.prototype.constructor = _no_name_provided__qut3iv_3;
  _no_name_provided__qut3iv_4.prototype = Object.create(CoroutineImpl.prototype);
  _no_name_provided__qut3iv_4.prototype.constructor = _no_name_provided__qut3iv_4;
  IllegalArgumentException.prototype = Object.create(RuntimeException.prototype);
  IllegalArgumentException.prototype.constructor = IllegalArgumentException;
  NoSuchElementException.prototype = Object.create(RuntimeException.prototype);
  NoSuchElementException.prototype.constructor = NoSuchElementException;
  UnsupportedOperationException.prototype = Object.create(RuntimeException.prototype);
  UnsupportedOperationException.prototype.constructor = UnsupportedOperationException;
  ConcurrentModificationException.prototype = Object.create(RuntimeException.prototype);
  ConcurrentModificationException.prototype.constructor = ConcurrentModificationException;
  IndexOutOfBoundsException.prototype = Object.create(RuntimeException.prototype);
  IndexOutOfBoundsException.prototype.constructor = IndexOutOfBoundsException;
  AssertionError.prototype = Object.create(Error_0.prototype);
  AssertionError.prototype.constructor = AssertionError;
  ArithmeticException.prototype = Object.create(RuntimeException.prototype);
  ArithmeticException.prototype.constructor = ArithmeticException;
  NullPointerException.prototype = Object.create(RuntimeException.prototype);
  NullPointerException.prototype.constructor = NullPointerException;
  NoWhenBranchMatchedException.prototype = Object.create(RuntimeException.prototype);
  NoWhenBranchMatchedException.prototype.constructor = NoWhenBranchMatchedException;
  ClassCastException.prototype = Object.create(RuntimeException.prototype);
  ClassCastException.prototype.constructor = ClassCastException;
  UninitializedPropertyAccessException.prototype = Object.create(RuntimeException.prototype);
  UninitializedPropertyAccessException.prototype.constructor = UninitializedPropertyAccessException;
  None.prototype = Object.create(atomicfu$TraceBase.prototype);
  None.prototype.constructor = None;
  function cancel$default(cause, $mask0, $handler) {
    if (!(($mask0 & 1) === 0))
      cause = null;
    var tmp;
    if ($handler == null) {
      this.ig(cause);
      tmp = Unit_getInstance();
    } else {
      tmp = $handler(cause);
    }
    return tmp;
  }
  function invokeOnCompletion$default(onCancelling, invokeImmediately, handler, $mask0, $handler) {
    if (!(($mask0 & 1) === 0))
      onCancelling = false;
    if (!(($mask0 & 2) === 0))
      invokeImmediately = true;
    return $handler == null ? this.eg(onCancelling, invokeImmediately, handler) : $handler(onCancelling, invokeImmediately, handler);
  }
  AbstractCoroutine.prototype = Object.create(JobSupport.prototype);
  AbstractCoroutine.prototype.constructor = AbstractCoroutine;
  StandaloneCoroutine.prototype = Object.create(AbstractCoroutine.prototype);
  StandaloneCoroutine.prototype.constructor = StandaloneCoroutine;
  LazyStandaloneCoroutine.prototype = Object.create(StandaloneCoroutine.prototype);
  LazyStandaloneCoroutine.prototype.constructor = LazyStandaloneCoroutine;
  ScopeCoroutine.prototype = Object.create(AbstractCoroutine.prototype);
  ScopeCoroutine.prototype.constructor = ScopeCoroutine;
  DispatchedCoroutine.prototype = Object.create(ScopeCoroutine.prototype);
  DispatchedCoroutine.prototype.constructor = DispatchedCoroutine;
  function cancel$default_0(cause, $mask0, $handler) {
    if (!(($mask0 & 1) === 0))
      cause = null;
    return $handler == null ? this.oh(cause) : $handler(cause);
  }
  DispatchedTask.prototype = Object.create(SchedulerTask.prototype);
  DispatchedTask.prototype.constructor = DispatchedTask;
  CancellableContinuationImpl.prototype = Object.create(DispatchedTask.prototype);
  CancellableContinuationImpl.prototype.constructor = CancellableContinuationImpl;
  CancelHandler.prototype = Object.create(CancelHandlerBase.prototype);
  CancelHandler.prototype.constructor = CancelHandler;
  BeforeResumeCancelHandler.prototype = Object.create(CancelHandler.prototype);
  BeforeResumeCancelHandler.prototype.constructor = BeforeResumeCancelHandler;
  InvokeOnCancel.prototype = Object.create(CancelHandler.prototype);
  InvokeOnCancel.prototype.constructor = InvokeOnCancel;
  CancelledContinuation.prototype = Object.create(CompletedExceptionally.prototype);
  CancelledContinuation.prototype.constructor = CancelledContinuation;
  Key_1.prototype = Object.create(AbstractCoroutineContextKey.prototype);
  Key_1.prototype.constructor = Key_1;
  CoroutineDispatcher.prototype = Object.create(AbstractCoroutineContextElement.prototype);
  CoroutineDispatcher.prototype.constructor = CoroutineDispatcher;
  CoroutineStart.prototype = Object.create(Enum.prototype);
  CoroutineStart.prototype.constructor = CoroutineStart;
  EventLoop.prototype = Object.create(CoroutineDispatcher.prototype);
  EventLoop.prototype.constructor = EventLoop;
  CompletionHandlerException.prototype = Object.create(RuntimeException.prototype);
  CompletionHandlerException.prototype.constructor = CompletionHandlerException;
  CoroutinesInternalError.prototype = Object.create(Error_0.prototype);
  CoroutinesInternalError.prototype.constructor = CoroutinesInternalError;
  LinkedListHead.prototype = Object.create(LinkedListNode.prototype);
  LinkedListHead.prototype.constructor = LinkedListHead;
  NodeList.prototype = Object.create(LinkedListHead.prototype);
  NodeList.prototype.constructor = NodeList;
  CompletionHandlerBase.prototype = Object.create(LinkedListNode.prototype);
  CompletionHandlerBase.prototype.constructor = CompletionHandlerBase;
  JobNode.prototype = Object.create(CompletionHandlerBase.prototype);
  JobNode.prototype.constructor = JobNode;
  ChildCompletion.prototype = Object.create(JobNode.prototype);
  ChildCompletion.prototype.constructor = ChildCompletion;
  JobSupport$_get_children_$slambda_k839f8.prototype = Object.create(CoroutineImpl.prototype);
  JobSupport$_get_children_$slambda_k839f8.prototype.constructor = JobSupport$_get_children_$slambda_k839f8;
  JobCancellingNode.prototype = Object.create(JobNode.prototype);
  JobCancellingNode.prototype.constructor = JobCancellingNode;
  ChildHandleNode.prototype = Object.create(JobCancellingNode.prototype);
  ChildHandleNode.prototype.constructor = ChildHandleNode;
  InvokeOnCancelling.prototype = Object.create(JobCancellingNode.prototype);
  InvokeOnCancelling.prototype.constructor = InvokeOnCancelling;
  InvokeOnCompletion.prototype = Object.create(JobNode.prototype);
  InvokeOnCompletion.prototype.constructor = InvokeOnCompletion;
  ChildContinuation.prototype = Object.create(JobCancellingNode.prototype);
  ChildContinuation.prototype.constructor = ChildContinuation;
  JobImpl.prototype = Object.create(JobSupport.prototype);
  JobImpl.prototype.constructor = JobImpl;
  MainCoroutineDispatcher.prototype = Object.create(CoroutineDispatcher.prototype);
  MainCoroutineDispatcher.prototype.constructor = MainCoroutineDispatcher;
  SupervisorJobImpl.prototype = Object.create(JobImpl.prototype);
  SupervisorJobImpl.prototype.constructor = SupervisorJobImpl;
  TimeoutCancellationException.prototype = Object.create(CancellationException.prototype);
  TimeoutCancellationException.prototype.constructor = TimeoutCancellationException;
  Unconfined.prototype = Object.create(CoroutineDispatcher.prototype);
  Unconfined.prototype.constructor = Unconfined;
  StateFlowImpl.prototype = Object.create(AbstractSharedFlow.prototype);
  StateFlowImpl.prototype.constructor = StateFlowImpl;
  DispatchedContinuation.prototype = Object.create(DispatchedTask.prototype);
  DispatchedContinuation.prototype.constructor = DispatchedContinuation;
  UndispatchedCoroutine.prototype = Object.create(ScopeCoroutine.prototype);
  UndispatchedCoroutine.prototype.constructor = UndispatchedCoroutine;
  JsMainDispatcher.prototype = Object.create(MainCoroutineDispatcher.prototype);
  JsMainDispatcher.prototype.constructor = JsMainDispatcher;
  UnconfinedEventLoop.prototype = Object.create(EventLoop.prototype);
  UnconfinedEventLoop.prototype.constructor = UnconfinedEventLoop;
  JobCancellationException.prototype = Object.create(CancellationException.prototype);
  JobCancellationException.prototype.constructor = JobCancellationException;
  SetTimeoutBasedDispatcher.prototype = Object.create(CoroutineDispatcher.prototype);
  SetTimeoutBasedDispatcher.prototype.constructor = SetTimeoutBasedDispatcher;
  NodeDispatcher.prototype = Object.create(SetTimeoutBasedDispatcher.prototype);
  NodeDispatcher.prototype.constructor = NodeDispatcher;
  SetTimeoutDispatcher.prototype = Object.create(SetTimeoutBasedDispatcher.prototype);
  SetTimeoutDispatcher.prototype.constructor = SetTimeoutDispatcher;
  MessageQueue.prototype = Object.create(ArrayQueue.prototype);
  MessageQueue.prototype.constructor = MessageQueue;
  ScheduledMessageQueue.prototype = Object.create(MessageQueue.prototype);
  ScheduledMessageQueue.prototype.constructor = ScheduledMessageQueue;
  WindowDispatcher.prototype = Object.create(CoroutineDispatcher.prototype);
  WindowDispatcher.prototype.constructor = WindowDispatcher;
  WindowMessageQueue.prototype = Object.create(MessageQueue.prototype);
  WindowMessageQueue.prototype.constructor = WindowMessageQueue;
  function onBeginChanges() {
  }
  function onEndChanges() {
  }
  function get_key() {
    return Key_getInstance_4();
  }
  function changed(value) {
    return this.r13(value);
  }
  function changed_0(value) {
    return this.s13(value);
  }
  InvalidationResult.prototype = Object.create(Enum.prototype);
  InvalidationResult.prototype.constructor = InvalidationResult;
  ProvidableCompositionLocal.prototype = Object.create(CompositionLocal.prototype);
  ProvidableCompositionLocal.prototype.constructor = ProvidableCompositionLocal;
  StaticProvidableCompositionLocal.prototype = Object.create(ProvidableCompositionLocal.prototype);
  StaticProvidableCompositionLocal.prototype.constructor = StaticProvidableCompositionLocal;
  DynamicProvidableCompositionLocal.prototype = Object.create(ProvidableCompositionLocal.prototype);
  DynamicProvidableCompositionLocal.prototype.constructor = DynamicProvidableCompositionLocal;
  Recomposer$recompositionRunner$slambda$slambda.prototype = Object.create(CoroutineImpl.prototype);
  Recomposer$recompositionRunner$slambda$slambda.prototype.constructor = Recomposer$recompositionRunner$slambda$slambda;
  State.prototype = Object.create(Enum.prototype);
  State.prototype.constructor = State;
  Recomposer$runRecomposeAndApplyChanges$slambda.prototype = Object.create(CoroutineImpl.prototype);
  Recomposer$runRecomposeAndApplyChanges$slambda.prototype.constructor = Recomposer$runRecomposeAndApplyChanges$slambda;
  Recomposer$recompositionRunner$slambda.prototype = Object.create(CoroutineImpl.prototype);
  Recomposer$recompositionRunner$slambda.prototype.constructor = Recomposer$recompositionRunner$slambda;
  $awaitWorkAvailableCOROUTINE$1.prototype = Object.create(CoroutineImpl.prototype);
  $awaitWorkAvailableCOROUTINE$1.prototype.constructor = $awaitWorkAvailableCOROUTINE$1;
  Recomposer.prototype = Object.create(CompositionContext.prototype);
  Recomposer.prototype.constructor = Recomposer;
  function merge(previous, current, applied) {
    return null;
  }
  StateStateRecord.prototype = Object.create(StateRecord.prototype);
  StateStateRecord.prototype.constructor = StateStateRecord;
  function mergeRecords(previous, current, applied) {
    return null;
  }
  AbstractPersistentList.prototype = Object.create(AbstractList.prototype);
  AbstractPersistentList.prototype.constructor = AbstractPersistentList;
  BufferIterator.prototype = Object.create(AbstractListIterator.prototype);
  BufferIterator.prototype.constructor = BufferIterator;
  PersistentVector.prototype = Object.create(AbstractPersistentList.prototype);
  PersistentVector.prototype.constructor = PersistentVector;
  PersistentVectorBuilder.prototype = Object.create(AbstractMutableList.prototype);
  PersistentVectorBuilder.prototype.constructor = PersistentVectorBuilder;
  PersistentVectorIterator.prototype = Object.create(AbstractListIterator.prototype);
  PersistentVectorIterator.prototype.constructor = PersistentVectorIterator;
  PersistentVectorMutableIterator.prototype = Object.create(AbstractListIterator.prototype);
  PersistentVectorMutableIterator.prototype.constructor = PersistentVectorMutableIterator;
  SmallPersistentVector.prototype = Object.create(AbstractPersistentList.prototype);
  SmallPersistentVector.prototype.constructor = SmallPersistentVector;
  TrieIterator.prototype = Object.create(AbstractListIterator.prototype);
  TrieIterator.prototype.constructor = TrieIterator;
  PersistentHashMap.prototype = Object.create(AbstractMap.prototype);
  PersistentHashMap.prototype.constructor = PersistentHashMap;
  PersistentHashMapBuilder.prototype = Object.create(AbstractMutableMap.prototype);
  PersistentHashMapBuilder.prototype.constructor = PersistentHashMapBuilder;
  PersistentHashMapBuilderBaseIterator.prototype = Object.create(PersistentHashMapBaseIterator.prototype);
  PersistentHashMapBuilderBaseIterator.prototype.constructor = PersistentHashMapBuilderBaseIterator;
  PersistentHashMapBuilderKeysIterator.prototype = Object.create(PersistentHashMapBuilderBaseIterator.prototype);
  PersistentHashMapBuilderKeysIterator.prototype.constructor = PersistentHashMapBuilderKeysIterator;
  PersistentHashMapBuilderValuesIterator.prototype = Object.create(PersistentHashMapBuilderBaseIterator.prototype);
  PersistentHashMapBuilderValuesIterator.prototype.constructor = PersistentHashMapBuilderValuesIterator;
  TrieNodeMutableEntriesIterator.prototype = Object.create(TrieNodeBaseIterator.prototype);
  TrieNodeMutableEntriesIterator.prototype.constructor = TrieNodeMutableEntriesIterator;
  MutableMapEntry.prototype = Object.create(MapEntry.prototype);
  MutableMapEntry.prototype.constructor = MutableMapEntry;
  AbstractMapBuilderEntries.prototype = Object.create(AbstractMutableSet.prototype);
  AbstractMapBuilderEntries.prototype.constructor = AbstractMapBuilderEntries;
  PersistentHashMapBuilderEntries.prototype = Object.create(AbstractMapBuilderEntries.prototype);
  PersistentHashMapBuilderEntries.prototype.constructor = PersistentHashMapBuilderEntries;
  PersistentHashMapBuilderKeys.prototype = Object.create(AbstractMutableSet.prototype);
  PersistentHashMapBuilderKeys.prototype.constructor = PersistentHashMapBuilderKeys;
  PersistentHashMapBuilderValues.prototype = Object.create(AbstractMutableCollection.prototype);
  PersistentHashMapBuilderValues.prototype.constructor = PersistentHashMapBuilderValues;
  PersistentHashMapKeysIterator.prototype = Object.create(PersistentHashMapBaseIterator.prototype);
  PersistentHashMapKeysIterator.prototype.constructor = PersistentHashMapKeysIterator;
  PersistentHashMapEntriesIterator.prototype = Object.create(PersistentHashMapBaseIterator.prototype);
  PersistentHashMapEntriesIterator.prototype.constructor = PersistentHashMapEntriesIterator;
  TrieNodeKeysIterator.prototype = Object.create(TrieNodeBaseIterator.prototype);
  TrieNodeKeysIterator.prototype.constructor = TrieNodeKeysIterator;
  TrieNodeValuesIterator.prototype = Object.create(TrieNodeBaseIterator.prototype);
  TrieNodeValuesIterator.prototype.constructor = TrieNodeValuesIterator;
  TrieNodeEntriesIterator.prototype = Object.create(TrieNodeBaseIterator.prototype);
  TrieNodeEntriesIterator.prototype.constructor = TrieNodeEntriesIterator;
  PersistentHashMapKeys.prototype = Object.create(AbstractSet.prototype);
  PersistentHashMapKeys.prototype.constructor = PersistentHashMapKeys;
  PersistentHashMapEntries.prototype = Object.create(AbstractSet.prototype);
  PersistentHashMapEntries.prototype.constructor = PersistentHashMapEntries;
  PersistentOrderedSet.prototype = Object.create(AbstractSet.prototype);
  PersistentOrderedSet.prototype.constructor = PersistentOrderedSet;
  MutableSnapshot.prototype = Object.create(Snapshot.prototype);
  MutableSnapshot.prototype.constructor = MutableSnapshot;
  Success.prototype = Object.create(SnapshotApplyResult.prototype);
  Success.prototype.constructor = Success;
  Failure_0.prototype = Object.create(SnapshotApplyResult.prototype);
  Failure_0.prototype.constructor = Failure_0;
  GlobalSnapshot.prototype = Object.create(MutableSnapshot.prototype);
  GlobalSnapshot.prototype.constructor = GlobalSnapshot;
  NestedMutableSnapshot.prototype = Object.create(MutableSnapshot.prototype);
  NestedMutableSnapshot.prototype.constructor = NestedMutableSnapshot;
  SnapshotIdSet$iterator$slambda.prototype = Object.create(CoroutineImpl.prototype);
  SnapshotIdSet$iterator$slambda.prototype.constructor = SnapshotIdSet$iterator$slambda;
  StateListStateRecord.prototype = Object.create(StateRecord.prototype);
  StateListStateRecord.prototype.constructor = StateListStateRecord;
  $withFrameNanosCOROUTINE$4.prototype = Object.create(CoroutineImpl.prototype);
  $withFrameNanosCOROUTINE$4.prototype.constructor = $withFrameNanosCOROUTINE$4;
  DomApplier.prototype = Object.create(AbstractApplier.prototype);
  DomApplier.prototype.constructor = DomApplier;
  GlobalSnapshotManager$schedule$slambda.prototype = Object.create(CoroutineImpl.prototype);
  GlobalSnapshotManager$schedule$slambda.prototype.constructor = GlobalSnapshotManager$schedule$slambda;
  JsMicrotasksDispatcher.prototype = Object.create(CoroutineDispatcher.prototype);
  JsMicrotasksDispatcher.prototype.constructor = JsMicrotasksDispatcher;
  renderComposable$composable$slambda.prototype = Object.create(CoroutineImpl.prototype);
  renderComposable$composable$slambda.prototype.constructor = renderComposable$composable$slambda;
  function onClick(listener) {
    Companion_getInstance_18();
    this.f1t(new MouseEventListener('click', listener));
  }
  function onKeyDown(listener) {
    Companion_getInstance_18();
    this.f1t(new KeyboardEventListener('keydown', listener));
  }
  function classes(classes) {
    return this.b1t(asList(classes));
  }
  function id(value) {
    Companion_getInstance_17();
    return this.p1s('id', value);
  }
  function tabIndex(value) {
    Companion_getInstance_17();
    return this.p1s('tabindex', value.toString());
  }
  MouseEventListener.prototype = Object.create(SyntheticEventListener.prototype);
  MouseEventListener.prototype.constructor = MouseEventListener;
  KeyboardEventListener.prototype = Object.create(SyntheticEventListener.prototype);
  KeyboardEventListener.prototype.constructor = KeyboardEventListener;
  function property(propertyName, value) {
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.StylePropertyValue' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = value;
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    return this.p1x(propertyName, tmp$ret$2);
  }
  function property_0(propertyName, value) {
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.StylePropertyValue' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = value;
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    return this.p1x(propertyName, tmp$ret$2);
  }
  function variable(variableName, value) {
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.StylePropertyValue' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = value;
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    return this.s1x(variableName, tmp$ret$2);
  }
  CSSRuleBuilderImpl.prototype = Object.create(StyleScopeBuilder.prototype);
  CSSRuleBuilderImpl.prototype.constructor = CSSRuleBuilderImpl;
  function add(selector, style) {
    this.w1w(new CSSStyleRuleDeclaration(selector, style));
  }
  function returnUniversalSelector() {
    return get_Universal();
  }
  function returnHoverSelector() {
    return this.w1y();
  }
  function get_hover() {
    return new PseudoClassInternal('hover');
  }
  function invoke(_this__u8e3s4, cssRule) {
    this.u1y(new RawSelector(_this__u8e3s4), cssRule);
  }
  function style(_this__u8e3s4, cssRule) {
    this.u1y(new RawSelector(_this__u8e3s4), cssRule);
  }
  function style_0(selector, cssRule) {
    this.r1y(selector, buildCSSStyleRule(cssRule));
  }
  RawSelector.prototype = Object.create(CSSSelector.prototype);
  RawSelector.prototype.constructor = RawSelector;
  PseudoClassInternal.prototype = Object.create(CSSSelector.prototype);
  PseudoClassInternal.prototype.constructor = PseudoClassInternal;
  DomElementWrapper.prototype = Object.create(DomNodeWrapper.prototype);
  DomElementWrapper.prototype.constructor = DomElementWrapper;
  ElementScopeImpl.prototype = Object.create(ElementScopeBase.prototype);
  ElementScopeImpl.prototype.constructor = ElementScopeImpl;
  SyntheticKeyboardEvent.prototype = Object.create(SyntheticEvent.prototype);
  SyntheticKeyboardEvent.prototype.constructor = SyntheticKeyboardEvent;
  SyntheticMouseEvent.prototype = Object.create(SyntheticEvent.prototype);
  SyntheticMouseEvent.prototype.constructor = SyntheticMouseEvent;
  JustifyItemsKeyword.prototype = Object.create(JustifyItems.prototype);
  JustifyItemsKeyword.prototype.constructor = JustifyItemsKeyword;
  JustifyItemsPosition.prototype = Object.create(JustifyItemsKeyword.prototype);
  JustifyItemsPosition.prototype.constructor = JustifyItemsPosition;
  JustifySelfKeyword.prototype = Object.create(JustifySelf.prototype);
  JustifySelfKeyword.prototype.constructor = JustifySelfKeyword;
  JustifySelfPosition.prototype = Object.create(JustifySelfKeyword.prototype);
  JustifySelfPosition.prototype.constructor = JustifySelfPosition;
  Simple.prototype = Object.create(RefCallback.prototype);
  Simple.prototype.constructor = Simple;
  KobwebComposeStyleSheet.prototype = Object.create(StyleSheet.prototype);
  KobwebComposeStyleSheet.prototype.constructor = KobwebComposeStyleSheet;
  function then(other) {
    return other === Companion_getInstance_36() ? this : new ChainedModifier(this, other);
  }
  function fold_0(initial, operation) {
    return operation(initial, this);
  }
  WebModifierType.prototype = Object.create(Enum.prototype);
  WebModifierType.prototype.constructor = WebModifierType;
  SilkStyleSheet.prototype = Object.create(StyleSheet.prototype);
  SilkStyleSheet.prototype.constructor = SilkStyleSheet;
  ComponentModifiers.prototype = Object.create(StyleModifiers.prototype);
  ComponentModifiers.prototype.constructor = ComponentModifiers;
  OfPseudoClass.prototype = Object.create(CssRule.prototype);
  OfPseudoClass.prototype.constructor = OfPseudoClass;
  SimpleComponentVariant.prototype = Object.create(ComponentVariant.prototype);
  SimpleComponentVariant.prototype.constructor = SimpleComponentVariant;
  Breakpoint.prototype = Object.create(Enum.prototype);
  Breakpoint.prototype.constructor = Breakpoint;
  Rem.prototype = Object.create(BreakpointUnitValue.prototype);
  Rem.prototype.constructor = Rem;
  ColorMode.prototype = Object.create(Enum.prototype);
  ColorMode.prototype.constructor = ColorMode;
  CirclePath.prototype = Object.create(Path.prototype);
  CirclePath.prototype.constructor = CirclePath;
  DefaultStyleSheet.prototype = Object.create(StyleSheet.prototype);
  DefaultStyleSheet.prototype.constructor = DefaultStyleSheet;
  OpenLinkStrategy.prototype = Object.create(Enum.prototype);
  OpenLinkStrategy.prototype.constructor = OpenLinkStrategy;
  RouteException.prototype = Object.create(Exception.prototype);
  RouteException.prototype.constructor = RouteException;
  RootNode.prototype = Object.create(Node.prototype);
  RootNode.prototype.constructor = RootNode;
  StaticNode.prototype = Object.create(Node.prototype);
  StaticNode.prototype.constructor = StaticNode;
  DynamicNode.prototype = Object.create(Node.prototype);
  DynamicNode.prototype.constructor = DynamicNode;
  UpdateHistoryMode.prototype = Object.create(Enum.prototype);
  UpdateHistoryMode.prototype.constructor = UpdateHistoryMode;
  IconStyle.prototype = Object.create(Enum.prototype);
  IconStyle.prototype.constructor = IconStyle;
  IconCategory.prototype = Object.create(Enum.prototype);
  IconCategory.prototype.constructor = IconCategory;
  MyApp$composable$lambda$slambda.prototype = Object.create(CoroutineImpl.prototype);
  MyApp$composable$lambda$slambda.prototype.constructor = MyApp$composable$lambda$slambda;
  PageLayout$composable$slambda.prototype = Object.create(CoroutineImpl.prototype);
  PageLayout$composable$slambda.prototype.constructor = PageLayout$composable$slambda;
  //endregion
  function filterNotNull(_this__u8e3s4) {
    return filterNotNullTo(_this__u8e3s4, ArrayList_init_$Create$());
  }
  function forEach(_this__u8e3s4, action) {
    var indexedObject = _this__u8e3s4;
    var inductionVariable = 0;
    var last = indexedObject.length;
    while (inductionVariable < last) {
      var element = indexedObject[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      action(element);
    }
  }
  function indexOf(_this__u8e3s4, element) {
    if (element == null) {
      var inductionVariable = 0;
      var last = _this__u8e3s4.length - 1 | 0;
      if (inductionVariable <= last)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          if (_this__u8e3s4[index] == null) {
            return index;
          }
        }
         while (inductionVariable <= last);
    } else {
      var inductionVariable_0 = 0;
      var last_0 = _this__u8e3s4.length - 1 | 0;
      if (inductionVariable_0 <= last_0)
        do {
          var index_0 = inductionVariable_0;
          inductionVariable_0 = inductionVariable_0 + 1 | 0;
          if (equals_0(element, _this__u8e3s4[index_0])) {
            return index_0;
          }
        }
         while (inductionVariable_0 <= last_0);
    }
    return -1;
  }
  function toList(_this__u8e3s4) {
    var tmp0_subject = _this__u8e3s4.length;
    switch (tmp0_subject) {
      case 0:
        return emptyList();
      case 1:
        return listOf_0(_this__u8e3s4[0]);
      default:
        return toMutableList(_this__u8e3s4);
    }
  }
  function isEmpty(_this__u8e3s4) {
    return _this__u8e3s4.length === 0;
  }
  function forEach_0(_this__u8e3s4, action) {
    var indexedObject = _this__u8e3s4;
    var inductionVariable = 0;
    var last = indexedObject.length;
    while (inductionVariable < last) {
      var element = indexedObject[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      action(element);
    }
  }
  function lastIndexOf(_this__u8e3s4, element) {
    if (element == null) {
      var inductionVariable = _this__u8e3s4.length - 1 | 0;
      if (0 <= inductionVariable)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + -1 | 0;
          if (_this__u8e3s4[index] == null) {
            return index;
          }
        }
         while (0 <= inductionVariable);
    } else {
      var inductionVariable_0 = _this__u8e3s4.length - 1 | 0;
      if (0 <= inductionVariable_0)
        do {
          var index_0 = inductionVariable_0;
          inductionVariable_0 = inductionVariable_0 + -1 | 0;
          if (equals_0(element, _this__u8e3s4[index_0])) {
            return index_0;
          }
        }
         while (0 <= inductionVariable_0);
    }
    return -1;
  }
  function isEmpty_0(_this__u8e3s4) {
    return _this__u8e3s4.length === 0;
  }
  function toMutableList(_this__u8e3s4) {
    return ArrayList_init_$Create$_1(asCollection(_this__u8e3s4));
  }
  function associateWith(_this__u8e3s4, valueSelector) {
    var result = LinkedHashMap_init_$Create$_1(coerceAtLeast(mapCapacity(_this__u8e3s4.length), 16));
    var tmp$ret$0;
    // Inline function 'kotlin.collections.associateWithTo' call
    var indexedObject = _this__u8e3s4;
    var inductionVariable = 0;
    var last = indexedObject.length;
    while (inductionVariable < last) {
      var element = indexedObject[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      result.a(element, valueSelector(element));
    }
    tmp$ret$0 = result;
    return tmp$ret$0;
  }
  function filterNotNullTo(_this__u8e3s4, destination) {
    var indexedObject = _this__u8e3s4;
    var inductionVariable = 0;
    var last = indexedObject.length;
    while (inductionVariable < last) {
      var element = indexedObject[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      if (!(element == null)) {
        destination.b(element);
      }
    }
    return destination;
  }
  function get_lastIndex(_this__u8e3s4) {
    return _this__u8e3s4.length - 1 | 0;
  }
  function associateWithTo(_this__u8e3s4, destination, valueSelector) {
    var indexedObject = _this__u8e3s4;
    var inductionVariable = 0;
    var last = indexedObject.length;
    while (inductionVariable < last) {
      var element = indexedObject[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      destination.a(element, valueSelector(element));
    }
    return destination;
  }
  function contains(_this__u8e3s4, element) {
    return indexOf(_this__u8e3s4, element) >= 0;
  }
  function single(_this__u8e3s4) {
    var tmp0_subject = _this__u8e3s4.length;
    var tmp;
    switch (tmp0_subject) {
      case 0:
        throw NoSuchElementException_init_$Create$_0('Array is empty.');
      case 1:
        tmp = _this__u8e3s4[0];
        break;
      default:
        throw IllegalArgumentException_init_$Create$('Array has more than one element.');
    }
    return tmp;
  }
  function any(_this__u8e3s4, predicate) {
    var indexedObject = _this__u8e3s4;
    var inductionVariable = 0;
    var last = indexedObject.length;
    while (inductionVariable < last) {
      var element = indexedObject[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      if (predicate(new Char_0(element)))
        return true;
    }
    return false;
  }
  function joinToString(_this__u8e3s4, separator, prefix, postfix, limit, truncated, transform) {
    return joinTo(_this__u8e3s4, StringBuilder_init_$Create$_0(), separator, prefix, postfix, limit, truncated, transform).toString();
  }
  function joinToString$default(_this__u8e3s4, separator, prefix, postfix, limit, truncated, transform, $mask0, $handler) {
    if (!(($mask0 & 1) === 0))
      separator = ', ';
    if (!(($mask0 & 2) === 0))
      prefix = '';
    if (!(($mask0 & 4) === 0))
      postfix = '';
    if (!(($mask0 & 8) === 0))
      limit = -1;
    if (!(($mask0 & 16) === 0))
      truncated = '...';
    if (!(($mask0 & 32) === 0))
      transform = null;
    return joinToString(_this__u8e3s4, separator, prefix, postfix, limit, truncated, transform);
  }
  function joinTo(_this__u8e3s4, buffer, separator, prefix, postfix, limit, truncated, transform) {
    buffer.c(prefix);
    var count = 0;
    var indexedObject = _this__u8e3s4;
    var inductionVariable = 0;
    var last = indexedObject.length;
    $l$loop: while (inductionVariable < last) {
      var element = indexedObject[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      count = count + 1 | 0;
      if (count > 1) {
        buffer.c(separator);
      }
      if (limit < 0 ? true : count <= limit) {
        appendElement(buffer, element, transform);
      } else
        break $l$loop;
    }
    if (limit >= 0 ? count > limit : false) {
      buffer.c(truncated);
    }
    buffer.c(postfix);
    return buffer;
  }
  function firstOrNull(_this__u8e3s4, predicate) {
    var indexedObject = _this__u8e3s4;
    var inductionVariable = 0;
    var last = indexedObject.length;
    while (inductionVariable < last) {
      var element = indexedObject[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      if (predicate(element))
        return element;
    }
    return null;
  }
  function firstOrNull_0(_this__u8e3s4, predicate) {
    var tmp0_iterator = _this__u8e3s4.d();
    while (tmp0_iterator.e()) {
      var element = tmp0_iterator.f();
      if (predicate(element))
        return element;
    }
    return null;
  }
  function toList_0(_this__u8e3s4) {
    if (isInterface(_this__u8e3s4, Collection)) {
      var tmp0_subject = _this__u8e3s4.g();
      var tmp;
      switch (tmp0_subject) {
        case 0:
          tmp = emptyList();
          break;
        case 1:
          var tmp_0;
          if (isInterface(_this__u8e3s4, List)) {
            tmp_0 = _this__u8e3s4.h(0);
          } else {
            tmp_0 = _this__u8e3s4.d().f();
          }

          tmp = listOf_0(tmp_0);
          break;
        default:
          tmp = toMutableList_0(_this__u8e3s4);
          break;
      }
      return tmp;
    }
    return optimizeReadOnlyList(toMutableList_1(_this__u8e3s4));
  }
  function forEach_1(_this__u8e3s4, action) {
    var tmp0_iterator = _this__u8e3s4.d();
    while (tmp0_iterator.e()) {
      var element = tmp0_iterator.f();
      action(element);
    }
  }
  function all(_this__u8e3s4, predicate) {
    var tmp;
    if (isInterface(_this__u8e3s4, Collection)) {
      tmp = _this__u8e3s4.i();
    } else {
      tmp = false;
    }
    if (tmp)
      return true;
    var tmp0_iterator = _this__u8e3s4.d();
    while (tmp0_iterator.e()) {
      var element = tmp0_iterator.f();
      if (!predicate(element))
        return false;
    }
    return true;
  }
  function toMutableList_0(_this__u8e3s4) {
    return ArrayList_init_$Create$_1(_this__u8e3s4);
  }
  function first(_this__u8e3s4) {
    if (_this__u8e3s4.i())
      throw NoSuchElementException_init_$Create$_0('List is empty.');
    return _this__u8e3s4.h(0);
  }
  function last(_this__u8e3s4) {
    if (_this__u8e3s4.i())
      throw NoSuchElementException_init_$Create$_0('List is empty.');
    return _this__u8e3s4.h(get_lastIndex_0(_this__u8e3s4));
  }
  function contains_0(_this__u8e3s4, element) {
    if (isInterface(_this__u8e3s4, Collection))
      return _this__u8e3s4.j(element);
    return indexOf_0(_this__u8e3s4, element) >= 0;
  }
  function singleOrNull(_this__u8e3s4) {
    return _this__u8e3s4.g() === 1 ? _this__u8e3s4.h(0) : null;
  }
  function toIntArray(_this__u8e3s4) {
    var result = new Int32Array(_this__u8e3s4.g());
    var index = 0;
    var tmp0_iterator = _this__u8e3s4.d();
    while (tmp0_iterator.e()) {
      var element = tmp0_iterator.f();
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      result[tmp1] = element;
    }
    return result;
  }
  function fold_1(_this__u8e3s4, initial, operation) {
    var accumulator = initial;
    var tmp0_iterator = _this__u8e3s4.d();
    while (tmp0_iterator.e()) {
      var element = tmp0_iterator.f();
      accumulator = operation(accumulator, element);
    }
    return accumulator;
  }
  function map(_this__u8e3s4, transform) {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$_0(collectionSizeOrDefault(_this__u8e3s4, 10));
    var tmp0_iterator = _this__u8e3s4.d();
    while (tmp0_iterator.e()) {
      var item = tmp0_iterator.f();
      tmp0_mapTo.b(transform(item));
    }
    tmp$ret$0 = tmp0_mapTo;
    return tmp$ret$0;
  }
  function sortBy(_this__u8e3s4, selector) {
    if (_this__u8e3s4.g() > 1) {
      var tmp$ret$0;
      // Inline function 'kotlin.comparisons.compareBy' call
      var tmp = sortBy$lambda(selector);
      tmp$ret$0 = new sam$kotlin_Comparator$0(tmp);
      sortWith(_this__u8e3s4, tmp$ret$0);
    }
  }
  function firstOrNull_1(_this__u8e3s4) {
    var tmp0_subject = _this__u8e3s4;
    if (isInterface(tmp0_subject, List)) {
      if (_this__u8e3s4.i())
        return null;
      else
        return _this__u8e3s4.h(0);
    } else {
      var iterator = _this__u8e3s4.d();
      if (!iterator.e())
        return null;
      return iterator.f();
    }
  }
  function any_0(_this__u8e3s4, predicate) {
    var tmp;
    if (isInterface(_this__u8e3s4, Collection)) {
      tmp = _this__u8e3s4.i();
    } else {
      tmp = false;
    }
    if (tmp)
      return false;
    var tmp0_iterator = _this__u8e3s4.d();
    while (tmp0_iterator.e()) {
      var element = tmp0_iterator.f();
      if (predicate(element))
        return true;
    }
    return false;
  }
  function joinToString_0(_this__u8e3s4, separator, prefix, postfix, limit, truncated, transform) {
    return joinTo_0(_this__u8e3s4, StringBuilder_init_$Create$_0(), separator, prefix, postfix, limit, truncated, transform).toString();
  }
  function joinToString$default_0(_this__u8e3s4, separator, prefix, postfix, limit, truncated, transform, $mask0, $handler) {
    if (!(($mask0 & 1) === 0))
      separator = ', ';
    if (!(($mask0 & 2) === 0))
      prefix = '';
    if (!(($mask0 & 4) === 0))
      postfix = '';
    if (!(($mask0 & 8) === 0))
      limit = -1;
    if (!(($mask0 & 16) === 0))
      truncated = '...';
    if (!(($mask0 & 32) === 0))
      transform = null;
    return joinToString_0(_this__u8e3s4, separator, prefix, postfix, limit, truncated, transform);
  }
  function associate(_this__u8e3s4, transform) {
    var capacity = coerceAtLeast(mapCapacity(collectionSizeOrDefault(_this__u8e3s4, 10)), 16);
    var tmp$ret$0;
    // Inline function 'kotlin.collections.associateTo' call
    var tmp1_associateTo = LinkedHashMap_init_$Create$_1(capacity);
    var tmp0_iterator = _this__u8e3s4.d();
    while (tmp0_iterator.e()) {
      var element = tmp0_iterator.f();
      // Inline function 'kotlin.collections.plusAssign' call
      var tmp0_plusAssign = transform(element);
      tmp1_associateTo.a(tmp0_plusAssign.k_1, tmp0_plusAssign.l_1);
    }
    tmp$ret$0 = tmp1_associateTo;
    return tmp$ret$0;
  }
  function filter(_this__u8e3s4, predicate) {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.filterTo' call
    var tmp0_filterTo = ArrayList_init_$Create$();
    var tmp0_iterator = _this__u8e3s4.d();
    while (tmp0_iterator.e()) {
      var element = tmp0_iterator.f();
      if (predicate(element)) {
        tmp0_filterTo.b(element);
      }
    }
    tmp$ret$0 = tmp0_filterTo;
    return tmp$ret$0;
  }
  function associateBy(_this__u8e3s4, keySelector) {
    var capacity = coerceAtLeast(mapCapacity(collectionSizeOrDefault(_this__u8e3s4, 10)), 16);
    var tmp$ret$0;
    // Inline function 'kotlin.collections.associateByTo' call
    var tmp0_associateByTo = LinkedHashMap_init_$Create$_1(capacity);
    var tmp0_iterator = _this__u8e3s4.d();
    while (tmp0_iterator.e()) {
      var element = tmp0_iterator.f();
      tmp0_associateByTo.a(keySelector(element), element);
    }
    tmp$ret$0 = tmp0_associateByTo;
    return tmp$ret$0;
  }
  function toMutableList_1(_this__u8e3s4) {
    if (isInterface(_this__u8e3s4, Collection))
      return toMutableList_0(_this__u8e3s4);
    return toCollection(_this__u8e3s4, ArrayList_init_$Create$());
  }
  function indexOf_0(_this__u8e3s4, element) {
    if (isInterface(_this__u8e3s4, List))
      return _this__u8e3s4.m(element);
    var index = 0;
    var tmp0_iterator = _this__u8e3s4.d();
    while (tmp0_iterator.e()) {
      var item = tmp0_iterator.f();
      checkIndexOverflow(index);
      if (equals_0(element, item))
        return index;
      var tmp1 = index;
      index = tmp1 + 1 | 0;
    }
    return -1;
  }
  function mapTo(_this__u8e3s4, destination, transform) {
    var tmp0_iterator = _this__u8e3s4.d();
    while (tmp0_iterator.e()) {
      var item = tmp0_iterator.f();
      destination.b(transform(item));
    }
    return destination;
  }
  function joinTo_0(_this__u8e3s4, buffer, separator, prefix, postfix, limit, truncated, transform) {
    buffer.c(prefix);
    var count = 0;
    var tmp0_iterator = _this__u8e3s4.d();
    $l$loop: while (tmp0_iterator.e()) {
      var element = tmp0_iterator.f();
      count = count + 1 | 0;
      if (count > 1) {
        buffer.c(separator);
      }
      if (limit < 0 ? true : count <= limit) {
        appendElement(buffer, element, transform);
      } else
        break $l$loop;
    }
    if (limit >= 0 ? count > limit : false) {
      buffer.c(truncated);
    }
    buffer.c(postfix);
    return buffer;
  }
  function joinTo$default(_this__u8e3s4, buffer, separator, prefix, postfix, limit, truncated, transform, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      separator = ', ';
    if (!(($mask0 & 4) === 0))
      prefix = '';
    if (!(($mask0 & 8) === 0))
      postfix = '';
    if (!(($mask0 & 16) === 0))
      limit = -1;
    if (!(($mask0 & 32) === 0))
      truncated = '...';
    if (!(($mask0 & 64) === 0))
      transform = null;
    return joinTo_0(_this__u8e3s4, buffer, separator, prefix, postfix, limit, truncated, transform);
  }
  function associateTo(_this__u8e3s4, destination, transform) {
    var tmp0_iterator = _this__u8e3s4.d();
    while (tmp0_iterator.e()) {
      var element = tmp0_iterator.f();
      // Inline function 'kotlin.collections.plusAssign' call
      var tmp0_plusAssign = transform(element);
      destination.a(tmp0_plusAssign.k_1, tmp0_plusAssign.l_1);
    }
    return destination;
  }
  function filterTo(_this__u8e3s4, destination, predicate) {
    var tmp0_iterator = _this__u8e3s4.d();
    while (tmp0_iterator.e()) {
      var element = tmp0_iterator.f();
      if (predicate(element)) {
        destination.b(element);
      }
    }
    return destination;
  }
  function associateByTo(_this__u8e3s4, destination, keySelector) {
    var tmp0_iterator = _this__u8e3s4.d();
    while (tmp0_iterator.e()) {
      var element = tmp0_iterator.f();
      destination.a(keySelector(element), element);
    }
    return destination;
  }
  function toCollection(_this__u8e3s4, destination) {
    var tmp0_iterator = _this__u8e3s4.d();
    while (tmp0_iterator.e()) {
      var item = tmp0_iterator.f();
      destination.b(item);
    }
    return destination;
  }
  function indexOfFirst(_this__u8e3s4, predicate) {
    var index = 0;
    var tmp0_iterator = _this__u8e3s4.d();
    while (tmp0_iterator.e()) {
      var item = tmp0_iterator.f();
      if (predicate(item))
        return index;
      var tmp1 = index;
      index = tmp1 + 1 | 0;
    }
    return -1;
  }
  function indexOfLast(_this__u8e3s4, predicate) {
    var iterator = _this__u8e3s4.n(_this__u8e3s4.g());
    while (iterator.o()) {
      if (predicate(iterator.q())) {
        return iterator.p();
      }
    }
    return -1;
  }
  function minOrNull(_this__u8e3s4) {
    var iterator = _this__u8e3s4.d();
    if (!iterator.e())
      return null;
    var min = iterator.f();
    while (iterator.e()) {
      var e = iterator.f();
      if (compareTo_0(min, e) > 0)
        min = e;
    }
    return min;
  }
  function mapIndexedNotNull(_this__u8e3s4, transform) {
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapIndexedNotNullTo' call
    var tmp1_mapIndexedNotNullTo = ArrayList_init_$Create$();
    // Inline function 'kotlin.collections.forEachIndexed' call
    var index = 0;
    var tmp0_iterator = _this__u8e3s4.d();
    while (tmp0_iterator.e()) {
      var item = tmp0_iterator.f();
      // Inline function 'kotlin.collections.mapIndexedNotNullTo.<anonymous>' call
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      var tmp0__anonymous__q1qw7t = checkIndexOverflow(tmp1);
      var tmp0_safe_receiver = transform(tmp0__anonymous__q1qw7t, item);
      if (tmp0_safe_receiver == null)
        null;
      else {
        var tmp$ret$0;
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        tmp1_mapIndexedNotNullTo.b(tmp0_safe_receiver);
        tmp$ret$0 = Unit_getInstance();
      }
    }
    tmp$ret$1 = tmp1_mapIndexedNotNullTo;
    return tmp$ret$1;
  }
  function mapIndexedNotNullTo(_this__u8e3s4, destination, transform) {
    // Inline function 'kotlin.collections.forEachIndexed' call
    var index = 0;
    var tmp0_iterator = _this__u8e3s4.d();
    while (tmp0_iterator.e()) {
      var item = tmp0_iterator.f();
      // Inline function 'kotlin.collections.mapIndexedNotNullTo.<anonymous>' call
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      var tmp0__anonymous__q1qw7t = checkIndexOverflow(tmp1);
      var tmp0_safe_receiver = transform(tmp0__anonymous__q1qw7t, item);
      if (tmp0_safe_receiver == null)
        null;
      else {
        var tmp$ret$0;
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        destination.b(tmp0_safe_receiver);
        tmp$ret$0 = Unit_getInstance();
      }
    }
    return destination;
  }
  function forEachIndexed(_this__u8e3s4, action) {
    var index = 0;
    var tmp0_iterator = _this__u8e3s4.d();
    while (tmp0_iterator.e()) {
      var item = tmp0_iterator.f();
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      action(checkIndexOverflow(tmp1), item);
    }
  }
  function single_0(_this__u8e3s4) {
    var tmp0_subject = _this__u8e3s4;
    if (isInterface(tmp0_subject, List))
      return single_1(_this__u8e3s4);
    else {
      var iterator = _this__u8e3s4.d();
      if (!iterator.e())
        throw NoSuchElementException_init_$Create$_0('Collection is empty.');
      var single = iterator.f();
      if (iterator.e())
        throw IllegalArgumentException_init_$Create$('Collection has more than one element.');
      return single;
    }
  }
  function single_1(_this__u8e3s4) {
    var tmp0_subject = _this__u8e3s4.g();
    var tmp;
    switch (tmp0_subject) {
      case 0:
        throw NoSuchElementException_init_$Create$_0('List is empty.');
      case 1:
        tmp = _this__u8e3s4.h(0);
        break;
      default:
        throw IllegalArgumentException_init_$Create$('List has more than one element.');
    }
    return tmp;
  }
  function elementAtOrNull(_this__u8e3s4, index) {
    return getOrNull(_this__u8e3s4, index);
  }
  function getOrNull(_this__u8e3s4, index) {
    return (index >= 0 ? index <= get_lastIndex_0(_this__u8e3s4) : false) ? _this__u8e3s4.h(index) : null;
  }
  function sam$kotlin_Comparator$0(function_0) {
    this.r_1 = function_0;
  }
  sam$kotlin_Comparator$0.prototype.s = function (a, b) {
    return this.r_1(a, b);
  };
  sam$kotlin_Comparator$0.prototype.compare = function (a, b) {
    return this.s(a, b);
  };
  sam$kotlin_Comparator$0.$metadata$ = classMeta('sam$kotlin_Comparator$0', [Comparator]);
  function sortBy$lambda($selector) {
    return function (a, b) {
      var tmp$ret$0;
      // Inline function 'kotlin.comparisons.compareValuesBy' call
      tmp$ret$0 = compareValues($selector(a), $selector(b));
      return tmp$ret$0;
    };
  }
  function forEach_2(_this__u8e3s4, action) {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.iterator' call
    tmp$ret$0 = _this__u8e3s4.t().d();
    var tmp0_iterator = tmp$ret$0;
    while (tmp0_iterator.e()) {
      var element = tmp0_iterator.f();
      action(element);
    }
  }
  function until(_this__u8e3s4, to) {
    if (to <= IntCompanionObject_getInstance().v_1)
      return Companion_getInstance_2().u_1;
    return numberRangeToNumber(_this__u8e3s4, to - 1 | 0);
  }
  function coerceIn(_this__u8e3s4, minimumValue, maximumValue) {
    if (minimumValue.b1(maximumValue) > 0)
      throw IllegalArgumentException_init_$Create$('Cannot coerce value to an empty range: maximum ' + toString_2(maximumValue) + ' is less than minimum ' + toString_2(minimumValue) + '.');
    if (_this__u8e3s4.b1(minimumValue) < 0)
      return minimumValue;
    if (_this__u8e3s4.b1(maximumValue) > 0)
      return maximumValue;
    return _this__u8e3s4;
  }
  function downTo(_this__u8e3s4, to) {
    return Companion_getInstance_3().c1(_this__u8e3s4, to, -1);
  }
  function step(_this__u8e3s4, step) {
    checkStepIsPositive(step > 0, step);
    return Companion_getInstance_3().c1(_this__u8e3s4.d1_1, _this__u8e3s4.e1_1, _this__u8e3s4.f1_1 > 0 ? step : -step | 0);
  }
  function coerceAtMost(_this__u8e3s4, maximumValue) {
    return _this__u8e3s4 > maximumValue ? maximumValue : _this__u8e3s4;
  }
  function coerceAtLeast(_this__u8e3s4, minimumValue) {
    return _this__u8e3s4 < minimumValue ? minimumValue : _this__u8e3s4;
  }
  function coerceIn_0(_this__u8e3s4, minimumValue, maximumValue) {
    if (minimumValue > maximumValue)
      throw IllegalArgumentException_init_$Create$('Cannot coerce value to an empty range: maximum ' + maximumValue + ' is less than minimum ' + minimumValue + '.');
    if (_this__u8e3s4 < minimumValue)
      return minimumValue;
    if (_this__u8e3s4 > maximumValue)
      return maximumValue;
    return _this__u8e3s4;
  }
  function coerceIn_1(_this__u8e3s4, minimumValue, maximumValue) {
    if (minimumValue > maximumValue)
      throw IllegalArgumentException_init_$Create$('Cannot coerce value to an empty range: maximum ' + maximumValue + ' is less than minimum ' + minimumValue + '.');
    if (_this__u8e3s4 < minimumValue)
      return minimumValue;
    if (_this__u8e3s4 > maximumValue)
      return maximumValue;
    return _this__u8e3s4;
  }
  function any_1(_this__u8e3s4, predicate) {
    var tmp0_iterator = _this__u8e3s4.d();
    while (tmp0_iterator.e()) {
      var element = tmp0_iterator.f();
      if (predicate(element))
        return true;
    }
    return false;
  }
  function asIterable(_this__u8e3s4) {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.Iterable' call
    tmp$ret$0 = new _no_name_provided__qut3iv(_this__u8e3s4);
    return tmp$ret$0;
  }
  function toList_1(_this__u8e3s4) {
    return optimizeReadOnlyList(toMutableList_2(_this__u8e3s4));
  }
  function map_0(_this__u8e3s4, transform) {
    return new TransformingSequence(_this__u8e3s4, transform);
  }
  function toMutableList_2(_this__u8e3s4) {
    return toCollection_0(_this__u8e3s4, ArrayList_init_$Create$());
  }
  function toCollection_0(_this__u8e3s4, destination) {
    var tmp0_iterator = _this__u8e3s4.d();
    while (tmp0_iterator.e()) {
      var item = tmp0_iterator.f();
      destination.b(item);
    }
    return destination;
  }
  function _no_name_provided__qut3iv($this_asIterable) {
    this.g1_1 = $this_asIterable;
  }
  _no_name_provided__qut3iv.prototype.d = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.sequences.asIterable.<anonymous>' call
    tmp$ret$0 = this.g1_1.d();
    return tmp$ret$0;
  };
  _no_name_provided__qut3iv.$metadata$ = classMeta(undefined, [Iterable_0]);
  function plus_0(_this__u8e3s4, elements) {
    var tmp0_safe_receiver = collectionSizeOrNull(elements);
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'kotlin.collections.plus.<anonymous>' call
      tmp$ret$0 = _this__u8e3s4.g() + tmp0_safe_receiver | 0;
      tmp$ret$1 = tmp$ret$0;
      tmp = tmp$ret$1;
    }
    var tmp1_elvis_lhs = tmp;
    var result = LinkedHashSet_init_$Create$_0(mapCapacity(tmp1_elvis_lhs == null ? imul(_this__u8e3s4.g(), 2) : tmp1_elvis_lhs));
    result.h1(_this__u8e3s4);
    addAll(result, elements);
    return result;
  }
  function dropLast(_this__u8e3s4, n) {
    // Inline function 'kotlin.require' call
    var tmp0_require = n >= 0;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'kotlin.text.dropLast.<anonymous>' call
      tmp$ret$0 = 'Requested character count ' + n + ' is less than zero.';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString_2(message));
    }
    return take(_this__u8e3s4, coerceAtLeast(_this__u8e3s4.length - n | 0, 0));
  }
  function getOrElse(_this__u8e3s4, index, defaultValue) {
    return (index >= 0 ? index <= get_lastIndex_1(_this__u8e3s4) : false) ? charSequenceGet(_this__u8e3s4, index) : defaultValue(index).i1_1;
  }
  function drop(_this__u8e3s4, n) {
    // Inline function 'kotlin.require' call
    var tmp0_require = n >= 0;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'kotlin.text.drop.<anonymous>' call
      tmp$ret$0 = 'Requested character count ' + n + ' is less than zero.';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString_2(message));
    }
    var tmp$ret$2;
    // Inline function 'kotlin.text.substring' call
    var tmp1_substring = coerceAtMost(n, _this__u8e3s4.length);
    var tmp$ret$1;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$1 = _this__u8e3s4;
    tmp$ret$2 = tmp$ret$1.substring(tmp1_substring);
    return tmp$ret$2;
  }
  function indexOfFirst_0(_this__u8e3s4, predicate) {
    var inductionVariable = 0;
    var last = charSequenceLength(_this__u8e3s4) - 1 | 0;
    if (inductionVariable <= last)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (predicate(new Char_0(charSequenceGet(_this__u8e3s4, index)))) {
          return index;
        }
      }
       while (inductionVariable <= last);
    return -1;
  }
  function take(_this__u8e3s4, n) {
    // Inline function 'kotlin.require' call
    var tmp0_require = n >= 0;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'kotlin.text.take.<anonymous>' call
      tmp$ret$0 = 'Requested character count ' + n + ' is less than zero.';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString_2(message));
    }
    var tmp$ret$2;
    // Inline function 'kotlin.text.substring' call
    var tmp1_substring = coerceAtMost(n, _this__u8e3s4.length);
    var tmp$ret$1;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$1 = _this__u8e3s4;
    tmp$ret$2 = tmp$ret$1.substring(0, tmp1_substring);
    return tmp$ret$2;
  }
  function KotlinNothingValueException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    KotlinNothingValueException.call($this);
    return $this;
  }
  function KotlinNothingValueException_init_$Create$() {
    var tmp = KotlinNothingValueException_init_$Init$(Object.create(KotlinNothingValueException.prototype));
    captureStack(tmp, KotlinNothingValueException_init_$Create$);
    return tmp;
  }
  function KotlinNothingValueException() {
    captureStack(this, KotlinNothingValueException);
  }
  KotlinNothingValueException.$metadata$ = classMeta('KotlinNothingValueException', undefined, undefined, undefined, undefined, RuntimeException.prototype);
  function get_code(_this__u8e3s4) {
    return Char__toInt_impl_vasixd(_this__u8e3s4);
  }
  function Char(code) {
    var tmp;
    var tmp$ret$0;
    // Inline function 'kotlin.code' call
    Companion_getInstance_5();
    var tmp0__get_code__88qj9g = _Char___init__impl__6a9atx(0);
    tmp$ret$0 = Char__toInt_impl_vasixd(tmp0__get_code__88qj9g);
    if (code < tmp$ret$0) {
      tmp = true;
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.code' call
      Companion_getInstance_5();
      var tmp1__get_code__adl84j = _Char___init__impl__6a9atx(65535);
      tmp$ret$1 = Char__toInt_impl_vasixd(tmp1__get_code__adl84j);
      tmp = code > tmp$ret$1;
    }
    if (tmp) {
      throw IllegalArgumentException_init_$Create$('Invalid Char code: ' + code);
    }
    return numberToChar(code);
  }
  function AbstractCollection$toString$lambda(this$0) {
    return function (it) {
      return it === this$0 ? '(this Collection)' : toString_1(it);
    };
  }
  function AbstractCollection() {
  }
  AbstractCollection.prototype.j = function (element) {
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.any' call
      var tmp;
      if (isInterface(this, Collection)) {
        tmp = this.i();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = false;
        break $l$block_0;
      }
      var tmp0_iterator = this.d();
      while (tmp0_iterator.e()) {
        var element_0 = tmp0_iterator.f();
        var tmp$ret$1;
        // Inline function 'kotlin.collections.AbstractCollection.contains.<anonymous>' call
        tmp$ret$1 = equals_0(element_0, element);
        if (tmp$ret$1) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
      }
      tmp$ret$0 = false;
    }
    return tmp$ret$0;
  };
  AbstractCollection.prototype.l1 = function (elements) {
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.all' call
      var tmp;
      if (isInterface(elements, Collection)) {
        tmp = elements.i();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = true;
        break $l$block_0;
      }
      var tmp0_iterator = elements.d();
      while (tmp0_iterator.e()) {
        var element = tmp0_iterator.f();
        var tmp$ret$1;
        // Inline function 'kotlin.collections.AbstractCollection.containsAll.<anonymous>' call
        tmp$ret$1 = this.j(element);
        if (!tmp$ret$1) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
      }
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  };
  AbstractCollection.prototype.i = function () {
    return this.g() === 0;
  };
  AbstractCollection.prototype.toString = function () {
    return joinToString$default_0(this, ', ', '[', ']', 0, null, AbstractCollection$toString$lambda(this), 24, null);
  };
  AbstractCollection.prototype.toArray = function () {
    return copyToArrayImpl(this);
  };
  AbstractCollection.$metadata$ = classMeta('AbstractCollection', [Collection]);
  function IteratorImpl($outer) {
    this.n1_1 = $outer;
    this.m1_1 = 0;
  }
  IteratorImpl.prototype.e = function () {
    return this.m1_1 < this.n1_1.g();
  };
  IteratorImpl.prototype.f = function () {
    if (!this.e())
      throw NoSuchElementException_init_$Create$();
    var tmp0_this = this;
    var tmp1 = tmp0_this.m1_1;
    tmp0_this.m1_1 = tmp1 + 1 | 0;
    return this.n1_1.h(tmp1);
  };
  IteratorImpl.$metadata$ = classMeta('IteratorImpl', [Iterator]);
  function ListIteratorImpl($outer, index) {
    this.q1_1 = $outer;
    IteratorImpl.call(this, $outer);
    Companion_getInstance().r1(index, this.q1_1.g());
    this.m1_1 = index;
  }
  ListIteratorImpl.prototype.o = function () {
    return this.m1_1 > 0;
  };
  ListIteratorImpl.prototype.p = function () {
    return this.m1_1;
  };
  ListIteratorImpl.prototype.q = function () {
    if (!this.o())
      throw NoSuchElementException_init_$Create$();
    var tmp0_this = this;
    tmp0_this.m1_1 = tmp0_this.m1_1 - 1 | 0;
    return this.q1_1.h(tmp0_this.m1_1);
  };
  ListIteratorImpl.$metadata$ = classMeta('ListIteratorImpl', [ListIterator], undefined, undefined, undefined, IteratorImpl.prototype);
  function Companion() {
    Companion_instance = this;
  }
  Companion.prototype.s1 = function (index, size) {
    if (index < 0 ? true : index >= size) {
      throw IndexOutOfBoundsException_init_$Create$('index: ' + index + ', size: ' + size);
    }
  };
  Companion.prototype.r1 = function (index, size) {
    if (index < 0 ? true : index > size) {
      throw IndexOutOfBoundsException_init_$Create$('index: ' + index + ', size: ' + size);
    }
  };
  Companion.prototype.t1 = function (fromIndex, toIndex, size) {
    if (fromIndex < 0 ? true : toIndex > size) {
      throw IndexOutOfBoundsException_init_$Create$('fromIndex: ' + fromIndex + ', toIndex: ' + toIndex + ', size: ' + size);
    }
    if (fromIndex > toIndex) {
      throw IllegalArgumentException_init_$Create$('fromIndex: ' + fromIndex + ' > toIndex: ' + toIndex);
    }
  };
  Companion.prototype.u1 = function (c) {
    var hashCode = 1;
    var tmp0_iterator = c.d();
    while (tmp0_iterator.e()) {
      var e = tmp0_iterator.f();
      var tmp = imul(31, hashCode);
      var tmp1_safe_receiver = e;
      var tmp2_elvis_lhs = tmp1_safe_receiver == null ? null : hashCode_0(tmp1_safe_receiver);
      hashCode = tmp + (tmp2_elvis_lhs == null ? 0 : tmp2_elvis_lhs) | 0;
    }
    return hashCode;
  };
  Companion.prototype.v1 = function (c, other) {
    if (!(c.g() === other.g()))
      return false;
    var otherIterator = other.d();
    var tmp0_iterator = c.d();
    while (tmp0_iterator.e()) {
      var elem = tmp0_iterator.f();
      var elemOther = otherIterator.f();
      if (!equals_0(elem, elemOther)) {
        return false;
      }
    }
    return true;
  };
  Companion.$metadata$ = objectMeta('Companion');
  var Companion_instance;
  function Companion_getInstance() {
    if (Companion_instance == null)
      new Companion();
    return Companion_instance;
  }
  function AbstractList() {
    Companion_getInstance();
    AbstractCollection.call(this);
  }
  AbstractList.prototype.d = function () {
    return new IteratorImpl(this);
  };
  AbstractList.prototype.m = function (element) {
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.collections.indexOfFirst' call
      var index = 0;
      var tmp0_iterator = this.d();
      while (tmp0_iterator.e()) {
        var item = tmp0_iterator.f();
        var tmp$ret$0;
        // Inline function 'kotlin.collections.AbstractList.indexOf.<anonymous>' call
        tmp$ret$0 = equals_0(item, element);
        if (tmp$ret$0) {
          tmp$ret$1 = index;
          break $l$block;
        }
        var tmp1 = index;
        index = tmp1 + 1 | 0;
      }
      tmp$ret$1 = -1;
    }
    return tmp$ret$1;
  };
  AbstractList.prototype.w1 = function (element) {
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.collections.indexOfLast' call
      var iterator = this.n(this.g());
      while (iterator.o()) {
        var tmp$ret$0;
        // Inline function 'kotlin.collections.AbstractList.lastIndexOf.<anonymous>' call
        var tmp0__anonymous__q1qw7t = iterator.q();
        tmp$ret$0 = equals_0(tmp0__anonymous__q1qw7t, element);
        if (tmp$ret$0) {
          tmp$ret$1 = iterator.p();
          break $l$block;
        }
      }
      tmp$ret$1 = -1;
    }
    return tmp$ret$1;
  };
  AbstractList.prototype.n = function (index) {
    return new ListIteratorImpl(this, index);
  };
  AbstractList.prototype.equals = function (other) {
    if (other === this)
      return true;
    if (!(!(other == null) ? isInterface(other, List) : false))
      return false;
    return Companion_getInstance().v1(this, other);
  };
  AbstractList.prototype.hashCode = function () {
    return Companion_getInstance().u1(this);
  };
  AbstractList.$metadata$ = classMeta('AbstractList', [List], undefined, undefined, undefined, AbstractCollection.prototype);
  function AbstractMap$keys$1$iterator$1($entryIterator) {
    this.x1_1 = $entryIterator;
  }
  AbstractMap$keys$1$iterator$1.prototype.e = function () {
    return this.x1_1.e();
  };
  AbstractMap$keys$1$iterator$1.prototype.f = function () {
    return this.x1_1.f().y1();
  };
  AbstractMap$keys$1$iterator$1.$metadata$ = classMeta(undefined, [Iterator]);
  function toString($this, o) {
    return o === $this ? '(this Map)' : toString_1(o);
  }
  function implFindEntry($this, key) {
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.collections.firstOrNull' call
      var tmp0_firstOrNull = $this.t();
      var tmp0_iterator = tmp0_firstOrNull.d();
      while (tmp0_iterator.e()) {
        var element = tmp0_iterator.f();
        var tmp$ret$0;
        // Inline function 'kotlin.collections.AbstractMap.implFindEntry.<anonymous>' call
        tmp$ret$0 = equals_0(element.y1(), key);
        if (tmp$ret$0) {
          tmp$ret$1 = element;
          break $l$block;
        }
      }
      tmp$ret$1 = null;
    }
    return tmp$ret$1;
  }
  function Companion_0() {
    Companion_instance_0 = this;
  }
  Companion_0.prototype.z1 = function (e) {
    var tmp$ret$1;
    // Inline function 'kotlin.with' call
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'kotlin.collections.Companion.entryHashCode.<anonymous>' call
    var tmp2_safe_receiver = e.y1();
    var tmp3_elvis_lhs = tmp2_safe_receiver == null ? null : hashCode_0(tmp2_safe_receiver);
    var tmp = tmp3_elvis_lhs == null ? 0 : tmp3_elvis_lhs;
    var tmp0_safe_receiver = e.a2();
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode_0(tmp0_safe_receiver);
    tmp$ret$0 = tmp ^ (tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs);
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  };
  Companion_0.prototype.b2 = function (e) {
    var tmp$ret$1;
    // Inline function 'kotlin.with' call
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'kotlin.collections.Companion.entryToString.<anonymous>' call
    tmp$ret$0 = toString_1(e.y1()) + '=' + toString_1(e.a2());
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  };
  Companion_0.prototype.c2 = function (e, other) {
    if (!(!(other == null) ? isInterface(other, Entry) : false))
      return false;
    return equals_0(e.y1(), other.y1()) ? equals_0(e.a2(), other.a2()) : false;
  };
  Companion_0.$metadata$ = objectMeta('Companion');
  var Companion_instance_0;
  function Companion_getInstance_0() {
    if (Companion_instance_0 == null)
      new Companion_0();
    return Companion_instance_0;
  }
  function AbstractMap$keys$1(this$0) {
    this.d2_1 = this$0;
    AbstractSet.call(this);
  }
  AbstractMap$keys$1.prototype.e2 = function (element) {
    return this.d2_1.h2(element);
  };
  AbstractMap$keys$1.prototype.j = function (element) {
    if (!(element == null ? true : isObject(element)))
      return false;
    return this.e2((element == null ? true : isObject(element)) ? element : THROW_CCE());
  };
  AbstractMap$keys$1.prototype.d = function () {
    var entryIterator = this.d2_1.t().d();
    return new AbstractMap$keys$1$iterator$1(entryIterator);
  };
  AbstractMap$keys$1.prototype.g = function () {
    return this.d2_1.g();
  };
  AbstractMap$keys$1.$metadata$ = classMeta(undefined, undefined, undefined, undefined, undefined, AbstractSet.prototype);
  function AbstractMap$toString$lambda(this$0) {
    return function (it) {
      return this$0.i2(it);
    };
  }
  function AbstractMap() {
    Companion_getInstance_0();
    this.f2_1 = null;
    this.g2_1 = null;
  }
  AbstractMap.prototype.h2 = function (key) {
    return !(implFindEntry(this, key) == null);
  };
  AbstractMap.prototype.j2 = function (value) {
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.any' call
      var tmp0_any = this.t();
      var tmp;
      if (isInterface(tmp0_any, Collection)) {
        tmp = tmp0_any.i();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = false;
        break $l$block_0;
      }
      var tmp0_iterator = tmp0_any.d();
      while (tmp0_iterator.e()) {
        var element = tmp0_iterator.f();
        var tmp$ret$1;
        // Inline function 'kotlin.collections.AbstractMap.containsValue.<anonymous>' call
        tmp$ret$1 = equals_0(element.a2(), value);
        if (tmp$ret$1) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
      }
      tmp$ret$0 = false;
    }
    return tmp$ret$0;
  };
  AbstractMap.prototype.k2 = function (entry) {
    if (!(!(entry == null) ? isInterface(entry, Entry) : false))
      return false;
    var key = entry.y1();
    var value = entry.a2();
    var tmp$ret$0;
    // Inline function 'kotlin.collections.get' call
    tmp$ret$0 = (isInterface(this, Map) ? this : THROW_CCE()).l2(key);
    var ourValue = tmp$ret$0;
    if (!equals_0(value, ourValue)) {
      return false;
    }
    var tmp;
    if (ourValue == null) {
      var tmp$ret$1;
      // Inline function 'kotlin.collections.containsKey' call
      tmp$ret$1 = (isInterface(this, Map) ? this : THROW_CCE()).h2(key);
      tmp = !tmp$ret$1;
    } else {
      tmp = false;
    }
    if (tmp) {
      return false;
    }
    return true;
  };
  AbstractMap.prototype.equals = function (other) {
    if (other === this)
      return true;
    if (!(!(other == null) ? isInterface(other, Map) : false))
      return false;
    if (!(this.g() === other.g()))
      return false;
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.all' call
      var tmp0_all = other.t();
      var tmp;
      if (isInterface(tmp0_all, Collection)) {
        tmp = tmp0_all.i();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = true;
        break $l$block_0;
      }
      var tmp0_iterator = tmp0_all.d();
      while (tmp0_iterator.e()) {
        var element = tmp0_iterator.f();
        var tmp$ret$1;
        // Inline function 'kotlin.collections.AbstractMap.equals.<anonymous>' call
        tmp$ret$1 = this.k2(element);
        if (!tmp$ret$1) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
      }
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  };
  AbstractMap.prototype.l2 = function (key) {
    var tmp0_safe_receiver = implFindEntry(this, key);
    return tmp0_safe_receiver == null ? null : tmp0_safe_receiver.a2();
  };
  AbstractMap.prototype.hashCode = function () {
    return hashCode_0(this.t());
  };
  AbstractMap.prototype.i = function () {
    return this.g() === 0;
  };
  AbstractMap.prototype.g = function () {
    return this.t().g();
  };
  AbstractMap.prototype.m2 = function () {
    if (this.f2_1 == null) {
      var tmp = this;
      tmp.f2_1 = new AbstractMap$keys$1(this);
    }
    return ensureNotNull(this.f2_1);
  };
  AbstractMap.prototype.toString = function () {
    var tmp = this.t();
    return joinToString$default_0(tmp, ', ', '{', '}', 0, null, AbstractMap$toString$lambda(this), 24, null);
  };
  AbstractMap.prototype.i2 = function (entry) {
    return toString(this, entry.y1()) + '=' + toString(this, entry.a2());
  };
  AbstractMap.$metadata$ = classMeta('AbstractMap', [Map]);
  function Companion_1() {
    Companion_instance_1 = this;
  }
  Companion_1.prototype.n2 = function (c) {
    var hashCode = 0;
    var tmp0_iterator = c.d();
    while (tmp0_iterator.e()) {
      var element = tmp0_iterator.f();
      var tmp = hashCode;
      var tmp1_safe_receiver = element;
      var tmp2_elvis_lhs = tmp1_safe_receiver == null ? null : hashCode_0(tmp1_safe_receiver);
      hashCode = tmp + (tmp2_elvis_lhs == null ? 0 : tmp2_elvis_lhs) | 0;
    }
    return hashCode;
  };
  Companion_1.prototype.o2 = function (c, other) {
    if (!(c.g() === other.g()))
      return false;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.containsAll' call
    tmp$ret$0 = c.l1(other);
    return tmp$ret$0;
  };
  Companion_1.$metadata$ = objectMeta('Companion');
  var Companion_instance_1;
  function Companion_getInstance_1() {
    if (Companion_instance_1 == null)
      new Companion_1();
    return Companion_instance_1;
  }
  function AbstractSet() {
    Companion_getInstance_1();
    AbstractCollection.call(this);
  }
  AbstractSet.prototype.equals = function (other) {
    if (other === this)
      return true;
    if (!(!(other == null) ? isInterface(other, Set) : false))
      return false;
    return Companion_getInstance_1().o2(this, other);
  };
  AbstractSet.prototype.hashCode = function () {
    return Companion_getInstance_1().n2(this);
  };
  AbstractSet.$metadata$ = classMeta('AbstractSet', [Set], undefined, undefined, undefined, AbstractCollection.prototype);
  function mutableListOf() {
    return ArrayList_init_$Create$();
  }
  function isNotEmpty(_this__u8e3s4) {
    return !_this__u8e3s4.i();
  }
  function emptyList() {
    return EmptyList_getInstance();
  }
  function arrayListOf() {
    return ArrayList_init_$Create$();
  }
  function get_indices(_this__u8e3s4) {
    return numberRangeToNumber(0, _this__u8e3s4.g() - 1 | 0);
  }
  function listOf(elements) {
    return elements.length > 0 ? asList(elements) : emptyList();
  }
  function optimizeReadOnlyList(_this__u8e3s4) {
    var tmp0_subject = _this__u8e3s4.g();
    switch (tmp0_subject) {
      case 0:
        return emptyList();
      case 1:
        return listOf_0(_this__u8e3s4.h(0));
      default:
        return _this__u8e3s4;
    }
  }
  function get_lastIndex_0(_this__u8e3s4) {
    return _this__u8e3s4.g() - 1 | 0;
  }
  function asCollection(_this__u8e3s4) {
    return new ArrayAsCollection(_this__u8e3s4, false);
  }
  function EmptyList() {
    EmptyList_instance = this;
    this.p2_1 = new Long(-1478467534, -1720727600);
  }
  EmptyList.prototype.equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, List) : false) {
      tmp = other.i();
    } else {
      tmp = false;
    }
    return tmp;
  };
  EmptyList.prototype.hashCode = function () {
    return 1;
  };
  EmptyList.prototype.toString = function () {
    return '[]';
  };
  EmptyList.prototype.g = function () {
    return 0;
  };
  EmptyList.prototype.i = function () {
    return true;
  };
  EmptyList.prototype.q2 = function (element) {
    return false;
  };
  EmptyList.prototype.j = function (element) {
    if (!false)
      return false;
    var tmp;
    if (false) {
      tmp = element;
    } else {
      tmp = THROW_CCE();
    }
    return this.q2(tmp);
  };
  EmptyList.prototype.r2 = function (elements) {
    return elements.i();
  };
  EmptyList.prototype.l1 = function (elements) {
    return this.r2(elements);
  };
  EmptyList.prototype.h = function (index) {
    throw IndexOutOfBoundsException_init_$Create$("Empty list doesn't contain element at index " + index + '.');
  };
  EmptyList.prototype.s2 = function (element) {
    return -1;
  };
  EmptyList.prototype.m = function (element) {
    if (!false)
      return -1;
    var tmp;
    if (false) {
      tmp = element;
    } else {
      tmp = THROW_CCE();
    }
    return this.s2(tmp);
  };
  EmptyList.prototype.d = function () {
    return EmptyIterator_getInstance();
  };
  EmptyList.prototype.n = function (index) {
    if (!(index === 0))
      throw IndexOutOfBoundsException_init_$Create$('Index: ' + index);
    return EmptyIterator_getInstance();
  };
  EmptyList.$metadata$ = objectMeta('EmptyList', [List, Serializable, RandomAccess]);
  var EmptyList_instance;
  function EmptyList_getInstance() {
    if (EmptyList_instance == null)
      new EmptyList();
    return EmptyList_instance;
  }
  function ArrayAsCollection(values, isVarargs) {
    this.t2_1 = values;
    this.u2_1 = isVarargs;
  }
  ArrayAsCollection.prototype.g = function () {
    return this.t2_1.length;
  };
  ArrayAsCollection.prototype.i = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.isEmpty' call
    var tmp0_isEmpty = this.t2_1;
    tmp$ret$0 = tmp0_isEmpty.length === 0;
    return tmp$ret$0;
  };
  ArrayAsCollection.prototype.v2 = function (element) {
    return contains(this.t2_1, element);
  };
  ArrayAsCollection.prototype.j = function (element) {
    if (!(element == null ? true : isObject(element)))
      return false;
    return this.v2((element == null ? true : isObject(element)) ? element : THROW_CCE());
  };
  ArrayAsCollection.prototype.w2 = function (elements) {
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.all' call
      var tmp;
      if (isInterface(elements, Collection)) {
        tmp = elements.i();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = true;
        break $l$block_0;
      }
      var tmp0_iterator = elements.d();
      while (tmp0_iterator.e()) {
        var element = tmp0_iterator.f();
        var tmp$ret$1;
        // Inline function 'kotlin.collections.ArrayAsCollection.containsAll.<anonymous>' call
        tmp$ret$1 = this.v2(element);
        if (!tmp$ret$1) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
      }
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  };
  ArrayAsCollection.prototype.l1 = function (elements) {
    return this.w2(elements);
  };
  ArrayAsCollection.prototype.d = function () {
    return arrayIterator(this.t2_1);
  };
  ArrayAsCollection.$metadata$ = classMeta('ArrayAsCollection', [Collection]);
  function EmptyIterator() {
    EmptyIterator_instance = this;
  }
  EmptyIterator.prototype.e = function () {
    return false;
  };
  EmptyIterator.prototype.o = function () {
    return false;
  };
  EmptyIterator.prototype.p = function () {
    return 0;
  };
  EmptyIterator.prototype.f = function () {
    throw NoSuchElementException_init_$Create$();
  };
  EmptyIterator.prototype.q = function () {
    throw NoSuchElementException_init_$Create$();
  };
  EmptyIterator.$metadata$ = objectMeta('EmptyIterator', [ListIterator]);
  var EmptyIterator_instance;
  function EmptyIterator_getInstance() {
    if (EmptyIterator_instance == null)
      new EmptyIterator();
    return EmptyIterator_instance;
  }
  function mutableListOf_0(elements) {
    return elements.length === 0 ? ArrayList_init_$Create$() : ArrayList_init_$Create$_1(new ArrayAsCollection(elements, true));
  }
  function arrayListOf_0(elements) {
    return elements.length === 0 ? ArrayList_init_$Create$() : ArrayList_init_$Create$_1(new ArrayAsCollection(elements, true));
  }
  function throwIndexOverflow() {
    throw ArithmeticException_init_$Create$('Index overflow has happened.');
  }
  function containsAll(_this__u8e3s4, elements) {
    return _this__u8e3s4.l1(elements);
  }
  function listOfNotNull(elements) {
    return filterNotNull(elements);
  }
  function flatten(_this__u8e3s4) {
    var result = ArrayList_init_$Create$();
    var tmp0_iterator = _this__u8e3s4.d();
    while (tmp0_iterator.e()) {
      var element = tmp0_iterator.f();
      addAll(result, element);
    }
    return result;
  }
  function collectionSizeOrDefault(_this__u8e3s4, default_0) {
    var tmp;
    if (isInterface(_this__u8e3s4, Collection)) {
      tmp = _this__u8e3s4.g();
    } else {
      tmp = default_0;
    }
    return tmp;
  }
  function collectionSizeOrNull(_this__u8e3s4) {
    var tmp;
    if (isInterface(_this__u8e3s4, Collection)) {
      tmp = _this__u8e3s4.g();
    } else {
      tmp = null;
    }
    return tmp;
  }
  function Iterable(iterator) {
    return new _no_name_provided__qut3iv_0(iterator);
  }
  function _no_name_provided__qut3iv_0($iterator) {
    this.x2_1 = $iterator;
  }
  _no_name_provided__qut3iv_0.prototype.d = function () {
    return this.x2_1();
  };
  _no_name_provided__qut3iv_0.$metadata$ = classMeta(undefined, [Iterable_0]);
  function iterator(_this__u8e3s4) {
    return _this__u8e3s4;
  }
  function getOrImplicitDefault(_this__u8e3s4, key) {
    if (isInterface(_this__u8e3s4, MapWithDefault))
      return _this__u8e3s4.y2(key);
    var tmp$ret$0;
    $l$block: {
      // Inline function 'kotlin.collections.getOrElseNullable' call
      var value = _this__u8e3s4.l2(key);
      if (value == null ? !_this__u8e3s4.h2(key) : false) {
        throw NoSuchElementException_init_$Create$_0('Key ' + key + ' is missing in the map.');
      } else {
        tmp$ret$0 = (value == null ? true : isObject(value)) ? value : THROW_CCE();
        break $l$block;
      }
    }
    return tmp$ret$0;
  }
  function MapWithDefault() {
  }
  MapWithDefault.$metadata$ = interfaceMeta('MapWithDefault', [Map]);
  function mutableMapOf() {
    return LinkedHashMap_init_$Create$();
  }
  function iterator_0(_this__u8e3s4) {
    return _this__u8e3s4.t().d();
  }
  function component1(_this__u8e3s4) {
    return _this__u8e3s4.y1();
  }
  function component2(_this__u8e3s4) {
    return _this__u8e3s4.a2();
  }
  function isNotEmpty_0(_this__u8e3s4) {
    return !_this__u8e3s4.i();
  }
  function set(_this__u8e3s4, key, value) {
    _this__u8e3s4.a(key, value);
  }
  function getOrPut(_this__u8e3s4, key, defaultValue) {
    var value = _this__u8e3s4.l2(key);
    var tmp;
    if (value == null) {
      var answer = defaultValue();
      _this__u8e3s4.a(key, answer);
      tmp = answer;
    } else {
      tmp = value;
    }
    return tmp;
  }
  function get_1(_this__u8e3s4, key) {
    return (isInterface(_this__u8e3s4, Map) ? _this__u8e3s4 : THROW_CCE()).l2(key);
  }
  function getOrElse_0(_this__u8e3s4, key, defaultValue) {
    var tmp0_elvis_lhs = _this__u8e3s4.l2(key);
    return tmp0_elvis_lhs == null ? defaultValue() : tmp0_elvis_lhs;
  }
  function hashMapOf() {
    return HashMap_init_$Create$();
  }
  function remove(_this__u8e3s4, key) {
    return (isInterface(_this__u8e3s4, MutableMap) ? _this__u8e3s4 : THROW_CCE()).z2(key);
  }
  function getValue(_this__u8e3s4, key) {
    return getOrImplicitDefault(_this__u8e3s4, key);
  }
  function mapOf() {
    return emptyMap();
  }
  function plusAssign(_this__u8e3s4, pair) {
    _this__u8e3s4.a(pair.k_1, pair.l_1);
  }
  function emptyMap() {
    var tmp = EmptyMap_getInstance();
    return isInterface(tmp, Map) ? tmp : THROW_CCE();
  }
  function containsKey(_this__u8e3s4, key) {
    return (isInterface(_this__u8e3s4, Map) ? _this__u8e3s4 : THROW_CCE()).h2(key);
  }
  function putAll(_this__u8e3s4, pairs) {
    var indexedObject = pairs;
    var inductionVariable = 0;
    var last = indexedObject.length;
    while (inductionVariable < last) {
      var tmp1_loop_parameter = indexedObject[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      var key = tmp1_loop_parameter.a3();
      var value = tmp1_loop_parameter.b3();
      _this__u8e3s4.a(key, value);
    }
  }
  function EmptyMap() {
    EmptyMap_instance = this;
    this.c3_1 = new Long(-888910638, 1920087921);
  }
  EmptyMap.prototype.equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, Map) : false) {
      tmp = other.i();
    } else {
      tmp = false;
    }
    return tmp;
  };
  EmptyMap.prototype.hashCode = function () {
    return 0;
  };
  EmptyMap.prototype.toString = function () {
    return '{}';
  };
  EmptyMap.prototype.g = function () {
    return 0;
  };
  EmptyMap.prototype.i = function () {
    return true;
  };
  EmptyMap.prototype.d3 = function (key) {
    return false;
  };
  EmptyMap.prototype.h2 = function (key) {
    if (!(key == null ? true : isObject(key)))
      return false;
    return this.d3((key == null ? true : isObject(key)) ? key : THROW_CCE());
  };
  EmptyMap.prototype.e3 = function (key) {
    return null;
  };
  EmptyMap.prototype.l2 = function (key) {
    if (!(key == null ? true : isObject(key)))
      return null;
    return this.e3((key == null ? true : isObject(key)) ? key : THROW_CCE());
  };
  EmptyMap.prototype.t = function () {
    return EmptySet_getInstance();
  };
  EmptyMap.prototype.m2 = function () {
    return EmptySet_getInstance();
  };
  EmptyMap.$metadata$ = objectMeta('EmptyMap', [Map, Serializable]);
  var EmptyMap_instance;
  function EmptyMap_getInstance() {
    if (EmptyMap_instance == null)
      new EmptyMap();
    return EmptyMap_instance;
  }
  function hashMapOf_0(pairs) {
    var tmp$ret$0;
    // Inline function 'kotlin.apply' call
    var tmp0_apply = HashMap_init_$Create$_1(mapCapacity(pairs.length));
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.collections.hashMapOf.<anonymous>' call
    putAll(tmp0_apply, pairs);
    tmp$ret$0 = tmp0_apply;
    return tmp$ret$0;
  }
  function getOrElseNullable(_this__u8e3s4, key, defaultValue) {
    var value = _this__u8e3s4.l2(key);
    if (value == null ? !_this__u8e3s4.h2(key) : false) {
      return defaultValue();
    } else {
      return (value == null ? true : isObject(value)) ? value : THROW_CCE();
    }
  }
  function plusAssign_0(_this__u8e3s4, element) {
    _this__u8e3s4.b(element);
  }
  function plusAssign_1(_this__u8e3s4, elements) {
    addAll(_this__u8e3s4, elements);
  }
  function removeFirst(_this__u8e3s4) {
    var tmp;
    if (_this__u8e3s4.i()) {
      throw NoSuchElementException_init_$Create$_0('List is empty.');
    } else {
      tmp = _this__u8e3s4.f3(0);
    }
    return tmp;
  }
  function removeAll(_this__u8e3s4, predicate) {
    return filterInPlace(_this__u8e3s4, predicate, true);
  }
  function addAll(_this__u8e3s4, elements) {
    var tmp0_subject = elements;
    if (isInterface(tmp0_subject, Collection))
      return _this__u8e3s4.h1(elements);
    else {
      var result = false;
      var tmp1_iterator = elements.d();
      while (tmp1_iterator.e()) {
        var item = tmp1_iterator.f();
        if (_this__u8e3s4.b(item))
          result = true;
      }
      return result;
    }
  }
  function filterInPlace(_this__u8e3s4, predicate, predicateResultToRemove) {
    var result = false;
    var tmp$ret$0;
    // Inline function 'kotlin.with' call
    var tmp0_with = _this__u8e3s4.d();
    // Inline function 'kotlin.contracts.contract' call
    while (tmp0_with.e())
      if (predicate(tmp0_with.f()) === predicateResultToRemove) {
        tmp0_with.g3();
        result = true;
      }
    tmp$ret$0 = Unit_getInstance();
    return result;
  }
  function addAll_0(_this__u8e3s4, elements) {
    return _this__u8e3s4.h1(asList(elements));
  }
  function IntIterator() {
  }
  IntIterator.prototype.f = function () {
    return this.h3();
  };
  IntIterator.$metadata$ = classMeta('IntIterator', [Iterator]);
  function Sequence() {
  }
  Sequence.$metadata$ = interfaceMeta('Sequence');
  function sequence(block) {
    var tmp$ret$0;
    // Inline function 'kotlin.sequences.Sequence' call
    tmp$ret$0 = new _no_name_provided__qut3iv_1(block);
    return tmp$ret$0;
  }
  function SequenceScope() {
  }
  SequenceScope.$metadata$ = classMeta('SequenceScope');
  function iterator_1(block) {
    var iterator = new SequenceBuilderIterator();
    iterator.m3_1 = createCoroutineUnintercepted(block, iterator, iterator);
    return iterator;
  }
  function nextNotReady($this) {
    if (!$this.e())
      throw NoSuchElementException_init_$Create$();
    else
      return $this.f();
  }
  function exceptionalState($this) {
    var tmp0_subject = $this.j3_1;
    switch (tmp0_subject) {
      case 4:
        return NoSuchElementException_init_$Create$();
      case 5:
        return IllegalStateException_init_$Create$_0('Iterator has failed.');
      default:
        return IllegalStateException_init_$Create$_0('Unexpected state of the iterator: ' + $this.j3_1);
    }
  }
  function SequenceBuilderIterator() {
    SequenceScope.call(this);
    this.j3_1 = 0;
    this.k3_1 = null;
    this.l3_1 = null;
    this.m3_1 = null;
  }
  SequenceBuilderIterator.prototype.n3 = function (_set____db54di) {
    this.m3_1 = _set____db54di;
  };
  SequenceBuilderIterator.prototype.e = function () {
    while (true) {
      var tmp0_subject = this.j3_1;
      switch (tmp0_subject) {
        case 0:
          break;
        case 1:
          if (ensureNotNull(this.l3_1).e()) {
            this.j3_1 = 2;
            return true;
          } else {
            this.l3_1 = null;
          }

          break;
        case 4:
          return false;
        case 3:
        case 2:
          return true;
        default:
          throw exceptionalState(this);
      }
      this.j3_1 = 5;
      var step = ensureNotNull(this.m3_1);
      this.m3_1 = null;
      var tmp$ret$1;
      // Inline function 'kotlin.coroutines.resume' call
      var tmp$ret$0;
      // Inline function 'kotlin.Companion.success' call
      var tmp0_success = Companion_getInstance_4();
      tmp$ret$0 = _Result___init__impl__xyqfz8(Unit_getInstance());
      step.o3(tmp$ret$0);
      tmp$ret$1 = Unit_getInstance();
    }
  };
  SequenceBuilderIterator.prototype.f = function () {
    var tmp0_subject = this.j3_1;
    switch (tmp0_subject) {
      case 0:
      case 1:
        return nextNotReady(this);
      case 2:
        this.j3_1 = 1;
        return ensureNotNull(this.l3_1).f();
      case 3:
        this.j3_1 = 0;
        var tmp = this.k3_1;
        var result = (tmp == null ? true : isObject(tmp)) ? tmp : THROW_CCE();
        this.k3_1 = null;
        return result;
      default:
        throw exceptionalState(this);
    }
  };
  SequenceBuilderIterator.prototype.i3 = function (value, $cont) {
    this.k3_1 = value;
    this.j3_1 = 3;
    var tmp$ret$0;
    // Inline function 'kotlin.sequences.SequenceBuilderIterator.yield.<anonymous>' call
    var tmp0__anonymous__q1qw7t = $cont;
    this.m3_1 = tmp0__anonymous__q1qw7t;
    tmp$ret$0 = get_COROUTINE_SUSPENDED();
    return tmp$ret$0;
  };
  SequenceBuilderIterator.prototype.p3 = function (result) {
    var tmp$ret$0;
    // Inline function 'kotlin.getOrThrow' call
    throwOnFailure(result);
    var tmp = _Result___get_value__impl__bjfvqg(result);
    tmp$ret$0 = (tmp == null ? true : isObject(tmp)) ? tmp : THROW_CCE();
    this.j3_1 = 4;
  };
  SequenceBuilderIterator.prototype.o3 = function (result) {
    return this.p3(result);
  };
  SequenceBuilderIterator.prototype.q3 = function () {
    return EmptyCoroutineContext_getInstance();
  };
  SequenceBuilderIterator.$metadata$ = classMeta('SequenceBuilderIterator', [Iterator, Continuation], undefined, undefined, undefined, SequenceScope.prototype);
  function _no_name_provided__qut3iv_1($block) {
    this.r3_1 = $block;
  }
  _no_name_provided__qut3iv_1.prototype.d = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.sequences.sequence.<anonymous>' call
    tmp$ret$0 = iterator_1(this.r3_1);
    return tmp$ret$0;
  };
  _no_name_provided__qut3iv_1.$metadata$ = classMeta(undefined, [Sequence]);
  function Sequence_0(iterator) {
    return new _no_name_provided__qut3iv_2(iterator);
  }
  function TransformingSequence$iterator$1(this$0) {
    this.t3_1 = this$0;
    this.s3_1 = this$0.u3_1.d();
  }
  TransformingSequence$iterator$1.prototype.f = function () {
    return this.t3_1.v3_1(this.s3_1.f());
  };
  TransformingSequence$iterator$1.prototype.e = function () {
    return this.s3_1.e();
  };
  TransformingSequence$iterator$1.$metadata$ = classMeta(undefined, [Iterator]);
  function TransformingSequence(sequence, transformer) {
    this.u3_1 = sequence;
    this.v3_1 = transformer;
  }
  TransformingSequence.prototype.d = function () {
    return new TransformingSequence$iterator$1(this);
  };
  TransformingSequence.$metadata$ = classMeta('TransformingSequence', [Sequence]);
  function _no_name_provided__qut3iv_2($iterator) {
    this.w3_1 = $iterator;
  }
  _no_name_provided__qut3iv_2.prototype.d = function () {
    return this.w3_1();
  };
  _no_name_provided__qut3iv_2.$metadata$ = classMeta(undefined, [Sequence]);
  function mutableSetOf() {
    return LinkedHashSet_init_$Create$();
  }
  function EmptySet() {
    EmptySet_instance = this;
    this.x3_1 = new Long(1993859828, 793161749);
  }
  EmptySet.prototype.equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, Set) : false) {
      tmp = other.i();
    } else {
      tmp = false;
    }
    return tmp;
  };
  EmptySet.prototype.hashCode = function () {
    return 0;
  };
  EmptySet.prototype.toString = function () {
    return '[]';
  };
  EmptySet.prototype.g = function () {
    return 0;
  };
  EmptySet.prototype.i = function () {
    return true;
  };
  EmptySet.prototype.q2 = function (element) {
    return false;
  };
  EmptySet.prototype.j = function (element) {
    if (!false)
      return false;
    var tmp;
    if (false) {
      tmp = element;
    } else {
      tmp = THROW_CCE();
    }
    return this.q2(tmp);
  };
  EmptySet.prototype.r2 = function (elements) {
    return elements.i();
  };
  EmptySet.prototype.l1 = function (elements) {
    return this.r2(elements);
  };
  EmptySet.prototype.d = function () {
    return EmptyIterator_getInstance();
  };
  EmptySet.$metadata$ = objectMeta('EmptySet', [Set, Serializable]);
  var EmptySet_instance;
  function EmptySet_getInstance() {
    if (EmptySet_instance == null)
      new EmptySet();
    return EmptySet_instance;
  }
  function compareBy(selector) {
    var tmp = compareBy$lambda(selector);
    return new sam$kotlin_Comparator$0_0(tmp);
  }
  function compareValuesBy(a, b, selector) {
    return compareValues(selector(a), selector(b));
  }
  function compareValues(a, b) {
    if (a === b)
      return 0;
    if (a == null)
      return -1;
    if (b == null)
      return 1;
    return compareTo_0((!(a == null) ? isComparable(a) : false) ? a : THROW_CCE(), b);
  }
  function sam$kotlin_Comparator$0_0(function_0) {
    this.y3_1 = function_0;
  }
  sam$kotlin_Comparator$0_0.prototype.s = function (a, b) {
    return this.y3_1(a, b);
  };
  sam$kotlin_Comparator$0_0.prototype.compare = function (a, b) {
    return this.s(a, b);
  };
  sam$kotlin_Comparator$0_0.$metadata$ = classMeta('sam$kotlin_Comparator$0', [Comparator]);
  function compareBy$lambda($selector) {
    return function (a, b) {
      var tmp$ret$0;
      // Inline function 'kotlin.comparisons.compareValuesBy' call
      tmp$ret$0 = compareValues($selector(a), $selector(b));
      return tmp$ret$0;
    };
  }
  function contract(builder) {
  }
  function Continuation() {
  }
  Continuation.$metadata$ = interfaceMeta('Continuation');
  function resume(_this__u8e3s4, value) {
    var tmp$ret$0;
    // Inline function 'kotlin.Companion.success' call
    var tmp0_success = Companion_getInstance_4();
    tmp$ret$0 = _Result___init__impl__xyqfz8(value);
    return _this__u8e3s4.o3(tmp$ret$0);
  }
  function resumeWithException(_this__u8e3s4, exception) {
    var tmp$ret$0;
    // Inline function 'kotlin.Companion.failure' call
    var tmp0_failure = Companion_getInstance_4();
    tmp$ret$0 = _Result___init__impl__xyqfz8(createFailure(exception));
    return _this__u8e3s4.o3(tmp$ret$0);
  }
  function startCoroutine(_this__u8e3s4, receiver, completion) {
    var tmp$ret$1;
    // Inline function 'kotlin.coroutines.resume' call
    var tmp0_resume = intercepted(createCoroutineUnintercepted(_this__u8e3s4, receiver, completion));
    var tmp$ret$0;
    // Inline function 'kotlin.Companion.success' call
    var tmp0_success = Companion_getInstance_4();
    tmp$ret$0 = _Result___init__impl__xyqfz8(Unit_getInstance());
    tmp0_resume.o3(tmp$ret$0);
    tmp$ret$1 = Unit_getInstance();
  }
  function Key() {
    Key_instance = this;
  }
  Key.$metadata$ = objectMeta('Key', [Key_0]);
  var Key_instance;
  function Key_getInstance() {
    if (Key_instance == null)
      new Key();
    return Key_instance;
  }
  function ContinuationInterceptor() {
  }
  ContinuationInterceptor.$metadata$ = interfaceMeta('ContinuationInterceptor', [Element_0]);
  function Key_0() {
  }
  Key_0.$metadata$ = interfaceMeta('Key');
  function Element_0() {
  }
  Element_0.$metadata$ = interfaceMeta('Element', [CoroutineContext]);
  function CoroutineContext$plus$lambda(acc, element) {
    var removed = acc.g4(element.y1());
    var tmp;
    if (removed === EmptyCoroutineContext_getInstance()) {
      tmp = element;
    } else {
      var interceptor = removed.b4(Key_getInstance());
      var tmp_0;
      if (interceptor == null) {
        tmp_0 = new CombinedContext(removed, element);
      } else {
        var left = removed.g4(Key_getInstance());
        tmp_0 = left === EmptyCoroutineContext_getInstance() ? new CombinedContext(element, interceptor) : new CombinedContext(new CombinedContext(left, element), interceptor);
      }
      tmp = tmp_0;
    }
    return tmp;
  }
  function CoroutineContext() {
  }
  CoroutineContext.$metadata$ = interfaceMeta('CoroutineContext');
  function EmptyCoroutineContext() {
    EmptyCoroutineContext_instance = this;
    this.j4_1 = new Long(0, 0);
  }
  EmptyCoroutineContext.prototype.b4 = function (key) {
    return null;
  };
  EmptyCoroutineContext.prototype.h4 = function (initial, operation) {
    return initial;
  };
  EmptyCoroutineContext.prototype.i4 = function (context) {
    return context;
  };
  EmptyCoroutineContext.prototype.g4 = function (key) {
    return this;
  };
  EmptyCoroutineContext.prototype.hashCode = function () {
    return 0;
  };
  EmptyCoroutineContext.prototype.toString = function () {
    return 'EmptyCoroutineContext';
  };
  EmptyCoroutineContext.$metadata$ = objectMeta('EmptyCoroutineContext', [CoroutineContext, Serializable]);
  var EmptyCoroutineContext_instance;
  function EmptyCoroutineContext_getInstance() {
    if (EmptyCoroutineContext_instance == null)
      new EmptyCoroutineContext();
    return EmptyCoroutineContext_instance;
  }
  function size($this) {
    var cur = $this;
    var size = 2;
    while (true) {
      var tmp = cur.k4_1;
      var tmp0_elvis_lhs = tmp instanceof CombinedContext ? tmp : null;
      var tmp_0;
      if (tmp0_elvis_lhs == null) {
        return size;
      } else {
        tmp_0 = tmp0_elvis_lhs;
      }
      cur = tmp_0;
      var tmp1 = size;
      size = tmp1 + 1 | 0;
    }
  }
  function contains_1($this, element) {
    return equals_0($this.b4(element.y1()), element);
  }
  function containsAll_0($this, context) {
    var cur = context;
    while (true) {
      if (!contains_1($this, cur.l4_1))
        return false;
      var next = cur.k4_1;
      if (next instanceof CombinedContext) {
        cur = next;
      } else {
        return contains_1($this, isInterface(next, Element_0) ? next : THROW_CCE());
      }
    }
  }
  function CombinedContext$toString$lambda(acc, element) {
    var tmp;
    var tmp$ret$0;
    // Inline function 'kotlin.text.isEmpty' call
    tmp$ret$0 = charSequenceLength(acc) === 0;
    if (tmp$ret$0) {
      tmp = toString_2(element);
    } else {
      tmp = acc + ', ' + element;
    }
    return tmp;
  }
  function CombinedContext(left, element) {
    this.k4_1 = left;
    this.l4_1 = element;
  }
  CombinedContext.prototype.b4 = function (key) {
    var cur = this;
    while (true) {
      var tmp0_safe_receiver = cur.l4_1.b4(key);
      if (tmp0_safe_receiver == null)
        null;
      else {
        var tmp$ret$0;
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        return tmp0_safe_receiver;
      }
      var next = cur.k4_1;
      if (next instanceof CombinedContext) {
        cur = next;
      } else {
        return next.b4(key);
      }
    }
  };
  CombinedContext.prototype.h4 = function (initial, operation) {
    return operation(this.k4_1.h4(initial, operation), this.l4_1);
  };
  CombinedContext.prototype.g4 = function (key) {
    var tmp0_safe_receiver = this.l4_1.b4(key);
    if (tmp0_safe_receiver == null)
      null;
    else {
      var tmp$ret$0;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      return this.k4_1;
    }
    var newLeft = this.k4_1.g4(key);
    return newLeft === this.k4_1 ? this : newLeft === EmptyCoroutineContext_getInstance() ? this.l4_1 : new CombinedContext(newLeft, this.l4_1);
  };
  CombinedContext.prototype.equals = function (other) {
    var tmp;
    if (this === other) {
      tmp = true;
    } else {
      var tmp_0;
      var tmp_1;
      if (other instanceof CombinedContext) {
        tmp_1 = size(other) === size(this);
      } else {
        tmp_1 = false;
      }
      if (tmp_1) {
        tmp_0 = containsAll_0(other, this);
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    }
    return tmp;
  };
  CombinedContext.prototype.hashCode = function () {
    return hashCode_0(this.k4_1) + hashCode_0(this.l4_1) | 0;
  };
  CombinedContext.prototype.toString = function () {
    return '[' + this.h4('', CombinedContext$toString$lambda) + ']';
  };
  CombinedContext.$metadata$ = classMeta('CombinedContext', [CoroutineContext, Serializable]);
  function AbstractCoroutineContextKey(baseKey, safeCast) {
    this.c4_1 = safeCast;
    var tmp = this;
    var tmp_0;
    if (baseKey instanceof AbstractCoroutineContextKey) {
      tmp_0 = baseKey.d4_1;
    } else {
      tmp_0 = baseKey;
    }
    tmp.d4_1 = tmp_0;
  }
  AbstractCoroutineContextKey.prototype.e4 = function (element) {
    return this.c4_1(element);
  };
  AbstractCoroutineContextKey.prototype.f4 = function (key) {
    return key === this ? true : this.d4_1 === key;
  };
  AbstractCoroutineContextKey.$metadata$ = classMeta('AbstractCoroutineContextKey', [Key_0]);
  function AbstractCoroutineContextElement(key) {
    this.m4_1 = key;
  }
  AbstractCoroutineContextElement.prototype.y1 = function () {
    return this.m4_1;
  };
  AbstractCoroutineContextElement.$metadata$ = classMeta('AbstractCoroutineContextElement', [Element_0]);
  function get_COROUTINE_SUSPENDED() {
    return CoroutineSingletons_COROUTINE_SUSPENDED_getInstance();
  }
  var CoroutineSingletons_COROUTINE_SUSPENDED_instance;
  var CoroutineSingletons_UNDECIDED_instance;
  var CoroutineSingletons_RESUMED_instance;
  var CoroutineSingletons_entriesInitialized;
  function CoroutineSingletons_initEntries() {
    if (CoroutineSingletons_entriesInitialized)
      return Unit_getInstance();
    CoroutineSingletons_entriesInitialized = true;
    CoroutineSingletons_COROUTINE_SUSPENDED_instance = new CoroutineSingletons('COROUTINE_SUSPENDED', 0);
    CoroutineSingletons_UNDECIDED_instance = new CoroutineSingletons('UNDECIDED', 1);
    CoroutineSingletons_RESUMED_instance = new CoroutineSingletons('RESUMED', 2);
  }
  function CoroutineSingletons(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  CoroutineSingletons.$metadata$ = classMeta('CoroutineSingletons', undefined, undefined, undefined, undefined, Enum.prototype);
  function CoroutineSingletons_COROUTINE_SUSPENDED_getInstance() {
    CoroutineSingletons_initEntries();
    return CoroutineSingletons_COROUTINE_SUSPENDED_instance;
  }
  function CoroutineSingletons_UNDECIDED_getInstance() {
    CoroutineSingletons_initEntries();
    return CoroutineSingletons_UNDECIDED_instance;
  }
  function CoroutineSingletons_RESUMED_getInstance() {
    CoroutineSingletons_initEntries();
    return CoroutineSingletons_RESUMED_instance;
  }
  function getProgressionLastElement(start, end, step) {
    var tmp;
    if (step > 0) {
      tmp = start >= end ? end : end - differenceModulo(end, start, step) | 0;
    } else if (step < 0) {
      tmp = start <= end ? end : end + differenceModulo(start, end, -step | 0) | 0;
    } else {
      throw IllegalArgumentException_init_$Create$('Step is zero.');
    }
    return tmp;
  }
  function differenceModulo(a, b, c) {
    return mod(mod(a, c) - mod(b, c) | 0, c);
  }
  function mod(a, b) {
    var mod = a % b | 0;
    return mod >= 0 ? mod : mod + b | 0;
  }
  function Companion_2() {
    Companion_instance_2 = this;
    this.u_1 = new IntRange(1, 0);
  }
  Companion_2.$metadata$ = objectMeta('Companion');
  var Companion_instance_2;
  function Companion_getInstance_2() {
    if (Companion_instance_2 == null)
      new Companion_2();
    return Companion_instance_2;
  }
  function IntRange(start, endInclusive) {
    Companion_getInstance_2();
    IntProgression.call(this, start, endInclusive, 1);
  }
  IntRange.prototype.u4 = function () {
    return this.d1_1;
  };
  IntRange.prototype.v4 = function () {
    return this.e1_1;
  };
  IntRange.prototype.w4 = function (value) {
    return this.d1_1 <= value ? value <= this.e1_1 : false;
  };
  IntRange.prototype.i = function () {
    return this.d1_1 > this.e1_1;
  };
  IntRange.prototype.equals = function (other) {
    var tmp;
    if (other instanceof IntRange) {
      tmp = (this.i() ? other.i() : false) ? true : this.d1_1 === other.d1_1 ? this.e1_1 === other.e1_1 : false;
    } else {
      tmp = false;
    }
    return tmp;
  };
  IntRange.prototype.hashCode = function () {
    return this.i() ? -1 : imul(31, this.d1_1) + this.e1_1 | 0;
  };
  IntRange.prototype.toString = function () {
    return '' + this.d1_1 + '..' + this.e1_1;
  };
  IntRange.$metadata$ = classMeta('IntRange', [ClosedRange, OpenEndRange], undefined, undefined, undefined, IntProgression.prototype);
  function IntProgressionIterator(first, last, step) {
    IntIterator.call(this);
    this.x4_1 = step;
    this.y4_1 = last;
    this.z4_1 = this.x4_1 > 0 ? first <= last : first >= last;
    this.a5_1 = this.z4_1 ? first : this.y4_1;
  }
  IntProgressionIterator.prototype.e = function () {
    return this.z4_1;
  };
  IntProgressionIterator.prototype.h3 = function () {
    var value = this.a5_1;
    if (value === this.y4_1) {
      if (!this.z4_1)
        throw NoSuchElementException_init_$Create$();
      this.z4_1 = false;
    } else {
      var tmp0_this = this;
      tmp0_this.a5_1 = tmp0_this.a5_1 + this.x4_1 | 0;
    }
    return value;
  };
  IntProgressionIterator.$metadata$ = classMeta('IntProgressionIterator', undefined, undefined, undefined, undefined, IntIterator.prototype);
  function Companion_3() {
    Companion_instance_3 = this;
  }
  Companion_3.prototype.c1 = function (rangeStart, rangeEnd, step) {
    return new IntProgression(rangeStart, rangeEnd, step);
  };
  Companion_3.$metadata$ = objectMeta('Companion');
  var Companion_instance_3;
  function Companion_getInstance_3() {
    if (Companion_instance_3 == null)
      new Companion_3();
    return Companion_instance_3;
  }
  function IntProgression(start, endInclusive, step) {
    Companion_getInstance_3();
    if (step === 0)
      throw IllegalArgumentException_init_$Create$('Step must be non-zero.');
    if (step === IntCompanionObject_getInstance().v_1)
      throw IllegalArgumentException_init_$Create$('Step must be greater than Int.MIN_VALUE to avoid overflow on negation.');
    this.d1_1 = start;
    this.e1_1 = getProgressionLastElement(start, endInclusive, step);
    this.f1_1 = step;
  }
  IntProgression.prototype.d = function () {
    return new IntProgressionIterator(this.d1_1, this.e1_1, this.f1_1);
  };
  IntProgression.prototype.i = function () {
    return this.f1_1 > 0 ? this.d1_1 > this.e1_1 : this.d1_1 < this.e1_1;
  };
  IntProgression.prototype.equals = function (other) {
    var tmp;
    if (other instanceof IntProgression) {
      tmp = (this.i() ? other.i() : false) ? true : (this.d1_1 === other.d1_1 ? this.e1_1 === other.e1_1 : false) ? this.f1_1 === other.f1_1 : false;
    } else {
      tmp = false;
    }
    return tmp;
  };
  IntProgression.prototype.hashCode = function () {
    return this.i() ? -1 : imul(31, imul(31, this.d1_1) + this.e1_1 | 0) + this.f1_1 | 0;
  };
  IntProgression.prototype.toString = function () {
    return this.f1_1 > 0 ? '' + this.d1_1 + '..' + this.e1_1 + ' step ' + this.f1_1 : '' + this.d1_1 + ' downTo ' + this.e1_1 + ' step ' + (-this.f1_1 | 0);
  };
  IntProgression.$metadata$ = classMeta('IntProgression', [Iterable_0]);
  function ClosedRange() {
  }
  ClosedRange.$metadata$ = interfaceMeta('ClosedRange');
  function OpenEndRange() {
  }
  OpenEndRange.$metadata$ = interfaceMeta('OpenEndRange');
  function checkStepIsPositive(isPositive, step) {
    if (!isPositive)
      throw IllegalArgumentException_init_$Create$('Step must be positive, was: ' + toString_2(step) + '.');
  }
  function KClassifier() {
  }
  KClassifier.$metadata$ = interfaceMeta('KClassifier');
  function appendElement(_this__u8e3s4, element, transform) {
    if (!(transform == null)) {
      _this__u8e3s4.c(transform(element));
    } else {
      if (element == null ? true : isCharSequence(element)) {
        _this__u8e3s4.c(element);
      } else {
        if (element instanceof Char_0) {
          _this__u8e3s4.b5(element.i1_1);
        } else {
          _this__u8e3s4.c(toString_1(element));
        }
      }
    }
  }
  function equals(_this__u8e3s4, other, ignoreCase) {
    if (equals_0(new Char_0(_this__u8e3s4), new Char_0(other)))
      return true;
    if (!ignoreCase)
      return false;
    var thisUpper = uppercaseChar(_this__u8e3s4);
    var otherUpper = uppercaseChar(other);
    var tmp;
    if (equals_0(new Char_0(thisUpper), new Char_0(otherUpper))) {
      tmp = true;
    } else {
      var tmp$ret$3;
      // Inline function 'kotlin.text.lowercaseChar' call
      var tmp$ret$2;
      // Inline function 'kotlin.text.lowercase' call
      var tmp$ret$1;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      var tmp0_asDynamic = toString_0(thisUpper);
      tmp$ret$0 = tmp0_asDynamic;
      var tmp1_unsafeCast = tmp$ret$0.toLowerCase();
      tmp$ret$1 = tmp1_unsafeCast;
      tmp$ret$2 = tmp$ret$1;
      tmp$ret$3 = charSequenceGet(tmp$ret$2, 0);
      var tmp_0 = new Char_0(tmp$ret$3);
      var tmp$ret$7;
      // Inline function 'kotlin.text.lowercaseChar' call
      var tmp$ret$6;
      // Inline function 'kotlin.text.lowercase' call
      var tmp$ret$5;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$4;
      // Inline function 'kotlin.js.asDynamic' call
      var tmp2_asDynamic = toString_0(otherUpper);
      tmp$ret$4 = tmp2_asDynamic;
      var tmp3_unsafeCast = tmp$ret$4.toLowerCase();
      tmp$ret$5 = tmp3_unsafeCast;
      tmp$ret$6 = tmp$ret$5;
      tmp$ret$7 = charSequenceGet(tmp$ret$6, 0);
      tmp = equals_0(tmp_0, new Char_0(tmp$ret$7));
    }
    return tmp;
  }
  function trimIndent(_this__u8e3s4) {
    return replaceIndent(_this__u8e3s4, '');
  }
  function replaceIndent(_this__u8e3s4, newIndent) {
    var lines_0 = lines(_this__u8e3s4);
    var tmp$ret$3;
    // Inline function 'kotlin.collections.map' call
    var tmp$ret$1;
    // Inline function 'kotlin.collections.filter' call
    var tmp$ret$0;
    // Inline function 'kotlin.collections.filterTo' call
    var tmp0_filterTo = ArrayList_init_$Create$();
    var tmp0_iterator = lines_0.d();
    while (tmp0_iterator.e()) {
      var element = tmp0_iterator.f();
      if (isNotBlank(element)) {
        tmp0_filterTo.b(element);
      }
    }
    tmp$ret$0 = tmp0_filterTo;
    tmp$ret$1 = tmp$ret$0;
    var tmp0_map = tmp$ret$1;
    var tmp$ret$2;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$_0(collectionSizeOrDefault(tmp0_map, 10));
    var tmp0_iterator_0 = tmp0_map.d();
    while (tmp0_iterator_0.e()) {
      var item = tmp0_iterator_0.f();
      tmp0_mapTo.b(indentWidth(item));
    }
    tmp$ret$2 = tmp0_mapTo;
    tmp$ret$3 = tmp$ret$2;
    var tmp0_elvis_lhs = minOrNull(tmp$ret$3);
    var minCommonIndent = tmp0_elvis_lhs == null ? 0 : tmp0_elvis_lhs;
    var tmp$ret$10;
    // Inline function 'kotlin.text.reindent' call
    var tmp1_reindent = _this__u8e3s4.length + imul(newIndent.length, lines_0.g()) | 0;
    var tmp2_reindent = getIndentFunction(newIndent);
    var lastIndex = get_lastIndex_0(lines_0);
    var tmp$ret$9;
    // Inline function 'kotlin.collections.mapIndexedNotNull' call
    var tmp$ret$8;
    // Inline function 'kotlin.collections.mapIndexedNotNullTo' call
    var tmp1_mapIndexedNotNullTo = ArrayList_init_$Create$();
    // Inline function 'kotlin.collections.forEachIndexed' call
    var index = 0;
    var tmp0_iterator_1 = lines_0.d();
    while (tmp0_iterator_1.e()) {
      var item_0 = tmp0_iterator_1.f();
      // Inline function 'kotlin.collections.mapIndexedNotNullTo.<anonymous>' call
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      var tmp0__anonymous__q1qw7t = checkIndexOverflow(tmp1);
      var tmp$ret$6;
      // Inline function 'kotlin.text.reindent.<anonymous>' call
      var tmp;
      if ((tmp0__anonymous__q1qw7t === 0 ? true : tmp0__anonymous__q1qw7t === lastIndex) ? isBlank(item_0) : false) {
        tmp = null;
      } else {
        var tmp$ret$4;
        // Inline function 'kotlin.text.replaceIndent.<anonymous>' call
        tmp$ret$4 = drop(item_0, minCommonIndent);
        var tmp0_safe_receiver = tmp$ret$4;
        var tmp_0;
        if (tmp0_safe_receiver == null) {
          tmp_0 = null;
        } else {
          var tmp$ret$5;
          // Inline function 'kotlin.let' call
          // Inline function 'kotlin.contracts.contract' call
          tmp$ret$5 = tmp2_reindent(tmp0_safe_receiver);
          tmp_0 = tmp$ret$5;
        }
        var tmp1_elvis_lhs = tmp_0;
        tmp = tmp1_elvis_lhs == null ? item_0 : tmp1_elvis_lhs;
      }
      tmp$ret$6 = tmp;
      var tmp0_safe_receiver_0 = tmp$ret$6;
      if (tmp0_safe_receiver_0 == null)
        null;
      else {
        var tmp$ret$7;
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        tmp1_mapIndexedNotNullTo.b(tmp0_safe_receiver_0);
        tmp$ret$7 = Unit_getInstance();
      }
    }
    tmp$ret$8 = tmp1_mapIndexedNotNullTo;
    tmp$ret$9 = tmp$ret$8;
    var tmp_1 = tmp$ret$9;
    var tmp_2 = StringBuilder_init_$Create$(tmp1_reindent);
    tmp$ret$10 = joinTo$default(tmp_1, tmp_2, '\n', null, null, 0, null, null, 124, null).toString();
    return tmp$ret$10;
  }
  function indentWidth(_this__u8e3s4) {
    var tmp$ret$3;
    // Inline function 'kotlin.let' call
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.text.indexOfFirst' call
      var inductionVariable = 0;
      var last = charSequenceLength(_this__u8e3s4) - 1 | 0;
      if (inductionVariable <= last)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var tmp$ret$0;
          // Inline function 'kotlin.text.indentWidth.<anonymous>' call
          var tmp0__anonymous__q1qw7t = charSequenceGet(_this__u8e3s4, index);
          tmp$ret$0 = !isWhitespace(tmp0__anonymous__q1qw7t);
          if (tmp$ret$0) {
            tmp$ret$1 = index;
            break $l$block;
          }
        }
         while (inductionVariable <= last);
      tmp$ret$1 = -1;
    }
    var tmp1_let = tmp$ret$1;
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$2;
    // Inline function 'kotlin.text.indentWidth.<anonymous>' call
    tmp$ret$2 = tmp1_let === -1 ? _this__u8e3s4.length : tmp1_let;
    tmp$ret$3 = tmp$ret$2;
    return tmp$ret$3;
  }
  function reindent(_this__u8e3s4, resultSizeEstimate, indentAddFunction, indentCutFunction) {
    var lastIndex = get_lastIndex_0(_this__u8e3s4);
    var tmp$ret$4;
    // Inline function 'kotlin.collections.mapIndexedNotNull' call
    var tmp$ret$3;
    // Inline function 'kotlin.collections.mapIndexedNotNullTo' call
    var tmp1_mapIndexedNotNullTo = ArrayList_init_$Create$();
    // Inline function 'kotlin.collections.forEachIndexed' call
    var index = 0;
    var tmp0_iterator = _this__u8e3s4.d();
    while (tmp0_iterator.e()) {
      var item = tmp0_iterator.f();
      // Inline function 'kotlin.collections.mapIndexedNotNullTo.<anonymous>' call
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      var tmp0__anonymous__q1qw7t = checkIndexOverflow(tmp1);
      var tmp$ret$1;
      // Inline function 'kotlin.text.reindent.<anonymous>' call
      var tmp;
      if ((tmp0__anonymous__q1qw7t === 0 ? true : tmp0__anonymous__q1qw7t === lastIndex) ? isBlank(item) : false) {
        tmp = null;
      } else {
        var tmp0_safe_receiver = indentCutFunction(item);
        var tmp_0;
        if (tmp0_safe_receiver == null) {
          tmp_0 = null;
        } else {
          var tmp$ret$0;
          // Inline function 'kotlin.let' call
          // Inline function 'kotlin.contracts.contract' call
          tmp$ret$0 = indentAddFunction(tmp0_safe_receiver);
          tmp_0 = tmp$ret$0;
        }
        var tmp1_elvis_lhs = tmp_0;
        tmp = tmp1_elvis_lhs == null ? item : tmp1_elvis_lhs;
      }
      tmp$ret$1 = tmp;
      var tmp0_safe_receiver_0 = tmp$ret$1;
      if (tmp0_safe_receiver_0 == null)
        null;
      else {
        var tmp$ret$2;
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        tmp1_mapIndexedNotNullTo.b(tmp0_safe_receiver_0);
        tmp$ret$2 = Unit_getInstance();
      }
    }
    tmp$ret$3 = tmp1_mapIndexedNotNullTo;
    tmp$ret$4 = tmp$ret$3;
    var tmp_1 = tmp$ret$4;
    var tmp_2 = StringBuilder_init_$Create$(resultSizeEstimate);
    return joinTo$default(tmp_1, tmp_2, '\n', null, null, 0, null, null, 124, null).toString();
  }
  function getIndentFunction(indent) {
    var tmp;
    var tmp$ret$0;
    // Inline function 'kotlin.text.isEmpty' call
    tmp$ret$0 = charSequenceLength(indent) === 0;
    if (tmp$ret$0) {
      tmp = getIndentFunction$lambda;
    } else {
      tmp = getIndentFunction$lambda_0(indent);
    }
    return tmp;
  }
  function getIndentFunction$lambda(line) {
    return line;
  }
  function getIndentFunction$lambda_0($indent) {
    return function (line) {
      return $indent + line;
    };
  }
  function buildString(builderAction) {
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'kotlin.apply' call
    var tmp0_apply = StringBuilder_init_$Create$_0();
    // Inline function 'kotlin.contracts.contract' call
    builderAction(tmp0_apply);
    tmp$ret$0 = tmp0_apply;
    return tmp$ret$0.toString();
  }
  function isEmpty_1(_this__u8e3s4) {
    return charSequenceLength(_this__u8e3s4) === 0;
  }
  function isNotEmpty_1(_this__u8e3s4) {
    return charSequenceLength(_this__u8e3s4) > 0;
  }
  function split(_this__u8e3s4, delimiters, ignoreCase, limit) {
    if (delimiters.length === 1) {
      return split_0(_this__u8e3s4, toString_0(delimiters[0]), ignoreCase, limit);
    }
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = asIterable(rangesDelimitedBy$default(_this__u8e3s4, delimiters, 0, ignoreCase, limit, 2, null));
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$_0(collectionSizeOrDefault(tmp0_map, 10));
    var tmp0_iterator = tmp0_map.d();
    while (tmp0_iterator.e()) {
      var item = tmp0_iterator.f();
      var tmp$ret$0;
      // Inline function 'kotlin.text.split.<anonymous>' call
      tmp$ret$0 = substring(_this__u8e3s4, item);
      tmp0_mapTo.b(tmp$ret$0);
    }
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  }
  function split$default(_this__u8e3s4, delimiters, ignoreCase, limit, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      ignoreCase = false;
    if (!(($mask0 & 4) === 0))
      limit = 0;
    return split(_this__u8e3s4, delimiters, ignoreCase, limit);
  }
  function orEmpty(_this__u8e3s4) {
    var tmp0_elvis_lhs = _this__u8e3s4;
    return tmp0_elvis_lhs == null ? '' : tmp0_elvis_lhs;
  }
  function removePrefix(_this__u8e3s4, prefix) {
    if (startsWith$default_0(_this__u8e3s4, prefix, false, 2, null)) {
      var tmp$ret$1;
      // Inline function 'kotlin.text.substring' call
      var tmp0_substring = charSequenceLength(prefix);
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = _this__u8e3s4;
      tmp$ret$1 = tmp$ret$0.substring(tmp0_substring);
      return tmp$ret$1;
    }
    return _this__u8e3s4;
  }
  function isNotBlank(_this__u8e3s4) {
    return !isBlank(_this__u8e3s4);
  }
  function startsWith(_this__u8e3s4, char, ignoreCase) {
    return charSequenceLength(_this__u8e3s4) > 0 ? equals(charSequenceGet(_this__u8e3s4, 0), char, ignoreCase) : false;
  }
  function startsWith$default(_this__u8e3s4, char, ignoreCase, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      ignoreCase = false;
    return startsWith(_this__u8e3s4, char, ignoreCase);
  }
  function endsWith(_this__u8e3s4, char, ignoreCase) {
    return charSequenceLength(_this__u8e3s4) > 0 ? equals(charSequenceGet(_this__u8e3s4, get_lastIndex_1(_this__u8e3s4)), char, ignoreCase) : false;
  }
  function endsWith$default(_this__u8e3s4, char, ignoreCase, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      ignoreCase = false;
    return endsWith(_this__u8e3s4, char, ignoreCase);
  }
  function contains_2(_this__u8e3s4, char, ignoreCase) {
    return indexOf$default(_this__u8e3s4, char, 0, ignoreCase, 2, null) >= 0;
  }
  function contains$default(_this__u8e3s4, char, ignoreCase, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      ignoreCase = false;
    return contains_2(_this__u8e3s4, char, ignoreCase);
  }
  function indexOf_1(_this__u8e3s4, char, startIndex, ignoreCase) {
    var tmp;
    var tmp_0;
    if (ignoreCase) {
      tmp_0 = true;
    } else {
      tmp_0 = !(typeof _this__u8e3s4 === 'string');
    }
    if (tmp_0) {
      var tmp$ret$0;
      // Inline function 'kotlin.charArrayOf' call
      tmp$ret$0 = charArrayOf_0([char]);
      tmp = indexOfAny(_this__u8e3s4, tmp$ret$0, startIndex, ignoreCase);
    } else {
      var tmp$ret$3;
      // Inline function 'kotlin.text.nativeIndexOf' call
      var tmp1_nativeIndexOf = _this__u8e3s4;
      var tmp$ret$2;
      // Inline function 'kotlin.text.nativeIndexOf' call
      var tmp0_nativeIndexOf = toString_0(char);
      var tmp$ret$1;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$1 = tmp1_nativeIndexOf;
      tmp$ret$2 = tmp$ret$1.indexOf(tmp0_nativeIndexOf, startIndex);
      tmp$ret$3 = tmp$ret$2;
      tmp = tmp$ret$3;
    }
    return tmp;
  }
  function indexOf$default(_this__u8e3s4, char, startIndex, ignoreCase, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      startIndex = 0;
    if (!(($mask0 & 4) === 0))
      ignoreCase = false;
    return indexOf_1(_this__u8e3s4, char, startIndex, ignoreCase);
  }
  function get_lastIndex_1(_this__u8e3s4) {
    return charSequenceLength(_this__u8e3s4) - 1 | 0;
  }
  function split_0(_this__u8e3s4, delimiter, ignoreCase, limit) {
    requireNonNegativeLimit(limit);
    var currentOffset = 0;
    var nextIndex = indexOf_2(_this__u8e3s4, delimiter, currentOffset, ignoreCase);
    if (nextIndex === -1 ? true : limit === 1) {
      return listOf_0(toString_2(_this__u8e3s4));
    }
    var isLimited = limit > 0;
    var result = ArrayList_init_$Create$_0(isLimited ? coerceAtMost(limit, 10) : 10);
    $l$loop: do {
      var tmp$ret$0;
      // Inline function 'kotlin.text.substring' call
      var tmp0_substring = currentOffset;
      var tmp1_substring = nextIndex;
      tmp$ret$0 = toString_2(charSequenceSubSequence(_this__u8e3s4, tmp0_substring, tmp1_substring));
      result.b(tmp$ret$0);
      currentOffset = nextIndex + delimiter.length | 0;
      if (isLimited ? result.g() === (limit - 1 | 0) : false)
        break $l$loop;
      nextIndex = indexOf_2(_this__u8e3s4, delimiter, currentOffset, ignoreCase);
    }
     while (!(nextIndex === -1));
    var tmp$ret$1;
    // Inline function 'kotlin.text.substring' call
    var tmp2_substring = currentOffset;
    var tmp3_substring = charSequenceLength(_this__u8e3s4);
    tmp$ret$1 = toString_2(charSequenceSubSequence(_this__u8e3s4, tmp2_substring, tmp3_substring));
    result.b(tmp$ret$1);
    return result;
  }
  function substring(_this__u8e3s4, range) {
    return toString_2(charSequenceSubSequence(_this__u8e3s4, range.u4(), range.v4() + 1 | 0));
  }
  function rangesDelimitedBy(_this__u8e3s4, delimiters, startIndex, ignoreCase, limit) {
    requireNonNegativeLimit(limit);
    return new DelimitedRangesSequence(_this__u8e3s4, startIndex, limit, rangesDelimitedBy$lambda(delimiters, ignoreCase));
  }
  function rangesDelimitedBy$default(_this__u8e3s4, delimiters, startIndex, ignoreCase, limit, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      startIndex = 0;
    if (!(($mask0 & 4) === 0))
      ignoreCase = false;
    if (!(($mask0 & 8) === 0))
      limit = 0;
    return rangesDelimitedBy(_this__u8e3s4, delimiters, startIndex, ignoreCase, limit);
  }
  function startsWith_0(_this__u8e3s4, prefix, ignoreCase) {
    var tmp;
    var tmp_0;
    if (!ignoreCase) {
      tmp_0 = typeof _this__u8e3s4 === 'string';
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = typeof prefix === 'string';
    } else {
      tmp = false;
    }
    if (tmp) {
      return startsWith$default_1(_this__u8e3s4, prefix, false, 2, null);
    } else {
      return regionMatchesImpl(_this__u8e3s4, 0, prefix, 0, charSequenceLength(prefix), ignoreCase);
    }
  }
  function startsWith$default_0(_this__u8e3s4, prefix, ignoreCase, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      ignoreCase = false;
    return startsWith_0(_this__u8e3s4, prefix, ignoreCase);
  }
  function indexOfAny(_this__u8e3s4, chars, startIndex, ignoreCase) {
    var tmp;
    if (!ignoreCase ? chars.length === 1 : false) {
      tmp = typeof _this__u8e3s4 === 'string';
    } else {
      tmp = false;
    }
    if (tmp) {
      var char = single(chars);
      var tmp$ret$2;
      // Inline function 'kotlin.text.nativeIndexOf' call
      var tmp1_nativeIndexOf = _this__u8e3s4;
      var tmp$ret$1;
      // Inline function 'kotlin.text.nativeIndexOf' call
      var tmp0_nativeIndexOf = toString_0(char);
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = tmp1_nativeIndexOf;
      tmp$ret$1 = tmp$ret$0.indexOf(tmp0_nativeIndexOf, startIndex);
      tmp$ret$2 = tmp$ret$1;
      return tmp$ret$2;
    }
    var inductionVariable = coerceAtLeast(startIndex, 0);
    var last = get_lastIndex_1(_this__u8e3s4);
    if (inductionVariable <= last)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var charAtIndex = charSequenceGet(_this__u8e3s4, index);
        var tmp$ret$4;
        $l$block: {
          // Inline function 'kotlin.collections.any' call
          var indexedObject = chars;
          var inductionVariable_0 = 0;
          var last_0 = indexedObject.length;
          while (inductionVariable_0 < last_0) {
            var element = indexedObject[inductionVariable_0];
            inductionVariable_0 = inductionVariable_0 + 1 | 0;
            var tmp$ret$3;
            // Inline function 'kotlin.text.indexOfAny.<anonymous>' call
            tmp$ret$3 = equals(element, charAtIndex, ignoreCase);
            if (tmp$ret$3) {
              tmp$ret$4 = true;
              break $l$block;
            }
          }
          tmp$ret$4 = false;
        }
        if (tmp$ret$4)
          return index;
      }
       while (!(index === last));
    return -1;
  }
  function requireNonNegativeLimit(limit) {
    var tmp0_require = limit >= 0;
    // Inline function 'kotlin.contracts.contract' call
    var tmp;
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'kotlin.text.requireNonNegativeLimit.<anonymous>' call
      tmp$ret$0 = 'Limit must be non-negative, but was ' + limit;
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString_2(message));
    }
    return tmp;
  }
  function indexOf_2(_this__u8e3s4, string, startIndex, ignoreCase) {
    var tmp;
    var tmp_0;
    if (ignoreCase) {
      tmp_0 = true;
    } else {
      tmp_0 = !(typeof _this__u8e3s4 === 'string');
    }
    if (tmp_0) {
      var tmp_1 = charSequenceLength(_this__u8e3s4);
      tmp = indexOf$default_1(_this__u8e3s4, string, startIndex, tmp_1, ignoreCase, false, 16, null);
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.text.nativeIndexOf' call
      var tmp0_nativeIndexOf = _this__u8e3s4;
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = tmp0_nativeIndexOf;
      tmp$ret$1 = tmp$ret$0.indexOf(string, startIndex);
      tmp = tmp$ret$1;
    }
    return tmp;
  }
  function indexOf$default_0(_this__u8e3s4, string, startIndex, ignoreCase, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      startIndex = 0;
    if (!(($mask0 & 4) === 0))
      ignoreCase = false;
    return indexOf_2(_this__u8e3s4, string, startIndex, ignoreCase);
  }
  function substring_0(_this__u8e3s4, startIndex, endIndex) {
    return toString_2(charSequenceSubSequence(_this__u8e3s4, startIndex, endIndex));
  }
  function calcNext($this) {
    if ($this.h5_1 < 0) {
      $this.f5_1 = 0;
      $this.i5_1 = null;
    } else {
      var tmp;
      var tmp_0;
      if ($this.k5_1.n5_1 > 0) {
        var tmp0_this = $this;
        tmp0_this.j5_1 = tmp0_this.j5_1 + 1 | 0;
        tmp_0 = tmp0_this.j5_1 >= $this.k5_1.n5_1;
      } else {
        tmp_0 = false;
      }
      if (tmp_0) {
        tmp = true;
      } else {
        tmp = $this.h5_1 > charSequenceLength($this.k5_1.l5_1);
      }
      if (tmp) {
        $this.i5_1 = numberRangeToNumber($this.g5_1, get_lastIndex_1($this.k5_1.l5_1));
        $this.h5_1 = -1;
      } else {
        var match = $this.k5_1.o5_1($this.k5_1.l5_1, $this.h5_1);
        if (match == null) {
          $this.i5_1 = numberRangeToNumber($this.g5_1, get_lastIndex_1($this.k5_1.l5_1));
          $this.h5_1 = -1;
        } else {
          var tmp1_container = match;
          var index = tmp1_container.a3();
          var length = tmp1_container.b3();
          $this.i5_1 = until($this.g5_1, index);
          $this.g5_1 = index + length | 0;
          $this.h5_1 = $this.g5_1 + (length === 0 ? 1 : 0) | 0;
        }
      }
      $this.f5_1 = 1;
    }
  }
  function DelimitedRangesSequence$iterator$1(this$0) {
    this.k5_1 = this$0;
    this.f5_1 = -1;
    this.g5_1 = coerceIn_0(this$0.m5_1, 0, charSequenceLength(this$0.l5_1));
    this.h5_1 = this.g5_1;
    this.i5_1 = null;
    this.j5_1 = 0;
  }
  DelimitedRangesSequence$iterator$1.prototype.f = function () {
    if (this.f5_1 === -1) {
      calcNext(this);
    }
    if (this.f5_1 === 0)
      throw NoSuchElementException_init_$Create$();
    var tmp = this.i5_1;
    var result = tmp instanceof IntRange ? tmp : THROW_CCE();
    this.i5_1 = null;
    this.f5_1 = -1;
    return result;
  };
  DelimitedRangesSequence$iterator$1.prototype.e = function () {
    if (this.f5_1 === -1) {
      calcNext(this);
    }
    return this.f5_1 === 1;
  };
  DelimitedRangesSequence$iterator$1.$metadata$ = classMeta(undefined, [Iterator]);
  function DelimitedRangesSequence(input, startIndex, limit, getNextMatch) {
    this.l5_1 = input;
    this.m5_1 = startIndex;
    this.n5_1 = limit;
    this.o5_1 = getNextMatch;
  }
  DelimitedRangesSequence.prototype.d = function () {
    return new DelimitedRangesSequence$iterator$1(this);
  };
  DelimitedRangesSequence.$metadata$ = classMeta('DelimitedRangesSequence', [Sequence]);
  function regionMatchesImpl(_this__u8e3s4, thisOffset, other, otherOffset, length, ignoreCase) {
    if (((otherOffset < 0 ? true : thisOffset < 0) ? true : thisOffset > (charSequenceLength(_this__u8e3s4) - length | 0)) ? true : otherOffset > (charSequenceLength(other) - length | 0)) {
      return false;
    }
    var inductionVariable = 0;
    if (inductionVariable < length)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (!equals(charSequenceGet(_this__u8e3s4, thisOffset + index | 0), charSequenceGet(other, otherOffset + index | 0), ignoreCase))
          return false;
      }
       while (inductionVariable < length);
    return true;
  }
  function indexOf_3(_this__u8e3s4, other, startIndex, endIndex, ignoreCase, last) {
    var indices = !last ? numberRangeToNumber(coerceAtLeast(startIndex, 0), coerceAtMost(endIndex, charSequenceLength(_this__u8e3s4))) : downTo(coerceAtMost(startIndex, get_lastIndex_1(_this__u8e3s4)), coerceAtLeast(endIndex, 0));
    var tmp;
    if (typeof _this__u8e3s4 === 'string') {
      tmp = typeof other === 'string';
    } else {
      tmp = false;
    }
    if (tmp) {
      var inductionVariable = indices.d1_1;
      var last_0 = indices.e1_1;
      var step = indices.f1_1;
      if ((step > 0 ? inductionVariable <= last_0 : false) ? true : step < 0 ? last_0 <= inductionVariable : false)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + step | 0;
          if (regionMatches(other, 0, _this__u8e3s4, index, charSequenceLength(other), ignoreCase))
            return index;
        }
         while (!(index === last_0));
    } else {
      var inductionVariable_0 = indices.d1_1;
      var last_1 = indices.e1_1;
      var step_0 = indices.f1_1;
      if ((step_0 > 0 ? inductionVariable_0 <= last_1 : false) ? true : step_0 < 0 ? last_1 <= inductionVariable_0 : false)
        do {
          var index_0 = inductionVariable_0;
          inductionVariable_0 = inductionVariable_0 + step_0 | 0;
          if (regionMatchesImpl(other, 0, _this__u8e3s4, index_0, charSequenceLength(other), ignoreCase))
            return index_0;
        }
         while (!(index_0 === last_1));
    }
    return -1;
  }
  function indexOf$default_1(_this__u8e3s4, other, startIndex, endIndex, ignoreCase, last, $mask0, $handler) {
    if (!(($mask0 & 16) === 0))
      last = false;
    return indexOf_3(_this__u8e3s4, other, startIndex, endIndex, ignoreCase, last);
  }
  function lines(_this__u8e3s4) {
    return toList_1(lineSequence(_this__u8e3s4));
  }
  function get_indices_0(_this__u8e3s4) {
    return numberRangeToNumber(0, charSequenceLength(_this__u8e3s4) - 1 | 0);
  }
  function lineSequence(_this__u8e3s4) {
    return splitToSequence$default(_this__u8e3s4, ['\r\n', '\n', '\r'], false, 0, 6, null);
  }
  function splitToSequence(_this__u8e3s4, delimiters, ignoreCase, limit) {
    var tmp = rangesDelimitedBy$default_0(_this__u8e3s4, delimiters, 0, ignoreCase, limit, 2, null);
    return map_0(tmp, splitToSequence$lambda(_this__u8e3s4));
  }
  function splitToSequence$default(_this__u8e3s4, delimiters, ignoreCase, limit, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      ignoreCase = false;
    if (!(($mask0 & 4) === 0))
      limit = 0;
    return splitToSequence(_this__u8e3s4, delimiters, ignoreCase, limit);
  }
  function rangesDelimitedBy_0(_this__u8e3s4, delimiters, startIndex, ignoreCase, limit) {
    requireNonNegativeLimit(limit);
    var delimitersList = asList(delimiters);
    return new DelimitedRangesSequence(_this__u8e3s4, startIndex, limit, rangesDelimitedBy$lambda_0(delimitersList, ignoreCase));
  }
  function rangesDelimitedBy$default_0(_this__u8e3s4, delimiters, startIndex, ignoreCase, limit, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      startIndex = 0;
    if (!(($mask0 & 4) === 0))
      ignoreCase = false;
    if (!(($mask0 & 8) === 0))
      limit = 0;
    return rangesDelimitedBy_0(_this__u8e3s4, delimiters, startIndex, ignoreCase, limit);
  }
  function findAnyOf(_this__u8e3s4, strings, startIndex, ignoreCase, last) {
    if (!ignoreCase ? strings.g() === 1 : false) {
      var string = single_0(strings);
      var tmp;
      if (!last) {
        tmp = indexOf$default_0(_this__u8e3s4, string, startIndex, false, 4, null);
      } else {
        tmp = lastIndexOf$default(_this__u8e3s4, string, startIndex, false, 4, null);
      }
      var index = tmp;
      return index < 0 ? null : to(index, string);
    }
    var indices = !last ? numberRangeToNumber(coerceAtLeast(startIndex, 0), charSequenceLength(_this__u8e3s4)) : downTo(coerceAtMost(startIndex, get_lastIndex_1(_this__u8e3s4)), 0);
    if (typeof _this__u8e3s4 === 'string') {
      var inductionVariable = indices.d1_1;
      var last_0 = indices.e1_1;
      var step = indices.f1_1;
      if ((step > 0 ? inductionVariable <= last_0 : false) ? true : step < 0 ? last_0 <= inductionVariable : false)
        do {
          var index_0 = inductionVariable;
          inductionVariable = inductionVariable + step | 0;
          var tmp$ret$1;
          $l$block: {
            // Inline function 'kotlin.collections.firstOrNull' call
            var tmp0_iterator = strings.d();
            while (tmp0_iterator.e()) {
              var element = tmp0_iterator.f();
              var tmp$ret$0;
              // Inline function 'kotlin.text.findAnyOf.<anonymous>' call
              tmp$ret$0 = regionMatches(element, 0, _this__u8e3s4, index_0, element.length, ignoreCase);
              if (tmp$ret$0) {
                tmp$ret$1 = element;
                break $l$block;
              }
            }
            tmp$ret$1 = null;
          }
          var matchingString = tmp$ret$1;
          if (!(matchingString == null))
            return to(index_0, matchingString);
        }
         while (!(index_0 === last_0));
    } else {
      var inductionVariable_0 = indices.d1_1;
      var last_1 = indices.e1_1;
      var step_0 = indices.f1_1;
      if ((step_0 > 0 ? inductionVariable_0 <= last_1 : false) ? true : step_0 < 0 ? last_1 <= inductionVariable_0 : false)
        do {
          var index_1 = inductionVariable_0;
          inductionVariable_0 = inductionVariable_0 + step_0 | 0;
          var tmp$ret$3;
          $l$block_0: {
            // Inline function 'kotlin.collections.firstOrNull' call
            var tmp0_iterator_0 = strings.d();
            while (tmp0_iterator_0.e()) {
              var element_0 = tmp0_iterator_0.f();
              var tmp$ret$2;
              // Inline function 'kotlin.text.findAnyOf.<anonymous>' call
              tmp$ret$2 = regionMatchesImpl(element_0, 0, _this__u8e3s4, index_1, element_0.length, ignoreCase);
              if (tmp$ret$2) {
                tmp$ret$3 = element_0;
                break $l$block_0;
              }
            }
            tmp$ret$3 = null;
          }
          var matchingString_0 = tmp$ret$3;
          if (!(matchingString_0 == null))
            return to(index_1, matchingString_0);
        }
         while (!(index_1 === last_1));
    }
    return null;
  }
  function lastIndexOf_0(_this__u8e3s4, string, startIndex, ignoreCase) {
    var tmp;
    var tmp_0;
    if (ignoreCase) {
      tmp_0 = true;
    } else {
      tmp_0 = !(typeof _this__u8e3s4 === 'string');
    }
    if (tmp_0) {
      tmp = indexOf_3(_this__u8e3s4, string, startIndex, 0, ignoreCase, true);
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.text.nativeLastIndexOf' call
      var tmp0_nativeLastIndexOf = _this__u8e3s4;
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = tmp0_nativeLastIndexOf;
      tmp$ret$1 = tmp$ret$0.lastIndexOf(string, startIndex);
      tmp = tmp$ret$1;
    }
    return tmp;
  }
  function lastIndexOf$default(_this__u8e3s4, string, startIndex, ignoreCase, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      startIndex = get_lastIndex_1(_this__u8e3s4);
    if (!(($mask0 & 4) === 0))
      ignoreCase = false;
    return lastIndexOf_0(_this__u8e3s4, string, startIndex, ignoreCase);
  }
  function substringAfter(_this__u8e3s4, delimiter, missingDelimiterValue) {
    var index = indexOf$default(_this__u8e3s4, delimiter, 0, false, 6, null);
    var tmp;
    if (index === -1) {
      tmp = missingDelimiterValue;
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.text.substring' call
      var tmp0_substring = index + 1 | 0;
      var tmp1_substring = _this__u8e3s4.length;
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = _this__u8e3s4;
      tmp$ret$1 = tmp$ret$0.substring(tmp0_substring, tmp1_substring);
      tmp = tmp$ret$1;
    }
    return tmp;
  }
  function substringAfter$default(_this__u8e3s4, delimiter, missingDelimiterValue, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      missingDelimiterValue = _this__u8e3s4;
    return substringAfter(_this__u8e3s4, delimiter, missingDelimiterValue);
  }
  function split_1(_this__u8e3s4, delimiters, ignoreCase, limit) {
    if (delimiters.length === 1) {
      var delimiter = delimiters[0];
      var tmp$ret$0;
      // Inline function 'kotlin.text.isEmpty' call
      tmp$ret$0 = charSequenceLength(delimiter) === 0;
      if (!tmp$ret$0) {
        return split_0(_this__u8e3s4, delimiter, ignoreCase, limit);
      }
    }
    var tmp$ret$3;
    // Inline function 'kotlin.collections.map' call
    var tmp0_map = asIterable(rangesDelimitedBy$default_0(_this__u8e3s4, delimiters, 0, ignoreCase, limit, 2, null));
    var tmp$ret$2;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$_0(collectionSizeOrDefault(tmp0_map, 10));
    var tmp0_iterator = tmp0_map.d();
    while (tmp0_iterator.e()) {
      var item = tmp0_iterator.f();
      var tmp$ret$1;
      // Inline function 'kotlin.text.split.<anonymous>' call
      tmp$ret$1 = substring(_this__u8e3s4, item);
      tmp0_mapTo.b(tmp$ret$1);
    }
    tmp$ret$2 = tmp0_mapTo;
    tmp$ret$3 = tmp$ret$2;
    return tmp$ret$3;
  }
  function split$default_0(_this__u8e3s4, delimiters, ignoreCase, limit, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      ignoreCase = false;
    if (!(($mask0 & 4) === 0))
      limit = 0;
    return split_1(_this__u8e3s4, delimiters, ignoreCase, limit);
  }
  function contains_3(_this__u8e3s4, other, ignoreCase) {
    var tmp;
    if (typeof other === 'string') {
      tmp = indexOf$default_0(_this__u8e3s4, other, 0, ignoreCase, 2, null) >= 0;
    } else {
      var tmp_0 = charSequenceLength(_this__u8e3s4);
      tmp = indexOf$default_1(_this__u8e3s4, other, 0, tmp_0, ignoreCase, false, 16, null) >= 0;
    }
    return tmp;
  }
  function contains$default_0(_this__u8e3s4, other, ignoreCase, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      ignoreCase = false;
    return contains_3(_this__u8e3s4, other, ignoreCase);
  }
  function rangesDelimitedBy$lambda($delimiters, $ignoreCase) {
    return function ($this$$receiver, currentIndex) {
      var tmp$ret$1;
      // Inline function 'kotlin.let' call
      var tmp0_let = indexOfAny($this$$receiver, $delimiters, currentIndex, $ignoreCase);
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'kotlin.text.rangesDelimitedBy.<anonymous>.<anonymous>' call
      tmp$ret$0 = tmp0_let < 0 ? null : to(tmp0_let, 1);
      tmp$ret$1 = tmp$ret$0;
      return tmp$ret$1;
    };
  }
  function splitToSequence$lambda($this_splitToSequence) {
    return function (it) {
      return substring($this_splitToSequence, it);
    };
  }
  function rangesDelimitedBy$lambda_0($delimitersList, $ignoreCase) {
    return function ($this$$receiver, currentIndex) {
      var tmp0_safe_receiver = findAnyOf($this$$receiver, $delimitersList, currentIndex, $ignoreCase, false);
      var tmp;
      if (tmp0_safe_receiver == null) {
        tmp = null;
      } else {
        var tmp$ret$1;
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        var tmp$ret$0;
        // Inline function 'kotlin.text.rangesDelimitedBy.<anonymous>.<anonymous>' call
        tmp$ret$0 = to(tmp0_safe_receiver.k_1, tmp0_safe_receiver.l_1.length);
        tmp$ret$1 = tmp$ret$0;
        tmp = tmp$ret$1;
      }
      return tmp;
    };
  }
  function _Duration___init__impl__kdtzql(rawValue) {
    var tmp$ret$0;
    // Inline function 'kotlin.time.durationAssertionsEnabled' call
    tmp$ret$0 = true;
    if (tmp$ret$0) {
      if (isInNanos(rawValue)) {
        var containsLower = new Long(387905, -1073741824);
        var containsUpper = new Long(-387905, 1073741823);
        var containsArg = _get_value__a43j40(rawValue);
        if (!(containsLower.b1(containsArg) <= 0 ? containsArg.b1(containsUpper) <= 0 : false))
          throw AssertionError_init_$Create$(toString_2(_get_value__a43j40(rawValue)) + ' ns is out of nanoseconds range');
      } else {
        var containsLower_0 = new Long(1, -1073741824);
        var containsUpper_0 = new Long(-1, 1073741823);
        var containsArg_0 = _get_value__a43j40(rawValue);
        if (!(containsLower_0.b1(containsArg_0) <= 0 ? containsArg_0.b1(containsUpper_0) <= 0 : false))
          throw AssertionError_init_$Create$(toString_2(_get_value__a43j40(rawValue)) + ' ms is out of milliseconds range');
        var containsLower_1 = new Long(1108857478, -1074);
        var containsUpper_1 = new Long(-1108857478, 1073);
        var containsArg_1 = _get_value__a43j40(rawValue);
        if (containsLower_1.b1(containsArg_1) <= 0 ? containsArg_1.b1(containsUpper_1) <= 0 : false)
          throw AssertionError_init_$Create$(toString_2(_get_value__a43j40(rawValue)) + ' ms is denormalized');
      }
    }
    return rawValue;
  }
  function _get_rawValue__5zfu4e($this) {
    return $this;
  }
  function _get_value__a43j40($this) {
    return _get_rawValue__5zfu4e($this).p5(1);
  }
  function isInNanos($this) {
    var tmp$ret$0;
    // Inline function 'kotlin.time.Duration.unitDiscriminator' call
    tmp$ret$0 = _get_rawValue__5zfu4e($this).q5() & 1;
    return tmp$ret$0 === 0;
  }
  function _Duration___get_inWholeNanoseconds__impl__r5x4mr($this) {
    var value = _get_value__a43j40($this);
    var tmp;
    if (isInNanos($this)) {
      tmp = value;
    } else {
      var tmp$ret$0;
      // Inline function 'kotlin.Long.div' call
      Companion_getInstance_7();
      var tmp0_div = new Long(-1, 2147483647);
      var tmp1_div = 1000000;
      tmp$ret$0 = tmp0_div.r5(toLong(tmp1_div));
      if (value.b1(tmp$ret$0) > 0) {
        Companion_getInstance_7();
        tmp = new Long(-1, 2147483647);
      } else {
        var tmp$ret$1;
        // Inline function 'kotlin.Long.div' call
        Companion_getInstance_7();
        var tmp2_div = new Long(0, -2147483648);
        var tmp3_div = 1000000;
        tmp$ret$1 = tmp2_div.r5(toLong(tmp3_div));
        if (value.b1(tmp$ret$1) < 0) {
          Companion_getInstance_7();
          tmp = new Long(0, -2147483648);
        } else {
          tmp = millisToNanos(value);
        }
      }
    }
    return tmp;
  }
  function Duration__toLongNanoseconds_impl_xyxob7($this) {
    return _Duration___get_inWholeNanoseconds__impl__r5x4mr($this);
  }
  function toDuration(_this__u8e3s4, unit) {
    var valueInNs = convertDurationUnit(_this__u8e3s4, unit, DurationUnit_NANOSECONDS_getInstance());
    // Inline function 'kotlin.require' call
    var tmp0_require = !isNaN_0(valueInNs);
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'kotlin.time.toDuration.<anonymous>' call
      tmp$ret$0 = 'Duration value cannot be NaN.';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString_2(message));
    }
    var nanos = roundToLong(valueInNs);
    var tmp;
    var containsLower = new Long(387905, -1073741824);
    if (nanos.b1(new Long(-387905, 1073741823)) <= 0 ? containsLower.b1(nanos) <= 0 : false) {
      tmp = durationOfNanos(nanos);
    } else {
      var millis = roundToLong(convertDurationUnit(_this__u8e3s4, unit, DurationUnit_MILLISECONDS_getInstance()));
      tmp = durationOfMillisNormalized(millis);
    }
    return tmp;
  }
  function durationOfMillis(normalMillis) {
    var tmp$ret$0;
    // Inline function 'kotlin.Long.plus' call
    var tmp0_plus = normalMillis.s5(1);
    tmp$ret$0 = tmp0_plus.t5(new Long(1, 0));
    return _Duration___init__impl__kdtzql(tmp$ret$0);
  }
  function durationOfMillisNormalized(millis) {
    var tmp;
    var containsLower = new Long(1108857478, -1074);
    if (millis.b1(new Long(-1108857478, 1073)) <= 0 ? containsLower.b1(millis) <= 0 : false) {
      tmp = durationOfNanos(millisToNanos(millis));
    } else {
      tmp = durationOfMillis(coerceIn(millis, new Long(1, -1073741824), new Long(-1, 1073741823)));
    }
    return tmp;
  }
  function millisToNanos(millis) {
    var tmp$ret$0;
    // Inline function 'kotlin.Long.times' call
    var tmp0_times = 1000000;
    tmp$ret$0 = millis.u5(toLong(tmp0_times));
    return tmp$ret$0;
  }
  function durationOfNanos(normalNanos) {
    return _Duration___init__impl__kdtzql(normalNanos.s5(1));
  }
  function hashCode(_this__u8e3s4) {
    var tmp0_safe_receiver = _this__u8e3s4;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode_0(tmp0_safe_receiver);
    return tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
  }
  function getValue_0(_this__u8e3s4, thisRef, property) {
    return _this__u8e3s4.a2();
  }
  function Lazy() {
  }
  Lazy.$metadata$ = interfaceMeta('Lazy');
  function UnsafeLazyImpl(initializer) {
    this.v5_1 = initializer;
    this.w5_1 = UNINITIALIZED_VALUE_getInstance();
  }
  UnsafeLazyImpl.prototype.a2 = function () {
    if (this.w5_1 === UNINITIALIZED_VALUE_getInstance()) {
      this.w5_1 = ensureNotNull(this.v5_1)();
      this.v5_1 = null;
    }
    var tmp = this.w5_1;
    return (tmp == null ? true : isObject(tmp)) ? tmp : THROW_CCE();
  };
  UnsafeLazyImpl.prototype.x5 = function () {
    return !(this.w5_1 === UNINITIALIZED_VALUE_getInstance());
  };
  UnsafeLazyImpl.prototype.toString = function () {
    return this.x5() ? toString_1(this.a2()) : 'Lazy value not initialized yet.';
  };
  UnsafeLazyImpl.$metadata$ = classMeta('UnsafeLazyImpl', [Lazy, Serializable]);
  function UNINITIALIZED_VALUE() {
    UNINITIALIZED_VALUE_instance = this;
  }
  UNINITIALIZED_VALUE.$metadata$ = objectMeta('UNINITIALIZED_VALUE');
  var UNINITIALIZED_VALUE_instance;
  function UNINITIALIZED_VALUE_getInstance() {
    if (UNINITIALIZED_VALUE_instance == null)
      new UNINITIALIZED_VALUE();
    return UNINITIALIZED_VALUE_instance;
  }
  function error(message) {
    throw IllegalStateException_init_$Create$_0(toString_2(message));
  }
  function check(value) {
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.check' call
    // Inline function 'kotlin.contracts.contract' call
    if (!value) {
      var tmp$ret$0;
      // Inline function 'kotlin.check.<anonymous>' call
      tmp$ret$0 = 'Check failed.';
      var message = tmp$ret$0;
      throw IllegalStateException_init_$Create$_0(toString_2(message));
    }
  }
  function check_0(value, lazyMessage) {
    // Inline function 'kotlin.contracts.contract' call
    if (!value) {
      var message = lazyMessage();
      throw IllegalStateException_init_$Create$_0(toString_2(message));
    }
  }
  function require_0(value) {
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!value) {
      var tmp$ret$0;
      // Inline function 'kotlin.require.<anonymous>' call
      tmp$ret$0 = 'Failed requirement.';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString_2(message));
    }
  }
  function require_1(value, lazyMessage) {
    // Inline function 'kotlin.contracts.contract' call
    if (!value) {
      var message = lazyMessage();
      throw IllegalArgumentException_init_$Create$(toString_2(message));
    }
  }
  function checkNotNull(value) {
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.checkNotNull' call
      // Inline function 'kotlin.contracts.contract' call
      if (value == null) {
        var tmp$ret$0;
        // Inline function 'kotlin.checkNotNull.<anonymous>' call
        tmp$ret$0 = 'Required value was null.';
        var message = tmp$ret$0;
        throw IllegalStateException_init_$Create$_0(toString_2(message));
      } else {
        tmp$ret$1 = value;
        break $l$block;
      }
    }
    return tmp$ret$1;
  }
  function checkNotNull_0(value, lazyMessage) {
    // Inline function 'kotlin.contracts.contract' call
    if (value == null) {
      var message = lazyMessage();
      throw IllegalStateException_init_$Create$_0(toString_2(message));
    } else {
      return value;
    }
  }
  function _Result___init__impl__xyqfz8(value) {
    return value;
  }
  function _Result___get_value__impl__bjfvqg($this) {
    return $this;
  }
  function _Result___get_isFailure__impl__jpiriv($this) {
    var tmp = _Result___get_value__impl__bjfvqg($this);
    return tmp instanceof Failure;
  }
  function Result__getOrNull_impl_x6tyqe($this) {
    var tmp;
    if (_Result___get_isFailure__impl__jpiriv($this)) {
      tmp = null;
    } else {
      var tmp_0 = _Result___get_value__impl__bjfvqg($this);
      tmp = (tmp_0 == null ? true : isObject(tmp_0)) ? tmp_0 : THROW_CCE();
    }
    return tmp;
  }
  function Result__exceptionOrNull_impl_p6xea9($this) {
    var tmp0_subject = _Result___get_value__impl__bjfvqg($this);
    var tmp;
    if (tmp0_subject instanceof Failure) {
      tmp = _Result___get_value__impl__bjfvqg($this).y5_1;
    } else {
      tmp = null;
    }
    return tmp;
  }
  function Result__toString_impl_yu5r8k($this) {
    var tmp0_subject = _Result___get_value__impl__bjfvqg($this);
    var tmp;
    if (tmp0_subject instanceof Failure) {
      tmp = toString_2(_Result___get_value__impl__bjfvqg($this));
    } else {
      tmp = 'Success(' + toString_1(_Result___get_value__impl__bjfvqg($this)) + ')';
    }
    return tmp;
  }
  function Companion_4() {
    Companion_instance_4 = this;
  }
  Companion_4.prototype.z5 = function (value) {
    return _Result___init__impl__xyqfz8(value);
  };
  Companion_4.prototype.a6 = function (exception) {
    return _Result___init__impl__xyqfz8(createFailure(exception));
  };
  Companion_4.$metadata$ = objectMeta('Companion');
  var Companion_instance_4;
  function Companion_getInstance_4() {
    if (Companion_instance_4 == null)
      new Companion_4();
    return Companion_instance_4;
  }
  function Failure(exception) {
    this.y5_1 = exception;
  }
  Failure.prototype.equals = function (other) {
    var tmp;
    if (other instanceof Failure) {
      tmp = equals_0(this.y5_1, other.y5_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  Failure.prototype.hashCode = function () {
    return hashCode_0(this.y5_1);
  };
  Failure.prototype.toString = function () {
    return 'Failure(' + this.y5_1 + ')';
  };
  Failure.$metadata$ = classMeta('Failure', [Serializable]);
  function Result__hashCode_impl_d2zufp($this) {
    return $this == null ? 0 : hashCode_0($this);
  }
  function Result__equals_impl_bxgmep($this, other) {
    if (!(other instanceof Result))
      return false;
    var tmp0_other_with_cast = other instanceof Result ? other.b6_1 : THROW_CCE();
    if (!equals_0($this, tmp0_other_with_cast))
      return false;
    return true;
  }
  function Result(value) {
    Companion_getInstance_4();
    this.b6_1 = value;
  }
  Result.prototype.toString = function () {
    return Result__toString_impl_yu5r8k(this.b6_1);
  };
  Result.prototype.hashCode = function () {
    return Result__hashCode_impl_d2zufp(this.b6_1);
  };
  Result.prototype.equals = function (other) {
    return Result__equals_impl_bxgmep(this.b6_1, other);
  };
  Result.$metadata$ = classMeta('Result', [Serializable]);
  function createFailure(exception) {
    return new Failure(exception);
  }
  function getOrThrow(_this__u8e3s4) {
    throwOnFailure(_this__u8e3s4);
    var tmp = _Result___get_value__impl__bjfvqg(_this__u8e3s4);
    return (tmp == null ? true : isObject(tmp)) ? tmp : THROW_CCE();
  }
  function throwOnFailure(_this__u8e3s4) {
    var tmp = _Result___get_value__impl__bjfvqg(_this__u8e3s4);
    if (tmp instanceof Failure)
      throw _Result___get_value__impl__bjfvqg(_this__u8e3s4).y5_1;
  }
  function runCatching(_this__u8e3s4, block) {
    var tmp;
    try {
      var tmp$ret$0;
      // Inline function 'kotlin.Companion.success' call
      var tmp0_success = Companion_getInstance_4();
      var tmp1_success = block(_this__u8e3s4);
      tmp$ret$0 = _Result___init__impl__xyqfz8(tmp1_success);
      tmp = tmp$ret$0;
    } catch ($p) {
      var tmp_0;
      if ($p instanceof Error) {
        var tmp$ret$1;
        // Inline function 'kotlin.Companion.failure' call
        var tmp2_failure = Companion_getInstance_4();
        tmp$ret$1 = _Result___init__impl__xyqfz8(createFailure($p));
        tmp_0 = tmp$ret$1;
      } else {
        throw $p;
      }
      tmp = tmp_0;
    }
    return tmp;
  }
  function fold_2(_this__u8e3s4, onSuccess, onFailure) {
    // Inline function 'kotlin.contracts.contract' call
    var exception = Result__exceptionOrNull_impl_p6xea9(_this__u8e3s4);
    var tmp;
    if (exception == null) {
      var tmp_0 = _Result___get_value__impl__bjfvqg(_this__u8e3s4);
      tmp = onSuccess((tmp_0 == null ? true : isObject(tmp_0)) ? tmp_0 : THROW_CCE());
    } else {
      tmp = onFailure(exception);
    }
    return tmp;
  }
  function run(block) {
    // Inline function 'kotlin.contracts.contract' call
    return block();
  }
  function NotImplementedError(message) {
    Error_init_$Init$(message, this);
    captureStack(this, NotImplementedError);
  }
  NotImplementedError.$metadata$ = classMeta('NotImplementedError', undefined, undefined, undefined, undefined, Error_0.prototype);
  function let_0(_this__u8e3s4, block) {
    // Inline function 'kotlin.contracts.contract' call
    return block(_this__u8e3s4);
  }
  function apply(_this__u8e3s4, block) {
    // Inline function 'kotlin.contracts.contract' call
    block(_this__u8e3s4);
    return _this__u8e3s4;
  }
  function run_0(_this__u8e3s4, block) {
    // Inline function 'kotlin.contracts.contract' call
    return block(_this__u8e3s4);
  }
  function also(_this__u8e3s4, block) {
    // Inline function 'kotlin.contracts.contract' call
    block(_this__u8e3s4);
    return _this__u8e3s4;
  }
  function takeIf(_this__u8e3s4, predicate) {
    // Inline function 'kotlin.contracts.contract' call
    return predicate(_this__u8e3s4) ? _this__u8e3s4 : null;
  }
  function with_0(receiver, block) {
    // Inline function 'kotlin.contracts.contract' call
    return block(receiver);
  }
  function repeat(times, action) {
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    if (inductionVariable < times)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        action(index);
      }
       while (inductionVariable < times);
  }
  function Pair(first, second) {
    this.k_1 = first;
    this.l_1 = second;
  }
  Pair.prototype.c6 = function () {
    return this.k_1;
  };
  Pair.prototype.d6 = function () {
    return this.l_1;
  };
  Pair.prototype.toString = function () {
    return '(' + this.k_1 + ', ' + this.l_1 + ')';
  };
  Pair.prototype.a3 = function () {
    return this.k_1;
  };
  Pair.prototype.b3 = function () {
    return this.l_1;
  };
  Pair.prototype.hashCode = function () {
    var result = this.k_1 == null ? 0 : hashCode_0(this.k_1);
    result = imul(result, 31) + (this.l_1 == null ? 0 : hashCode_0(this.l_1)) | 0;
    return result;
  };
  Pair.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Pair))
      return false;
    var tmp0_other_with_cast = other instanceof Pair ? other : THROW_CCE();
    if (!equals_0(this.k_1, tmp0_other_with_cast.k_1))
      return false;
    if (!equals_0(this.l_1, tmp0_other_with_cast.l_1))
      return false;
    return true;
  };
  Pair.$metadata$ = classMeta('Pair', [Serializable]);
  function to(_this__u8e3s4, that) {
    return new Pair(_this__u8e3s4, that);
  }
  function _UShort___init__impl__jigrne(data) {
    return data;
  }
  function _UShort___get_data__impl__g0245($this) {
    return $this;
  }
  function UShort__toInt_impl_72bkww($this) {
    return _UShort___get_data__impl__g0245($this) & 65535;
  }
  function toUShort(_this__u8e3s4) {
    return _UShort___init__impl__jigrne(toShort(_this__u8e3s4));
  }
  function CharSequence() {
  }
  CharSequence.$metadata$ = interfaceMeta('CharSequence');
  function Comparable() {
  }
  Comparable.$metadata$ = interfaceMeta('Comparable');
  function Iterator() {
  }
  Iterator.$metadata$ = interfaceMeta('Iterator');
  function MutableIterator() {
  }
  MutableIterator.$metadata$ = interfaceMeta('MutableIterator', [Iterator]);
  function ListIterator() {
  }
  ListIterator.$metadata$ = interfaceMeta('ListIterator', [Iterator]);
  function MutableListIterator() {
  }
  MutableListIterator.$metadata$ = interfaceMeta('MutableListIterator', [ListIterator, MutableIterator]);
  function Number_0() {
  }
  Number_0.$metadata$ = classMeta('Number');
  function Unit() {
    Unit_instance = this;
  }
  Unit.prototype.toString = function () {
    return 'kotlin.Unit';
  };
  Unit.$metadata$ = objectMeta('Unit');
  var Unit_instance;
  function Unit_getInstance() {
    if (Unit_instance == null)
      new Unit();
    return Unit_instance;
  }
  function IntCompanionObject() {
    IntCompanionObject_instance = this;
    this.v_1 = -2147483648;
    this.w_1 = 2147483647;
    this.x_1 = 4;
    this.y_1 = 32;
  }
  IntCompanionObject.prototype.i6 = function () {
    return this.v_1;
  };
  IntCompanionObject.prototype.j6 = function () {
    return this.w_1;
  };
  IntCompanionObject.prototype.k6 = function () {
    return this.x_1;
  };
  IntCompanionObject.prototype.l6 = function () {
    return this.y_1;
  };
  IntCompanionObject.$metadata$ = objectMeta('IntCompanionObject');
  Object.defineProperty(IntCompanionObject.prototype, 'MIN_VALUE', {
    configurable: true,
    get: IntCompanionObject.prototype.i6
  });
  Object.defineProperty(IntCompanionObject.prototype, 'MAX_VALUE', {
    configurable: true,
    get: IntCompanionObject.prototype.j6
  });
  Object.defineProperty(IntCompanionObject.prototype, 'SIZE_BYTES', {
    configurable: true,
    get: IntCompanionObject.prototype.k6
  });
  Object.defineProperty(IntCompanionObject.prototype, 'SIZE_BITS', {
    configurable: true,
    get: IntCompanionObject.prototype.l6
  });
  var IntCompanionObject_instance;
  function IntCompanionObject_getInstance() {
    if (IntCompanionObject_instance == null)
      new IntCompanionObject();
    return IntCompanionObject_instance;
  }
  function Comparator() {
  }
  Comparator.$metadata$ = interfaceMeta('Comparator');
  function listOf_0(element) {
    return arrayListOf_0([element]);
  }
  function toTypedArray(_this__u8e3s4) {
    return copyToArray(_this__u8e3s4);
  }
  function mapOf_0(pair) {
    return hashMapOf_0([pair]);
  }
  function sortWith(_this__u8e3s4, comparator) {
    collectionsSort(_this__u8e3s4, comparator);
  }
  function mapCapacity(expectedSize) {
    return expectedSize;
  }
  function checkIndexOverflow(index) {
    if (index < 0) {
      throwIndexOverflow();
    }
    return index;
  }
  function arrayCopy(source, destination, destinationOffset, startIndex, endIndex) {
    Companion_getInstance().t1(startIndex, endIndex, source.length);
    var rangeSize = endIndex - startIndex | 0;
    Companion_getInstance().t1(destinationOffset, destinationOffset + rangeSize | 0, destination.length);
    if (isView(destination) ? isView(source) : false) {
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = source;
      var subrange = tmp$ret$0.subarray(startIndex, endIndex);
      var tmp$ret$1;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$1 = destination;
      tmp$ret$1.set(subrange, destinationOffset);
    } else {
      if (!(source === destination) ? true : destinationOffset <= startIndex) {
        var inductionVariable = 0;
        if (inductionVariable < rangeSize)
          do {
            var index = inductionVariable;
            inductionVariable = inductionVariable + 1 | 0;
            destination[destinationOffset + index | 0] = source[startIndex + index | 0];
          }
           while (inductionVariable < rangeSize);
      } else {
        var inductionVariable_0 = rangeSize - 1 | 0;
        if (0 <= inductionVariable_0)
          do {
            var index_0 = inductionVariable_0;
            inductionVariable_0 = inductionVariable_0 + -1 | 0;
            destination[destinationOffset + index_0 | 0] = source[startIndex + index_0 | 0];
          }
           while (0 <= inductionVariable_0);
      }
    }
  }
  function copyToArray(collection) {
    var tmp;
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = collection;
    if (tmp$ret$0.toArray !== undefined) {
      var tmp$ret$2;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$1;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$1 = collection;
      var tmp0_unsafeCast = tmp$ret$1.toArray();
      tmp$ret$2 = tmp0_unsafeCast;
      tmp = tmp$ret$2;
    } else {
      var tmp$ret$4;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp1_unsafeCast = copyToArrayImpl(collection);
      var tmp$ret$3;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$3 = tmp1_unsafeCast;
      tmp$ret$4 = tmp$ret$3;
      tmp = tmp$ret$4;
    }
    return tmp;
  }
  function collectionsSort(list, comparator) {
    if (list.g() <= 1)
      return Unit_getInstance();
    var array = copyToArray(list);
    sortArrayWith(array, comparator);
    var inductionVariable = 0;
    var last = array.length;
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        list.m6(i, array[i]);
      }
       while (inductionVariable < last);
  }
  function copyToArrayImpl(collection) {
    var tmp$ret$0;
    // Inline function 'kotlin.emptyArray' call
    tmp$ret$0 = [];
    var array = tmp$ret$0;
    var iterator = collection.d();
    while (iterator.e()) {
      var tmp$ret$1;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$1 = array;
      tmp$ret$1.push(iterator.f());
    }
    return array;
  }
  function AbstractMutableCollection$removeAll$lambda($elements) {
    return function (it) {
      return $elements.j(it);
    };
  }
  function AbstractMutableCollection() {
    AbstractCollection.call(this);
  }
  AbstractMutableCollection.prototype.n6 = function (element) {
    this.o6();
    var iterator = this.d();
    while (iterator.e()) {
      if (equals_0(iterator.f(), element)) {
        iterator.g3();
        return true;
      }
    }
    return false;
  };
  AbstractMutableCollection.prototype.h1 = function (elements) {
    this.o6();
    var modified = false;
    var tmp0_iterator = elements.d();
    while (tmp0_iterator.e()) {
      var element = tmp0_iterator.f();
      if (this.b(element))
        modified = true;
    }
    return modified;
  };
  AbstractMutableCollection.prototype.p6 = function (elements) {
    this.o6();
    var tmp = isInterface(this, MutableIterable) ? this : THROW_CCE();
    return removeAll(tmp, AbstractMutableCollection$removeAll$lambda(elements));
  };
  AbstractMutableCollection.prototype.q6 = function () {
    this.o6();
    var iterator = this.d();
    while (iterator.e()) {
      iterator.f();
      iterator.g3();
    }
  };
  AbstractMutableCollection.prototype.toJSON = function () {
    return this.toArray();
  };
  AbstractMutableCollection.prototype.o6 = function () {
  };
  AbstractMutableCollection.$metadata$ = classMeta('AbstractMutableCollection', [MutableCollection], undefined, undefined, undefined, AbstractCollection.prototype);
  function IteratorImpl_0($outer) {
    this.t6_1 = $outer;
    this.r6_1 = 0;
    this.s6_1 = -1;
  }
  IteratorImpl_0.prototype.e = function () {
    return this.r6_1 < this.t6_1.g();
  };
  IteratorImpl_0.prototype.f = function () {
    if (!this.e())
      throw NoSuchElementException_init_$Create$();
    var tmp = this;
    var tmp0_this = this;
    var tmp1 = tmp0_this.r6_1;
    tmp0_this.r6_1 = tmp1 + 1 | 0;
    tmp.s6_1 = tmp1;
    return this.t6_1.h(this.s6_1);
  };
  IteratorImpl_0.prototype.g3 = function () {
    // Inline function 'kotlin.check' call
    var tmp0_check = !(this.s6_1 === -1);
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_check) {
      var tmp$ret$0;
      // Inline function 'kotlin.collections.IteratorImpl.remove.<anonymous>' call
      tmp$ret$0 = 'Call next() or previous() before removing element from the iterator.';
      var message = tmp$ret$0;
      throw IllegalStateException_init_$Create$_0(toString_2(message));
    }
    this.t6_1.f3(this.s6_1);
    this.r6_1 = this.s6_1;
    this.s6_1 = -1;
  };
  IteratorImpl_0.$metadata$ = classMeta('IteratorImpl', [MutableIterator]);
  function ListIteratorImpl_0($outer, index) {
    this.y6_1 = $outer;
    IteratorImpl_0.call(this, $outer);
    Companion_getInstance().r1(index, this.y6_1.g());
    this.r6_1 = index;
  }
  ListIteratorImpl_0.prototype.o = function () {
    return this.r6_1 > 0;
  };
  ListIteratorImpl_0.prototype.p = function () {
    return this.r6_1;
  };
  ListIteratorImpl_0.prototype.q = function () {
    if (!this.o())
      throw NoSuchElementException_init_$Create$();
    var tmp = this;
    var tmp0_this = this;
    tmp0_this.r6_1 = tmp0_this.r6_1 - 1 | 0;
    tmp.s6_1 = tmp0_this.r6_1;
    return this.y6_1.h(this.s6_1);
  };
  ListIteratorImpl_0.$metadata$ = classMeta('ListIteratorImpl', [MutableListIterator], undefined, undefined, undefined, IteratorImpl_0.prototype);
  function SubList(list, fromIndex, toIndex) {
    AbstractMutableList.call(this);
    this.a7_1 = list;
    this.b7_1 = fromIndex;
    this.c7_1 = 0;
    Companion_getInstance().t1(this.b7_1, toIndex, this.a7_1.g());
    this.c7_1 = toIndex - this.b7_1 | 0;
  }
  SubList.prototype.d7 = function (index, element) {
    Companion_getInstance().r1(index, this.c7_1);
    this.a7_1.d7(this.b7_1 + index | 0, element);
    var tmp0_this = this;
    var tmp1 = tmp0_this.c7_1;
    tmp0_this.c7_1 = tmp1 + 1 | 0;
  };
  SubList.prototype.h = function (index) {
    Companion_getInstance().s1(index, this.c7_1);
    return this.a7_1.h(this.b7_1 + index | 0);
  };
  SubList.prototype.f3 = function (index) {
    Companion_getInstance().s1(index, this.c7_1);
    var result = this.a7_1.f3(this.b7_1 + index | 0);
    var tmp0_this = this;
    var tmp1 = tmp0_this.c7_1;
    tmp0_this.c7_1 = tmp1 - 1 | 0;
    return result;
  };
  SubList.prototype.m6 = function (index, element) {
    Companion_getInstance().s1(index, this.c7_1);
    return this.a7_1.m6(this.b7_1 + index | 0, element);
  };
  SubList.prototype.g = function () {
    return this.c7_1;
  };
  SubList.prototype.o6 = function () {
    return this.a7_1.o6();
  };
  SubList.$metadata$ = classMeta('SubList', [RandomAccess], undefined, undefined, undefined, AbstractMutableList.prototype);
  function AbstractMutableList() {
    AbstractMutableCollection.call(this);
    this.u6_1 = 0;
  }
  AbstractMutableList.prototype.b = function (element) {
    this.o6();
    this.d7(this.g(), element);
    return true;
  };
  AbstractMutableList.prototype.q6 = function () {
    this.o6();
    this.e7(0, this.g());
  };
  AbstractMutableList.prototype.d = function () {
    return new IteratorImpl_0(this);
  };
  AbstractMutableList.prototype.j = function (element) {
    return this.m(element) >= 0;
  };
  AbstractMutableList.prototype.m = function (element) {
    var inductionVariable = 0;
    var last = get_lastIndex_0(this);
    if (inductionVariable <= last)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (equals_0(this.h(index), element)) {
          return index;
        }
      }
       while (!(index === last));
    return -1;
  };
  AbstractMutableList.prototype.w1 = function (element) {
    var inductionVariable = get_lastIndex_0(this);
    if (0 <= inductionVariable)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + -1 | 0;
        if (equals_0(this.h(index), element)) {
          return index;
        }
      }
       while (0 <= inductionVariable);
    return -1;
  };
  AbstractMutableList.prototype.n = function (index) {
    return new ListIteratorImpl_0(this, index);
  };
  AbstractMutableList.prototype.f7 = function (fromIndex, toIndex) {
    return new SubList(this, fromIndex, toIndex);
  };
  AbstractMutableList.prototype.e7 = function (fromIndex, toIndex) {
    var iterator = this.n(fromIndex);
    // Inline function 'kotlin.repeat' call
    var tmp0_repeat = toIndex - fromIndex | 0;
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    if (inductionVariable < tmp0_repeat)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.collections.AbstractMutableList.removeRange.<anonymous>' call
        iterator.f();
        iterator.g3();
      }
       while (inductionVariable < tmp0_repeat);
  };
  AbstractMutableList.prototype.equals = function (other) {
    if (other === this)
      return true;
    if (!(!(other == null) ? isInterface(other, List) : false))
      return false;
    return Companion_getInstance().v1(this, other);
  };
  AbstractMutableList.prototype.hashCode = function () {
    return Companion_getInstance().u1(this);
  };
  AbstractMutableList.$metadata$ = classMeta('AbstractMutableList', [MutableList], undefined, undefined, undefined, AbstractMutableCollection.prototype);
  function AbstractMutableMap$keys$1$iterator$1($entryIterator) {
    this.g7_1 = $entryIterator;
  }
  AbstractMutableMap$keys$1$iterator$1.prototype.e = function () {
    return this.g7_1.e();
  };
  AbstractMutableMap$keys$1$iterator$1.prototype.f = function () {
    return this.g7_1.f().y1();
  };
  AbstractMutableMap$keys$1$iterator$1.prototype.g3 = function () {
    return this.g7_1.g3();
  };
  AbstractMutableMap$keys$1$iterator$1.$metadata$ = classMeta(undefined, [MutableIterator]);
  function AbstractMutableMap$values$1$iterator$1($entryIterator) {
    this.h7_1 = $entryIterator;
  }
  AbstractMutableMap$values$1$iterator$1.prototype.e = function () {
    return this.h7_1.e();
  };
  AbstractMutableMap$values$1$iterator$1.prototype.f = function () {
    return this.h7_1.f().a2();
  };
  AbstractMutableMap$values$1$iterator$1.prototype.g3 = function () {
    return this.h7_1.g3();
  };
  AbstractMutableMap$values$1$iterator$1.$metadata$ = classMeta(undefined, [MutableIterator]);
  function SimpleEntry(key, value) {
    this.i7_1 = key;
    this.j7_1 = value;
  }
  SimpleEntry.prototype.y1 = function () {
    return this.i7_1;
  };
  SimpleEntry.prototype.a2 = function () {
    return this.j7_1;
  };
  SimpleEntry.prototype.k7 = function (newValue) {
    var oldValue = this.j7_1;
    this.j7_1 = newValue;
    return oldValue;
  };
  SimpleEntry.prototype.hashCode = function () {
    return Companion_getInstance_0().z1(this);
  };
  SimpleEntry.prototype.toString = function () {
    return Companion_getInstance_0().b2(this);
  };
  SimpleEntry.prototype.equals = function (other) {
    return Companion_getInstance_0().c2(this, other);
  };
  SimpleEntry.$metadata$ = classMeta('SimpleEntry', [MutableEntry]);
  function AbstractEntrySet() {
    AbstractMutableSet.call(this);
  }
  AbstractEntrySet.prototype.j = function (element) {
    return this.l7(element);
  };
  AbstractEntrySet.prototype.n6 = function (element) {
    return this.m7(element);
  };
  AbstractEntrySet.$metadata$ = classMeta('AbstractEntrySet', undefined, undefined, undefined, undefined, AbstractMutableSet.prototype);
  function AbstractMutableMap$keys$1(this$0) {
    this.n7_1 = this$0;
    AbstractMutableSet.call(this);
  }
  AbstractMutableMap$keys$1.prototype.o7 = function (element) {
    throw UnsupportedOperationException_init_$Create$_0('Add is not supported on keys');
  };
  AbstractMutableMap$keys$1.prototype.b = function (element) {
    return this.o7((element == null ? true : isObject(element)) ? element : THROW_CCE());
  };
  AbstractMutableMap$keys$1.prototype.q6 = function () {
    this.n7_1.q6();
  };
  AbstractMutableMap$keys$1.prototype.e2 = function (element) {
    return this.n7_1.h2(element);
  };
  AbstractMutableMap$keys$1.prototype.j = function (element) {
    if (!(element == null ? true : isObject(element)))
      return false;
    return this.e2((element == null ? true : isObject(element)) ? element : THROW_CCE());
  };
  AbstractMutableMap$keys$1.prototype.d = function () {
    var entryIterator = this.n7_1.t().d();
    return new AbstractMutableMap$keys$1$iterator$1(entryIterator);
  };
  AbstractMutableMap$keys$1.prototype.z2 = function (element) {
    this.o6();
    if (this.n7_1.h2(element)) {
      this.n7_1.z2(element);
      return true;
    }
    return false;
  };
  AbstractMutableMap$keys$1.prototype.n6 = function (element) {
    if (!(element == null ? true : isObject(element)))
      return false;
    return this.z2((element == null ? true : isObject(element)) ? element : THROW_CCE());
  };
  AbstractMutableMap$keys$1.prototype.g = function () {
    return this.n7_1.g();
  };
  AbstractMutableMap$keys$1.prototype.o6 = function () {
    return this.n7_1.o6();
  };
  AbstractMutableMap$keys$1.$metadata$ = classMeta(undefined, undefined, undefined, undefined, undefined, AbstractMutableSet.prototype);
  function AbstractMutableMap$values$1(this$0) {
    this.t7_1 = this$0;
    AbstractMutableCollection.call(this);
  }
  AbstractMutableMap$values$1.prototype.u7 = function (element) {
    throw UnsupportedOperationException_init_$Create$_0('Add is not supported on values');
  };
  AbstractMutableMap$values$1.prototype.b = function (element) {
    return this.u7((element == null ? true : isObject(element)) ? element : THROW_CCE());
  };
  AbstractMutableMap$values$1.prototype.v7 = function (element) {
    return this.t7_1.j2(element);
  };
  AbstractMutableMap$values$1.prototype.j = function (element) {
    if (!(element == null ? true : isObject(element)))
      return false;
    return this.v7((element == null ? true : isObject(element)) ? element : THROW_CCE());
  };
  AbstractMutableMap$values$1.prototype.d = function () {
    var entryIterator = this.t7_1.t().d();
    return new AbstractMutableMap$values$1$iterator$1(entryIterator);
  };
  AbstractMutableMap$values$1.prototype.g = function () {
    return this.t7_1.g();
  };
  AbstractMutableMap$values$1.prototype.o6 = function () {
    return this.t7_1.o6();
  };
  AbstractMutableMap$values$1.$metadata$ = classMeta(undefined, undefined, undefined, undefined, undefined, AbstractMutableCollection.prototype);
  function AbstractMutableMap() {
    AbstractMap.call(this);
    this.r7_1 = null;
    this.s7_1 = null;
  }
  AbstractMutableMap.prototype.q6 = function () {
    this.t().q6();
  };
  AbstractMutableMap.prototype.m2 = function () {
    if (this.r7_1 == null) {
      var tmp = this;
      tmp.r7_1 = new AbstractMutableMap$keys$1(this);
    }
    return ensureNotNull(this.r7_1);
  };
  AbstractMutableMap.prototype.w7 = function (from) {
    this.o6();
    var tmp$ret$0;
    // Inline function 'kotlin.collections.iterator' call
    tmp$ret$0 = from.t().d();
    var tmp0_iterator = tmp$ret$0;
    while (tmp0_iterator.e()) {
      var tmp1_loop_parameter = tmp0_iterator.f();
      var tmp$ret$1;
      // Inline function 'kotlin.collections.component1' call
      tmp$ret$1 = tmp1_loop_parameter.y1();
      var key = tmp$ret$1;
      var tmp$ret$2;
      // Inline function 'kotlin.collections.component2' call
      tmp$ret$2 = tmp1_loop_parameter.a2();
      var value = tmp$ret$2;
      this.a(key, value);
    }
  };
  AbstractMutableMap.prototype.x7 = function () {
    if (this.s7_1 == null) {
      var tmp = this;
      tmp.s7_1 = new AbstractMutableMap$values$1(this);
    }
    return ensureNotNull(this.s7_1);
  };
  AbstractMutableMap.prototype.z2 = function (key) {
    this.o6();
    var iter = this.t().d();
    while (iter.e()) {
      var entry = iter.f();
      var k = entry.y1();
      if (equals_0(key, k)) {
        var value = entry.a2();
        iter.g3();
        return value;
      }
    }
    return null;
  };
  AbstractMutableMap.prototype.o6 = function () {
  };
  AbstractMutableMap.$metadata$ = classMeta('AbstractMutableMap', [MutableMap], undefined, undefined, undefined, AbstractMap.prototype);
  function AbstractMutableSet() {
    AbstractMutableCollection.call(this);
  }
  AbstractMutableSet.prototype.equals = function (other) {
    if (other === this)
      return true;
    if (!(!(other == null) ? isInterface(other, Set) : false))
      return false;
    return Companion_getInstance_1().o2(this, other);
  };
  AbstractMutableSet.prototype.hashCode = function () {
    return Companion_getInstance_1().n2(this);
  };
  AbstractMutableSet.$metadata$ = classMeta('AbstractMutableSet', [MutableSet], undefined, undefined, undefined, AbstractMutableCollection.prototype);
  function ArrayList_init_$Init$($this) {
    var tmp$ret$0;
    // Inline function 'kotlin.emptyArray' call
    tmp$ret$0 = [];
    ArrayList.call($this, tmp$ret$0);
    return $this;
  }
  function ArrayList_init_$Create$() {
    return ArrayList_init_$Init$(Object.create(ArrayList.prototype));
  }
  function ArrayList_init_$Init$_0(initialCapacity, $this) {
    var tmp$ret$0;
    // Inline function 'kotlin.emptyArray' call
    tmp$ret$0 = [];
    ArrayList.call($this, tmp$ret$0);
    return $this;
  }
  function ArrayList_init_$Create$_0(initialCapacity) {
    return ArrayList_init_$Init$_0(initialCapacity, Object.create(ArrayList.prototype));
  }
  function ArrayList_init_$Init$_1(elements, $this) {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.toTypedArray' call
    tmp$ret$0 = copyToArray(elements);
    ArrayList.call($this, tmp$ret$0);
    return $this;
  }
  function ArrayList_init_$Create$_1(elements) {
    return ArrayList_init_$Init$_1(elements, Object.create(ArrayList.prototype));
  }
  function rangeCheck($this, index) {
    var tmp$ret$0;
    // Inline function 'kotlin.apply' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.collections.ArrayList.rangeCheck.<anonymous>' call
    Companion_getInstance().s1(index, $this.g());
    tmp$ret$0 = index;
    return tmp$ret$0;
  }
  function insertionRangeCheck($this, index) {
    var tmp$ret$0;
    // Inline function 'kotlin.apply' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.collections.ArrayList.insertionRangeCheck.<anonymous>' call
    Companion_getInstance().r1(index, $this.g());
    tmp$ret$0 = index;
    return tmp$ret$0;
  }
  function ArrayList(array) {
    AbstractMutableList.call(this);
    this.d5_1 = array;
    this.e5_1 = false;
  }
  ArrayList.prototype.g = function () {
    return this.d5_1.length;
  };
  ArrayList.prototype.h = function (index) {
    var tmp = this.d5_1[rangeCheck(this, index)];
    return (tmp == null ? true : isObject(tmp)) ? tmp : THROW_CCE();
  };
  ArrayList.prototype.m6 = function (index, element) {
    this.o6();
    rangeCheck(this, index);
    var tmp$ret$0;
    // Inline function 'kotlin.apply' call
    var tmp0_apply = this.d5_1[index];
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.collections.ArrayList.set.<anonymous>' call
    this.d5_1[index] = element;
    tmp$ret$0 = tmp0_apply;
    var tmp = tmp$ret$0;
    return (tmp == null ? true : isObject(tmp)) ? tmp : THROW_CCE();
  };
  ArrayList.prototype.b = function (element) {
    this.o6();
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    var tmp0_asDynamic = this.d5_1;
    tmp$ret$0 = tmp0_asDynamic;
    tmp$ret$0.push(element);
    var tmp0_this = this;
    var tmp1 = tmp0_this.u6_1;
    tmp0_this.u6_1 = tmp1 + 1 | 0;
    return true;
  };
  ArrayList.prototype.d7 = function (index, element) {
    this.o6();
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    var tmp0_asDynamic = this.d5_1;
    tmp$ret$0 = tmp0_asDynamic;
    tmp$ret$0.splice(insertionRangeCheck(this, index), 0, element);
    var tmp0_this = this;
    var tmp1 = tmp0_this.u6_1;
    tmp0_this.u6_1 = tmp1 + 1 | 0;
  };
  ArrayList.prototype.h1 = function (elements) {
    this.o6();
    if (elements.i())
      return false;
    var tmp0_this = this;
    var tmp = tmp0_this;
    var tmp$ret$2;
    // Inline function 'kotlin.collections.plus' call
    var tmp0_plus = tmp0_this.d5_1;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.toTypedArray' call
    tmp$ret$0 = copyToArray(elements);
    var tmp1_plus = tmp$ret$0;
    var tmp$ret$1;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$1 = tmp0_plus;
    tmp$ret$2 = tmp$ret$1.concat(tmp1_plus);
    tmp.d5_1 = tmp$ret$2;
    var tmp1_this = this;
    var tmp2 = tmp1_this.u6_1;
    tmp1_this.u6_1 = tmp2 + 1 | 0;
    return true;
  };
  ArrayList.prototype.y7 = function (index, elements) {
    this.o6();
    insertionRangeCheck(this, index);
    if (index === this.g())
      return this.h1(elements);
    if (elements.i())
      return false;
    var tmp0_subject = index;
    if (tmp0_subject === this.g())
      return this.h1(elements);
    else if (tmp0_subject === 0) {
      var tmp = this;
      var tmp$ret$2;
      // Inline function 'kotlin.collections.plus' call
      var tmp$ret$0;
      // Inline function 'kotlin.collections.toTypedArray' call
      tmp$ret$0 = copyToArray(elements);
      var tmp0_plus = tmp$ret$0;
      var tmp1_plus = this.d5_1;
      var tmp$ret$1;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$1 = tmp0_plus;
      tmp$ret$2 = tmp$ret$1.concat(tmp1_plus);
      tmp.d5_1 = tmp$ret$2;
    } else {
      var tmp_0 = this;
      var tmp$ret$3;
      // Inline function 'kotlin.js.asDynamic' call
      var tmp2_asDynamic = copyOfRange(this.d5_1, 0, index);
      tmp$ret$3 = tmp2_asDynamic;
      var tmp$ret$4;
      // Inline function 'kotlin.collections.toTypedArray' call
      tmp$ret$4 = copyToArray(elements);
      tmp_0.d5_1 = tmp$ret$3.concat(tmp$ret$4, copyOfRange(this.d5_1, index, this.g()));
    }
    var tmp1_this = this;
    var tmp2 = tmp1_this.u6_1;
    tmp1_this.u6_1 = tmp2 + 1 | 0;
    return true;
  };
  ArrayList.prototype.f3 = function (index) {
    this.o6();
    rangeCheck(this, index);
    var tmp0_this = this;
    var tmp1 = tmp0_this.u6_1;
    tmp0_this.u6_1 = tmp1 + 1 | 0;
    var tmp;
    if (index === get_lastIndex_0(this)) {
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      var tmp0_asDynamic = this.d5_1;
      tmp$ret$0 = tmp0_asDynamic;
      tmp = tmp$ret$0.pop();
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.js.asDynamic' call
      var tmp1_asDynamic = this.d5_1;
      tmp$ret$1 = tmp1_asDynamic;
      tmp = tmp$ret$1.splice(index, 1)[0];
    }
    return tmp;
  };
  ArrayList.prototype.n6 = function (element) {
    this.o6();
    var inductionVariable = 0;
    var last = this.d5_1.length - 1 | 0;
    if (inductionVariable <= last)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (equals_0(this.d5_1[index], element)) {
          var tmp$ret$0;
          // Inline function 'kotlin.js.asDynamic' call
          var tmp0_asDynamic = this.d5_1;
          tmp$ret$0 = tmp0_asDynamic;
          tmp$ret$0.splice(index, 1);
          var tmp1_this = this;
          var tmp2 = tmp1_this.u6_1;
          tmp1_this.u6_1 = tmp2 + 1 | 0;
          return true;
        }
      }
       while (inductionVariable <= last);
    return false;
  };
  ArrayList.prototype.e7 = function (fromIndex, toIndex) {
    this.o6();
    var tmp0_this = this;
    var tmp1 = tmp0_this.u6_1;
    tmp0_this.u6_1 = tmp1 + 1 | 0;
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    var tmp0_asDynamic = this.d5_1;
    tmp$ret$0 = tmp0_asDynamic;
    tmp$ret$0.splice(fromIndex, toIndex - fromIndex | 0);
  };
  ArrayList.prototype.q6 = function () {
    this.o6();
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.emptyArray' call
    tmp$ret$0 = [];
    tmp.d5_1 = tmp$ret$0;
    var tmp0_this = this;
    var tmp1 = tmp0_this.u6_1;
    tmp0_this.u6_1 = tmp1 + 1 | 0;
  };
  ArrayList.prototype.m = function (element) {
    return indexOf(this.d5_1, element);
  };
  ArrayList.prototype.w1 = function (element) {
    return lastIndexOf(this.d5_1, element);
  };
  ArrayList.prototype.toString = function () {
    return arrayToString(this.d5_1);
  };
  ArrayList.prototype.z7 = function () {
    return [].slice.call(this.d5_1);
  };
  ArrayList.prototype.toArray = function () {
    return this.z7();
  };
  ArrayList.prototype.o6 = function () {
    if (this.e5_1)
      throw UnsupportedOperationException_init_$Create$();
  };
  ArrayList.$metadata$ = classMeta('ArrayList', [MutableList, RandomAccess], undefined, undefined, undefined, AbstractMutableList.prototype);
  var _stableSortingIsSupported;
  function sortArrayWith(array, comparator) {
    if (getStableSortingIsSupported()) {
      var comparison = sortArrayWith$lambda(comparator);
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = array;
      tmp$ret$0.sort(comparison);
    } else {
      var tmp$ret$2;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$1;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$1 = array;
      tmp$ret$2 = tmp$ret$1;
      mergeSort(tmp$ret$2, 0, get_lastIndex(array), comparator);
    }
  }
  function getStableSortingIsSupported() {
    var tmp0_safe_receiver = _stableSortingIsSupported;
    if (tmp0_safe_receiver == null)
      null;
    else {
      var tmp$ret$0;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      return tmp0_safe_receiver;
    }
    _stableSortingIsSupported = false;
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast = [];
    tmp$ret$1 = tmp0_unsafeCast;
    var array = tmp$ret$1;
    var inductionVariable = 0;
    if (inductionVariable < 600)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp$ret$2;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$2 = array;
        tmp$ret$2.push(index);
      }
       while (inductionVariable < 600);
    var comparison = getStableSortingIsSupported$lambda;
    var tmp$ret$3;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$3 = array;
    tmp$ret$3.sort(comparison);
    var inductionVariable_0 = 1;
    var last = array.length;
    if (inductionVariable_0 < last)
      do {
        var index_0 = inductionVariable_0;
        inductionVariable_0 = inductionVariable_0 + 1 | 0;
        var a = array[index_0 - 1 | 0];
        var b = array[index_0];
        if ((a & 3) === (b & 3) ? a >= b : false)
          return false;
      }
       while (inductionVariable_0 < last);
    _stableSortingIsSupported = true;
    return true;
  }
  function mergeSort(array, start, endInclusive, comparator) {
    var tmp$ret$2;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp0_arrayOfNulls = array.length;
    tmp$ret$0 = fillArrayVal(Array(tmp0_arrayOfNulls), null);
    var tmp1_unsafeCast = tmp$ret$0;
    var tmp$ret$1;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$1 = tmp1_unsafeCast;
    tmp$ret$2 = tmp$ret$1;
    var buffer = tmp$ret$2;
    var result = mergeSort_0(array, buffer, start, endInclusive, comparator);
    if (!(result === array)) {
      var inductionVariable = start;
      if (inductionVariable <= endInclusive)
        do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          array[i] = result[i];
        }
         while (!(i === endInclusive));
    }
  }
  function mergeSort_0(array, buffer, start, end, comparator) {
    if (start === end) {
      return array;
    }
    var median = (start + end | 0) / 2 | 0;
    var left = mergeSort_0(array, buffer, start, median, comparator);
    var right = mergeSort_0(array, buffer, median + 1 | 0, end, comparator);
    var target = left === buffer ? array : buffer;
    var leftIndex = start;
    var rightIndex = median + 1 | 0;
    var inductionVariable = start;
    if (inductionVariable <= end)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (leftIndex <= median ? rightIndex <= end : false) {
          var leftValue = left[leftIndex];
          var rightValue = right[rightIndex];
          if (comparator.compare(leftValue, rightValue) <= 0) {
            target[i] = leftValue;
            var tmp1 = leftIndex;
            leftIndex = tmp1 + 1 | 0;
          } else {
            target[i] = rightValue;
            var tmp2 = rightIndex;
            rightIndex = tmp2 + 1 | 0;
          }
        } else if (leftIndex <= median) {
          target[i] = left[leftIndex];
          var tmp3 = leftIndex;
          leftIndex = tmp3 + 1 | 0;
        } else {
          target[i] = right[rightIndex];
          var tmp4 = rightIndex;
          rightIndex = tmp4 + 1 | 0;
        }
      }
       while (!(i === end));
    return target;
  }
  function sortArrayWith$lambda($comparator) {
    return function (a, b) {
      return $comparator.compare(a, b);
    };
  }
  function getStableSortingIsSupported$lambda(a, b) {
    return (a & 3) - (b & 3) | 0;
  }
  function HashCode() {
    HashCode_instance = this;
  }
  HashCode.prototype.a8 = function (value1, value2) {
    return equals_0(value1, value2);
  };
  HashCode.prototype.b8 = function (value) {
    var tmp0_safe_receiver = value;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode_0(tmp0_safe_receiver);
    return tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
  };
  HashCode.$metadata$ = objectMeta('HashCode', [EqualityComparator]);
  var HashCode_instance;
  function HashCode_getInstance() {
    if (HashCode_instance == null)
      new HashCode();
    return HashCode_instance;
  }
  function EqualityComparator() {
  }
  EqualityComparator.$metadata$ = interfaceMeta('EqualityComparator');
  function EntrySet($outer) {
    this.c8_1 = $outer;
    AbstractEntrySet.call(this);
  }
  EntrySet.prototype.d8 = function (element) {
    throw UnsupportedOperationException_init_$Create$_0('Add is not supported on entries');
  };
  EntrySet.prototype.b = function (element) {
    return this.d8((!(element == null) ? isInterface(element, MutableEntry) : false) ? element : THROW_CCE());
  };
  EntrySet.prototype.q6 = function () {
    this.c8_1.q6();
  };
  EntrySet.prototype.l7 = function (element) {
    return this.c8_1.k2(element);
  };
  EntrySet.prototype.d = function () {
    return this.c8_1.i8_1.d();
  };
  EntrySet.prototype.m7 = function (element) {
    if (contains_0(this, element)) {
      this.c8_1.z2(element.y1());
      return true;
    }
    return false;
  };
  EntrySet.prototype.g = function () {
    return this.c8_1.g();
  };
  EntrySet.$metadata$ = classMeta('EntrySet', undefined, undefined, undefined, undefined, AbstractEntrySet.prototype);
  function HashMap_init_$Init$(internalMap, $this) {
    AbstractMutableMap.call($this);
    HashMap.call($this);
    $this.i8_1 = internalMap;
    $this.j8_1 = internalMap.l8();
    return $this;
  }
  function HashMap_init_$Init$_0($this) {
    HashMap_init_$Init$(new InternalHashCodeMap(HashCode_getInstance()), $this);
    return $this;
  }
  function HashMap_init_$Create$() {
    return HashMap_init_$Init$_0(Object.create(HashMap.prototype));
  }
  function HashMap_init_$Init$_1(initialCapacity, loadFactor, $this) {
    HashMap_init_$Init$_0($this);
    // Inline function 'kotlin.require' call
    var tmp0_require = initialCapacity >= 0;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'kotlin.collections.HashMap.<init>.<anonymous>' call
      tmp$ret$0 = 'Negative initial capacity: ' + initialCapacity;
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString_2(message));
    }
    // Inline function 'kotlin.require' call
    var tmp1_require = loadFactor >= 0;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp1_require) {
      var tmp$ret$1;
      // Inline function 'kotlin.collections.HashMap.<init>.<anonymous>' call
      tmp$ret$1 = 'Non-positive load factor: ' + loadFactor;
      var message_0 = tmp$ret$1;
      throw IllegalArgumentException_init_$Create$(toString_2(message_0));
    }
    return $this;
  }
  function HashMap_init_$Create$_0(initialCapacity, loadFactor) {
    return HashMap_init_$Init$_1(initialCapacity, loadFactor, Object.create(HashMap.prototype));
  }
  function HashMap_init_$Init$_2(initialCapacity, $this) {
    HashMap_init_$Init$_1(initialCapacity, 0.0, $this);
    return $this;
  }
  function HashMap_init_$Create$_1(initialCapacity) {
    return HashMap_init_$Init$_2(initialCapacity, Object.create(HashMap.prototype));
  }
  HashMap.prototype.q6 = function () {
    this.i8_1.q6();
  };
  HashMap.prototype.h2 = function (key) {
    return this.i8_1.e2(key);
  };
  HashMap.prototype.j2 = function (value) {
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.any' call
      var tmp0_any = this.i8_1;
      var tmp;
      if (isInterface(tmp0_any, Collection)) {
        tmp = tmp0_any.i();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = false;
        break $l$block_0;
      }
      var tmp0_iterator = tmp0_any.d();
      while (tmp0_iterator.e()) {
        var element = tmp0_iterator.f();
        var tmp$ret$1;
        // Inline function 'kotlin.collections.HashMap.containsValue.<anonymous>' call
        tmp$ret$1 = this.j8_1.a8(element.a2(), value);
        if (tmp$ret$1) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
      }
      tmp$ret$0 = false;
    }
    return tmp$ret$0;
  };
  HashMap.prototype.t = function () {
    if (this.k8_1 == null) {
      this.k8_1 = this.m8();
    }
    return ensureNotNull(this.k8_1);
  };
  HashMap.prototype.m8 = function () {
    return new EntrySet(this);
  };
  HashMap.prototype.l2 = function (key) {
    return this.i8_1.l2(key);
  };
  HashMap.prototype.a = function (key, value) {
    return this.i8_1.a(key, value);
  };
  HashMap.prototype.z2 = function (key) {
    return this.i8_1.z2(key);
  };
  HashMap.prototype.g = function () {
    return this.i8_1.g();
  };
  function HashMap() {
    this.k8_1 = null;
  }
  HashMap.$metadata$ = classMeta('HashMap', [MutableMap], undefined, undefined, undefined, AbstractMutableMap.prototype);
  function HashSet_init_$Init$($this) {
    AbstractMutableSet.call($this);
    HashSet.call($this);
    $this.n8_1 = HashMap_init_$Create$();
    return $this;
  }
  function HashSet_init_$Create$() {
    return HashSet_init_$Init$(Object.create(HashSet.prototype));
  }
  function HashSet_init_$Init$_0(initialCapacity, loadFactor, $this) {
    AbstractMutableSet.call($this);
    HashSet.call($this);
    $this.n8_1 = HashMap_init_$Create$_0(initialCapacity, loadFactor);
    return $this;
  }
  function HashSet_init_$Init$_1(initialCapacity, $this) {
    HashSet_init_$Init$_0(initialCapacity, 0.0, $this);
    return $this;
  }
  function HashSet_init_$Create$_0(initialCapacity) {
    return HashSet_init_$Init$_1(initialCapacity, Object.create(HashSet.prototype));
  }
  function HashSet_init_$Init$_2(map, $this) {
    AbstractMutableSet.call($this);
    HashSet.call($this);
    $this.n8_1 = map;
    return $this;
  }
  HashSet.prototype.b = function (element) {
    var old = this.n8_1.a(element, this);
    return old == null;
  };
  HashSet.prototype.q6 = function () {
    this.n8_1.q6();
  };
  HashSet.prototype.j = function (element) {
    return this.n8_1.h2(element);
  };
  HashSet.prototype.i = function () {
    return this.n8_1.i();
  };
  HashSet.prototype.d = function () {
    return this.n8_1.m2().d();
  };
  HashSet.prototype.n6 = function (element) {
    return !(this.n8_1.z2(element) == null);
  };
  HashSet.prototype.g = function () {
    return this.n8_1.g();
  };
  function HashSet() {
  }
  HashSet.$metadata$ = classMeta('HashSet', [MutableSet], undefined, undefined, undefined, AbstractMutableSet.prototype);
  function computeNext($this) {
    if ($this.r8_1 != null ? $this.s8_1 : false) {
      var tmp$ret$0;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp0_unsafeCast = $this.r8_1;
      tmp$ret$0 = tmp0_unsafeCast;
      var chainSize = tmp$ret$0.length;
      var tmp0_this = $this;
      tmp0_this.t8_1 = tmp0_this.t8_1 + 1 | 0;
      if (tmp0_this.t8_1 < chainSize)
        return 0;
    }
    var tmp1_this = $this;
    tmp1_this.q8_1 = tmp1_this.q8_1 + 1 | 0;
    if (tmp1_this.q8_1 < $this.p8_1.length) {
      $this.r8_1 = $this.v8_1.x8_1[$this.p8_1[$this.q8_1]];
      var tmp = $this;
      var tmp_0 = $this.r8_1;
      tmp.s8_1 = !(tmp_0 == null) ? isArray(tmp_0) : false;
      $this.t8_1 = 0;
      return 0;
    } else {
      $this.r8_1 = null;
      return 1;
    }
  }
  function getEntry($this, key) {
    var tmp0_elvis_lhs = getChainOrEntryOrNull($this, $this.w8_1.b8(key));
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return null;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var chainOrEntry = tmp;
    if (!(!(chainOrEntry == null) ? isArray(chainOrEntry) : false)) {
      var entry = chainOrEntry;
      if ($this.w8_1.a8(entry.y1(), key)) {
        return entry;
      } else {
        return null;
      }
    } else {
      var chain = chainOrEntry;
      return findEntryInChain(chain, $this, key);
    }
  }
  function findEntryInChain(_this__u8e3s4, $this, key) {
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.collections.firstOrNull' call
      var indexedObject = _this__u8e3s4;
      var inductionVariable = 0;
      var last = indexedObject.length;
      while (inductionVariable < last) {
        var element = indexedObject[inductionVariable];
        inductionVariable = inductionVariable + 1 | 0;
        var tmp$ret$0;
        // Inline function 'kotlin.collections.InternalHashCodeMap.findEntryInChain.<anonymous>' call
        tmp$ret$0 = $this.w8_1.a8(element.y1(), key);
        if (tmp$ret$0) {
          tmp$ret$1 = element;
          break $l$block;
        }
      }
      tmp$ret$1 = null;
    }
    return tmp$ret$1;
  }
  function getChainOrEntryOrNull($this, hashCode) {
    var chainOrEntry = $this.x8_1[hashCode];
    return chainOrEntry === undefined ? null : chainOrEntry;
  }
  function InternalHashCodeMap$iterator$1(this$0) {
    this.v8_1 = this$0;
    this.o8_1 = -1;
    this.p8_1 = Object.keys(this$0.x8_1);
    this.q8_1 = -1;
    this.r8_1 = null;
    this.s8_1 = false;
    this.t8_1 = -1;
    this.u8_1 = null;
  }
  InternalHashCodeMap$iterator$1.prototype.e = function () {
    if (this.o8_1 === -1)
      this.o8_1 = computeNext(this);
    return this.o8_1 === 0;
  };
  InternalHashCodeMap$iterator$1.prototype.f = function () {
    if (!this.e())
      throw NoSuchElementException_init_$Create$();
    var tmp;
    if (this.s8_1) {
      var tmp$ret$0;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp0_unsafeCast = this.r8_1;
      tmp$ret$0 = tmp0_unsafeCast;
      tmp = tmp$ret$0[this.t8_1];
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp1_unsafeCast = this.r8_1;
      tmp$ret$1 = tmp1_unsafeCast;
      tmp = tmp$ret$1;
    }
    var lastEntry = tmp;
    this.u8_1 = lastEntry;
    this.o8_1 = -1;
    return lastEntry;
  };
  InternalHashCodeMap$iterator$1.prototype.g3 = function () {
    var tmp$ret$2;
    // Inline function 'kotlin.checkNotNull' call
    var tmp0_checkNotNull = this.u8_1;
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.checkNotNull' call
      // Inline function 'kotlin.contracts.contract' call
      if (tmp0_checkNotNull == null) {
        var tmp$ret$0;
        // Inline function 'kotlin.checkNotNull.<anonymous>' call
        tmp$ret$0 = 'Required value was null.';
        var message = tmp$ret$0;
        throw IllegalStateException_init_$Create$_0(toString_2(message));
      } else {
        tmp$ret$1 = tmp0_checkNotNull;
        break $l$block;
      }
    }
    tmp$ret$2 = tmp$ret$1;
    this.v8_1.z2(ensureNotNull(this.u8_1).y1());
    this.u8_1 = null;
    var tmp0_this = this;
    var tmp1 = tmp0_this.t8_1;
    tmp0_this.t8_1 = tmp1 - 1 | 0;
  };
  InternalHashCodeMap$iterator$1.$metadata$ = classMeta(undefined, [MutableIterator]);
  function InternalHashCodeMap(equality) {
    this.w8_1 = equality;
    this.x8_1 = this.z8();
    this.y8_1 = 0;
  }
  InternalHashCodeMap.prototype.l8 = function () {
    return this.w8_1;
  };
  InternalHashCodeMap.prototype.g = function () {
    return this.y8_1;
  };
  InternalHashCodeMap.prototype.a = function (key, value) {
    var hashCode = this.w8_1.b8(key);
    var chainOrEntry = getChainOrEntryOrNull(this, hashCode);
    if (chainOrEntry == null) {
      this.x8_1[hashCode] = new SimpleEntry(key, value);
    } else {
      if (!(!(chainOrEntry == null) ? isArray(chainOrEntry) : false)) {
        var entry = chainOrEntry;
        if (this.w8_1.a8(entry.y1(), key)) {
          return entry.k7(value);
        } else {
          var tmp$ret$2;
          // Inline function 'kotlin.arrayOf' call
          var tmp0_arrayOf = [entry, new SimpleEntry(key, value)];
          var tmp$ret$1;
          // Inline function 'kotlin.js.unsafeCast' call
          var tmp$ret$0;
          // Inline function 'kotlin.js.asDynamic' call
          tmp$ret$0 = tmp0_arrayOf;
          tmp$ret$1 = tmp$ret$0;
          tmp$ret$2 = tmp$ret$1;
          this.x8_1[hashCode] = tmp$ret$2;
          var tmp0_this = this;
          var tmp1 = tmp0_this.y8_1;
          tmp0_this.y8_1 = tmp1 + 1 | 0;
          return null;
        }
      } else {
        var chain = chainOrEntry;
        var entry_0 = findEntryInChain(chain, this, key);
        if (!(entry_0 == null)) {
          return entry_0.k7(value);
        }
        var tmp$ret$3;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$3 = chain;
        tmp$ret$3.push(new SimpleEntry(key, value));
      }
    }
    var tmp2_this = this;
    var tmp3 = tmp2_this.y8_1;
    tmp2_this.y8_1 = tmp3 + 1 | 0;
    return null;
  };
  InternalHashCodeMap.prototype.z2 = function (key) {
    var hashCode = this.w8_1.b8(key);
    var tmp0_elvis_lhs = getChainOrEntryOrNull(this, hashCode);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return null;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var chainOrEntry = tmp;
    if (!(!(chainOrEntry == null) ? isArray(chainOrEntry) : false)) {
      var entry = chainOrEntry;
      if (this.w8_1.a8(entry.y1(), key)) {
        jsDeleteProperty(this.x8_1, hashCode);
        var tmp1_this = this;
        var tmp2 = tmp1_this.y8_1;
        tmp1_this.y8_1 = tmp2 - 1 | 0;
        return entry.a2();
      } else {
        return null;
      }
    } else {
      var chain = chainOrEntry;
      var inductionVariable = 0;
      var last = chain.length - 1 | 0;
      if (inductionVariable <= last)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var entry_0 = chain[index];
          if (this.w8_1.a8(key, entry_0.y1())) {
            if (chain.length === 1) {
              var tmp$ret$0;
              // Inline function 'kotlin.js.asDynamic' call
              tmp$ret$0 = chain;
              tmp$ret$0.length = 0;
              jsDeleteProperty(this.x8_1, hashCode);
            } else {
              var tmp$ret$1;
              // Inline function 'kotlin.js.asDynamic' call
              tmp$ret$1 = chain;
              tmp$ret$1.splice(index, 1);
            }
            var tmp4_this = this;
            var tmp5 = tmp4_this.y8_1;
            tmp4_this.y8_1 = tmp5 - 1 | 0;
            return entry_0.a2();
          }
        }
         while (inductionVariable <= last);
    }
    return null;
  };
  InternalHashCodeMap.prototype.q6 = function () {
    this.x8_1 = this.z8();
    this.y8_1 = 0;
  };
  InternalHashCodeMap.prototype.e2 = function (key) {
    return !(getEntry(this, key) == null);
  };
  InternalHashCodeMap.prototype.l2 = function (key) {
    var tmp0_safe_receiver = getEntry(this, key);
    return tmp0_safe_receiver == null ? null : tmp0_safe_receiver.a2();
  };
  InternalHashCodeMap.prototype.d = function () {
    return new InternalHashCodeMap$iterator$1(this);
  };
  InternalHashCodeMap.$metadata$ = classMeta('InternalHashCodeMap', [InternalMap]);
  function InternalMap() {
  }
  InternalMap.$metadata$ = interfaceMeta('InternalMap', [MutableIterable]);
  function EntryIterator($outer) {
    this.c9_1 = $outer;
    this.a9_1 = null;
    this.b9_1 = null;
    this.b9_1 = this.c9_1.n9_1.k9_1;
  }
  EntryIterator.prototype.e = function () {
    return !(this.b9_1 === null);
  };
  EntryIterator.prototype.f = function () {
    if (!this.e())
      throw NoSuchElementException_init_$Create$();
    var current = ensureNotNull(this.b9_1);
    this.a9_1 = current;
    var tmp = this;
    var tmp$ret$1;
    // Inline function 'kotlin.takeIf' call
    var tmp0_takeIf = current.q9_1;
    // Inline function 'kotlin.contracts.contract' call
    var tmp_0;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.EntryIterator.next.<anonymous>' call
    tmp$ret$0 = !(tmp0_takeIf === this.c9_1.n9_1.k9_1);
    if (tmp$ret$0) {
      tmp_0 = tmp0_takeIf;
    } else {
      tmp_0 = null;
    }
    tmp$ret$1 = tmp_0;
    tmp.b9_1 = tmp$ret$1;
    return current;
  };
  EntryIterator.prototype.g3 = function () {
    // Inline function 'kotlin.check' call
    var tmp0_check = !(this.a9_1 == null);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.check' call
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_check) {
      var tmp$ret$0;
      // Inline function 'kotlin.check.<anonymous>' call
      tmp$ret$0 = 'Check failed.';
      var message = tmp$ret$0;
      throw IllegalStateException_init_$Create$_0(toString_2(message));
    }
    this.c9_1.o6();
    remove_0(ensureNotNull(this.a9_1), this.c9_1.n9_1);
    this.c9_1.n9_1.l9_1.z2(ensureNotNull(this.a9_1).y1());
    this.a9_1 = null;
  };
  EntryIterator.$metadata$ = classMeta('EntryIterator', [MutableIterator]);
  function ChainEntry($outer, key, value) {
    this.s9_1 = $outer;
    SimpleEntry.call(this, key, value);
    this.q9_1 = null;
    this.r9_1 = null;
  }
  ChainEntry.prototype.k7 = function (newValue) {
    this.s9_1.o6();
    return SimpleEntry.prototype.k7.call(this, newValue);
  };
  ChainEntry.$metadata$ = classMeta('ChainEntry', undefined, undefined, undefined, undefined, SimpleEntry.prototype);
  function EntrySet_0($outer) {
    this.n9_1 = $outer;
    AbstractEntrySet.call(this);
  }
  EntrySet_0.prototype.d8 = function (element) {
    throw UnsupportedOperationException_init_$Create$_0('Add is not supported on entries');
  };
  EntrySet_0.prototype.b = function (element) {
    return this.d8((!(element == null) ? isInterface(element, MutableEntry) : false) ? element : THROW_CCE());
  };
  EntrySet_0.prototype.q6 = function () {
    this.n9_1.q6();
  };
  EntrySet_0.prototype.l7 = function (element) {
    return this.n9_1.k2(element);
  };
  EntrySet_0.prototype.d = function () {
    return new EntryIterator(this);
  };
  EntrySet_0.prototype.m7 = function (element) {
    this.o6();
    if (contains_0(this, element)) {
      this.n9_1.z2(element.y1());
      return true;
    }
    return false;
  };
  EntrySet_0.prototype.g = function () {
    return this.n9_1.g();
  };
  EntrySet_0.prototype.o6 = function () {
    return this.n9_1.o6();
  };
  EntrySet_0.$metadata$ = classMeta('EntrySet', undefined, undefined, undefined, undefined, AbstractEntrySet.prototype);
  function addToEnd(_this__u8e3s4, $this) {
    // Inline function 'kotlin.check' call
    var tmp0_check = _this__u8e3s4.q9_1 == null ? _this__u8e3s4.r9_1 == null : false;
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.check' call
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_check) {
      var tmp$ret$0;
      // Inline function 'kotlin.check.<anonymous>' call
      tmp$ret$0 = 'Check failed.';
      var message = tmp$ret$0;
      throw IllegalStateException_init_$Create$_0(toString_2(message));
    }
    var _head = $this.k9_1;
    if (_head == null) {
      $this.k9_1 = _this__u8e3s4;
      _this__u8e3s4.q9_1 = _this__u8e3s4;
      _this__u8e3s4.r9_1 = _this__u8e3s4;
    } else {
      var tmp$ret$3;
      // Inline function 'kotlin.checkNotNull' call
      var tmp1_checkNotNull = _head.r9_1;
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$2;
      $l$block: {
        // Inline function 'kotlin.checkNotNull' call
        // Inline function 'kotlin.contracts.contract' call
        if (tmp1_checkNotNull == null) {
          var tmp$ret$1;
          // Inline function 'kotlin.checkNotNull.<anonymous>' call
          tmp$ret$1 = 'Required value was null.';
          var message_0 = tmp$ret$1;
          throw IllegalStateException_init_$Create$_0(toString_2(message_0));
        } else {
          tmp$ret$2 = tmp1_checkNotNull;
          break $l$block;
        }
      }
      tmp$ret$3 = tmp$ret$2;
      var _tail = tmp$ret$3;
      _this__u8e3s4.r9_1 = _tail;
      _this__u8e3s4.q9_1 = _head;
      _head.r9_1 = _this__u8e3s4;
      _tail.q9_1 = _this__u8e3s4;
    }
  }
  function remove_0(_this__u8e3s4, $this) {
    if (_this__u8e3s4.q9_1 === _this__u8e3s4) {
      $this.k9_1 = null;
    } else {
      if ($this.k9_1 === _this__u8e3s4) {
        $this.k9_1 = _this__u8e3s4.q9_1;
      }
      ensureNotNull(_this__u8e3s4.q9_1).r9_1 = _this__u8e3s4.r9_1;
      ensureNotNull(_this__u8e3s4.r9_1).q9_1 = _this__u8e3s4.q9_1;
    }
    _this__u8e3s4.q9_1 = null;
    _this__u8e3s4.r9_1 = null;
  }
  function LinkedHashMap_init_$Init$($this) {
    HashMap_init_$Init$_0($this);
    LinkedHashMap.call($this);
    $this.l9_1 = HashMap_init_$Create$();
    return $this;
  }
  function LinkedHashMap_init_$Create$() {
    return LinkedHashMap_init_$Init$(Object.create(LinkedHashMap.prototype));
  }
  function LinkedHashMap_init_$Init$_0(initialCapacity, loadFactor, $this) {
    HashMap_init_$Init$_1(initialCapacity, loadFactor, $this);
    LinkedHashMap.call($this);
    $this.l9_1 = HashMap_init_$Create$();
    return $this;
  }
  function LinkedHashMap_init_$Create$_0(initialCapacity, loadFactor) {
    return LinkedHashMap_init_$Init$_0(initialCapacity, loadFactor, Object.create(LinkedHashMap.prototype));
  }
  function LinkedHashMap_init_$Init$_1(initialCapacity, $this) {
    LinkedHashMap_init_$Init$_0(initialCapacity, 0.0, $this);
    return $this;
  }
  function LinkedHashMap_init_$Create$_1(initialCapacity) {
    return LinkedHashMap_init_$Init$_1(initialCapacity, Object.create(LinkedHashMap.prototype));
  }
  LinkedHashMap.prototype.q6 = function () {
    this.o6();
    this.l9_1.q6();
    this.k9_1 = null;
  };
  LinkedHashMap.prototype.h2 = function (key) {
    return this.l9_1.h2(key);
  };
  LinkedHashMap.prototype.j2 = function (value) {
    var tmp0_elvis_lhs = this.k9_1;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return false;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var node = tmp;
    do {
      if (equals_0(node.a2(), value)) {
        return true;
      }
      node = ensureNotNull(node.q9_1);
    }
     while (!(node === this.k9_1));
    return false;
  };
  LinkedHashMap.prototype.m8 = function () {
    return new EntrySet_0(this);
  };
  LinkedHashMap.prototype.l2 = function (key) {
    var tmp0_safe_receiver = this.l9_1.l2(key);
    return tmp0_safe_receiver == null ? null : tmp0_safe_receiver.a2();
  };
  LinkedHashMap.prototype.a = function (key, value) {
    this.o6();
    var old = this.l9_1.l2(key);
    if (old == null) {
      var newEntry = new ChainEntry(this, key, value);
      this.l9_1.a(key, newEntry);
      addToEnd(newEntry, this);
      return null;
    } else {
      return old.k7(value);
    }
  };
  LinkedHashMap.prototype.z2 = function (key) {
    this.o6();
    var entry = this.l9_1.z2(key);
    if (!(entry == null)) {
      remove_0(entry, this);
      return entry.a2();
    }
    return null;
  };
  LinkedHashMap.prototype.g = function () {
    return this.l9_1.g();
  };
  LinkedHashMap.prototype.o6 = function () {
    if (this.m9_1)
      throw UnsupportedOperationException_init_$Create$();
  };
  function LinkedHashMap() {
    this.k9_1 = null;
    this.m9_1 = false;
  }
  LinkedHashMap.$metadata$ = classMeta('LinkedHashMap', [MutableMap], undefined, undefined, undefined, HashMap.prototype);
  function LinkedHashSet_init_$Init$($this) {
    HashSet_init_$Init$_2(LinkedHashMap_init_$Create$(), $this);
    LinkedHashSet.call($this);
    return $this;
  }
  function LinkedHashSet_init_$Create$() {
    return LinkedHashSet_init_$Init$(Object.create(LinkedHashSet.prototype));
  }
  function LinkedHashSet_init_$Init$_0(initialCapacity, loadFactor, $this) {
    HashSet_init_$Init$_2(LinkedHashMap_init_$Create$_0(initialCapacity, loadFactor), $this);
    LinkedHashSet.call($this);
    return $this;
  }
  function LinkedHashSet_init_$Init$_1(initialCapacity, $this) {
    LinkedHashSet_init_$Init$_0(initialCapacity, 0.0, $this);
    return $this;
  }
  function LinkedHashSet_init_$Create$_0(initialCapacity) {
    return LinkedHashSet_init_$Init$_1(initialCapacity, Object.create(LinkedHashSet.prototype));
  }
  LinkedHashSet.prototype.o6 = function () {
    return this.n8_1.o6();
  };
  function LinkedHashSet() {
  }
  LinkedHashSet.$metadata$ = classMeta('LinkedHashSet', [MutableSet], undefined, undefined, undefined, HashSet.prototype);
  function RandomAccess() {
  }
  RandomAccess.$metadata$ = interfaceMeta('RandomAccess');
  function SafeContinuation_init_$Init$(delegate, $this) {
    SafeContinuation.call($this, delegate, CoroutineSingletons_UNDECIDED_getInstance());
    return $this;
  }
  function SafeContinuation_init_$Create$(delegate) {
    return SafeContinuation_init_$Init$(delegate, Object.create(SafeContinuation.prototype));
  }
  function SafeContinuation(delegate, initialResult) {
    this.u9_1 = delegate;
    this.v9_1 = initialResult;
  }
  SafeContinuation.prototype.q3 = function () {
    return this.u9_1.q3();
  };
  SafeContinuation.prototype.o3 = function (result) {
    var cur = this.v9_1;
    if (cur === CoroutineSingletons_UNDECIDED_getInstance()) {
      this.v9_1 = _Result___get_value__impl__bjfvqg(result);
    } else if (cur === get_COROUTINE_SUSPENDED()) {
      this.v9_1 = CoroutineSingletons_RESUMED_getInstance();
      this.u9_1.o3(result);
    } else
      throw IllegalStateException_init_$Create$_0('Already resumed');
  };
  SafeContinuation.prototype.w9 = function () {
    if (this.v9_1 === CoroutineSingletons_UNDECIDED_getInstance()) {
      this.v9_1 = get_COROUTINE_SUSPENDED();
      return get_COROUTINE_SUSPENDED();
    }
    var result = this.v9_1;
    var tmp;
    if (result === CoroutineSingletons_RESUMED_getInstance()) {
      tmp = get_COROUTINE_SUSPENDED();
    } else {
      if (result instanceof Failure) {
        throw result.y5_1;
      } else {
        tmp = result;
      }
    }
    return tmp;
  };
  SafeContinuation.$metadata$ = classMeta('SafeContinuation', [Continuation]);
  function CancellationException_init_$Init$(message, $this) {
    IllegalStateException_init_$Init$_0(message, $this);
    CancellationException.call($this);
    return $this;
  }
  function CancellationException_init_$Create$(message) {
    var tmp = CancellationException_init_$Init$(message, Object.create(CancellationException.prototype));
    captureStack(tmp, CancellationException_init_$Create$);
    return tmp;
  }
  function CancellationException_init_$Init$_0(message, cause, $this) {
    IllegalStateException_init_$Init$_1(message, cause, $this);
    CancellationException.call($this);
    return $this;
  }
  function CancellationException_init_$Create$_0(message, cause) {
    var tmp = CancellationException_init_$Init$_0(message, cause, Object.create(CancellationException.prototype));
    captureStack(tmp, CancellationException_init_$Create$_0);
    return tmp;
  }
  function CancellationException() {
    captureStack(this, CancellationException);
  }
  CancellationException.$metadata$ = classMeta('CancellationException', undefined, undefined, undefined, undefined, IllegalStateException.prototype);
  function asDynamic(_this__u8e3s4) {
    return _this__u8e3s4;
  }
  function unsafeCastDynamic(_this__u8e3s4) {
    return _this__u8e3s4;
  }
  function unsafeCast(_this__u8e3s4) {
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    return tmp$ret$0;
  }
  function Serializable() {
  }
  Serializable.$metadata$ = interfaceMeta('Serializable');
  function nativeFill(_this__u8e3s4, element, fromIndex, toIndex) {
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    tmp$ret$0.fill(element, fromIndex, toIndex);
  }
  function max(a, b) {
    return Math.max(a, b);
  }
  function min(a, b) {
    return Math.min(a, b);
  }
  function roundToLong(_this__u8e3s4) {
    var tmp;
    if (isNaN_0(_this__u8e3s4)) {
      throw IllegalArgumentException_init_$Create$('Cannot round NaN value.');
    } else {
      Companion_getInstance_7();
      if (_this__u8e3s4 > (new Long(-1, 2147483647)).x9()) {
        Companion_getInstance_7();
        tmp = new Long(-1, 2147483647);
      } else {
        Companion_getInstance_7();
        if (_this__u8e3s4 < (new Long(0, -2147483648)).x9()) {
          Companion_getInstance_7();
          tmp = new Long(0, -2147483648);
        } else {
          tmp = numberToLong(Math.round(_this__u8e3s4));
        }
      }
    }
    return tmp;
  }
  function isNaN_0(_this__u8e3s4) {
    return !(_this__u8e3s4 === _this__u8e3s4);
  }
  function countOneBits(_this__u8e3s4) {
    var v = _this__u8e3s4;
    v = (v & 1431655765) + ((v >>> 1 | 0) & 1431655765) | 0;
    v = (v & 858993459) + ((v >>> 2 | 0) & 858993459) | 0;
    v = (v & 252645135) + ((v >>> 4 | 0) & 252645135) | 0;
    v = (v & 16711935) + ((v >>> 8 | 0) & 16711935) | 0;
    v = (v & 65535) + (v >>> 16 | 0) | 0;
    return v;
  }
  function takeLowestOneBit(_this__u8e3s4) {
    return _this__u8e3s4 & (-_this__u8e3s4 | 0);
  }
  function rotateLeft(_this__u8e3s4, bitCount) {
    var tmp = _this__u8e3s4 << bitCount;
    IntCompanionObject_getInstance();
    return tmp | (_this__u8e3s4 >>> (32 - bitCount | 0) | 0);
  }
  function rotateRight(_this__u8e3s4, bitCount) {
    IntCompanionObject_getInstance();
    return _this__u8e3s4 << (32 - bitCount | 0) | (_this__u8e3s4 >>> bitCount | 0);
  }
  function get_js(_this__u8e3s4) {
    return (_this__u8e3s4 instanceof KClassImpl ? _this__u8e3s4 : THROW_CCE()).z9();
  }
  function KCallable() {
  }
  KCallable.$metadata$ = interfaceMeta('KCallable');
  function KClass() {
  }
  KClass.$metadata$ = interfaceMeta('KClass', [KClassifier]);
  function KClassImpl(jClass) {
    this.y9_1 = jClass;
  }
  KClassImpl.prototype.z9 = function () {
    return this.y9_1;
  };
  KClassImpl.prototype.equals = function (other) {
    var tmp;
    if (other instanceof KClassImpl) {
      tmp = equals_0(this.z9(), other.z9());
    } else {
      tmp = false;
    }
    return tmp;
  };
  KClassImpl.prototype.hashCode = function () {
    var tmp0_safe_receiver = this.aa();
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : getStringHashCode(tmp0_safe_receiver);
    return tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
  };
  KClassImpl.prototype.toString = function () {
    return 'class ' + this.aa();
  };
  KClassImpl.$metadata$ = classMeta('KClassImpl', [KClass]);
  function PrimitiveKClassImpl(jClass, givenSimpleName, isInstanceFunction) {
    KClassImpl.call(this, jClass);
    this.ca_1 = givenSimpleName;
    this.da_1 = isInstanceFunction;
  }
  PrimitiveKClassImpl.prototype.equals = function (other) {
    if (!(other instanceof PrimitiveKClassImpl))
      return false;
    return KClassImpl.prototype.equals.call(this, other) ? this.ca_1 === other.ca_1 : false;
  };
  PrimitiveKClassImpl.prototype.aa = function () {
    return this.ca_1;
  };
  PrimitiveKClassImpl.$metadata$ = classMeta('PrimitiveKClassImpl', undefined, undefined, undefined, undefined, KClassImpl.prototype);
  function NothingKClassImpl() {
    NothingKClassImpl_instance = this;
    KClassImpl.call(this, Object);
    this.fa_1 = 'Nothing';
  }
  NothingKClassImpl.prototype.aa = function () {
    return this.fa_1;
  };
  NothingKClassImpl.prototype.z9 = function () {
    throw UnsupportedOperationException_init_$Create$_0("There's no native JS class for Nothing type");
  };
  NothingKClassImpl.prototype.equals = function (other) {
    return other === this;
  };
  NothingKClassImpl.prototype.hashCode = function () {
    return 0;
  };
  NothingKClassImpl.$metadata$ = objectMeta('NothingKClassImpl', undefined, undefined, undefined, undefined, KClassImpl.prototype);
  var NothingKClassImpl_instance;
  function NothingKClassImpl_getInstance() {
    if (NothingKClassImpl_instance == null)
      new NothingKClassImpl();
    return NothingKClassImpl_instance;
  }
  function ErrorKClass() {
  }
  ErrorKClass.prototype.aa = function () {
    throw IllegalStateException_init_$Create$_0('Unknown simpleName for ErrorKClass');
  };
  ErrorKClass.prototype.equals = function (other) {
    return other === this;
  };
  ErrorKClass.prototype.hashCode = function () {
    return 0;
  };
  ErrorKClass.$metadata$ = classMeta('ErrorKClass', [KClass]);
  function SimpleKClassImpl(jClass) {
    KClassImpl.call(this, jClass);
    var tmp = this;
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = jClass;
    var tmp0_safe_receiver = tmp$ret$0.$metadata$;
    var tmp0_unsafeCast = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.simpleName;
    tmp$ret$1 = tmp0_unsafeCast;
    tmp.ha_1 = tmp$ret$1;
  }
  SimpleKClassImpl.prototype.aa = function () {
    return this.ha_1;
  };
  SimpleKClassImpl.$metadata$ = classMeta('SimpleKClassImpl', undefined, undefined, undefined, undefined, KClassImpl.prototype);
  function KProperty1() {
  }
  KProperty1.$metadata$ = interfaceMeta('KProperty1', [KProperty]);
  function KProperty() {
  }
  KProperty.$metadata$ = interfaceMeta('KProperty', [KCallable]);
  function KProperty0() {
  }
  KProperty0.$metadata$ = interfaceMeta('KProperty0', [KProperty]);
  function KMutableProperty0() {
  }
  KMutableProperty0.$metadata$ = interfaceMeta('KMutableProperty0', [KProperty0, KMutableProperty]);
  function KMutableProperty() {
  }
  KMutableProperty.$metadata$ = interfaceMeta('KMutableProperty', [KProperty]);
  function get_functionClasses() {
    init_properties_primitives_kt_rm1w5q();
    return functionClasses;
  }
  var functionClasses;
  function PrimitiveClasses$anyClass$lambda(it) {
    return isObject(it);
  }
  function PrimitiveClasses$numberClass$lambda(it) {
    return isNumber(it);
  }
  function PrimitiveClasses$booleanClass$lambda(it) {
    return !(it == null) ? typeof it === 'boolean' : false;
  }
  function PrimitiveClasses$byteClass$lambda(it) {
    return !(it == null) ? typeof it === 'number' : false;
  }
  function PrimitiveClasses$shortClass$lambda(it) {
    return !(it == null) ? typeof it === 'number' : false;
  }
  function PrimitiveClasses$intClass$lambda(it) {
    return !(it == null) ? typeof it === 'number' : false;
  }
  function PrimitiveClasses$floatClass$lambda(it) {
    return !(it == null) ? typeof it === 'number' : false;
  }
  function PrimitiveClasses$doubleClass$lambda(it) {
    return !(it == null) ? typeof it === 'number' : false;
  }
  function PrimitiveClasses$arrayClass$lambda(it) {
    return !(it == null) ? isArray(it) : false;
  }
  function PrimitiveClasses$stringClass$lambda(it) {
    return !(it == null) ? typeof it === 'string' : false;
  }
  function PrimitiveClasses$throwableClass$lambda(it) {
    return it instanceof Error;
  }
  function PrimitiveClasses$booleanArrayClass$lambda(it) {
    return !(it == null) ? isBooleanArray(it) : false;
  }
  function PrimitiveClasses$charArrayClass$lambda(it) {
    return !(it == null) ? isCharArray(it) : false;
  }
  function PrimitiveClasses$byteArrayClass$lambda(it) {
    return !(it == null) ? isByteArray(it) : false;
  }
  function PrimitiveClasses$shortArrayClass$lambda(it) {
    return !(it == null) ? isShortArray(it) : false;
  }
  function PrimitiveClasses$intArrayClass$lambda(it) {
    return !(it == null) ? isIntArray(it) : false;
  }
  function PrimitiveClasses$longArrayClass$lambda(it) {
    return !(it == null) ? isLongArray(it) : false;
  }
  function PrimitiveClasses$floatArrayClass$lambda(it) {
    return !(it == null) ? isFloatArray(it) : false;
  }
  function PrimitiveClasses$doubleArrayClass$lambda(it) {
    return !(it == null) ? isDoubleArray(it) : false;
  }
  function PrimitiveClasses$functionClass$lambda($arity) {
    return function (it) {
      var tmp;
      if (typeof it === 'function') {
        var tmp$ret$0;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$0 = it;
        tmp = tmp$ret$0.length === $arity;
      } else {
        tmp = false;
      }
      return tmp;
    };
  }
  function PrimitiveClasses() {
    PrimitiveClasses_instance = this;
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast = Object;
    tmp$ret$0 = tmp0_unsafeCast;
    var tmp_0 = tmp$ret$0;
    tmp.ia_1 = new PrimitiveKClassImpl(tmp_0, 'Any', PrimitiveClasses$anyClass$lambda);
    var tmp_1 = this;
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast_0 = Number;
    tmp$ret$1 = tmp0_unsafeCast_0;
    var tmp_2 = tmp$ret$1;
    tmp_1.ja_1 = new PrimitiveKClassImpl(tmp_2, 'Number', PrimitiveClasses$numberClass$lambda);
    this.ka_1 = NothingKClassImpl_getInstance();
    var tmp_3 = this;
    var tmp$ret$2;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast_1 = Boolean;
    tmp$ret$2 = tmp0_unsafeCast_1;
    var tmp_4 = tmp$ret$2;
    tmp_3.la_1 = new PrimitiveKClassImpl(tmp_4, 'Boolean', PrimitiveClasses$booleanClass$lambda);
    var tmp_5 = this;
    var tmp$ret$3;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast_2 = Number;
    tmp$ret$3 = tmp0_unsafeCast_2;
    var tmp_6 = tmp$ret$3;
    tmp_5.ma_1 = new PrimitiveKClassImpl(tmp_6, 'Byte', PrimitiveClasses$byteClass$lambda);
    var tmp_7 = this;
    var tmp$ret$4;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast_3 = Number;
    tmp$ret$4 = tmp0_unsafeCast_3;
    var tmp_8 = tmp$ret$4;
    tmp_7.na_1 = new PrimitiveKClassImpl(tmp_8, 'Short', PrimitiveClasses$shortClass$lambda);
    var tmp_9 = this;
    var tmp$ret$5;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast_4 = Number;
    tmp$ret$5 = tmp0_unsafeCast_4;
    var tmp_10 = tmp$ret$5;
    tmp_9.oa_1 = new PrimitiveKClassImpl(tmp_10, 'Int', PrimitiveClasses$intClass$lambda);
    var tmp_11 = this;
    var tmp$ret$6;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast_5 = Number;
    tmp$ret$6 = tmp0_unsafeCast_5;
    var tmp_12 = tmp$ret$6;
    tmp_11.pa_1 = new PrimitiveKClassImpl(tmp_12, 'Float', PrimitiveClasses$floatClass$lambda);
    var tmp_13 = this;
    var tmp$ret$7;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast_6 = Number;
    tmp$ret$7 = tmp0_unsafeCast_6;
    var tmp_14 = tmp$ret$7;
    tmp_13.qa_1 = new PrimitiveKClassImpl(tmp_14, 'Double', PrimitiveClasses$doubleClass$lambda);
    var tmp_15 = this;
    var tmp$ret$8;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast_7 = Array;
    tmp$ret$8 = tmp0_unsafeCast_7;
    var tmp_16 = tmp$ret$8;
    tmp_15.ra_1 = new PrimitiveKClassImpl(tmp_16, 'Array', PrimitiveClasses$arrayClass$lambda);
    var tmp_17 = this;
    var tmp$ret$9;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast_8 = String;
    tmp$ret$9 = tmp0_unsafeCast_8;
    var tmp_18 = tmp$ret$9;
    tmp_17.sa_1 = new PrimitiveKClassImpl(tmp_18, 'String', PrimitiveClasses$stringClass$lambda);
    var tmp_19 = this;
    var tmp$ret$10;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast_9 = Error;
    tmp$ret$10 = tmp0_unsafeCast_9;
    var tmp_20 = tmp$ret$10;
    tmp_19.ta_1 = new PrimitiveKClassImpl(tmp_20, 'Throwable', PrimitiveClasses$throwableClass$lambda);
    var tmp_21 = this;
    var tmp$ret$11;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast_10 = Array;
    tmp$ret$11 = tmp0_unsafeCast_10;
    var tmp_22 = tmp$ret$11;
    tmp_21.ua_1 = new PrimitiveKClassImpl(tmp_22, 'BooleanArray', PrimitiveClasses$booleanArrayClass$lambda);
    var tmp_23 = this;
    var tmp$ret$12;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast_11 = Uint16Array;
    tmp$ret$12 = tmp0_unsafeCast_11;
    var tmp_24 = tmp$ret$12;
    tmp_23.va_1 = new PrimitiveKClassImpl(tmp_24, 'CharArray', PrimitiveClasses$charArrayClass$lambda);
    var tmp_25 = this;
    var tmp$ret$13;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast_12 = Int8Array;
    tmp$ret$13 = tmp0_unsafeCast_12;
    var tmp_26 = tmp$ret$13;
    tmp_25.wa_1 = new PrimitiveKClassImpl(tmp_26, 'ByteArray', PrimitiveClasses$byteArrayClass$lambda);
    var tmp_27 = this;
    var tmp$ret$14;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast_13 = Int16Array;
    tmp$ret$14 = tmp0_unsafeCast_13;
    var tmp_28 = tmp$ret$14;
    tmp_27.xa_1 = new PrimitiveKClassImpl(tmp_28, 'ShortArray', PrimitiveClasses$shortArrayClass$lambda);
    var tmp_29 = this;
    var tmp$ret$15;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast_14 = Int32Array;
    tmp$ret$15 = tmp0_unsafeCast_14;
    var tmp_30 = tmp$ret$15;
    tmp_29.ya_1 = new PrimitiveKClassImpl(tmp_30, 'IntArray', PrimitiveClasses$intArrayClass$lambda);
    var tmp_31 = this;
    var tmp$ret$16;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast_15 = Array;
    tmp$ret$16 = tmp0_unsafeCast_15;
    var tmp_32 = tmp$ret$16;
    tmp_31.za_1 = new PrimitiveKClassImpl(tmp_32, 'LongArray', PrimitiveClasses$longArrayClass$lambda);
    var tmp_33 = this;
    var tmp$ret$17;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast_16 = Float32Array;
    tmp$ret$17 = tmp0_unsafeCast_16;
    var tmp_34 = tmp$ret$17;
    tmp_33.ab_1 = new PrimitiveKClassImpl(tmp_34, 'FloatArray', PrimitiveClasses$floatArrayClass$lambda);
    var tmp_35 = this;
    var tmp$ret$18;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast_17 = Float64Array;
    tmp$ret$18 = tmp0_unsafeCast_17;
    var tmp_36 = tmp$ret$18;
    tmp_35.bb_1 = new PrimitiveKClassImpl(tmp_36, 'DoubleArray', PrimitiveClasses$doubleArrayClass$lambda);
  }
  PrimitiveClasses.prototype.cb = function () {
    return this.ia_1;
  };
  PrimitiveClasses.prototype.db = function () {
    return this.ja_1;
  };
  PrimitiveClasses.prototype.eb = function () {
    return this.ka_1;
  };
  PrimitiveClasses.prototype.fb = function () {
    return this.la_1;
  };
  PrimitiveClasses.prototype.gb = function () {
    return this.ma_1;
  };
  PrimitiveClasses.prototype.hb = function () {
    return this.na_1;
  };
  PrimitiveClasses.prototype.ib = function () {
    return this.oa_1;
  };
  PrimitiveClasses.prototype.jb = function () {
    return this.pa_1;
  };
  PrimitiveClasses.prototype.kb = function () {
    return this.qa_1;
  };
  PrimitiveClasses.prototype.lb = function () {
    return this.ra_1;
  };
  PrimitiveClasses.prototype.mb = function () {
    return this.sa_1;
  };
  PrimitiveClasses.prototype.nb = function () {
    return this.ta_1;
  };
  PrimitiveClasses.prototype.ob = function () {
    return this.ua_1;
  };
  PrimitiveClasses.prototype.pb = function () {
    return this.va_1;
  };
  PrimitiveClasses.prototype.qb = function () {
    return this.wa_1;
  };
  PrimitiveClasses.prototype.rb = function () {
    return this.xa_1;
  };
  PrimitiveClasses.prototype.sb = function () {
    return this.ya_1;
  };
  PrimitiveClasses.prototype.tb = function () {
    return this.za_1;
  };
  PrimitiveClasses.prototype.ub = function () {
    return this.ab_1;
  };
  PrimitiveClasses.prototype.vb = function () {
    return this.bb_1;
  };
  PrimitiveClasses.prototype.functionClass = function (arity) {
    var tmp0_elvis_lhs = get_functionClasses()[arity];
    var tmp;
    if (tmp0_elvis_lhs == null) {
      var tmp$ret$3;
      // Inline function 'kotlin.run' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$2;
      // Inline function 'kotlin.reflect.js.internal.PrimitiveClasses.functionClass.<anonymous>' call
      var tmp$ret$0;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp0_unsafeCast = Function;
      tmp$ret$0 = tmp0_unsafeCast;
      var tmp_0 = tmp$ret$0;
      var tmp_1 = 'Function' + arity;
      var result = new PrimitiveKClassImpl(tmp_0, tmp_1, PrimitiveClasses$functionClass$lambda(arity));
      var tmp$ret$1;
      // Inline function 'kotlin.js.asDynamic' call
      var tmp1_asDynamic = get_functionClasses();
      tmp$ret$1 = tmp1_asDynamic;
      tmp$ret$1[arity] = result;
      tmp$ret$2 = result;
      tmp$ret$3 = tmp$ret$2;
      tmp = tmp$ret$3;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  PrimitiveClasses.$metadata$ = objectMeta('PrimitiveClasses');
  Object.defineProperty(PrimitiveClasses.prototype, 'anyClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.cb
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'numberClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.db
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'nothingClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.eb
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'booleanClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.fb
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'byteClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.gb
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'shortClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.hb
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'intClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.ib
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'floatClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.jb
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'doubleClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.kb
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'arrayClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.lb
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'stringClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.mb
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'throwableClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.nb
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'booleanArrayClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.ob
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'charArrayClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.pb
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'byteArrayClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.qb
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'shortArrayClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.rb
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'intArrayClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.sb
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'longArrayClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.tb
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'floatArrayClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.ub
  });
  Object.defineProperty(PrimitiveClasses.prototype, 'doubleArrayClass', {
    configurable: true,
    get: PrimitiveClasses.prototype.vb
  });
  var PrimitiveClasses_instance;
  function PrimitiveClasses_getInstance() {
    if (PrimitiveClasses_instance == null)
      new PrimitiveClasses();
    return PrimitiveClasses_instance;
  }
  var properties_initialized_primitives_kt_jle18u;
  function init_properties_primitives_kt_rm1w5q() {
    if (properties_initialized_primitives_kt_jle18u) {
    } else {
      properties_initialized_primitives_kt_jle18u = true;
      var tmp$ret$0;
      // Inline function 'kotlin.arrayOfNulls' call
      tmp$ret$0 = fillArrayVal(Array(0), null);
      functionClasses = tmp$ret$0;
    }
  }
  function getKClass(jClass) {
    var tmp;
    if (Array.isArray(jClass)) {
      var tmp$ret$1;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = jClass;
      tmp$ret$1 = tmp$ret$0;
      tmp = getKClassM(tmp$ret$1);
    } else {
      var tmp$ret$3;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$2;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$2 = jClass;
      tmp$ret$3 = tmp$ret$2;
      tmp = getKClass1(tmp$ret$3);
    }
    return tmp;
  }
  function getKClassM(jClasses) {
    var tmp0_subject = jClasses.length;
    var tmp;
    switch (tmp0_subject) {
      case 1:
        tmp = getKClass1(jClasses[0]);
        break;
      case 0:
        var tmp$ret$1;
        // Inline function 'kotlin.js.unsafeCast' call
        var tmp0_unsafeCast = NothingKClassImpl_getInstance();
        var tmp$ret$0;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$0 = tmp0_unsafeCast;
        tmp$ret$1 = tmp$ret$0;

        tmp = tmp$ret$1;
        break;
      default:
        var tmp$ret$3;
        // Inline function 'kotlin.js.unsafeCast' call
        var tmp1_unsafeCast = new ErrorKClass();
        var tmp$ret$2;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$2 = tmp1_unsafeCast;
        tmp$ret$3 = tmp$ret$2;

        tmp = tmp$ret$3;
        break;
    }
    return tmp;
  }
  function getKClass1(jClass) {
    if (jClass === String) {
      var tmp$ret$1;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp0_unsafeCast = PrimitiveClasses_getInstance().sa_1;
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = tmp0_unsafeCast;
      tmp$ret$1 = tmp$ret$0;
      return tmp$ret$1;
    }
    var tmp$ret$2;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$2 = jClass;
    var metadata = tmp$ret$2.$metadata$;
    var tmp;
    if (metadata != null) {
      var tmp_0;
      if (metadata.$kClass$ == null) {
        var kClass = new SimpleKClassImpl(jClass);
        metadata.$kClass$ = kClass;
        tmp_0 = kClass;
      } else {
        tmp_0 = metadata.$kClass$;
      }
      tmp = tmp_0;
    } else {
      tmp = new SimpleKClassImpl(jClass);
    }
    return tmp;
  }
  function getKClassFromExpression(e) {
    var tmp$ret$3;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_subject = typeof e;
    var tmp;
    switch (tmp0_subject) {
      case 'string':
        tmp = PrimitiveClasses_getInstance().sa_1;
        break;
      case 'number':
        var tmp_0;
        var tmp$ret$0;
        // Inline function 'kotlin.js.asDynamic' call
        var tmp0_asDynamic = jsBitwiseOr(e, 0);
        tmp$ret$0 = tmp0_asDynamic;

        if (tmp$ret$0 === e) {
          tmp_0 = PrimitiveClasses_getInstance().oa_1;
        } else {
          tmp_0 = PrimitiveClasses_getInstance().qa_1;
        }

        tmp = tmp_0;
        break;
      case 'boolean':
        tmp = PrimitiveClasses_getInstance().la_1;
        break;
      case 'function':
        var tmp_1 = PrimitiveClasses_getInstance();
        var tmp$ret$1;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$1 = e;

        tmp = tmp_1.functionClass(tmp$ret$1.length);
        break;
      default:
        var tmp_2;
        if (isBooleanArray(e)) {
          tmp_2 = PrimitiveClasses_getInstance().ua_1;
        } else {
          if (isCharArray(e)) {
            tmp_2 = PrimitiveClasses_getInstance().va_1;
          } else {
            if (isByteArray(e)) {
              tmp_2 = PrimitiveClasses_getInstance().wa_1;
            } else {
              if (isShortArray(e)) {
                tmp_2 = PrimitiveClasses_getInstance().xa_1;
              } else {
                if (isIntArray(e)) {
                  tmp_2 = PrimitiveClasses_getInstance().ya_1;
                } else {
                  if (isLongArray(e)) {
                    tmp_2 = PrimitiveClasses_getInstance().za_1;
                  } else {
                    if (isFloatArray(e)) {
                      tmp_2 = PrimitiveClasses_getInstance().ab_1;
                    } else {
                      if (isDoubleArray(e)) {
                        tmp_2 = PrimitiveClasses_getInstance().bb_1;
                      } else {
                        if (isInterface(e, KClass)) {
                          tmp_2 = getKClass(KClass);
                        } else {
                          if (isArray(e)) {
                            tmp_2 = PrimitiveClasses_getInstance().ra_1;
                          } else {
                            var constructor = Object.getPrototypeOf(e).constructor;
                            var tmp_3;
                            if (constructor === Object) {
                              tmp_3 = PrimitiveClasses_getInstance().ia_1;
                            } else if (constructor === Error) {
                              tmp_3 = PrimitiveClasses_getInstance().ta_1;
                            } else {
                              var jsClass = constructor;
                              tmp_3 = getKClass1(jsClass);
                            }
                            tmp_2 = tmp_3;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }

        tmp = tmp_2;
        break;
    }
    var tmp1_unsafeCast = tmp;
    var tmp$ret$2;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$2 = tmp1_unsafeCast;
    tmp$ret$3 = tmp$ret$2;
    return tmp$ret$3;
  }
  function Appendable() {
  }
  Appendable.$metadata$ = interfaceMeta('Appendable');
  function StringBuilder_init_$Init$(capacity, $this) {
    StringBuilder_init_$Init$_0($this);
    return $this;
  }
  function StringBuilder_init_$Create$(capacity) {
    return StringBuilder_init_$Init$(capacity, Object.create(StringBuilder.prototype));
  }
  function StringBuilder_init_$Init$_0($this) {
    StringBuilder.call($this, '');
    return $this;
  }
  function StringBuilder_init_$Create$_0() {
    return StringBuilder_init_$Init$_0(Object.create(StringBuilder.prototype));
  }
  function StringBuilder(content) {
    this.wb_1 = !(content === undefined) ? content : '';
  }
  StringBuilder.prototype.e6 = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    var tmp0_asDynamic = this.wb_1;
    tmp$ret$0 = tmp0_asDynamic;
    return tmp$ret$0.length;
  };
  StringBuilder.prototype.f6 = function (index) {
    var tmp$ret$0;
    // Inline function 'kotlin.text.getOrElse' call
    var tmp0_getOrElse = this.wb_1;
    var tmp;
    if (index >= 0 ? index <= get_lastIndex_1(tmp0_getOrElse) : false) {
      tmp = charSequenceGet(tmp0_getOrElse, index);
    } else {
      throw IndexOutOfBoundsException_init_$Create$('index: ' + index + ', length: ' + this.e6() + '}');
    }
    tmp$ret$0 = tmp;
    return tmp$ret$0;
  };
  StringBuilder.prototype.g6 = function (startIndex, endIndex) {
    var tmp$ret$1;
    // Inline function 'kotlin.text.substring' call
    var tmp0_substring = this.wb_1;
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = tmp0_substring;
    tmp$ret$1 = tmp$ret$0.substring(startIndex, endIndex);
    return tmp$ret$1;
  };
  StringBuilder.prototype.b5 = function (value) {
    var tmp0_this = this;
    tmp0_this.wb_1 = tmp0_this.wb_1 + new Char_0(value);
    return this;
  };
  StringBuilder.prototype.c = function (value) {
    var tmp0_this = this;
    tmp0_this.wb_1 = tmp0_this.wb_1 + toString_1(value);
    return this;
  };
  StringBuilder.prototype.xb = function (value) {
    var tmp0_this = this;
    tmp0_this.wb_1 = tmp0_this.wb_1 + toString_1(value);
    return this;
  };
  StringBuilder.prototype.yb = function (value) {
    var tmp0_this = this;
    var tmp = tmp0_this;
    var tmp_0 = tmp0_this.wb_1;
    var tmp1_elvis_lhs = value;
    tmp.wb_1 = tmp_0 + (tmp1_elvis_lhs == null ? 'null' : tmp1_elvis_lhs);
    return this;
  };
  StringBuilder.prototype.toString = function () {
    return this.wb_1;
  };
  StringBuilder.$metadata$ = classMeta('StringBuilder', [Appendable, CharSequence]);
  function uppercaseChar(_this__u8e3s4) {
    var tmp$ret$2;
    // Inline function 'kotlin.text.uppercase' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    var tmp0_asDynamic = toString_0(_this__u8e3s4);
    tmp$ret$0 = tmp0_asDynamic;
    var tmp1_unsafeCast = tmp$ret$0.toUpperCase();
    tmp$ret$1 = tmp1_unsafeCast;
    tmp$ret$2 = tmp$ret$1;
    var uppercase = tmp$ret$2;
    return uppercase.length > 1 ? _this__u8e3s4 : charSequenceGet(uppercase, 0);
  }
  function lowercaseChar(_this__u8e3s4) {
    var tmp$ret$2;
    // Inline function 'kotlin.text.lowercase' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    var tmp0_asDynamic = toString_0(_this__u8e3s4);
    tmp$ret$0 = tmp0_asDynamic;
    var tmp1_unsafeCast = tmp$ret$0.toLowerCase();
    tmp$ret$1 = tmp1_unsafeCast;
    tmp$ret$2 = tmp$ret$1;
    return charSequenceGet(tmp$ret$2, 0);
  }
  function uppercase(_this__u8e3s4) {
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    var tmp0_asDynamic = toString_0(_this__u8e3s4);
    tmp$ret$0 = tmp0_asDynamic;
    var tmp1_unsafeCast = tmp$ret$0.toUpperCase();
    tmp$ret$1 = tmp1_unsafeCast;
    return tmp$ret$1;
  }
  function lowercase(_this__u8e3s4) {
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    var tmp0_asDynamic = toString_0(_this__u8e3s4);
    tmp$ret$0 = tmp0_asDynamic;
    var tmp1_unsafeCast = tmp$ret$0.toLowerCase();
    tmp$ret$1 = tmp1_unsafeCast;
    return tmp$ret$1;
  }
  function isWhitespace(_this__u8e3s4) {
    return isWhitespaceImpl(_this__u8e3s4);
  }
  var STRING_CASE_INSENSITIVE_ORDER;
  function nativeLastIndexOf(_this__u8e3s4, str, fromIndex) {
    init_properties_string_kt_z8k4s7();
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    return tmp$ret$0.lastIndexOf(str, fromIndex);
  }
  function substring_1(_this__u8e3s4, startIndex, endIndex) {
    init_properties_string_kt_z8k4s7();
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    return tmp$ret$0.substring(startIndex, endIndex);
  }
  function substring_2(_this__u8e3s4, startIndex) {
    init_properties_string_kt_z8k4s7();
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    return tmp$ret$0.substring(startIndex);
  }
  function compareTo(_this__u8e3s4, other, ignoreCase) {
    init_properties_string_kt_z8k4s7();
    if (ignoreCase) {
      var n1 = _this__u8e3s4.length;
      var n2 = other.length;
      var tmp$ret$0;
      // Inline function 'kotlin.comparisons.minOf' call
      tmp$ret$0 = Math.min(n1, n2);
      var min = tmp$ret$0;
      if (min === 0)
        return n1 - n2 | 0;
      var inductionVariable = 0;
      if (inductionVariable < min)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var thisChar = charSequenceGet(_this__u8e3s4, index);
          var otherChar = charSequenceGet(other, index);
          if (!equals_0(new Char_0(thisChar), new Char_0(otherChar))) {
            thisChar = uppercaseChar(thisChar);
            otherChar = uppercaseChar(otherChar);
            if (!equals_0(new Char_0(thisChar), new Char_0(otherChar))) {
              var tmp$ret$4;
              // Inline function 'kotlin.text.lowercaseChar' call
              var tmp0_lowercaseChar = thisChar;
              var tmp$ret$3;
              // Inline function 'kotlin.text.lowercase' call
              var tmp$ret$2;
              // Inline function 'kotlin.js.unsafeCast' call
              var tmp$ret$1;
              // Inline function 'kotlin.js.asDynamic' call
              var tmp0_asDynamic = toString_0(tmp0_lowercaseChar);
              tmp$ret$1 = tmp0_asDynamic;
              var tmp1_unsafeCast = tmp$ret$1.toLowerCase();
              tmp$ret$2 = tmp1_unsafeCast;
              tmp$ret$3 = tmp$ret$2;
              tmp$ret$4 = charSequenceGet(tmp$ret$3, 0);
              thisChar = tmp$ret$4;
              var tmp$ret$8;
              // Inline function 'kotlin.text.lowercaseChar' call
              var tmp1_lowercaseChar = otherChar;
              var tmp$ret$7;
              // Inline function 'kotlin.text.lowercase' call
              var tmp$ret$6;
              // Inline function 'kotlin.js.unsafeCast' call
              var tmp$ret$5;
              // Inline function 'kotlin.js.asDynamic' call
              var tmp0_asDynamic_0 = toString_0(tmp1_lowercaseChar);
              tmp$ret$5 = tmp0_asDynamic_0;
              var tmp1_unsafeCast_0 = tmp$ret$5.toLowerCase();
              tmp$ret$6 = tmp1_unsafeCast_0;
              tmp$ret$7 = tmp$ret$6;
              tmp$ret$8 = charSequenceGet(tmp$ret$7, 0);
              otherChar = tmp$ret$8;
              if (!equals_0(new Char_0(thisChar), new Char_0(otherChar))) {
                return Char__compareTo_impl_ypi4mb(thisChar, otherChar);
              }
            }
          }
        }
         while (inductionVariable < min);
      return n1 - n2 | 0;
    } else {
      return compareTo_0(_this__u8e3s4, other);
    }
  }
  function lowercase_0(_this__u8e3s4) {
    init_properties_string_kt_z8k4s7();
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    return tmp$ret$0.toLowerCase();
  }
  function nativeIndexOf(_this__u8e3s4, str, fromIndex) {
    init_properties_string_kt_z8k4s7();
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    return tmp$ret$0.indexOf(str, fromIndex);
  }
  function nativeStartsWith(_this__u8e3s4, s, position) {
    init_properties_string_kt_z8k4s7();
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    return tmp$ret$0.startsWith(s, position);
  }
  function sam$kotlin_Comparator$0_1(function_0) {
    this.zb_1 = function_0;
  }
  sam$kotlin_Comparator$0_1.prototype.s = function (a, b) {
    return this.zb_1(a, b);
  };
  sam$kotlin_Comparator$0_1.prototype.compare = function (a, b) {
    return this.s(a, b);
  };
  sam$kotlin_Comparator$0_1.$metadata$ = classMeta('sam$kotlin_Comparator$0', [Comparator]);
  function STRING_CASE_INSENSITIVE_ORDER$lambda(a, b) {
    init_properties_string_kt_z8k4s7();
    return compareTo(a, b, true);
  }
  var properties_initialized_string_kt_4g1sj;
  function init_properties_string_kt_z8k4s7() {
    if (properties_initialized_string_kt_4g1sj) {
    } else {
      properties_initialized_string_kt_4g1sj = true;
      var tmp = STRING_CASE_INSENSITIVE_ORDER$lambda;
      STRING_CASE_INSENSITIVE_ORDER = new sam$kotlin_Comparator$0_1(tmp);
    }
  }
  function isBlank(_this__u8e3s4) {
    var tmp;
    if (charSequenceLength(_this__u8e3s4) === 0) {
      tmp = true;
    } else {
      var tmp$ret$0;
      $l$block_0: {
        // Inline function 'kotlin.collections.all' call
        var tmp0_all = get_indices_0(_this__u8e3s4);
        var tmp_0;
        if (isInterface(tmp0_all, Collection)) {
          tmp_0 = tmp0_all.i();
        } else {
          tmp_0 = false;
        }
        if (tmp_0) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
        var inductionVariable = tmp0_all.d1_1;
        var last = tmp0_all.e1_1;
        if (inductionVariable <= last)
          do {
            var element = inductionVariable;
            inductionVariable = inductionVariable + 1 | 0;
            var tmp$ret$1;
            // Inline function 'kotlin.text.isBlank.<anonymous>' call
            tmp$ret$1 = isWhitespace(charSequenceGet(_this__u8e3s4, element));
            if (!tmp$ret$1) {
              tmp$ret$0 = false;
              break $l$block_0;
            }
          }
           while (!(element === last));
        tmp$ret$0 = true;
      }
      tmp = tmp$ret$0;
    }
    return tmp;
  }
  function startsWith_1(_this__u8e3s4, prefix, ignoreCase) {
    if (!ignoreCase) {
      var tmp$ret$1;
      // Inline function 'kotlin.text.nativeStartsWith' call
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = _this__u8e3s4;
      tmp$ret$1 = tmp$ret$0.startsWith(prefix, 0);
      return tmp$ret$1;
    } else
      return regionMatches(_this__u8e3s4, 0, prefix, 0, prefix.length, ignoreCase);
  }
  function startsWith$default_1(_this__u8e3s4, prefix, ignoreCase, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      ignoreCase = false;
    return startsWith_1(_this__u8e3s4, prefix, ignoreCase);
  }
  function regionMatches(_this__u8e3s4, thisOffset, other, otherOffset, length, ignoreCase) {
    return regionMatchesImpl(_this__u8e3s4, thisOffset, other, otherOffset, length, ignoreCase);
  }
  function nativeIndexOf_0(_this__u8e3s4, ch, fromIndex) {
    var tmp$ret$1;
    // Inline function 'kotlin.text.nativeIndexOf' call
    var tmp0_nativeIndexOf = toString_0(ch);
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    tmp$ret$1 = tmp$ret$0.indexOf(tmp0_nativeIndexOf, fromIndex);
    return tmp$ret$1;
  }
  function addSuppressed(_this__u8e3s4, exception) {
    if (!(_this__u8e3s4 === exception)) {
      var tmp$ret$1;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = _this__u8e3s4;
      var tmp0_unsafeCast = tmp$ret$0._suppressed;
      tmp$ret$1 = tmp0_unsafeCast;
      var suppressed = tmp$ret$1;
      if (suppressed == null) {
        var tmp$ret$2;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$2 = _this__u8e3s4;
        tmp$ret$2._suppressed = mutableListOf_0([exception]);
      } else {
        suppressed.b(exception);
      }
    }
  }
  function get_durationAssertionsEnabled() {
    return true;
  }
  var DurationUnit_NANOSECONDS_instance;
  var DurationUnit_MICROSECONDS_instance;
  var DurationUnit_MILLISECONDS_instance;
  var DurationUnit_SECONDS_instance;
  var DurationUnit_MINUTES_instance;
  var DurationUnit_HOURS_instance;
  var DurationUnit_DAYS_instance;
  var DurationUnit_entriesInitialized;
  function DurationUnit_initEntries() {
    if (DurationUnit_entriesInitialized)
      return Unit_getInstance();
    DurationUnit_entriesInitialized = true;
    DurationUnit_NANOSECONDS_instance = new DurationUnit('NANOSECONDS', 0, 1.0);
    DurationUnit_MICROSECONDS_instance = new DurationUnit('MICROSECONDS', 1, 1000.0);
    DurationUnit_MILLISECONDS_instance = new DurationUnit('MILLISECONDS', 2, 1000000.0);
    DurationUnit_SECONDS_instance = new DurationUnit('SECONDS', 3, 1.0E9);
    DurationUnit_MINUTES_instance = new DurationUnit('MINUTES', 4, 6.0E10);
    DurationUnit_HOURS_instance = new DurationUnit('HOURS', 5, 3.6E12);
    DurationUnit_DAYS_instance = new DurationUnit('DAYS', 6, 8.64E13);
  }
  function DurationUnit(name, ordinal, scale) {
    Enum.call(this, name, ordinal);
    this.cc_1 = scale;
  }
  DurationUnit.$metadata$ = classMeta('DurationUnit', undefined, undefined, undefined, undefined, Enum.prototype);
  function convertDurationUnit(value, sourceUnit, targetUnit) {
    var sourceCompareTarget = compareTo_0(sourceUnit.cc_1, targetUnit.cc_1);
    return sourceCompareTarget > 0 ? value * (sourceUnit.cc_1 / targetUnit.cc_1) : sourceCompareTarget < 0 ? value / (targetUnit.cc_1 / sourceUnit.cc_1) : value;
  }
  function DurationUnit_NANOSECONDS_getInstance() {
    DurationUnit_initEntries();
    return DurationUnit_NANOSECONDS_instance;
  }
  function DurationUnit_MILLISECONDS_getInstance() {
    DurationUnit_initEntries();
    return DurationUnit_MILLISECONDS_instance;
  }
  function get_2(_this__u8e3s4, index) {
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    return tmp$ret$0[index];
  }
  function _Char___init__impl__6a9atx(value) {
    return value;
  }
  function _get_value__a43j40_0($this) {
    return $this;
  }
  function _Char___init__impl__6a9atx_0(code) {
    var tmp$ret$0;
    // Inline function 'kotlin.UShort.toInt' call
    tmp$ret$0 = _UShort___get_data__impl__g0245(code) & 65535;
    var tmp = _Char___init__impl__6a9atx(tmp$ret$0);
    return tmp;
  }
  function Char__compareTo_impl_ypi4mb($this, other) {
    return _get_value__a43j40_0($this) - _get_value__a43j40_0(other) | 0;
  }
  function Char__compareTo_impl_ypi4mb_0($this, other) {
    var tmp = $this.i1_1;
    return Char__compareTo_impl_ypi4mb(tmp, other instanceof Char_0 ? other.i1_1 : THROW_CCE());
  }
  function Char__toInt_impl_vasixd($this) {
    return _get_value__a43j40_0($this);
  }
  function Char__equals_impl_x6719k($this, other) {
    if (!(other instanceof Char_0))
      return false;
    return _get_value__a43j40_0($this) === _get_value__a43j40_0(other.i1_1);
  }
  function Char__hashCode_impl_otmys($this) {
    return _get_value__a43j40_0($this);
  }
  function toString_0($this) {
    var tmp$ret$0;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast = String.fromCharCode(_get_value__a43j40_0($this));
    tmp$ret$0 = tmp0_unsafeCast;
    return tmp$ret$0;
  }
  function Companion_5() {
    Companion_instance_5 = this;
    this.dc_1 = _Char___init__impl__6a9atx(0);
    this.ec_1 = _Char___init__impl__6a9atx(65535);
    this.fc_1 = _Char___init__impl__6a9atx(55296);
    this.gc_1 = _Char___init__impl__6a9atx(56319);
    this.hc_1 = _Char___init__impl__6a9atx(56320);
    this.ic_1 = _Char___init__impl__6a9atx(57343);
    this.jc_1 = _Char___init__impl__6a9atx(55296);
    this.kc_1 = _Char___init__impl__6a9atx(57343);
    this.lc_1 = 2;
    this.mc_1 = 16;
  }
  Companion_5.$metadata$ = objectMeta('Companion');
  var Companion_instance_5;
  function Companion_getInstance_5() {
    if (Companion_instance_5 == null)
      new Companion_5();
    return Companion_instance_5;
  }
  function Char_0(value) {
    Companion_getInstance_5();
    this.i1_1 = value;
  }
  Char_0.prototype.nc = function (other) {
    return Char__compareTo_impl_ypi4mb(this.i1_1, other);
  };
  Char_0.prototype.h6 = function (other) {
    return Char__compareTo_impl_ypi4mb_0(this, other);
  };
  Char_0.prototype.equals = function (other) {
    return Char__equals_impl_x6719k(this.i1_1, other);
  };
  Char_0.prototype.hashCode = function () {
    return Char__hashCode_impl_otmys(this.i1_1);
  };
  Char_0.prototype.toString = function () {
    return toString_0(this.i1_1);
  };
  Char_0.$metadata$ = classMeta('Char', [Comparable]);
  function Iterable_0() {
  }
  Iterable_0.$metadata$ = interfaceMeta('Iterable');
  function List() {
  }
  List.$metadata$ = interfaceMeta('List', [Collection]);
  function MutableSet() {
  }
  MutableSet.$metadata$ = interfaceMeta('MutableSet', [Set, MutableCollection]);
  function MutableList() {
  }
  MutableList.$metadata$ = interfaceMeta('MutableList', [List, MutableCollection]);
  function Set() {
  }
  Set.$metadata$ = interfaceMeta('Set', [Collection]);
  function MutableEntry() {
  }
  MutableEntry.$metadata$ = interfaceMeta('MutableEntry', [Entry]);
  function MutableMap() {
  }
  MutableMap.$metadata$ = interfaceMeta('MutableMap', [Map]);
  function Entry() {
  }
  Entry.$metadata$ = interfaceMeta('Entry');
  function Map() {
  }
  Map.$metadata$ = interfaceMeta('Map');
  function MutableCollection() {
  }
  MutableCollection.$metadata$ = interfaceMeta('MutableCollection', [Collection, MutableIterable]);
  function Collection() {
  }
  Collection.$metadata$ = interfaceMeta('Collection', [Iterable_0]);
  function MutableIterable() {
  }
  MutableIterable.$metadata$ = interfaceMeta('MutableIterable', [Iterable_0]);
  function Companion_6() {
    Companion_instance_6 = this;
  }
  Companion_6.$metadata$ = objectMeta('Companion');
  var Companion_instance_6;
  function Companion_getInstance_6() {
    if (Companion_instance_6 == null)
      new Companion_6();
    return Companion_instance_6;
  }
  function Enum(name, ordinal) {
    Companion_getInstance_6();
    this.n4_1 = name;
    this.o4_1 = ordinal;
  }
  Enum.prototype.oc = function () {
    return this.n4_1;
  };
  Enum.prototype.p4 = function () {
    return this.o4_1;
  };
  Enum.prototype.q4 = function (other) {
    return compareTo_0(this.o4_1, other.o4_1);
  };
  Enum.prototype.h6 = function (other) {
    return this.q4(other instanceof Enum ? other : THROW_CCE());
  };
  Enum.prototype.equals = function (other) {
    return this === other;
  };
  Enum.prototype.hashCode = function () {
    return identityHashCode(this);
  };
  Enum.prototype.toString = function () {
    return this.n4_1;
  };
  Enum.$metadata$ = classMeta('Enum', [Comparable]);
  function arrayOf(elements) {
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = elements;
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  }
  function toString_1(_this__u8e3s4) {
    var tmp0_safe_receiver = _this__u8e3s4;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : toString_2(tmp0_safe_receiver);
    return tmp1_elvis_lhs == null ? 'null' : tmp1_elvis_lhs;
  }
  function intArrayOf(elements) {
    return elements;
  }
  function charArrayOf(elements) {
    return elements;
  }
  function fillArrayVal(array, initValue) {
    var inductionVariable = 0;
    var last = array.length - 1 | 0;
    if (inductionVariable <= last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        array[i] = initValue;
      }
       while (!(i === last));
    return array;
  }
  function arrayIterator(array) {
    return new arrayIterator$1(array);
  }
  function intArrayIterator(array) {
    return new intArrayIterator$1(array);
  }
  function charArrayOf_0(arr) {
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'withType' call
    var tmp0_withType = new Uint16Array(arr);
    tmp0_withType.$type$ = 'CharArray';
    tmp$ret$0 = tmp0_withType;
    var tmp1_unsafeCast = tmp$ret$0;
    tmp$ret$1 = tmp1_unsafeCast;
    return tmp$ret$1;
  }
  function arrayIterator$1($array) {
    this.qc_1 = $array;
    this.pc_1 = 0;
  }
  arrayIterator$1.prototype.e = function () {
    return !(this.pc_1 === this.qc_1.length);
  };
  arrayIterator$1.prototype.f = function () {
    var tmp;
    if (!(this.pc_1 === this.qc_1.length)) {
      var tmp0_this = this;
      var tmp1 = tmp0_this.pc_1;
      tmp0_this.pc_1 = tmp1 + 1 | 0;
      tmp = this.qc_1[tmp1];
    } else {
      throw NoSuchElementException_init_$Create$_0('' + this.pc_1);
    }
    return tmp;
  };
  arrayIterator$1.$metadata$ = classMeta(undefined, [Iterator]);
  function intArrayIterator$1($array) {
    this.sc_1 = $array;
    IntIterator.call(this);
    this.rc_1 = 0;
  }
  intArrayIterator$1.prototype.e = function () {
    return !(this.rc_1 === this.sc_1.length);
  };
  intArrayIterator$1.prototype.h3 = function () {
    var tmp;
    if (!(this.rc_1 === this.sc_1.length)) {
      var tmp0_this = this;
      var tmp1 = tmp0_this.rc_1;
      tmp0_this.rc_1 = tmp1 + 1 | 0;
      tmp = this.sc_1[tmp1];
    } else {
      throw NoSuchElementException_init_$Create$_0('' + this.rc_1);
    }
    return tmp;
  };
  intArrayIterator$1.$metadata$ = classMeta(undefined, undefined, undefined, undefined, undefined, IntIterator.prototype);
  function get_buf() {
    init_properties_bitUtils_kt_cxtw9i();
    return buf;
  }
  var buf;
  function get_bufFloat64() {
    init_properties_bitUtils_kt_cxtw9i();
    return bufFloat64;
  }
  var bufFloat64;
  var bufFloat32;
  function get_bufInt32() {
    init_properties_bitUtils_kt_cxtw9i();
    return bufInt32;
  }
  var bufInt32;
  function get_lowIndex() {
    init_properties_bitUtils_kt_cxtw9i();
    return lowIndex;
  }
  var lowIndex;
  function get_highIndex() {
    init_properties_bitUtils_kt_cxtw9i();
    return highIndex;
  }
  var highIndex;
  function getNumberHashCode(obj) {
    init_properties_bitUtils_kt_cxtw9i();
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast = jsBitwiseOr(obj, 0);
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = tmp0_unsafeCast;
    tmp$ret$1 = tmp$ret$0;
    if (tmp$ret$1 === obj) {
      return numberToInt(obj);
    }
    get_bufFloat64()[0] = obj;
    return imul(get_bufInt32()[get_highIndex()], 31) + get_bufInt32()[get_lowIndex()] | 0;
  }
  var properties_initialized_bitUtils_kt_i2bo3e;
  function init_properties_bitUtils_kt_cxtw9i() {
    if (properties_initialized_bitUtils_kt_i2bo3e) {
    } else {
      properties_initialized_bitUtils_kt_i2bo3e = true;
      buf = new ArrayBuffer(8);
      var tmp$ret$1;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp0_unsafeCast = new Float64Array(get_buf());
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = tmp0_unsafeCast;
      tmp$ret$1 = tmp$ret$0;
      bufFloat64 = tmp$ret$1;
      var tmp$ret$1_0;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp0_unsafeCast_0 = new Float32Array(get_buf());
      var tmp$ret$0_0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0_0 = tmp0_unsafeCast_0;
      tmp$ret$1_0 = tmp$ret$0_0;
      bufFloat32 = tmp$ret$1_0;
      var tmp$ret$1_1;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp0_unsafeCast_1 = new Int32Array(get_buf());
      var tmp$ret$0_1;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0_1 = tmp0_unsafeCast_1;
      tmp$ret$1_1 = tmp$ret$0_1;
      bufInt32 = tmp$ret$1_1;
      var tmp$ret$1_2;
      // Inline function 'kotlin.run' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0_2;
      // Inline function 'kotlin.js.lowIndex.<anonymous>' call
      get_bufFloat64()[0] = -1.0;
      tmp$ret$0_2 = !(get_bufInt32()[0] === 0) ? 1 : 0;
      tmp$ret$1_2 = tmp$ret$0_2;
      lowIndex = tmp$ret$1_2;
      highIndex = 1 - get_lowIndex() | 0;
    }
  }
  function charSequenceGet(a, index) {
    var tmp;
    if (isString(a)) {
      var tmp$ret$4;
      // Inline function 'kotlin.Char' call
      var tmp$ret$1;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = a;
      var tmp0_unsafeCast = tmp$ret$0.charCodeAt(index);
      tmp$ret$1 = tmp0_unsafeCast;
      var tmp1_Char = tmp$ret$1;
      var tmp_0;
      var tmp$ret$2;
      // Inline function 'kotlin.code' call
      Companion_getInstance_5();
      var tmp0__get_code__88qj9g = _Char___init__impl__6a9atx(0);
      tmp$ret$2 = Char__toInt_impl_vasixd(tmp0__get_code__88qj9g);
      if (tmp1_Char < tmp$ret$2) {
        tmp_0 = true;
      } else {
        var tmp$ret$3;
        // Inline function 'kotlin.code' call
        Companion_getInstance_5();
        var tmp1__get_code__adl84j = _Char___init__impl__6a9atx(65535);
        tmp$ret$3 = Char__toInt_impl_vasixd(tmp1__get_code__adl84j);
        tmp_0 = tmp1_Char > tmp$ret$3;
      }
      if (tmp_0) {
        throw IllegalArgumentException_init_$Create$('Invalid Char code: ' + tmp1_Char);
      }
      tmp$ret$4 = numberToChar(tmp1_Char);
      tmp = tmp$ret$4;
    } else {
      tmp = a.f6(index);
    }
    return tmp;
  }
  function isString(a) {
    return typeof a === 'string';
  }
  function charSequenceLength(a) {
    var tmp;
    if (isString(a)) {
      var tmp$ret$1;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = a;
      var tmp0_unsafeCast = tmp$ret$0.length;
      tmp$ret$1 = tmp0_unsafeCast;
      tmp = tmp$ret$1;
    } else {
      tmp = a.e6();
    }
    return tmp;
  }
  function charSequenceSubSequence(a, startIndex, endIndex) {
    var tmp;
    if (isString(a)) {
      var tmp$ret$1;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = a;
      var tmp0_unsafeCast = tmp$ret$0.substring(startIndex, endIndex);
      tmp$ret$1 = tmp0_unsafeCast;
      tmp = tmp$ret$1;
    } else {
      tmp = a.g6(startIndex, endIndex);
    }
    return tmp;
  }
  function arrayToString(array) {
    return joinToString$default(array, ', ', '[', ']', 0, null, arrayToString$lambda, 24, null);
  }
  function arrayToString$lambda(it) {
    return toString_2(it);
  }
  function compareTo_0(a, b) {
    var tmp0_subject = typeof a;
    var tmp;
    switch (tmp0_subject) {
      case 'number':
        var tmp_0;
        if (typeof b === 'number') {
          tmp_0 = doubleCompareTo(a, b);
        } else {
          if (b instanceof Long) {
            tmp_0 = doubleCompareTo(a, b.x9());
          } else {
            tmp_0 = primitiveCompareTo(a, b);
          }
        }

        tmp = tmp_0;
        break;
      case 'string':
      case 'boolean':
        tmp = primitiveCompareTo(a, b);
        break;
      default:
        tmp = compareToDoNotIntrinsicify(a, b);
        break;
    }
    return tmp;
  }
  function doubleCompareTo(a, b) {
    var tmp;
    if (a < b) {
      tmp = -1;
    } else if (a > b) {
      tmp = 1;
    } else if (a === b) {
      var tmp_0;
      if (a !== 0) {
        tmp_0 = 0;
      } else {
        var tmp$ret$0;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$0 = 1;
        var ia = tmp$ret$0 / a;
        var tmp_1;
        var tmp$ret$1;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$1 = 1;
        if (ia === tmp$ret$1 / b) {
          tmp_1 = 0;
        } else {
          if (ia < 0) {
            tmp_1 = -1;
          } else {
            tmp_1 = 1;
          }
        }
        tmp_0 = tmp_1;
      }
      tmp = tmp_0;
    } else if (a !== a) {
      tmp = b !== b ? 0 : 1;
    } else {
      tmp = -1;
    }
    return tmp;
  }
  function primitiveCompareTo(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
  }
  function compareToDoNotIntrinsicify(a, b) {
    return a.h6(b);
  }
  function identityHashCode(obj) {
    return getObjectHashCode(obj);
  }
  function getObjectHashCode(obj) {
    if (!jsIn('kotlinHashCodeValue$', obj)) {
      var hash = jsBitwiseOr(Math.random() * 4.294967296E9, 0);
      var descriptor = new Object();
      descriptor.value = hash;
      descriptor.enumerable = false;
      Object.defineProperty(obj, 'kotlinHashCodeValue$', descriptor);
    }
    var tmp$ret$0;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast = obj['kotlinHashCodeValue$'];
    tmp$ret$0 = tmp0_unsafeCast;
    return tmp$ret$0;
  }
  function toString_2(o) {
    var tmp;
    if (o == null) {
      tmp = 'null';
    } else if (isArrayish(o)) {
      tmp = '[...]';
    } else {
      var tmp$ret$0;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp0_unsafeCast = o.toString();
      tmp$ret$0 = tmp0_unsafeCast;
      tmp = tmp$ret$0;
    }
    return tmp;
  }
  function hashCode_0(obj) {
    if (obj == null)
      return 0;
    var tmp0_subject = typeof obj;
    var tmp;
    switch (tmp0_subject) {
      case 'object':
        tmp = 'function' === typeof obj.hashCode ? obj.hashCode() : getObjectHashCode(obj);
        break;
      case 'function':
        tmp = getObjectHashCode(obj);
        break;
      case 'number':
        tmp = getNumberHashCode(obj);
        break;
      case 'boolean':
        var tmp_0;
        var tmp$ret$0;
        // Inline function 'kotlin.js.unsafeCast' call
        tmp$ret$0 = obj;

        if (tmp$ret$0) {
          tmp_0 = 1;
        } else {
          tmp_0 = 0;
        }

        tmp = tmp_0;
        break;
      default:
        tmp = getStringHashCode(String(obj));
        break;
    }
    return tmp;
  }
  function getStringHashCode(str) {
    var hash = 0;
    var length = str.length;
    var inductionVariable = 0;
    var last = length - 1 | 0;
    if (inductionVariable <= last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp$ret$0;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$0 = str;
        var code = tmp$ret$0.charCodeAt(i);
        hash = imul(hash, 31) + code | 0;
      }
       while (!(i === last));
    return hash;
  }
  function anyToString(o) {
    return Object.prototype.toString.call(o);
  }
  function equals_0(obj1, obj2) {
    if (obj1 == null) {
      return obj2 == null;
    }
    if (obj2 == null) {
      return false;
    }
    if (typeof obj1 === 'object' ? typeof obj1.equals === 'function' : false) {
      return obj1.equals(obj2);
    }
    if (obj1 !== obj1) {
      return obj2 !== obj2;
    }
    if (typeof obj1 === 'number' ? typeof obj2 === 'number' : false) {
      var tmp;
      if (obj1 === obj2) {
        var tmp_0;
        if (obj1 !== 0) {
          tmp_0 = true;
        } else {
          var tmp$ret$0;
          // Inline function 'kotlin.js.asDynamic' call
          tmp$ret$0 = 1;
          var tmp_1 = tmp$ret$0 / obj1;
          var tmp$ret$1;
          // Inline function 'kotlin.js.asDynamic' call
          tmp$ret$1 = 1;
          tmp_0 = tmp_1 === tmp$ret$1 / obj2;
        }
        tmp = tmp_0;
      } else {
        tmp = false;
      }
      return tmp;
    }
    return obj1 === obj2;
  }
  function boxIntrinsic(x) {
    throw IllegalStateException_init_$Create$_0('Should be lowered');
  }
  function unboxIntrinsic(x) {
    throw IllegalStateException_init_$Create$_0('Should be lowered');
  }
  function captureStack(instance, constructorFunction) {
    if (Error.captureStackTrace != null) {
      Error.captureStackTrace(instance, constructorFunction);
    } else {
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = instance;
      tmp$ret$0.stack = (new Error()).stack;
    }
  }
  function extendThrowable(this_, message, cause) {
    Error.call(this_);
    setPropertiesToThrowableInstance(this_, message, cause);
  }
  function setPropertiesToThrowableInstance(this_, message, cause) {
    if (!hasOwnPrototypeProperty(this_, 'message')) {
      var tmp;
      if (message == null) {
        var tmp_0;
        if (!(message === null)) {
          var tmp0_safe_receiver = cause;
          var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.toString();
          tmp_0 = tmp1_elvis_lhs == null ? undefined : tmp1_elvis_lhs;
        } else {
          tmp_0 = undefined;
        }
        tmp = tmp_0;
      } else {
        tmp = message;
      }
      this_.message = tmp;
    }
    if (!hasOwnPrototypeProperty(this_, 'cause')) {
      this_.cause = cause;
    }
    this_.name = Object.getPrototypeOf(this_).constructor.name;
  }
  function hasOwnPrototypeProperty(o, name) {
    var tmp$ret$0;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast = Object.getPrototypeOf(o).hasOwnProperty(name);
    tmp$ret$0 = tmp0_unsafeCast;
    return tmp$ret$0;
  }
  function returnIfSuspended(argument, $cont) {
    return (argument == null ? true : isObject(argument)) ? argument : THROW_CCE();
  }
  function ensureNotNull(v) {
    var tmp;
    if (v == null) {
      THROW_NPE();
    } else {
      tmp = v;
    }
    return tmp;
  }
  function THROW_NPE() {
    throw NullPointerException_init_$Create$();
  }
  function noWhenBranchMatchedException() {
    throw NoWhenBranchMatchedException_init_$Create$();
  }
  function THROW_CCE() {
    throw ClassCastException_init_$Create$();
  }
  function throwUninitializedPropertyAccessException(name) {
    throw UninitializedPropertyAccessException_init_$Create$('lateinit property ' + name + ' has not been initialized');
  }
  function throwKotlinNothingValueException() {
    throw KotlinNothingValueException_init_$Create$();
  }
  function THROW_ISE() {
    throw IllegalStateException_init_$Create$();
  }
  function lazy(initializer) {
    return new UnsafeLazyImpl(initializer);
  }
  function emptyArray() {
    return [];
  }
  function arrayPlusCollection(array, collection) {
    var tmp$ret$0;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast = array.slice();
    tmp$ret$0 = tmp0_unsafeCast;
    var result = tmp$ret$0;
    var tmp$ret$1;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$1 = result;
    tmp$ret$1.length = result.length + collection.g() | 0;
    // Inline function 'kotlin.copyArrayType' call
    if (array.$type$ !== undefined) {
      result.$type$ = array.$type$;
    }
    var index = array.length;
    var tmp0_iterator = collection.d();
    while (tmp0_iterator.e()) {
      var element = tmp0_iterator.f();
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      result[tmp1] = element;
    }
    return result;
  }
  function fillFrom(src, dst) {
    var srcLen = src.length;
    var dstLen = dst.length;
    var index = 0;
    var tmp$ret$0;
    // Inline function 'kotlin.js.unsafeCast' call
    tmp$ret$0 = dst;
    var arr = tmp$ret$0;
    while (index < srcLen ? index < dstLen : false) {
      var tmp = index;
      var tmp0 = index;
      index = tmp0 + 1 | 0;
      arr[tmp] = src[tmp0];
    }
    return dst;
  }
  function arrayCopyResize(source, newSize, defaultValue) {
    var tmp$ret$0;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast = source.slice(0, newSize);
    tmp$ret$0 = tmp0_unsafeCast;
    var result = tmp$ret$0;
    // Inline function 'kotlin.copyArrayType' call
    if (source.$type$ !== undefined) {
      result.$type$ = source.$type$;
    }
    var index = source.length;
    if (newSize > index) {
      var tmp$ret$1;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$1 = result;
      tmp$ret$1.length = newSize;
      while (index < newSize) {
        var tmp0 = index;
        index = tmp0 + 1 | 0;
        result[tmp0] = defaultValue;
      }
    }
    return result;
  }
  function copyArrayType(from, to) {
    if (from.$type$ !== undefined) {
      to.$type$ = from.$type$;
    }
  }
  function Companion_7() {
    Companion_instance_7 = this;
    this.tc_1 = new Long(0, -2147483648);
    this.uc_1 = new Long(-1, 2147483647);
    this.vc_1 = 8;
    this.wc_1 = 64;
  }
  Companion_7.$metadata$ = objectMeta('Companion');
  var Companion_instance_7;
  function Companion_getInstance_7() {
    if (Companion_instance_7 == null)
      new Companion_7();
    return Companion_instance_7;
  }
  function Long(low, high) {
    Companion_getInstance_7();
    Number_0.call(this);
    this.z_1 = low;
    this.a1_1 = high;
  }
  Long.prototype.b1 = function (other) {
    return compare(this, other);
  };
  Long.prototype.h6 = function (other) {
    return this.b1(other instanceof Long ? other : THROW_CCE());
  };
  Long.prototype.xc = function (other) {
    return this.t5(toLong(other));
  };
  Long.prototype.t5 = function (other) {
    return add_0(this, other);
  };
  Long.prototype.yc = function (other) {
    return subtract(this, other);
  };
  Long.prototype.zc = function (other) {
    return this.u5(toLong(other));
  };
  Long.prototype.u5 = function (other) {
    return multiply(this, other);
  };
  Long.prototype.ad = function (other) {
    return this.r5(toLong(other));
  };
  Long.prototype.r5 = function (other) {
    return divide(this, other);
  };
  Long.prototype.bd = function () {
    return this.t5(new Long(1, 0));
  };
  Long.prototype.cd = function () {
    return this.dd().t5(new Long(1, 0));
  };
  Long.prototype.s5 = function (bitCount) {
    return shiftLeft(this, bitCount);
  };
  Long.prototype.p5 = function (bitCount) {
    return shiftRight(this, bitCount);
  };
  Long.prototype.ed = function (other) {
    return new Long(this.z_1 & other.z_1, this.a1_1 & other.a1_1);
  };
  Long.prototype.fd = function (other) {
    return new Long(this.z_1 | other.z_1, this.a1_1 | other.a1_1);
  };
  Long.prototype.dd = function () {
    return new Long(~this.z_1, ~this.a1_1);
  };
  Long.prototype.q5 = function () {
    return this.z_1;
  };
  Long.prototype.x9 = function () {
    return toNumber(this);
  };
  Long.prototype.valueOf = function () {
    return this.x9();
  };
  Long.prototype.equals = function (other) {
    var tmp;
    if (other instanceof Long) {
      tmp = equalsLong(this, other);
    } else {
      tmp = false;
    }
    return tmp;
  };
  Long.prototype.hashCode = function () {
    return hashCode_1(this);
  };
  Long.prototype.toString = function () {
    return toStringImpl(this, 10);
  };
  Long.$metadata$ = classMeta('Long', [Comparable], undefined, undefined, undefined, Number_0.prototype);
  function get_ZERO() {
    init_properties_longjs_kt_ttk8rv();
    return ZERO;
  }
  var ZERO;
  function get_ONE() {
    init_properties_longjs_kt_ttk8rv();
    return ONE;
  }
  var ONE;
  function get_NEG_ONE() {
    init_properties_longjs_kt_ttk8rv();
    return NEG_ONE;
  }
  var NEG_ONE;
  function get_MAX_VALUE() {
    init_properties_longjs_kt_ttk8rv();
    return MAX_VALUE;
  }
  var MAX_VALUE;
  function get_MIN_VALUE() {
    init_properties_longjs_kt_ttk8rv();
    return MIN_VALUE;
  }
  var MIN_VALUE;
  function get_TWO_PWR_24_() {
    init_properties_longjs_kt_ttk8rv();
    return TWO_PWR_24_;
  }
  var TWO_PWR_24_;
  function compare(_this__u8e3s4, other) {
    init_properties_longjs_kt_ttk8rv();
    if (equalsLong(_this__u8e3s4, other)) {
      return 0;
    }
    var thisNeg = isNegative(_this__u8e3s4);
    var otherNeg = isNegative(other);
    return (thisNeg ? !otherNeg : false) ? -1 : (!thisNeg ? otherNeg : false) ? 1 : isNegative(subtract(_this__u8e3s4, other)) ? -1 : 1;
  }
  function add_0(_this__u8e3s4, other) {
    init_properties_longjs_kt_ttk8rv();
    var a48 = _this__u8e3s4.a1_1 >>> 16 | 0;
    var a32 = _this__u8e3s4.a1_1 & 65535;
    var a16 = _this__u8e3s4.z_1 >>> 16 | 0;
    var a00 = _this__u8e3s4.z_1 & 65535;
    var b48 = other.a1_1 >>> 16 | 0;
    var b32 = other.a1_1 & 65535;
    var b16 = other.z_1 >>> 16 | 0;
    var b00 = other.z_1 & 65535;
    var c48 = 0;
    var c32 = 0;
    var c16 = 0;
    var c00 = 0;
    c00 = c00 + (a00 + b00 | 0) | 0;
    c16 = c16 + (c00 >>> 16 | 0) | 0;
    c00 = c00 & 65535;
    c16 = c16 + (a16 + b16 | 0) | 0;
    c32 = c32 + (c16 >>> 16 | 0) | 0;
    c16 = c16 & 65535;
    c32 = c32 + (a32 + b32 | 0) | 0;
    c48 = c48 + (c32 >>> 16 | 0) | 0;
    c32 = c32 & 65535;
    c48 = c48 + (a48 + b48 | 0) | 0;
    c48 = c48 & 65535;
    return new Long(c16 << 16 | c00, c48 << 16 | c32);
  }
  function subtract(_this__u8e3s4, other) {
    init_properties_longjs_kt_ttk8rv();
    return add_0(_this__u8e3s4, other.cd());
  }
  function multiply(_this__u8e3s4, other) {
    init_properties_longjs_kt_ttk8rv();
    if (isZero(_this__u8e3s4)) {
      return get_ZERO();
    } else if (isZero(other)) {
      return get_ZERO();
    }
    if (equalsLong(_this__u8e3s4, get_MIN_VALUE())) {
      return isOdd(other) ? get_MIN_VALUE() : get_ZERO();
    } else if (equalsLong(other, get_MIN_VALUE())) {
      return isOdd(_this__u8e3s4) ? get_MIN_VALUE() : get_ZERO();
    }
    if (isNegative(_this__u8e3s4)) {
      var tmp;
      if (isNegative(other)) {
        tmp = multiply(negate(_this__u8e3s4), negate(other));
      } else {
        tmp = negate(multiply(negate(_this__u8e3s4), other));
      }
      return tmp;
    } else if (isNegative(other)) {
      return negate(multiply(_this__u8e3s4, negate(other)));
    }
    if (lessThan(_this__u8e3s4, get_TWO_PWR_24_()) ? lessThan(other, get_TWO_PWR_24_()) : false) {
      return fromNumber(toNumber(_this__u8e3s4) * toNumber(other));
    }
    var a48 = _this__u8e3s4.a1_1 >>> 16 | 0;
    var a32 = _this__u8e3s4.a1_1 & 65535;
    var a16 = _this__u8e3s4.z_1 >>> 16 | 0;
    var a00 = _this__u8e3s4.z_1 & 65535;
    var b48 = other.a1_1 >>> 16 | 0;
    var b32 = other.a1_1 & 65535;
    var b16 = other.z_1 >>> 16 | 0;
    var b00 = other.z_1 & 65535;
    var c48 = 0;
    var c32 = 0;
    var c16 = 0;
    var c00 = 0;
    c00 = c00 + imul(a00, b00) | 0;
    c16 = c16 + (c00 >>> 16 | 0) | 0;
    c00 = c00 & 65535;
    c16 = c16 + imul(a16, b00) | 0;
    c32 = c32 + (c16 >>> 16 | 0) | 0;
    c16 = c16 & 65535;
    c16 = c16 + imul(a00, b16) | 0;
    c32 = c32 + (c16 >>> 16 | 0) | 0;
    c16 = c16 & 65535;
    c32 = c32 + imul(a32, b00) | 0;
    c48 = c48 + (c32 >>> 16 | 0) | 0;
    c32 = c32 & 65535;
    c32 = c32 + imul(a16, b16) | 0;
    c48 = c48 + (c32 >>> 16 | 0) | 0;
    c32 = c32 & 65535;
    c32 = c32 + imul(a00, b32) | 0;
    c48 = c48 + (c32 >>> 16 | 0) | 0;
    c32 = c32 & 65535;
    c48 = c48 + (((imul(a48, b00) + imul(a32, b16) | 0) + imul(a16, b32) | 0) + imul(a00, b48) | 0) | 0;
    c48 = c48 & 65535;
    return new Long(c16 << 16 | c00, c48 << 16 | c32);
  }
  function divide(_this__u8e3s4, other) {
    init_properties_longjs_kt_ttk8rv();
    if (isZero(other)) {
      throw Exception_init_$Create$('division by zero');
    } else if (isZero(_this__u8e3s4)) {
      return get_ZERO();
    }
    if (equalsLong(_this__u8e3s4, get_MIN_VALUE())) {
      if (equalsLong(other, get_ONE()) ? true : equalsLong(other, get_NEG_ONE())) {
        return get_MIN_VALUE();
      } else if (equalsLong(other, get_MIN_VALUE())) {
        return get_ONE();
      } else {
        var halfThis = shiftRight(_this__u8e3s4, 1);
        var approx = shiftLeft(halfThis.r5(other), 1);
        if (equalsLong(approx, get_ZERO())) {
          return isNegative(other) ? get_ONE() : get_NEG_ONE();
        } else {
          var rem = subtract(_this__u8e3s4, multiply(other, approx));
          return add_0(approx, rem.r5(other));
        }
      }
    } else if (equalsLong(other, get_MIN_VALUE())) {
      return get_ZERO();
    }
    if (isNegative(_this__u8e3s4)) {
      var tmp;
      if (isNegative(other)) {
        tmp = negate(_this__u8e3s4).r5(negate(other));
      } else {
        tmp = negate(negate(_this__u8e3s4).r5(other));
      }
      return tmp;
    } else if (isNegative(other)) {
      return negate(_this__u8e3s4.r5(negate(other)));
    }
    var res = get_ZERO();
    var rem_0 = _this__u8e3s4;
    while (greaterThanOrEqual(rem_0, other)) {
      var approxDouble = toNumber(rem_0) / toNumber(other);
      var approx2 = Math.max(1.0, Math.floor(approxDouble));
      var log2 = Math.ceil(Math.log(approx2) / Math.LN2);
      var delta = log2 <= 48.0 ? 1.0 : Math.pow(2.0, log2 - 48);
      var approxRes = fromNumber(approx2);
      var approxRem = multiply(approxRes, other);
      while (isNegative(approxRem) ? true : greaterThan(approxRem, rem_0)) {
        approx2 = approx2 - delta;
        approxRes = fromNumber(approx2);
        approxRem = multiply(approxRes, other);
      }
      if (isZero(approxRes)) {
        approxRes = get_ONE();
      }
      res = add_0(res, approxRes);
      rem_0 = subtract(rem_0, approxRem);
    }
    return res;
  }
  function shiftLeft(_this__u8e3s4, numBits) {
    init_properties_longjs_kt_ttk8rv();
    var numBits_0 = numBits & 63;
    if (numBits_0 === 0) {
      return _this__u8e3s4;
    } else {
      if (numBits_0 < 32) {
        return new Long(_this__u8e3s4.z_1 << numBits_0, _this__u8e3s4.a1_1 << numBits_0 | (_this__u8e3s4.z_1 >>> (32 - numBits_0 | 0) | 0));
      } else {
        return new Long(0, _this__u8e3s4.z_1 << (numBits_0 - 32 | 0));
      }
    }
  }
  function shiftRight(_this__u8e3s4, numBits) {
    init_properties_longjs_kt_ttk8rv();
    var numBits_0 = numBits & 63;
    if (numBits_0 === 0) {
      return _this__u8e3s4;
    } else {
      if (numBits_0 < 32) {
        return new Long(_this__u8e3s4.z_1 >>> numBits_0 | 0 | _this__u8e3s4.a1_1 << (32 - numBits_0 | 0), _this__u8e3s4.a1_1 >> numBits_0);
      } else {
        return new Long(_this__u8e3s4.a1_1 >> (numBits_0 - 32 | 0), _this__u8e3s4.a1_1 >= 0 ? 0 : -1);
      }
    }
  }
  function toNumber(_this__u8e3s4) {
    init_properties_longjs_kt_ttk8rv();
    return _this__u8e3s4.a1_1 * 4.294967296E9 + getLowBitsUnsigned(_this__u8e3s4);
  }
  function equalsLong(_this__u8e3s4, other) {
    init_properties_longjs_kt_ttk8rv();
    return _this__u8e3s4.a1_1 === other.a1_1 ? _this__u8e3s4.z_1 === other.z_1 : false;
  }
  function hashCode_1(l) {
    init_properties_longjs_kt_ttk8rv();
    return l.z_1 ^ l.a1_1;
  }
  function toStringImpl(_this__u8e3s4, radix) {
    init_properties_longjs_kt_ttk8rv();
    if (radix < 2 ? true : 36 < radix) {
      throw Exception_init_$Create$('radix out of range: ' + radix);
    }
    if (isZero(_this__u8e3s4)) {
      return '0';
    }
    if (isNegative(_this__u8e3s4)) {
      if (equalsLong(_this__u8e3s4, get_MIN_VALUE())) {
        var radixLong = fromInt(radix);
        var div = _this__u8e3s4.r5(radixLong);
        var rem = subtract(multiply(div, radixLong), _this__u8e3s4).q5();
        var tmp = toStringImpl(div, radix);
        var tmp$ret$1;
        // Inline function 'kotlin.js.unsafeCast' call
        var tmp$ret$0;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$0 = rem;
        var tmp0_unsafeCast = tmp$ret$0.toString(radix);
        tmp$ret$1 = tmp0_unsafeCast;
        return tmp + tmp$ret$1;
      } else {
        return '-' + toStringImpl(negate(_this__u8e3s4), radix);
      }
    }
    var digitsPerTime = radix === 2 ? 31 : radix <= 10 ? 9 : radix <= 21 ? 7 : radix <= 35 ? 6 : 5;
    var radixToPower = fromNumber(Math.pow(radix, digitsPerTime));
    var rem_0 = _this__u8e3s4;
    var result = '';
    while (true) {
      var remDiv = rem_0.r5(radixToPower);
      var intval = subtract(rem_0, multiply(remDiv, radixToPower)).q5();
      var tmp$ret$3;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$2;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$2 = intval;
      var tmp1_unsafeCast = tmp$ret$2.toString(radix);
      tmp$ret$3 = tmp1_unsafeCast;
      var digits = tmp$ret$3;
      rem_0 = remDiv;
      if (isZero(rem_0)) {
        return digits + result;
      } else {
        while (digits.length < digitsPerTime) {
          digits = '0' + digits;
        }
        result = digits + result;
      }
    }
  }
  function fromInt(value) {
    init_properties_longjs_kt_ttk8rv();
    return new Long(value, value < 0 ? -1 : 0);
  }
  function isNegative(_this__u8e3s4) {
    init_properties_longjs_kt_ttk8rv();
    return _this__u8e3s4.a1_1 < 0;
  }
  function isZero(_this__u8e3s4) {
    init_properties_longjs_kt_ttk8rv();
    return _this__u8e3s4.a1_1 === 0 ? _this__u8e3s4.z_1 === 0 : false;
  }
  function isOdd(_this__u8e3s4) {
    init_properties_longjs_kt_ttk8rv();
    return (_this__u8e3s4.z_1 & 1) === 1;
  }
  function negate(_this__u8e3s4) {
    init_properties_longjs_kt_ttk8rv();
    return _this__u8e3s4.cd();
  }
  function lessThan(_this__u8e3s4, other) {
    init_properties_longjs_kt_ttk8rv();
    return compare(_this__u8e3s4, other) < 0;
  }
  function fromNumber(value) {
    init_properties_longjs_kt_ttk8rv();
    if (isNaN_0(value)) {
      return get_ZERO();
    } else if (value <= -9.223372036854776E18) {
      return get_MIN_VALUE();
    } else if (value + 1 >= 9.223372036854776E18) {
      return get_MAX_VALUE();
    } else if (value < 0.0) {
      return negate(fromNumber(-value));
    } else {
      var twoPwr32 = 4.294967296E9;
      return new Long(jsBitwiseOr(value % twoPwr32, 0), jsBitwiseOr(value / twoPwr32, 0));
    }
  }
  function greaterThan(_this__u8e3s4, other) {
    init_properties_longjs_kt_ttk8rv();
    return compare(_this__u8e3s4, other) > 0;
  }
  function greaterThanOrEqual(_this__u8e3s4, other) {
    init_properties_longjs_kt_ttk8rv();
    return compare(_this__u8e3s4, other) >= 0;
  }
  function getLowBitsUnsigned(_this__u8e3s4) {
    init_properties_longjs_kt_ttk8rv();
    return _this__u8e3s4.z_1 >= 0 ? _this__u8e3s4.z_1 : 4.294967296E9 + _this__u8e3s4.z_1;
  }
  var properties_initialized_longjs_kt_5aju7t;
  function init_properties_longjs_kt_ttk8rv() {
    if (properties_initialized_longjs_kt_5aju7t) {
    } else {
      properties_initialized_longjs_kt_5aju7t = true;
      ZERO = fromInt(0);
      ONE = fromInt(1);
      NEG_ONE = fromInt(-1);
      MAX_VALUE = new Long(-1, 2147483647);
      MIN_VALUE = new Long(0, -2147483648);
      TWO_PWR_24_ = fromInt(16777216);
    }
  }
  function primitiveArrayConcat(args) {
    var size_local = 0;
    var inductionVariable = 0;
    var last = args.length - 1 | 0;
    if (inductionVariable <= last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp = size_local;
        var tmp$ret$1;
        // Inline function 'kotlin.js.unsafeCast' call
        var tmp0_unsafeCast = args[i];
        var tmp$ret$0;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$0 = tmp0_unsafeCast;
        tmp$ret$1 = tmp$ret$0;
        size_local = tmp + tmp$ret$1.length | 0;
      }
       while (!(i === last));
    var a = args[0];
    var tmp$ret$2;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp1_unsafeCast = new a.constructor(size_local);
    tmp$ret$2 = tmp1_unsafeCast;
    var result = tmp$ret$2;
    var tmp$ret$3;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$3 = a;
    if (tmp$ret$3.$type$ != null) {
      var tmp$ret$5;
      // Inline function 'withType' call
      var tmp$ret$4;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$4 = a;
      var tmp2_withType = tmp$ret$4.$type$;
      result.$type$ = tmp2_withType;
      tmp$ret$5 = result;
    }
    size_local = 0;
    var inductionVariable_0 = 0;
    var last_0 = args.length - 1 | 0;
    if (inductionVariable_0 <= last_0)
      do {
        var i_0 = inductionVariable_0;
        inductionVariable_0 = inductionVariable_0 + 1 | 0;
        var tmp$ret$7;
        // Inline function 'kotlin.js.unsafeCast' call
        var tmp3_unsafeCast = args[i_0];
        var tmp$ret$6;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$6 = tmp3_unsafeCast;
        tmp$ret$7 = tmp$ret$6;
        var arr = tmp$ret$7;
        var inductionVariable_1 = 0;
        var last_1 = arr.length - 1 | 0;
        if (inductionVariable_1 <= last_1)
          do {
            var j = inductionVariable_1;
            inductionVariable_1 = inductionVariable_1 + 1 | 0;
            var tmp3 = size_local;
            size_local = tmp3 + 1 | 0;
            result[tmp3] = arr[j];
          }
           while (!(j === last_1));
      }
       while (!(i_0 === last_0));
    var tmp$ret$9;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$8;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$8 = result;
    tmp$ret$9 = tmp$ret$8;
    return tmp$ret$9;
  }
  function withType(type, array) {
    array.$type$ = type;
    return array;
  }
  function numberToInt(a) {
    var tmp;
    if (a instanceof Long) {
      tmp = a.q5();
    } else {
      tmp = doubleToInt(a);
    }
    return tmp;
  }
  function doubleToInt(a) {
    return a > 2.147483647E9 ? 2147483647 : a < -2.147483648E9 ? -2147483648 : jsBitwiseOr(a, 0);
  }
  function numberToDouble(a) {
    var tmp$ret$0;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast = +a;
    tmp$ret$0 = tmp0_unsafeCast;
    return tmp$ret$0;
  }
  function toShort(a) {
    var tmp$ret$0;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast = a << 16 >> 16;
    tmp$ret$0 = tmp0_unsafeCast;
    return tmp$ret$0;
  }
  function numberToLong(a) {
    var tmp;
    if (a instanceof Long) {
      tmp = a;
    } else {
      tmp = fromNumber(a);
    }
    return tmp;
  }
  function numberToChar(a) {
    var tmp$ret$0;
    // Inline function 'kotlin.toUShort' call
    var tmp0_toUShort = numberToInt(a);
    tmp$ret$0 = _UShort___init__impl__jigrne(toShort(tmp0_toUShort));
    return _Char___init__impl__6a9atx_0(tmp$ret$0);
  }
  function toLong(a) {
    return fromInt(a);
  }
  function numberRangeToNumber(start, endInclusive) {
    return new IntRange(start, endInclusive);
  }
  function get_propertyRefClassMetadataCache() {
    init_properties_reflectRuntime_kt_yf9l8h();
    return propertyRefClassMetadataCache;
  }
  var propertyRefClassMetadataCache;
  function metadataObject() {
    init_properties_reflectRuntime_kt_yf9l8h();
    var undef = undefined;
    return classMeta(undef, undef, undef, undef, undef, undef);
  }
  function getPropertyCallableRef(name, paramCount, type, getter, setter) {
    init_properties_reflectRuntime_kt_yf9l8h();
    getter.get = getter;
    getter.set = setter;
    getter.callableName = name;
    var tmp$ret$0;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast = getPropertyRefClass(getter, getKPropMetadata(paramCount, setter, type));
    tmp$ret$0 = tmp0_unsafeCast;
    return tmp$ret$0;
  }
  function getPropertyRefClass(obj, metadata) {
    init_properties_reflectRuntime_kt_yf9l8h();
    obj.$metadata$ = metadata;
    obj.constructor = obj;
    return obj;
  }
  function getKPropMetadata(paramCount, setter, type) {
    init_properties_reflectRuntime_kt_yf9l8h();
    var mdata = get_propertyRefClassMetadataCache()[paramCount][setter == null ? 0 : 1];
    if (mdata.interfaces.length === 0) {
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      var tmp0_asDynamic = mdata.interfaces;
      tmp$ret$0 = tmp0_asDynamic;
      tmp$ret$0.push(type);
      if (mdata.interfacesCache == null) {
        mdata.interfacesCache = generateInterfaceCache();
      } else {
        ensureNotNull(mdata.interfacesCache).isComplete = false;
      }
      extendCacheWithSingle(ensureNotNull(mdata.interfacesCache), type);
    }
    return mdata;
  }
  function getLocalDelegateReference(name, type, mutable, lambda) {
    init_properties_reflectRuntime_kt_yf9l8h();
    return getPropertyCallableRef(name, 0, type, lambda, mutable ? lambda : null);
  }
  var properties_initialized_reflectRuntime_kt_inkhwd;
  function init_properties_reflectRuntime_kt_yf9l8h() {
    if (properties_initialized_reflectRuntime_kt_inkhwd) {
    } else {
      properties_initialized_reflectRuntime_kt_inkhwd = true;
      var tmp$ret$11;
      // Inline function 'kotlin.arrayOf' call
      var tmp$ret$2;
      // Inline function 'kotlin.arrayOf' call
      var tmp0_arrayOf = [metadataObject(), metadataObject()];
      var tmp$ret$1;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = tmp0_arrayOf;
      tmp$ret$1 = tmp$ret$0;
      tmp$ret$2 = tmp$ret$1;
      var tmp = tmp$ret$2;
      var tmp$ret$5;
      // Inline function 'kotlin.arrayOf' call
      var tmp1_arrayOf = [metadataObject(), metadataObject()];
      var tmp$ret$4;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$3;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$3 = tmp1_arrayOf;
      tmp$ret$4 = tmp$ret$3;
      tmp$ret$5 = tmp$ret$4;
      var tmp_0 = tmp$ret$5;
      var tmp$ret$8;
      // Inline function 'kotlin.arrayOf' call
      var tmp2_arrayOf = [metadataObject(), metadataObject()];
      var tmp$ret$7;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$6;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$6 = tmp2_arrayOf;
      tmp$ret$7 = tmp$ret$6;
      tmp$ret$8 = tmp$ret$7;
      var tmp3_arrayOf = [tmp, tmp_0, tmp$ret$8];
      var tmp$ret$10;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$9;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$9 = tmp3_arrayOf;
      tmp$ret$10 = tmp$ret$9;
      tmp$ret$11 = tmp$ret$10;
      propertyRefClassMetadataCache = tmp$ret$11;
    }
  }
  var interfacesCounter;
  function classMeta(name, interfaces, associatedObjectKey, associatedObjects, suspendArity, fastPrototype) {
    return createMetadata('class', name, interfaces, associatedObjectKey, associatedObjects, suspendArity, fastPrototype);
  }
  function createMetadata(kind, name, interfaces, associatedObjectKey, associatedObjects, suspendArity, fastPrototype) {
    return {kind: kind, simpleName: name, interfaceId: kind === 'interface' ? -1 : undefined, interfaces: interfaces || [], associatedObjectKey: associatedObjectKey, associatedObjects: associatedObjects, suspendArity: suspendArity, fastPrototype: fastPrototype, $kClass$: undefined, interfacesCache: {isComplete: fastPrototype === undefined && (interfaces === undefined || interfaces.length === 0), implementInterfaceMemo: {}}};
  }
  function isArrayish(o) {
    return isJsArray(o) ? true : isView(o);
  }
  function isJsArray(obj) {
    var tmp$ret$0;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast = Array.isArray(obj);
    tmp$ret$0 = tmp0_unsafeCast;
    return tmp$ret$0;
  }
  function isInterface(obj, iface) {
    var tmp0_elvis_lhs = obj.constructor;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return false;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var ctor = tmp;
    return isInterfaceImpl(ctor, iface);
  }
  function isInterfaceImpl(ctor, iface) {
    if (ctor === iface) {
      return true;
    }
    var metadata = ctor.$metadata$;
    if (!(metadata == null) ? metadata.interfacesCache == null : false) {
      metadata.interfacesCache = generateInterfaceCache();
    }
    var tmp0_safe_receiver = metadata;
    var interfacesCache = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.interfacesCache;
    var tmp;
    if (!(interfacesCache == null)) {
      if (!interfacesCache.isComplete) {
        completeInterfaceCache(ctor);
      }
      var tmp1_safe_receiver = iface.$metadata$;
      var tmp2_elvis_lhs = tmp1_safe_receiver == null ? null : tmp1_safe_receiver.interfaceId;
      var tmp_0;
      if (tmp2_elvis_lhs == null) {
        return false;
      } else {
        tmp_0 = tmp2_elvis_lhs;
      }
      var interfaceId = tmp_0;
      tmp = !!interfacesCache.implementInterfaceMemo[interfaceId];
    } else {
      var tmp3_safe_receiver = fastGetPrototype(ctor);
      var tmp4_elvis_lhs = tmp3_safe_receiver == null ? null : tmp3_safe_receiver.constructor;
      var tmp_1;
      if (tmp4_elvis_lhs == null) {
        return false;
      } else {
        tmp_1 = tmp4_elvis_lhs;
      }
      var constructor = tmp_1;
      tmp = isInterfaceImpl(constructor, iface);
    }
    return tmp;
  }
  function generateInterfaceCache() {
    return {isComplete: false, implementInterfaceMemo: {}};
  }
  function completeInterfaceCache(ctor) {
    var metadata = ctor.$metadata$;
    if (!(metadata == null) ? metadata.interfacesCache == null : false) {
      metadata.interfacesCache = generateInterfaceCache();
    }
    var tmp0_safe_receiver = metadata;
    var interfacesCache = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.interfacesCache;
    if (!(interfacesCache == null)) {
      if (interfacesCache.isComplete === true) {
        return interfacesCache;
      }
      var indexedObject = metadata.interfaces;
      var inductionVariable = 0;
      var last = indexedObject.length;
      while (inductionVariable < last) {
        var i = indexedObject[inductionVariable];
        inductionVariable = inductionVariable + 1 | 0;
        extendCacheWithSingle(interfacesCache, i);
        extendCacheWith(interfacesCache, completeInterfaceCache(i));
      }
    }
    var tmp2_safe_receiver = fastGetPrototype(ctor);
    var tmp3_safe_receiver = tmp2_safe_receiver == null ? null : tmp2_safe_receiver.constructor;
    var tmp;
    if (tmp3_safe_receiver == null) {
      tmp = null;
    } else {
      var tmp$ret$0;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      tmp$ret$0 = completeInterfaceCache(tmp3_safe_receiver);
      tmp = tmp$ret$0;
    }
    var parentInterfacesCache = tmp;
    var tmp4_safe_receiver = interfacesCache;
    var tmp_0;
    if (tmp4_safe_receiver == null) {
      tmp_0 = null;
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.apply' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlin.js.completeInterfaceCache.<anonymous>' call
      extendCacheWith(tmp4_safe_receiver, parentInterfacesCache);
      tmp4_safe_receiver.isComplete = true;
      tmp$ret$1 = tmp4_safe_receiver;
      tmp_0 = tmp$ret$1;
    }
    var tmp5_elvis_lhs = tmp_0;
    return tmp5_elvis_lhs == null ? parentInterfacesCache : tmp5_elvis_lhs;
  }
  function fastGetPrototype(ctor) {
    var tmp0_safe_receiver = ctor.$metadata$;
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.run' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'kotlin.js.fastGetPrototype.<anonymous>' call
      if (tmp0_safe_receiver.fastPrototype == null) {
        tmp0_safe_receiver.fastPrototype = getPrototype(ctor);
      }
      tmp$ret$0 = tmp0_safe_receiver.fastPrototype;
      tmp$ret$1 = tmp$ret$0;
      tmp = tmp$ret$1;
    }
    var tmp1_elvis_lhs = tmp;
    return tmp1_elvis_lhs == null ? getPrototype(ctor) : tmp1_elvis_lhs;
  }
  function extendCacheWithSingle(_this__u8e3s4, intr) {
    _this__u8e3s4.implementInterfaceMemo[getOrDefineInterfaceId(intr)] = true;
  }
  function extendCacheWith(_this__u8e3s4, cache) {
    var tmp0_safe_receiver = cache;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.implementInterfaceMemo;
    var tmp;
    if (tmp1_elvis_lhs == null) {
      return Unit_getInstance();
    } else {
      tmp = tmp1_elvis_lhs;
    }
    var anotherInterfaceMemo = tmp;
    Object.assign(_this__u8e3s4.implementInterfaceMemo, anotherInterfaceMemo);
  }
  function getPrototype(_this__u8e3s4) {
    var tmp0_safe_receiver = _this__u8e3s4.prototype;
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      var tmp$ret$2;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$1;
      // Inline function 'kotlin.js.getPrototype.<anonymous>' call
      var tmp$ret$0;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp0_unsafeCast = Object.getPrototypeOf(tmp0_safe_receiver);
      tmp$ret$0 = tmp0_unsafeCast;
      tmp$ret$1 = tmp$ret$0;
      tmp$ret$2 = tmp$ret$1;
      tmp = tmp$ret$2;
    }
    return tmp;
  }
  function getOrDefineInterfaceId(_this__u8e3s4) {
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast = _this__u8e3s4.$metadata$;
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = tmp0_unsafeCast;
    tmp$ret$1 = tmp$ret$0;
    var metadata = tmp$ret$1;
    var tmp0_elvis_lhs = metadata.interfaceId;
    var interfaceId = tmp0_elvis_lhs == null ? -1 : tmp0_elvis_lhs;
    var tmp;
    if (!equals_0(interfaceId, -1)) {
      tmp = interfaceId;
    } else {
      var tmp1 = interfacesCounter;
      interfacesCounter = tmp1 + 1 | 0;
      var result = tmp1;
      metadata.interfaceId = result;
      tmp = result;
    }
    return tmp;
  }
  function isArray(obj) {
    var tmp;
    if (isJsArray(obj)) {
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = obj;
      tmp = !tmp$ret$0.$type$;
    } else {
      tmp = false;
    }
    return tmp;
  }
  function isObject(obj) {
    var objTypeOf = typeof obj;
    var tmp0_subject = objTypeOf;
    switch (tmp0_subject) {
      case 'string':
        return true;
      case 'number':
        return true;
      case 'boolean':
        return true;
      case 'function':
        return true;
      default:
        return jsInstanceOf(obj, Object);
    }
  }
  function isNumber(a) {
    var tmp;
    if (typeof a === 'number') {
      tmp = true;
    } else {
      tmp = a instanceof Long;
    }
    return tmp;
  }
  function isComparable(value) {
    var type = typeof value;
    return ((type === 'string' ? true : type === 'boolean') ? true : isNumber(value)) ? true : isInterface(value, get_js(getKClass(Comparable)));
  }
  function isCharSequence(value) {
    return typeof value === 'string' ? true : isInterface(value, get_js(getKClass(CharSequence)));
  }
  function isBooleanArray(a) {
    return isJsArray(a) ? a.$type$ === 'BooleanArray' : false;
  }
  function isByteArray(a) {
    return jsInstanceOf(a, Int8Array);
  }
  function isShortArray(a) {
    return jsInstanceOf(a, Int16Array);
  }
  function isCharArray(a) {
    return jsInstanceOf(a, Uint16Array) ? a.$type$ === 'CharArray' : false;
  }
  function isIntArray(a) {
    return jsInstanceOf(a, Int32Array);
  }
  function isFloatArray(a) {
    return jsInstanceOf(a, Float32Array);
  }
  function isLongArray(a) {
    return isJsArray(a) ? a.$type$ === 'LongArray' : false;
  }
  function isDoubleArray(a) {
    return jsInstanceOf(a, Float64Array);
  }
  function interfaceMeta(name, interfaces, associatedObjectKey, associatedObjects, suspendArity) {
    return createMetadata('interface', name, interfaces, associatedObjectKey, associatedObjects, suspendArity, undefined);
  }
  function objectMeta(name, interfaces, associatedObjectKey, associatedObjects, suspendArity, fastPrototype) {
    return createMetadata('object', name, interfaces, associatedObjectKey, associatedObjects, suspendArity, fastPrototype);
  }
  function copyInto(_this__u8e3s4, destination, destinationOffset, startIndex, endIndex) {
    arrayCopy(_this__u8e3s4, destination, destinationOffset, startIndex, endIndex);
    return destination;
  }
  function plus_1(_this__u8e3s4, elements) {
    return arrayPlusCollection(_this__u8e3s4, elements);
  }
  function copyInto_0(_this__u8e3s4, destination, destinationOffset, startIndex, endIndex) {
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    tmp$ret$1 = tmp$ret$0;
    var tmp = tmp$ret$1;
    var tmp$ret$3;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$2;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$2 = destination;
    tmp$ret$3 = tmp$ret$2;
    arrayCopy(tmp, tmp$ret$3, destinationOffset, startIndex, endIndex);
    return destination;
  }
  function fill(_this__u8e3s4, element, fromIndex, toIndex) {
    Companion_getInstance().t1(fromIndex, toIndex, _this__u8e3s4.length);
    // Inline function 'kotlin.js.nativeFill' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    tmp$ret$0.fill(element, fromIndex, toIndex);
  }
  function copyOf(_this__u8e3s4, newSize) {
    // Inline function 'kotlin.require' call
    var tmp0_require = newSize >= 0;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'kotlin.collections.copyOf.<anonymous>' call
      tmp$ret$0 = 'Invalid new array size: ' + newSize + '.';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString_2(message));
    }
    return fillFrom(_this__u8e3s4, new Int32Array(newSize));
  }
  function copyOf_0(_this__u8e3s4, newSize) {
    // Inline function 'kotlin.require' call
    var tmp0_require = newSize >= 0;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'kotlin.collections.copyOf.<anonymous>' call
      tmp$ret$0 = 'Invalid new array size: ' + newSize + '.';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString_2(message));
    }
    return arrayCopyResize(_this__u8e3s4, newSize, null);
  }
  function copyOf_1(_this__u8e3s4) {
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    return tmp$ret$0.slice();
  }
  function plus_2(_this__u8e3s4, element) {
    var tmp$ret$1;
    // Inline function 'kotlin.collections.plus' call
    var tmp$ret$0;
    // Inline function 'kotlin.intArrayOf' call
    tmp$ret$0 = new Int32Array([element]);
    var tmp0_plus = tmp$ret$0;
    tmp$ret$1 = primitiveArrayConcat([_this__u8e3s4, tmp0_plus]);
    return tmp$ret$1;
  }
  function plus_3(_this__u8e3s4, elements) {
    return primitiveArrayConcat([_this__u8e3s4, elements]);
  }
  function fill_0(_this__u8e3s4, element, fromIndex, toIndex) {
    Companion_getInstance().t1(fromIndex, toIndex, _this__u8e3s4.length);
    // Inline function 'kotlin.js.nativeFill' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    tmp$ret$0.fill(element, fromIndex, toIndex);
  }
  function fill$default(_this__u8e3s4, element, fromIndex, toIndex, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      fromIndex = 0;
    if (!(($mask0 & 4) === 0))
      toIndex = _this__u8e3s4.length;
    return fill_0(_this__u8e3s4, element, fromIndex, toIndex);
  }
  function copyOfRange(_this__u8e3s4, fromIndex, toIndex) {
    Companion_getInstance().t1(fromIndex, toIndex, _this__u8e3s4.length);
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    return tmp$ret$0.slice(fromIndex, toIndex);
  }
  function plus_4(_this__u8e3s4, elements) {
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    return tmp$ret$0.concat(elements);
  }
  function asList(_this__u8e3s4) {
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    tmp$ret$1 = tmp$ret$0;
    return new ArrayList(tmp$ret$1);
  }
  function minOf(a, b) {
    return Math.min(a, b);
  }
  function isWhitespaceImpl(_this__u8e3s4) {
    var tmp$ret$0;
    // Inline function 'kotlin.code' call
    tmp$ret$0 = Char__toInt_impl_vasixd(_this__u8e3s4);
    var ch = tmp$ret$0;
    return (((9 <= ch ? ch <= 13 : false) ? true : 28 <= ch ? ch <= 32 : false) ? true : ch === 160) ? true : ch > 4096 ? (((((ch === 5760 ? true : 8192 <= ch ? ch <= 8202 : false) ? true : ch === 8232) ? true : ch === 8233) ? true : ch === 8239) ? true : ch === 8287) ? true : ch === 12288 : false;
  }
  function releaseIntercepted($this) {
    var intercepted = $this.nd_1;
    if (!(intercepted == null) ? !(intercepted === $this) : false) {
      ensureNotNull($this.q3().b4(Key_getInstance())).a4(intercepted);
    }
    $this.nd_1 = CompletedContinuation_getInstance();
  }
  function CoroutineImpl(resultContinuation) {
    this.gd_1 = resultContinuation;
    this.hd_1 = 0;
    this.id_1 = 0;
    this.jd_1 = null;
    this.kd_1 = null;
    this.ld_1 = null;
    var tmp = this;
    var tmp0_safe_receiver = this.gd_1;
    tmp.md_1 = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.q3();
    this.nd_1 = null;
  }
  CoroutineImpl.prototype.q3 = function () {
    return ensureNotNull(this.md_1);
  };
  CoroutineImpl.prototype.od = function () {
    var tmp2_elvis_lhs = this.nd_1;
    var tmp;
    if (tmp2_elvis_lhs == null) {
      var tmp$ret$0;
      // Inline function 'kotlin.also' call
      var tmp0_safe_receiver = this.q3().b4(Key_getInstance());
      var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.z3(this);
      var tmp0_also = tmp1_elvis_lhs == null ? this : tmp1_elvis_lhs;
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlin.coroutines.CoroutineImpl.intercepted.<anonymous>' call
      this.nd_1 = tmp0_also;
      tmp$ret$0 = tmp0_also;
      tmp = tmp$ret$0;
    } else {
      tmp = tmp2_elvis_lhs;
    }
    return tmp;
  };
  CoroutineImpl.prototype.pd = function (result) {
    var current = this;
    var tmp$ret$0;
    // Inline function 'kotlin.Result.getOrNull' call
    var tmp;
    if (_Result___get_isFailure__impl__jpiriv(result)) {
      tmp = null;
    } else {
      var tmp_0 = _Result___get_value__impl__bjfvqg(result);
      tmp = (tmp_0 == null ? true : isObject(tmp_0)) ? tmp_0 : THROW_CCE();
    }
    tmp$ret$0 = tmp;
    var currentResult = tmp$ret$0;
    var currentException = Result__exceptionOrNull_impl_p6xea9(result);
    while (true) {
      var tmp$ret$6;
      // Inline function 'kotlin.with' call
      var tmp0_with = current;
      // Inline function 'kotlin.contracts.contract' call
      if (currentException == null) {
        tmp0_with.jd_1 = currentResult;
      } else {
        tmp0_with.hd_1 = tmp0_with.id_1;
        tmp0_with.kd_1 = currentException;
      }
      try {
        var outcome = tmp0_with.qd();
        if (outcome === get_COROUTINE_SUSPENDED())
          return Unit_getInstance();
        currentResult = outcome;
        currentException = null;
      } catch ($p) {
        currentResult = null;
        var tmp$ret$1;
        // Inline function 'kotlin.js.unsafeCast' call
        tmp$ret$1 = $p;
        currentException = tmp$ret$1;
      }
      releaseIntercepted(tmp0_with);
      var completion = ensureNotNull(tmp0_with.gd_1);
      var tmp_1;
      if (completion instanceof CoroutineImpl) {
        current = completion;
        tmp_1 = Unit_getInstance();
      } else {
        if (!(currentException == null)) {
          var tmp$ret$3;
          // Inline function 'kotlin.coroutines.resumeWithException' call
          var tmp0_resumeWithException = ensureNotNull(currentException);
          var tmp$ret$2;
          // Inline function 'kotlin.Companion.failure' call
          var tmp0_failure = Companion_getInstance_4();
          tmp$ret$2 = _Result___init__impl__xyqfz8(createFailure(tmp0_resumeWithException));
          completion.o3(tmp$ret$2);
          tmp$ret$3 = Unit_getInstance();
        } else {
          var tmp$ret$5;
          // Inline function 'kotlin.coroutines.resume' call
          var tmp1_resume = currentResult;
          var tmp$ret$4;
          // Inline function 'kotlin.Companion.success' call
          var tmp0_success = Companion_getInstance_4();
          tmp$ret$4 = _Result___init__impl__xyqfz8(tmp1_resume);
          completion.o3(tmp$ret$4);
          tmp$ret$5 = Unit_getInstance();
        }
        return Unit_getInstance();
      }
      tmp$ret$6 = tmp_1;
    }
  };
  CoroutineImpl.prototype.o3 = function (result) {
    return this.pd(result);
  };
  CoroutineImpl.$metadata$ = classMeta('CoroutineImpl', [Continuation]);
  function CompletedContinuation() {
    CompletedContinuation_instance = this;
  }
  CompletedContinuation.prototype.q3 = function () {
    throw IllegalStateException_init_$Create$_0('This continuation is already complete');
  };
  CompletedContinuation.prototype.pd = function (result) {
    // Inline function 'kotlin.error' call
    throw IllegalStateException_init_$Create$_0('This continuation is already complete');
  };
  CompletedContinuation.prototype.o3 = function (result) {
    return this.pd(result);
  };
  CompletedContinuation.prototype.toString = function () {
    return 'This continuation is already complete';
  };
  CompletedContinuation.$metadata$ = objectMeta('CompletedContinuation', [Continuation]);
  var CompletedContinuation_instance;
  function CompletedContinuation_getInstance() {
    if (CompletedContinuation_instance == null)
      new CompletedContinuation();
    return CompletedContinuation_instance;
  }
  function intercepted(_this__u8e3s4) {
    var tmp0_safe_receiver = _this__u8e3s4 instanceof CoroutineImpl ? _this__u8e3s4 : null;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.od();
    return tmp1_elvis_lhs == null ? _this__u8e3s4 : tmp1_elvis_lhs;
  }
  function createCoroutineUnintercepted(_this__u8e3s4, receiver, completion) {
    var tmp$ret$0;
    // Inline function 'kotlin.coroutines.intrinsics.createCoroutineFromSuspendFunction' call
    tmp$ret$0 = new _no_name_provided__qut3iv_3(completion, _this__u8e3s4, receiver);
    return tmp$ret$0;
  }
  function startCoroutineUninterceptedOrReturn(_this__u8e3s4, receiver, completion) {
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    var a = tmp$ret$0;
    return typeof a === 'function' ? a(receiver, completion) : _this__u8e3s4.rd(receiver, completion);
  }
  function createCoroutineFromSuspendFunction(completion, block) {
    return new _no_name_provided__qut3iv_4(completion, block);
  }
  function invokeSuspendSuperTypeWithReceiver(_this__u8e3s4, receiver, completion) {
    throw new NotImplementedError('It is intrinsic method');
  }
  function _no_name_provided__qut3iv_3($completion, $this_createCoroutineUnintercepted, $receiver) {
    this.ae_1 = $completion;
    this.be_1 = $this_createCoroutineUnintercepted;
    this.ce_1 = $receiver;
    CoroutineImpl.call(this, isInterface($completion, Continuation) ? $completion : THROW_CCE());
  }
  _no_name_provided__qut3iv_3.prototype.qd = function () {
    if (this.kd_1 != null)
      throw this.kd_1;
    var tmp$ret$1;
    // Inline function 'kotlin.coroutines.intrinsics.createCoroutineUnintercepted.<anonymous>' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = this.be_1;
    var a = tmp$ret$0;
    tmp$ret$1 = typeof a === 'function' ? a(this.ce_1, this.ae_1) : this.be_1.rd(this.ce_1, this.ae_1);
    return tmp$ret$1;
  };
  _no_name_provided__qut3iv_3.$metadata$ = classMeta(undefined, undefined, undefined, undefined, undefined, CoroutineImpl.prototype);
  function _no_name_provided__qut3iv_4($completion, $block) {
    this.le_1 = $block;
    CoroutineImpl.call(this, isInterface($completion, Continuation) ? $completion : THROW_CCE());
  }
  _no_name_provided__qut3iv_4.prototype.qd = function () {
    if (this.kd_1 != null)
      throw this.kd_1;
    return this.le_1();
  };
  _no_name_provided__qut3iv_4.$metadata$ = classMeta(undefined, undefined, undefined, undefined, undefined, CoroutineImpl.prototype);
  function Exception_init_$Init$($this) {
    extendThrowable($this, void 1, void 1);
    Exception.call($this);
    return $this;
  }
  function Exception_init_$Init$_0(message, $this) {
    extendThrowable($this, message, void 1);
    Exception.call($this);
    return $this;
  }
  function Exception_init_$Create$(message) {
    var tmp = Exception_init_$Init$_0(message, Object.create(Exception.prototype));
    captureStack(tmp, Exception_init_$Create$);
    return tmp;
  }
  function Exception_init_$Init$_1(message, cause, $this) {
    extendThrowable($this, message, cause);
    Exception.call($this);
    return $this;
  }
  function Exception() {
    captureStack(this, Exception);
  }
  Exception.$metadata$ = classMeta('Exception', undefined, undefined, undefined, undefined, Error.prototype);
  function Error_init_$Init$(message, $this) {
    extendThrowable($this, message, void 1);
    Error_0.call($this);
    return $this;
  }
  function Error_init_$Init$_0(message, cause, $this) {
    extendThrowable($this, message, cause);
    Error_0.call($this);
    return $this;
  }
  function Error_0() {
    captureStack(this, Error_0);
  }
  Error_0.$metadata$ = classMeta('Error', undefined, undefined, undefined, undefined, Error.prototype);
  function IllegalArgumentException_init_$Init$(message, $this) {
    RuntimeException_init_$Init$_0(message, $this);
    IllegalArgumentException.call($this);
    return $this;
  }
  function IllegalArgumentException_init_$Create$(message) {
    var tmp = IllegalArgumentException_init_$Init$(message, Object.create(IllegalArgumentException.prototype));
    captureStack(tmp, IllegalArgumentException_init_$Create$);
    return tmp;
  }
  function IllegalArgumentException() {
    captureStack(this, IllegalArgumentException);
  }
  IllegalArgumentException.$metadata$ = classMeta('IllegalArgumentException', undefined, undefined, undefined, undefined, RuntimeException.prototype);
  function IllegalStateException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    IllegalStateException.call($this);
    return $this;
  }
  function IllegalStateException_init_$Create$() {
    var tmp = IllegalStateException_init_$Init$(Object.create(IllegalStateException.prototype));
    captureStack(tmp, IllegalStateException_init_$Create$);
    return tmp;
  }
  function IllegalStateException_init_$Init$_0(message, $this) {
    RuntimeException_init_$Init$_0(message, $this);
    IllegalStateException.call($this);
    return $this;
  }
  function IllegalStateException_init_$Create$_0(message) {
    var tmp = IllegalStateException_init_$Init$_0(message, Object.create(IllegalStateException.prototype));
    captureStack(tmp, IllegalStateException_init_$Create$_0);
    return tmp;
  }
  function IllegalStateException_init_$Init$_1(message, cause, $this) {
    RuntimeException_init_$Init$_1(message, cause, $this);
    IllegalStateException.call($this);
    return $this;
  }
  function IllegalStateException_init_$Create$_1(message, cause) {
    var tmp = IllegalStateException_init_$Init$_1(message, cause, Object.create(IllegalStateException.prototype));
    captureStack(tmp, IllegalStateException_init_$Create$_1);
    return tmp;
  }
  function IllegalStateException() {
    captureStack(this, IllegalStateException);
  }
  IllegalStateException.$metadata$ = classMeta('IllegalStateException', undefined, undefined, undefined, undefined, RuntimeException.prototype);
  function NoSuchElementException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    NoSuchElementException.call($this);
    return $this;
  }
  function NoSuchElementException_init_$Create$() {
    var tmp = NoSuchElementException_init_$Init$(Object.create(NoSuchElementException.prototype));
    captureStack(tmp, NoSuchElementException_init_$Create$);
    return tmp;
  }
  function NoSuchElementException_init_$Init$_0(message, $this) {
    RuntimeException_init_$Init$_0(message, $this);
    NoSuchElementException.call($this);
    return $this;
  }
  function NoSuchElementException_init_$Create$_0(message) {
    var tmp = NoSuchElementException_init_$Init$_0(message, Object.create(NoSuchElementException.prototype));
    captureStack(tmp, NoSuchElementException_init_$Create$_0);
    return tmp;
  }
  function NoSuchElementException() {
    captureStack(this, NoSuchElementException);
  }
  NoSuchElementException.$metadata$ = classMeta('NoSuchElementException', undefined, undefined, undefined, undefined, RuntimeException.prototype);
  function RuntimeException_init_$Init$($this) {
    Exception_init_$Init$($this);
    RuntimeException.call($this);
    return $this;
  }
  function RuntimeException_init_$Init$_0(message, $this) {
    Exception_init_$Init$_0(message, $this);
    RuntimeException.call($this);
    return $this;
  }
  function RuntimeException_init_$Init$_1(message, cause, $this) {
    Exception_init_$Init$_1(message, cause, $this);
    RuntimeException.call($this);
    return $this;
  }
  function RuntimeException_init_$Create$(message, cause) {
    var tmp = RuntimeException_init_$Init$_1(message, cause, Object.create(RuntimeException.prototype));
    captureStack(tmp, RuntimeException_init_$Create$);
    return tmp;
  }
  function RuntimeException() {
    captureStack(this, RuntimeException);
  }
  RuntimeException.$metadata$ = classMeta('RuntimeException', undefined, undefined, undefined, undefined, Exception.prototype);
  function UnsupportedOperationException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    UnsupportedOperationException.call($this);
    return $this;
  }
  function UnsupportedOperationException_init_$Create$() {
    var tmp = UnsupportedOperationException_init_$Init$(Object.create(UnsupportedOperationException.prototype));
    captureStack(tmp, UnsupportedOperationException_init_$Create$);
    return tmp;
  }
  function UnsupportedOperationException_init_$Init$_0(message, $this) {
    RuntimeException_init_$Init$_0(message, $this);
    UnsupportedOperationException.call($this);
    return $this;
  }
  function UnsupportedOperationException_init_$Create$_0(message) {
    var tmp = UnsupportedOperationException_init_$Init$_0(message, Object.create(UnsupportedOperationException.prototype));
    captureStack(tmp, UnsupportedOperationException_init_$Create$_0);
    return tmp;
  }
  function UnsupportedOperationException() {
    captureStack(this, UnsupportedOperationException);
  }
  UnsupportedOperationException.$metadata$ = classMeta('UnsupportedOperationException', undefined, undefined, undefined, undefined, RuntimeException.prototype);
  function ConcurrentModificationException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    ConcurrentModificationException.call($this);
    return $this;
  }
  function ConcurrentModificationException_init_$Create$() {
    var tmp = ConcurrentModificationException_init_$Init$(Object.create(ConcurrentModificationException.prototype));
    captureStack(tmp, ConcurrentModificationException_init_$Create$);
    return tmp;
  }
  function ConcurrentModificationException_init_$Init$_0(message, $this) {
    RuntimeException_init_$Init$_0(message, $this);
    ConcurrentModificationException.call($this);
    return $this;
  }
  function ConcurrentModificationException_init_$Create$_0(message) {
    var tmp = ConcurrentModificationException_init_$Init$_0(message, Object.create(ConcurrentModificationException.prototype));
    captureStack(tmp, ConcurrentModificationException_init_$Create$_0);
    return tmp;
  }
  function ConcurrentModificationException() {
    captureStack(this, ConcurrentModificationException);
  }
  ConcurrentModificationException.$metadata$ = classMeta('ConcurrentModificationException', undefined, undefined, undefined, undefined, RuntimeException.prototype);
  function IndexOutOfBoundsException_init_$Init$(message, $this) {
    RuntimeException_init_$Init$_0(message, $this);
    IndexOutOfBoundsException.call($this);
    return $this;
  }
  function IndexOutOfBoundsException_init_$Create$(message) {
    var tmp = IndexOutOfBoundsException_init_$Init$(message, Object.create(IndexOutOfBoundsException.prototype));
    captureStack(tmp, IndexOutOfBoundsException_init_$Create$);
    return tmp;
  }
  function IndexOutOfBoundsException() {
    captureStack(this, IndexOutOfBoundsException);
  }
  IndexOutOfBoundsException.$metadata$ = classMeta('IndexOutOfBoundsException', undefined, undefined, undefined, undefined, RuntimeException.prototype);
  function AssertionError_init_$Init$(message, $this) {
    Error_init_$Init$(message, $this);
    AssertionError.call($this);
    return $this;
  }
  function AssertionError_init_$Create$(message) {
    var tmp = AssertionError_init_$Init$(message, Object.create(AssertionError.prototype));
    captureStack(tmp, AssertionError_init_$Create$);
    return tmp;
  }
  function AssertionError() {
    captureStack(this, AssertionError);
  }
  AssertionError.$metadata$ = classMeta('AssertionError', undefined, undefined, undefined, undefined, Error_0.prototype);
  function ArithmeticException_init_$Init$(message, $this) {
    RuntimeException_init_$Init$_0(message, $this);
    ArithmeticException.call($this);
    return $this;
  }
  function ArithmeticException_init_$Create$(message) {
    var tmp = ArithmeticException_init_$Init$(message, Object.create(ArithmeticException.prototype));
    captureStack(tmp, ArithmeticException_init_$Create$);
    return tmp;
  }
  function ArithmeticException() {
    captureStack(this, ArithmeticException);
  }
  ArithmeticException.$metadata$ = classMeta('ArithmeticException', undefined, undefined, undefined, undefined, RuntimeException.prototype);
  function NullPointerException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    NullPointerException.call($this);
    return $this;
  }
  function NullPointerException_init_$Create$() {
    var tmp = NullPointerException_init_$Init$(Object.create(NullPointerException.prototype));
    captureStack(tmp, NullPointerException_init_$Create$);
    return tmp;
  }
  function NullPointerException() {
    captureStack(this, NullPointerException);
  }
  NullPointerException.$metadata$ = classMeta('NullPointerException', undefined, undefined, undefined, undefined, RuntimeException.prototype);
  function NoWhenBranchMatchedException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    NoWhenBranchMatchedException.call($this);
    return $this;
  }
  function NoWhenBranchMatchedException_init_$Create$() {
    var tmp = NoWhenBranchMatchedException_init_$Init$(Object.create(NoWhenBranchMatchedException.prototype));
    captureStack(tmp, NoWhenBranchMatchedException_init_$Create$);
    return tmp;
  }
  function NoWhenBranchMatchedException() {
    captureStack(this, NoWhenBranchMatchedException);
  }
  NoWhenBranchMatchedException.$metadata$ = classMeta('NoWhenBranchMatchedException', undefined, undefined, undefined, undefined, RuntimeException.prototype);
  function ClassCastException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    ClassCastException.call($this);
    return $this;
  }
  function ClassCastException_init_$Create$() {
    var tmp = ClassCastException_init_$Init$(Object.create(ClassCastException.prototype));
    captureStack(tmp, ClassCastException_init_$Create$);
    return tmp;
  }
  function ClassCastException() {
    captureStack(this, ClassCastException);
  }
  ClassCastException.$metadata$ = classMeta('ClassCastException', undefined, undefined, undefined, undefined, RuntimeException.prototype);
  function UninitializedPropertyAccessException_init_$Init$(message, $this) {
    RuntimeException_init_$Init$_0(message, $this);
    UninitializedPropertyAccessException.call($this);
    return $this;
  }
  function UninitializedPropertyAccessException_init_$Create$(message) {
    var tmp = UninitializedPropertyAccessException_init_$Init$(message, Object.create(UninitializedPropertyAccessException.prototype));
    captureStack(tmp, UninitializedPropertyAccessException_init_$Create$);
    return tmp;
  }
  function UninitializedPropertyAccessException() {
    captureStack(this, UninitializedPropertyAccessException);
  }
  UninitializedPropertyAccessException.$metadata$ = classMeta('UninitializedPropertyAccessException', undefined, undefined, undefined, undefined, RuntimeException.prototype);
  function jsIn(lhs_hack, rhs_hack) {
    var tmp$ret$0;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast = lhs_hack in rhs_hack;
    tmp$ret$0 = tmp0_unsafeCast;
    return tmp$ret$0;
  }
  function jsBitwiseOr(lhs_hack, rhs_hack) {
    var tmp$ret$0;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast = lhs_hack | rhs_hack;
    tmp$ret$0 = tmp0_unsafeCast;
    return tmp$ret$0;
  }
  function jsTypeOf(value_hack) {
    var tmp$ret$0;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast = typeof value_hack;
    tmp$ret$0 = tmp0_unsafeCast;
    return tmp$ret$0;
  }
  function jsDeleteProperty(obj_hack, property_hack) {
    delete obj_hack[property_hack];
  }
  function jsInstanceOf(obj_hack, jsClass_hack) {
    var tmp$ret$0;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast = obj_hack instanceof jsClass_hack;
    tmp$ret$0 = tmp0_unsafeCast;
    return tmp$ret$0;
  }
  function Function1() {
  }
  Function1.$metadata$ = interfaceMeta('Function1');
  function Function0() {
  }
  Function0.$metadata$ = interfaceMeta('Function0');
  function SuspendFunction1() {
  }
  SuspendFunction1.$metadata$ = interfaceMeta('SuspendFunction1');
  function SuspendFunction2() {
  }
  SuspendFunction2.$metadata$ = interfaceMeta('SuspendFunction2');
  function loop(_this__u8e3s4, action) {
    while (true) {
      action(_this__u8e3s4.pe_1);
    }
  }
  function loop_0(_this__u8e3s4, action) {
    while (true) {
      action(_this__u8e3s4.qe_1);
    }
  }
  function None() {
    None_instance = this;
    atomicfu$TraceBase.call(this);
  }
  None.$metadata$ = objectMeta('None', undefined, undefined, undefined, undefined, atomicfu$TraceBase.prototype);
  var None_instance;
  function None_getInstance() {
    if (None_instance == null)
      new None();
    return None_instance;
  }
  function atomicfu$TraceBase() {
  }
  atomicfu$TraceBase.prototype.atomicfu$Trace$append$1 = function (event) {
  };
  atomicfu$TraceBase.prototype.atomicfu$Trace$append$2 = function (event1, event2) {
  };
  atomicfu$TraceBase.prototype.atomicfu$Trace$append$3 = function (event1, event2, event3) {
  };
  atomicfu$TraceBase.prototype.atomicfu$Trace$append$4 = function (event1, event2, event3, event4) {
  };
  atomicfu$TraceBase.$metadata$ = classMeta('TraceBase');
  function AtomicRef(value) {
    this.pe_1 = value;
  }
  AtomicRef.prototype.re = function (_set____db54di) {
    this.pe_1 = _set____db54di;
  };
  AtomicRef.prototype.se = function () {
    return this.pe_1;
  };
  AtomicRef.prototype.atomicfu$compareAndSet = function (expect, update) {
    if (!(this.pe_1 === expect))
      return false;
    this.pe_1 = update;
    return true;
  };
  AtomicRef.prototype.atomicfu$getAndSet = function (value) {
    var oldValue = this.pe_1;
    this.pe_1 = value;
    return oldValue;
  };
  AtomicRef.prototype.toString = function () {
    return toString_1(this.pe_1);
  };
  AtomicRef.$metadata$ = classMeta('AtomicRef');
  Object.defineProperty(AtomicRef.prototype, 'kotlinx$atomicfu$value', {
    configurable: true,
    get: AtomicRef.prototype.se,
    set: AtomicRef.prototype.re
  });
  function atomic$ref$1(initial) {
    return atomic(initial, None_getInstance());
  }
  function AtomicBoolean(value) {
    this.te_1 = value;
  }
  AtomicBoolean.prototype.ue = function (_set____db54di) {
    this.te_1 = _set____db54di;
  };
  AtomicBoolean.prototype.se = function () {
    return this.te_1;
  };
  AtomicBoolean.prototype.atomicfu$compareAndSet = function (expect, update) {
    if (!(this.te_1 === expect))
      return false;
    this.te_1 = update;
    return true;
  };
  AtomicBoolean.prototype.atomicfu$getAndSet = function (value) {
    var oldValue = this.te_1;
    this.te_1 = value;
    return oldValue;
  };
  AtomicBoolean.prototype.toString = function () {
    return this.te_1.toString();
  };
  AtomicBoolean.$metadata$ = classMeta('AtomicBoolean');
  Object.defineProperty(AtomicBoolean.prototype, 'kotlinx$atomicfu$value', {
    configurable: true,
    get: AtomicBoolean.prototype.se,
    set: AtomicBoolean.prototype.ue
  });
  function atomic$boolean$1(initial) {
    return atomic_0(initial, None_getInstance());
  }
  function AtomicInt(value) {
    this.qe_1 = value;
  }
  AtomicInt.prototype.ve = function (_set____db54di) {
    this.qe_1 = _set____db54di;
  };
  AtomicInt.prototype.se = function () {
    return this.qe_1;
  };
  AtomicInt.prototype.atomicfu$compareAndSet = function (expect, update) {
    if (!(this.qe_1 === expect))
      return false;
    this.qe_1 = update;
    return true;
  };
  AtomicInt.prototype.atomicfu$getAndSet = function (value) {
    var oldValue = this.qe_1;
    this.qe_1 = value;
    return oldValue;
  };
  AtomicInt.prototype.atomicfu$getAndIncrement = function () {
    var tmp0_this = this;
    var tmp1 = tmp0_this.qe_1;
    tmp0_this.qe_1 = tmp1 + 1 | 0;
    return tmp1;
  };
  AtomicInt.prototype.atomicfu$getAndDecrement = function () {
    var tmp0_this = this;
    var tmp1 = tmp0_this.qe_1;
    tmp0_this.qe_1 = tmp1 - 1 | 0;
    return tmp1;
  };
  AtomicInt.prototype.atomicfu$getAndAdd = function (delta) {
    var oldValue = this.qe_1;
    var tmp0_this = this;
    tmp0_this.qe_1 = tmp0_this.qe_1 + delta | 0;
    return oldValue;
  };
  AtomicInt.prototype.atomicfu$addAndGet = function (delta) {
    var tmp0_this = this;
    tmp0_this.qe_1 = tmp0_this.qe_1 + delta | 0;
    return this.qe_1;
  };
  AtomicInt.prototype.atomicfu$incrementAndGet = function () {
    var tmp0_this = this;
    tmp0_this.qe_1 = tmp0_this.qe_1 + 1 | 0;
    return tmp0_this.qe_1;
  };
  AtomicInt.prototype.atomicfu$decrementAndGet = function () {
    var tmp0_this = this;
    tmp0_this.qe_1 = tmp0_this.qe_1 - 1 | 0;
    return tmp0_this.qe_1;
  };
  AtomicInt.prototype.toString = function () {
    return this.qe_1.toString();
  };
  AtomicInt.$metadata$ = classMeta('AtomicInt');
  Object.defineProperty(AtomicInt.prototype, 'kotlinx$atomicfu$value', {
    configurable: true,
    get: AtomicInt.prototype.se,
    set: AtomicInt.prototype.ve
  });
  function atomic$int$1(initial) {
    return atomic_1(initial, None_getInstance());
  }
  function atomic(initial, trace) {
    return new AtomicRef(initial);
  }
  function atomic_0(initial, trace) {
    return new AtomicBoolean(initial);
  }
  function atomic_1(initial, trace) {
    return new AtomicInt(initial);
  }
  var Lock;
  function ReentrantLock() {
  }
  ReentrantLock.$metadata$ = classMeta('ReentrantLock');
  function synchronized(lock, block) {
    init_properties_Synchronized_kt_vep4ze();
    return block();
  }
  var properties_initialized_Synchronized_kt_8bwsba;
  function init_properties_Synchronized_kt_vep4ze() {
    if (properties_initialized_Synchronized_kt_8bwsba) {
    } else {
      properties_initialized_Synchronized_kt_8bwsba = true;
      Lock = new ReentrantLock();
    }
  }
  function AbstractCoroutine(parentContext, initParentJob, active) {
    JobSupport.call(this, active);
    if (initParentJob) {
      this.ye(parentContext.b4(Key_getInstance_2()));
    }
    this.bf_1 = parentContext.i4(this);
  }
  AbstractCoroutine.prototype.q3 = function () {
    return this.bf_1;
  };
  AbstractCoroutine.prototype.cf = function () {
    return this.bf_1;
  };
  AbstractCoroutine.prototype.df = function () {
    return JobSupport.prototype.df.call(this);
  };
  AbstractCoroutine.prototype.ef = function (value) {
  };
  AbstractCoroutine.prototype.ff = function (cause, handled) {
  };
  AbstractCoroutine.prototype.gf = function () {
    return get_classSimpleName(this) + ' was cancelled';
  };
  AbstractCoroutine.prototype.hf = function (state) {
    if (state instanceof CompletedExceptionally) {
      this.ff(state.if_1, state.kf());
    } else {
      this.ef((state == null ? true : isObject(state)) ? state : THROW_CCE());
    }
  };
  AbstractCoroutine.prototype.o3 = function (result) {
    var state = this.lf(toState$default(result, null, 1, null));
    if (state === get_COMPLETING_WAITING_CHILDREN())
      return Unit_getInstance();
    this.mf(state);
  };
  AbstractCoroutine.prototype.mf = function (state) {
    return this.nf(state);
  };
  AbstractCoroutine.prototype.of = function (exception) {
    handleCoroutineException(this.bf_1, exception);
  };
  AbstractCoroutine.prototype.pf = function () {
    var tmp0_elvis_lhs = get_coroutineName(this.bf_1);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return JobSupport.prototype.pf.call(this);
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var coroutineName = tmp;
    return '"' + coroutineName + '":' + JobSupport.prototype.pf.call(this);
  };
  AbstractCoroutine.prototype.qf = function (start, receiver, block) {
    start.tf(block, receiver, this);
  };
  AbstractCoroutine.$metadata$ = classMeta('AbstractCoroutine', [Job, Continuation, CoroutineScope], undefined, undefined, undefined, JobSupport.prototype);
  function launch(_this__u8e3s4, context, start, block) {
    var newContext = newCoroutineContext(_this__u8e3s4, context);
    var coroutine = start.wg() ? new LazyStandaloneCoroutine(newContext, block) : new StandaloneCoroutine(newContext, true);
    coroutine.qf(start, coroutine, block);
    return coroutine;
  }
  function launch$default(_this__u8e3s4, context, start, block, $mask0, $handler) {
    if (!(($mask0 & 1) === 0))
      context = EmptyCoroutineContext_getInstance();
    if (!(($mask0 & 2) === 0))
      start = CoroutineStart_DEFAULT_getInstance();
    return launch(_this__u8e3s4, context, start, block);
  }
  function withContext(context, block, $cont) {
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlinx.coroutines.withContext.<anonymous>' call
      var tmp0__anonymous__q1qw7t = $cont;
      var oldContext = tmp0__anonymous__q1qw7t.q3();
      var newContext = newCoroutineContext_0(oldContext, context);
      ensureActive(newContext);
      if (newContext === oldContext) {
        var coroutine = new ScopeCoroutine(newContext, tmp0__anonymous__q1qw7t);
        tmp$ret$0 = startUndispatchedOrReturn(coroutine, coroutine, block);
        break $l$block_0;
      }
      if (equals_0(newContext.b4(Key_getInstance()), oldContext.b4(Key_getInstance()))) {
        var coroutine_0 = new UndispatchedCoroutine(newContext, tmp0__anonymous__q1qw7t);
        var tmp$ret$1;
        // Inline function 'kotlinx.coroutines.withCoroutineContext' call
        tmp$ret$0 = startUndispatchedOrReturn(coroutine_0, coroutine_0, block);
        break $l$block_0;
      }
      var coroutine_1 = new DispatchedCoroutine(newContext, tmp0__anonymous__q1qw7t);
      startCoroutineCancellable$default(block, coroutine_1, coroutine_1, null, 4, null);
      tmp$ret$0 = coroutine_1.ch();
    }
    return tmp$ret$0;
  }
  function StandaloneCoroutine(parentContext, active) {
    AbstractCoroutine.call(this, parentContext, true, active);
  }
  StandaloneCoroutine.prototype.ug = function (exception) {
    handleCoroutineException(this.bf_1, exception);
    return true;
  };
  StandaloneCoroutine.$metadata$ = classMeta('StandaloneCoroutine', undefined, undefined, undefined, undefined, AbstractCoroutine.prototype);
  function LazyStandaloneCoroutine(parentContext, block) {
    StandaloneCoroutine.call(this, parentContext, false);
    this.jh_1 = createCoroutineUnintercepted(block, this, this);
  }
  LazyStandaloneCoroutine.prototype.zf = function () {
    startCoroutineCancellable_0(this.jh_1, this);
  };
  LazyStandaloneCoroutine.$metadata$ = classMeta('LazyStandaloneCoroutine', undefined, undefined, undefined, undefined, StandaloneCoroutine.prototype);
  function trySuspend($this) {
    // Inline function 'kotlinx.atomicfu.loop' call
    var tmp0_loop = $this.bh_1;
    while (true) {
      // Inline function 'kotlinx.coroutines.DispatchedCoroutine.trySuspend.<anonymous>' call
      var tmp1__anonymous__uwfjfc = tmp0_loop.qe_1;
      var tmp0_subject = tmp1__anonymous__uwfjfc;
      switch (tmp0_subject) {
        case 0:
          if ($this.bh_1.atomicfu$compareAndSet(0, 1))
            return true;
          break;
        case 2:
          return false;
        default:
          // Inline function 'kotlin.error' call

          throw IllegalStateException_init_$Create$_0('Already suspended');
      }
    }
  }
  function tryResume($this) {
    // Inline function 'kotlinx.atomicfu.loop' call
    var tmp0_loop = $this.bh_1;
    while (true) {
      // Inline function 'kotlinx.coroutines.DispatchedCoroutine.tryResume.<anonymous>' call
      var tmp1__anonymous__uwfjfc = tmp0_loop.qe_1;
      var tmp0_subject = tmp1__anonymous__uwfjfc;
      switch (tmp0_subject) {
        case 0:
          if ($this.bh_1.atomicfu$compareAndSet(0, 2))
            return true;
          break;
        case 1:
          return false;
        default:
          // Inline function 'kotlin.error' call

          throw IllegalStateException_init_$Create$_0('Already resumed');
      }
    }
  }
  function DispatchedCoroutine(context, uCont) {
    ScopeCoroutine.call(this, context, uCont);
    this.bh_1 = atomic$int$1(0);
  }
  DispatchedCoroutine.prototype.nf = function (state) {
    this.mf(state);
  };
  DispatchedCoroutine.prototype.mf = function (state) {
    if (tryResume(this))
      return Unit_getInstance();
    var tmp = intercepted(this.nh_1);
    var tmp_0 = recoverResult(state, this.nh_1);
    resumeCancellableWith$default(tmp, tmp_0, null, 2, null);
  };
  DispatchedCoroutine.prototype.ch = function () {
    if (trySuspend(this))
      return get_COROUTINE_SUSPENDED();
    var state = unboxState(this.wf());
    if (state instanceof CompletedExceptionally)
      throw state.if_1;
    return (state == null ? true : isObject(state)) ? state : THROW_CCE();
  };
  DispatchedCoroutine.$metadata$ = classMeta('DispatchedCoroutine', undefined, undefined, undefined, undefined, ScopeCoroutine.prototype);
  function get_UNDECIDED() {
    return UNDECIDED;
  }
  var UNDECIDED;
  function get_SUSPENDED() {
    return SUSPENDED;
  }
  var SUSPENDED;
  function get_RESUMED() {
    return RESUMED;
  }
  var RESUMED;
  function CancellableContinuation() {
  }
  CancellableContinuation.$metadata$ = interfaceMeta('CancellableContinuation', [Continuation]);
  function _get_stateDebugRepresentation__bf18u4($this) {
    var tmp0_subject = $this.wf();
    var tmp;
    if (!(tmp0_subject == null) ? isInterface(tmp0_subject, NotCompleted) : false) {
      tmp = 'Active';
    } else {
      if (tmp0_subject instanceof CancelledContinuation) {
        tmp = 'Cancelled';
      } else {
        tmp = 'Completed';
      }
    }
    return tmp;
  }
  function isReusable($this) {
    var tmp;
    if (get_isReusableMode($this.ei_1)) {
      var tmp_0 = $this.sh_1;
      tmp = (tmp_0 instanceof DispatchedContinuation ? tmp_0 : THROW_CCE()).di();
    } else {
      tmp = false;
    }
    return tmp;
  }
  function cancelLater($this, cause) {
    if (!isReusable($this))
      return false;
    var tmp = $this.sh_1;
    var dispatched = tmp instanceof DispatchedContinuation ? tmp : THROW_CCE();
    return dispatched.fi(cause);
  }
  function callCancelHandler($this, handler, cause) {
    var tmp;
    try {
      invokeIt(handler, cause);
      tmp = Unit_getInstance();
    } catch ($p) {
      var tmp_0;
      if ($p instanceof Error) {
        handleCoroutineException($this.q3(), new CompletionHandlerException('Exception in invokeOnCancellation handler for ' + $this, $p));
        tmp_0 = Unit_getInstance();
      } else {
        throw $p;
      }
      tmp = tmp_0;
    }
    return tmp;
  }
  function trySuspend_0($this) {
    // Inline function 'kotlinx.atomicfu.loop' call
    var tmp0_loop = $this.uh_1;
    while (true) {
      // Inline function 'kotlinx.coroutines.CancellableContinuationImpl.trySuspend.<anonymous>' call
      var tmp1__anonymous__uwfjfc = tmp0_loop.qe_1;
      var tmp0_subject = tmp1__anonymous__uwfjfc;
      switch (tmp0_subject) {
        case 0:
          if ($this.uh_1.atomicfu$compareAndSet(0, 1))
            return true;
          break;
        case 2:
          return false;
        default:
          // Inline function 'kotlin.error' call

          throw IllegalStateException_init_$Create$_0('Already suspended');
      }
    }
  }
  function tryResume_0($this) {
    // Inline function 'kotlinx.atomicfu.loop' call
    var tmp0_loop = $this.uh_1;
    while (true) {
      // Inline function 'kotlinx.coroutines.CancellableContinuationImpl.tryResume.<anonymous>' call
      var tmp1__anonymous__uwfjfc = tmp0_loop.qe_1;
      var tmp0_subject = tmp1__anonymous__uwfjfc;
      switch (tmp0_subject) {
        case 0:
          if ($this.uh_1.atomicfu$compareAndSet(0, 2))
            return true;
          break;
        case 1:
          return false;
        default:
          // Inline function 'kotlin.error' call

          throw IllegalStateException_init_$Create$_0('Already resumed');
      }
    }
  }
  function installParentHandle($this) {
    var tmp0_elvis_lhs = $this.q3().b4(Key_getInstance_2());
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return null;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var parent = tmp;
    var tmp$ret$1;
    // Inline function 'kotlinx.coroutines.asHandler' call
    var tmp0__get_asHandler__gq3rkj = new ChildContinuation($this);
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = tmp0__get_asHandler__gq3rkj;
    tmp$ret$1 = tmp$ret$0;
    var handle = parent.fg(true, false, tmp$ret$1, 2, null);
    $this.wh_1 = handle;
    return handle;
  }
  function releaseClaimedReusableContinuation($this) {
    var tmp = $this.sh_1;
    var tmp0_safe_receiver = tmp instanceof DispatchedContinuation ? tmp : null;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.gi($this);
    var tmp_0;
    if (tmp1_elvis_lhs == null) {
      return Unit_getInstance();
    } else {
      tmp_0 = tmp1_elvis_lhs;
    }
    var cancellationCause = tmp_0;
    $this.hi();
    $this.oh(cancellationCause);
  }
  function multipleHandlersError($this, handler, state) {
    // Inline function 'kotlin.error' call
    var tmp0_error = "It's prohibited to register multiple handlers, tried to register " + handler + ', already has ' + toString_1(state);
    throw IllegalStateException_init_$Create$_0(toString_2(tmp0_error));
  }
  function makeCancelHandler($this, handler) {
    var tmp;
    if (handler instanceof CancelHandler) {
      tmp = handler;
    } else {
      tmp = new InvokeOnCancel(handler);
    }
    return tmp;
  }
  function dispatchResume($this, mode) {
    if (tryResume_0($this))
      return Unit_getInstance();
    dispatch($this, mode);
  }
  function resumedState($this, state, proposedUpdate, resumeMode, onCancellation, idempotent) {
    var tmp;
    if (proposedUpdate instanceof CompletedExceptionally) {
      // Inline function 'kotlinx.coroutines.assert' call
      // Inline function 'kotlinx.coroutines.assert' call
      tmp = proposedUpdate;
    } else {
      if (!get_isCancellableMode(resumeMode) ? idempotent == null : false) {
        tmp = proposedUpdate;
      } else {
        var tmp_0;
        var tmp_1;
        if (!(onCancellation == null)) {
          tmp_1 = true;
        } else {
          var tmp_2;
          if (state instanceof CancelHandler) {
            tmp_2 = !(state instanceof BeforeResumeCancelHandler);
          } else {
            tmp_2 = false;
          }
          tmp_1 = tmp_2;
        }
        if (tmp_1) {
          tmp_0 = true;
        } else {
          tmp_0 = !(idempotent == null);
        }
        if (tmp_0) {
          var tmp_3 = state instanceof CancelHandler ? state : null;
          tmp = CompletedContinuation_init_$Create$(proposedUpdate, tmp_3, onCancellation, idempotent, null, 16, null);
        } else {
          tmp = proposedUpdate;
        }
      }
    }
    return tmp;
  }
  function resumeImpl($this, proposedUpdate, resumeMode, onCancellation) {
    // Inline function 'kotlinx.atomicfu.loop' call
    var tmp0_loop = $this.vh_1;
    while (true) {
      var tmp$ret$0;
      $l$block: {
        // Inline function 'kotlinx.coroutines.CancellableContinuationImpl.resumeImpl.<anonymous>' call
        var tmp1__anonymous__uwfjfc = tmp0_loop.pe_1;
        var tmp0_subject = tmp1__anonymous__uwfjfc;
        if (!(tmp0_subject == null) ? isInterface(tmp0_subject, NotCompleted) : false) {
          var update = resumedState($this, tmp1__anonymous__uwfjfc, proposedUpdate, resumeMode, onCancellation, null);
          if (!$this.vh_1.atomicfu$compareAndSet(tmp1__anonymous__uwfjfc, update)) {
            tmp$ret$0 = Unit_getInstance();
            break $l$block;
          }
          detachChildIfNonResuable($this);
          dispatchResume($this, resumeMode);
          return Unit_getInstance();
        } else {
          if (tmp0_subject instanceof CancelledContinuation) {
            if (tmp1__anonymous__uwfjfc.mi()) {
              var tmp1_safe_receiver = onCancellation;
              if (tmp1_safe_receiver == null)
                null;
              else {
                var tmp$ret$1;
                // Inline function 'kotlin.let' call
                // Inline function 'kotlin.contracts.contract' call
                $this.ii(tmp1_safe_receiver, tmp1__anonymous__uwfjfc.if_1);
                tmp$ret$1 = Unit_getInstance();
              }
              return Unit_getInstance();
            }
          }
        }
        alreadyResumedError($this, proposedUpdate);
      }
    }
  }
  function resumeImpl$default($this, proposedUpdate, resumeMode, onCancellation, $mask0, $handler) {
    if (!(($mask0 & 8) === 0))
      onCancellation = null;
    return resumeImpl($this, proposedUpdate, resumeMode, onCancellation);
  }
  function alreadyResumedError($this, proposedUpdate) {
    // Inline function 'kotlin.error' call
    var tmp0_error = 'Already resumed, but proposed with update ' + toString_1(proposedUpdate);
    throw IllegalStateException_init_$Create$_0(toString_2(tmp0_error));
  }
  function detachChildIfNonResuable($this) {
    if (!isReusable($this)) {
      $this.hi();
    }
  }
  function CancellableContinuationImpl(delegate, resumeMode) {
    DispatchedTask.call(this, resumeMode);
    this.sh_1 = delegate;
    // Inline function 'kotlinx.coroutines.assert' call
    this.th_1 = this.sh_1.q3();
    this.uh_1 = atomic$int$1(0);
    this.vh_1 = atomic$ref$1(Active_getInstance());
    this.wh_1 = null;
  }
  CancellableContinuationImpl.prototype.ni = function () {
    return this.sh_1;
  };
  CancellableContinuationImpl.prototype.q3 = function () {
    return this.th_1;
  };
  CancellableContinuationImpl.prototype.wf = function () {
    return this.vh_1.pe_1;
  };
  CancellableContinuationImpl.prototype.xf = function () {
    var tmp = this.wf();
    return !(!(tmp == null) ? isInterface(tmp, NotCompleted) : false);
  };
  CancellableContinuationImpl.prototype.oi = function () {
    var tmp0_elvis_lhs = installParentHandle(this);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return Unit_getInstance();
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var handle = tmp;
    if (this.xf()) {
      handle.pi();
      this.wh_1 = NonDisposableHandle_getInstance();
    }
  };
  CancellableContinuationImpl.prototype.qi = function () {
    return this.wf();
  };
  CancellableContinuationImpl.prototype.ri = function (takenState, cause) {
    var tmp0_loop = this.vh_1;
    while (true) {
      // Inline function 'kotlinx.coroutines.CancellableContinuationImpl.cancelCompletedResult.<anonymous>' call
      var tmp1__anonymous__uwfjfc = tmp0_loop.pe_1;
      var tmp0_subject = tmp1__anonymous__uwfjfc;
      if (!(tmp0_subject == null) ? isInterface(tmp0_subject, NotCompleted) : false) {
        // Inline function 'kotlin.error' call
        throw IllegalStateException_init_$Create$_0('Not completed');
      } else {
        if (tmp0_subject instanceof CompletedExceptionally)
          return Unit_getInstance();
        else {
          if (tmp0_subject instanceof CompletedContinuation_0) {
            // Inline function 'kotlin.check' call
            var tmp0_check = !tmp1__anonymous__uwfjfc.xi();
            // Inline function 'kotlin.contracts.contract' call
            if (!tmp0_check) {
              var tmp$ret$0;
              // Inline function 'kotlinx.coroutines.CancellableContinuationImpl.cancelCompletedResult.<anonymous>.<anonymous>' call
              tmp$ret$0 = 'Must be called at most once';
              var message = tmp$ret$0;
              throw IllegalStateException_init_$Create$_0(toString_2(message));
            }
            var update = tmp1__anonymous__uwfjfc.yi(null, null, null, null, cause, 15, null);
            if (this.vh_1.atomicfu$compareAndSet(tmp1__anonymous__uwfjfc, update)) {
              tmp1__anonymous__uwfjfc.zi(this, cause);
              return Unit_getInstance();
            }
          } else {
            if (this.vh_1.atomicfu$compareAndSet(tmp1__anonymous__uwfjfc, CompletedContinuation_init_$Create$(tmp1__anonymous__uwfjfc, null, null, null, cause, 14, null))) {
              return Unit_getInstance();
            }
          }
        }
      }
    }
    return Unit_getInstance();
  };
  CancellableContinuationImpl.prototype.oh = function (cause) {
    // Inline function 'kotlinx.atomicfu.loop' call
    var tmp0_loop = this.vh_1;
    while (true) {
      var tmp$ret$0;
      $l$block: {
        // Inline function 'kotlinx.coroutines.CancellableContinuationImpl.cancel.<anonymous>' call
        var tmp1__anonymous__uwfjfc = tmp0_loop.pe_1;
        if (!(!(tmp1__anonymous__uwfjfc == null) ? isInterface(tmp1__anonymous__uwfjfc, NotCompleted) : false))
          return false;
        var update = new CancelledContinuation(this, cause, tmp1__anonymous__uwfjfc instanceof CancelHandler);
        if (!this.vh_1.atomicfu$compareAndSet(tmp1__anonymous__uwfjfc, update)) {
          tmp$ret$0 = Unit_getInstance();
          break $l$block;
        }
        var tmp0_safe_receiver = tmp1__anonymous__uwfjfc instanceof CancelHandler ? tmp1__anonymous__uwfjfc : null;
        if (tmp0_safe_receiver == null)
          null;
        else {
          var tmp$ret$1;
          // Inline function 'kotlin.let' call
          // Inline function 'kotlin.contracts.contract' call
          this.aj(tmp0_safe_receiver, cause);
          tmp$ret$1 = Unit_getInstance();
        }
        detachChildIfNonResuable(this);
        dispatchResume(this, this.ei_1);
        return true;
      }
    }
  };
  CancellableContinuationImpl.prototype.bj = function (cause) {
    if (cancelLater(this, cause))
      return Unit_getInstance();
    this.oh(cause);
    detachChildIfNonResuable(this);
  };
  CancellableContinuationImpl.prototype.aj = function (handler, cause) {
    var tmp;
    try {
      handler.invoke(cause);
      tmp = Unit_getInstance();
    } catch ($p) {
      var tmp_0;
      if ($p instanceof Error) {
        handleCoroutineException(this.q3(), new CompletionHandlerException('Exception in invokeOnCancellation handler for ' + this, $p));
        tmp_0 = Unit_getInstance();
      } else {
        throw $p;
      }
      tmp = tmp_0;
    }
    return tmp;
  };
  CancellableContinuationImpl.prototype.ii = function (onCancellation, cause) {
    try {
      onCancellation(cause);
    } catch ($p) {
      if ($p instanceof Error) {
        handleCoroutineException(this.q3(), new CompletionHandlerException('Exception in resume onCancellation handler for ' + this, $p));
      } else {
        throw $p;
      }
    }
  };
  CancellableContinuationImpl.prototype.cj = function (parent) {
    return parent.ag();
  };
  CancellableContinuationImpl.prototype.ch = function () {
    var isReusable_0 = isReusable(this);
    if (trySuspend_0(this)) {
      if (this.wh_1 == null) {
        installParentHandle(this);
      }
      if (isReusable_0) {
        releaseClaimedReusableContinuation(this);
      }
      return get_COROUTINE_SUSPENDED();
    }
    if (isReusable_0) {
      releaseClaimedReusableContinuation(this);
    }
    var state = this.wf();
    if (state instanceof CompletedExceptionally)
      throw recoverStackTrace(state.if_1, this);
    if (get_isCancellableMode(this.ei_1)) {
      var job = this.q3().b4(Key_getInstance_2());
      if (!(job == null) ? !job.df() : false) {
        var cause = job.ag();
        this.ri(state, cause);
        throw recoverStackTrace(cause, this);
      }
    }
    return this.dj(state);
  };
  CancellableContinuationImpl.prototype.o3 = function (result) {
    var tmp = toState(result, this);
    var tmp_0 = this.ei_1;
    return resumeImpl$default(this, tmp, tmp_0, null, 8, null);
  };
  CancellableContinuationImpl.prototype.qh = function (handler) {
    var cancelHandler = makeCancelHandler(this, handler);
    // Inline function 'kotlinx.atomicfu.loop' call
    var tmp0_loop = this.vh_1;
    while (true) {
      // Inline function 'kotlinx.coroutines.CancellableContinuationImpl.invokeOnCancellation.<anonymous>' call
      var tmp1__anonymous__uwfjfc = tmp0_loop.pe_1;
      var tmp0_subject = tmp1__anonymous__uwfjfc;
      if (tmp0_subject instanceof Active) {
        if (this.vh_1.atomicfu$compareAndSet(tmp1__anonymous__uwfjfc, cancelHandler))
          return Unit_getInstance();
      } else {
        if (tmp0_subject instanceof CancelHandler) {
          multipleHandlersError(this, handler, tmp1__anonymous__uwfjfc);
        } else {
          if (tmp0_subject instanceof CompletedExceptionally) {
            if (!tmp1__anonymous__uwfjfc.ej()) {
              multipleHandlersError(this, handler, tmp1__anonymous__uwfjfc);
            }
            if (tmp1__anonymous__uwfjfc instanceof CancelledContinuation) {
              var tmp1_safe_receiver = tmp1__anonymous__uwfjfc instanceof CompletedExceptionally ? tmp1__anonymous__uwfjfc : null;
              callCancelHandler(this, handler, tmp1_safe_receiver == null ? null : tmp1_safe_receiver.if_1);
            }
            return Unit_getInstance();
          } else {
            if (tmp0_subject instanceof CompletedContinuation_0) {
              if (!(tmp1__anonymous__uwfjfc.ti_1 == null)) {
                multipleHandlersError(this, handler, tmp1__anonymous__uwfjfc);
              }
              if (cancelHandler instanceof BeforeResumeCancelHandler)
                return Unit_getInstance();
              if (tmp1__anonymous__uwfjfc.xi()) {
                callCancelHandler(this, handler, tmp1__anonymous__uwfjfc.wi_1);
                return Unit_getInstance();
              }
              var update = tmp1__anonymous__uwfjfc.yi(null, cancelHandler, null, null, null, 29, null);
              if (this.vh_1.atomicfu$compareAndSet(tmp1__anonymous__uwfjfc, update))
                return Unit_getInstance();
            } else {
              if (cancelHandler instanceof BeforeResumeCancelHandler)
                return Unit_getInstance();
              var update_0 = CompletedContinuation_init_$Create$(tmp1__anonymous__uwfjfc, cancelHandler, null, null, null, 28, null);
              if (this.vh_1.atomicfu$compareAndSet(tmp1__anonymous__uwfjfc, update_0))
                return Unit_getInstance();
            }
          }
        }
      }
    }
  };
  CancellableContinuationImpl.prototype.hi = function () {
    var tmp0_elvis_lhs = this.wh_1;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return Unit_getInstance();
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var handle = tmp;
    handle.pi();
    this.wh_1 = NonDisposableHandle_getInstance();
  };
  CancellableContinuationImpl.prototype.dj = function (state) {
    var tmp0_subject = state;
    var tmp;
    if (tmp0_subject instanceof CompletedContinuation_0) {
      var tmp_0 = state.si_1;
      tmp = (tmp_0 == null ? true : isObject(tmp_0)) ? tmp_0 : THROW_CCE();
    } else {
      tmp = (state == null ? true : isObject(state)) ? state : THROW_CCE();
    }
    return tmp;
  };
  CancellableContinuationImpl.prototype.fj = function (state) {
    var tmp0_safe_receiver = DispatchedTask.prototype.fj.call(this, state);
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'kotlinx.coroutines.CancellableContinuationImpl.getExceptionalResult.<anonymous>' call
      tmp$ret$0 = recoverStackTrace(tmp0_safe_receiver, this.sh_1);
      tmp$ret$1 = tmp$ret$0;
      tmp = tmp$ret$1;
    }
    return tmp;
  };
  CancellableContinuationImpl.prototype.toString = function () {
    return this.pf() + '(' + toDebugString(this.sh_1) + '){' + _get_stateDebugRepresentation__bf18u4(this) + '}@' + get_hexAddress(this);
  };
  CancellableContinuationImpl.prototype.pf = function () {
    return 'CancellableContinuation';
  };
  CancellableContinuationImpl.$metadata$ = classMeta('CancellableContinuationImpl', [CancellableContinuation, CoroutineStackFrame], undefined, undefined, undefined, DispatchedTask.prototype);
  function CancelHandler() {
    CancelHandlerBase.call(this);
  }
  CancelHandler.$metadata$ = classMeta('CancelHandler', [NotCompleted], undefined, undefined, undefined, CancelHandlerBase.prototype);
  function get_UNDECIDED_0() {
    return UNDECIDED_0;
  }
  var UNDECIDED_0;
  function Active() {
    Active_instance = this;
  }
  Active.prototype.toString = function () {
    return 'Active';
  };
  Active.$metadata$ = objectMeta('Active', [NotCompleted]);
  var Active_instance;
  function Active_getInstance() {
    if (Active_instance == null)
      new Active();
    return Active_instance;
  }
  function NotCompleted() {
  }
  NotCompleted.$metadata$ = interfaceMeta('NotCompleted');
  function CompletedContinuation_init_$Init$(result, cancelHandler, onCancellation, idempotentResume, cancelCause, $mask0, $marker, $this) {
    if (!(($mask0 & 2) === 0))
      cancelHandler = null;
    if (!(($mask0 & 4) === 0))
      onCancellation = null;
    if (!(($mask0 & 8) === 0))
      idempotentResume = null;
    if (!(($mask0 & 16) === 0))
      cancelCause = null;
    CompletedContinuation_0.call($this, result, cancelHandler, onCancellation, idempotentResume, cancelCause);
    return $this;
  }
  function CompletedContinuation_init_$Create$(result, cancelHandler, onCancellation, idempotentResume, cancelCause, $mask0, $marker) {
    return CompletedContinuation_init_$Init$(result, cancelHandler, onCancellation, idempotentResume, cancelCause, $mask0, $marker, Object.create(CompletedContinuation_0.prototype));
  }
  function CompletedContinuation_0(result, cancelHandler, onCancellation, idempotentResume, cancelCause) {
    this.si_1 = result;
    this.ti_1 = cancelHandler;
    this.ui_1 = onCancellation;
    this.vi_1 = idempotentResume;
    this.wi_1 = cancelCause;
  }
  CompletedContinuation_0.prototype.jj = function () {
    return this.ti_1;
  };
  CompletedContinuation_0.prototype.kj = function () {
    return this.wi_1;
  };
  CompletedContinuation_0.prototype.xi = function () {
    return !(this.wi_1 == null);
  };
  CompletedContinuation_0.prototype.zi = function (cont, cause) {
    var tmp0_safe_receiver = this.ti_1;
    if (tmp0_safe_receiver == null)
      null;
    else {
      var tmp$ret$0;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      cont.aj(tmp0_safe_receiver, cause);
      tmp$ret$0 = Unit_getInstance();
    }
    var tmp1_safe_receiver = this.ui_1;
    if (tmp1_safe_receiver == null)
      null;
    else {
      var tmp$ret$1;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      cont.ii(tmp1_safe_receiver, cause);
      tmp$ret$1 = Unit_getInstance();
    }
  };
  CompletedContinuation_0.prototype.lj = function (result, cancelHandler, onCancellation, idempotentResume, cancelCause) {
    return new CompletedContinuation_0(result, cancelHandler, onCancellation, idempotentResume, cancelCause);
  };
  CompletedContinuation_0.prototype.yi = function (result, cancelHandler, onCancellation, idempotentResume, cancelCause, $mask0, $handler) {
    if (!(($mask0 & 1) === 0))
      result = this.si_1;
    if (!(($mask0 & 2) === 0))
      cancelHandler = this.ti_1;
    if (!(($mask0 & 4) === 0))
      onCancellation = this.ui_1;
    if (!(($mask0 & 8) === 0))
      idempotentResume = this.vi_1;
    if (!(($mask0 & 16) === 0))
      cancelCause = this.wi_1;
    return this.lj(result, cancelHandler, onCancellation, idempotentResume, cancelCause);
  };
  CompletedContinuation_0.prototype.toString = function () {
    return 'CompletedContinuation(result=' + toString_1(this.si_1) + ', cancelHandler=' + this.ti_1 + ', onCancellation=' + this.ui_1 + ', idempotentResume=' + toString_1(this.vi_1) + ', cancelCause=' + this.wi_1 + ')';
  };
  CompletedContinuation_0.prototype.hashCode = function () {
    var result = this.si_1 == null ? 0 : hashCode_0(this.si_1);
    result = imul(result, 31) + (this.ti_1 == null ? 0 : hashCode_0(this.ti_1)) | 0;
    result = imul(result, 31) + (this.ui_1 == null ? 0 : hashCode_0(this.ui_1)) | 0;
    result = imul(result, 31) + (this.vi_1 == null ? 0 : hashCode_0(this.vi_1)) | 0;
    result = imul(result, 31) + (this.wi_1 == null ? 0 : hashCode_0(this.wi_1)) | 0;
    return result;
  };
  CompletedContinuation_0.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof CompletedContinuation_0))
      return false;
    var tmp0_other_with_cast = other instanceof CompletedContinuation_0 ? other : THROW_CCE();
    if (!equals_0(this.si_1, tmp0_other_with_cast.si_1))
      return false;
    if (!equals_0(this.ti_1, tmp0_other_with_cast.ti_1))
      return false;
    if (!equals_0(this.ui_1, tmp0_other_with_cast.ui_1))
      return false;
    if (!equals_0(this.vi_1, tmp0_other_with_cast.vi_1))
      return false;
    if (!equals_0(this.wi_1, tmp0_other_with_cast.wi_1))
      return false;
    return true;
  };
  CompletedContinuation_0.$metadata$ = classMeta('CompletedContinuation');
  function get_SUSPENDED_0() {
    return SUSPENDED_0;
  }
  var SUSPENDED_0;
  function get_RESUMED_0() {
    return RESUMED_0;
  }
  var RESUMED_0;
  function BeforeResumeCancelHandler() {
  }
  BeforeResumeCancelHandler.$metadata$ = classMeta('BeforeResumeCancelHandler', undefined, undefined, undefined, undefined, CancelHandler.prototype);
  function InvokeOnCancel(handler) {
    CancelHandler.call(this);
    this.mj_1 = handler;
  }
  InvokeOnCancel.prototype.nj = function (cause) {
    this.mj_1(cause);
  };
  InvokeOnCancel.prototype.invoke = function (cause) {
    return this.nj(cause);
  };
  InvokeOnCancel.prototype.toString = function () {
    return 'InvokeOnCancel[' + get_classSimpleName(this.mj_1) + '@' + get_hexAddress(this) + ']';
  };
  InvokeOnCancel.$metadata$ = classMeta('InvokeOnCancel', undefined, undefined, undefined, undefined, CancelHandler.prototype);
  function CompletableJob() {
  }
  CompletableJob.$metadata$ = interfaceMeta('CompletableJob', [Job]);
  function CompletedExceptionally_init_$Init$(cause, handled, $mask0, $marker, $this) {
    if (!(($mask0 & 2) === 0))
      handled = false;
    CompletedExceptionally.call($this, cause, handled);
    return $this;
  }
  function CompletedExceptionally_init_$Create$(cause, handled, $mask0, $marker) {
    return CompletedExceptionally_init_$Init$(cause, handled, $mask0, $marker, Object.create(CompletedExceptionally.prototype));
  }
  function CompletedExceptionally(cause, handled) {
    this.if_1 = cause;
    this.jf_1 = atomic$boolean$1(handled);
  }
  CompletedExceptionally.prototype.k1 = function () {
    return this.if_1;
  };
  CompletedExceptionally.prototype.kf = function () {
    return this.jf_1.te_1;
  };
  CompletedExceptionally.prototype.ej = function () {
    return this.jf_1.atomicfu$compareAndSet(false, true);
  };
  CompletedExceptionally.prototype.toString = function () {
    return get_classSimpleName(this) + '[' + this.if_1 + ']';
  };
  CompletedExceptionally.$metadata$ = classMeta('CompletedExceptionally');
  function CancelledContinuation(continuation, cause, handled) {
    var tmp0_elvis_lhs = cause;
    CompletedExceptionally.call(this, tmp0_elvis_lhs == null ? CancellationException_init_$Create$('Continuation ' + continuation + ' was cancelled normally') : tmp0_elvis_lhs, handled);
    this.li_1 = atomic$boolean$1(false);
  }
  CancelledContinuation.prototype.mi = function () {
    return this.li_1.atomicfu$compareAndSet(false, true);
  };
  CancelledContinuation.$metadata$ = classMeta('CancelledContinuation', undefined, undefined, undefined, undefined, CompletedExceptionally.prototype);
  function toState(_this__u8e3s4, caller) {
    var tmp$ret$2;
    // Inline function 'kotlin.fold' call
    // Inline function 'kotlin.contracts.contract' call
    var exception = Result__exceptionOrNull_impl_p6xea9(_this__u8e3s4);
    var tmp;
    if (exception == null) {
      var tmp$ret$0;
      // Inline function 'kotlinx.coroutines.toState.<anonymous>' call
      var tmp_0 = _Result___get_value__impl__bjfvqg(_this__u8e3s4);
      var tmp0__anonymous__q1qw7t = (tmp_0 == null ? true : isObject(tmp_0)) ? tmp_0 : THROW_CCE();
      tmp$ret$0 = tmp0__anonymous__q1qw7t;
      tmp = tmp$ret$0;
    } else {
      var tmp$ret$1;
      // Inline function 'kotlinx.coroutines.toState.<anonymous>' call
      var tmp_1 = recoverStackTrace(exception, caller);
      tmp$ret$1 = CompletedExceptionally_init_$Create$(tmp_1, false, 2, null);
      tmp = tmp$ret$1;
    }
    tmp$ret$2 = tmp;
    return tmp$ret$2;
  }
  function toState_0(_this__u8e3s4, onCancellation) {
    var tmp$ret$2;
    // Inline function 'kotlin.fold' call
    // Inline function 'kotlin.contracts.contract' call
    var exception = Result__exceptionOrNull_impl_p6xea9(_this__u8e3s4);
    var tmp;
    if (exception == null) {
      var tmp$ret$0;
      // Inline function 'kotlinx.coroutines.toState.<anonymous>' call
      var tmp_0 = _Result___get_value__impl__bjfvqg(_this__u8e3s4);
      var tmp0__anonymous__q1qw7t = (tmp_0 == null ? true : isObject(tmp_0)) ? tmp_0 : THROW_CCE();
      tmp$ret$0 = !(onCancellation == null) ? new CompletedWithCancellation(tmp0__anonymous__q1qw7t, onCancellation) : tmp0__anonymous__q1qw7t;
      tmp = tmp$ret$0;
    } else {
      var tmp$ret$1;
      // Inline function 'kotlinx.coroutines.toState.<anonymous>' call
      tmp$ret$1 = CompletedExceptionally_init_$Create$(exception, false, 2, null);
      tmp = tmp$ret$1;
    }
    tmp$ret$2 = tmp;
    return tmp$ret$2;
  }
  function toState$default(_this__u8e3s4, onCancellation, $mask0, $handler) {
    if (!(($mask0 & 1) === 0))
      onCancellation = null;
    return toState_0(_this__u8e3s4, onCancellation);
  }
  function CompletedWithCancellation(result, onCancellation) {
    this.pj_1 = result;
    this.qj_1 = onCancellation;
  }
  CompletedWithCancellation.prototype.toString = function () {
    return 'CompletedWithCancellation(result=' + toString_1(this.pj_1) + ', onCancellation=' + this.qj_1 + ')';
  };
  CompletedWithCancellation.prototype.hashCode = function () {
    var result = this.pj_1 == null ? 0 : hashCode_0(this.pj_1);
    result = imul(result, 31) + hashCode_0(this.qj_1) | 0;
    return result;
  };
  CompletedWithCancellation.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof CompletedWithCancellation))
      return false;
    var tmp0_other_with_cast = other instanceof CompletedWithCancellation ? other : THROW_CCE();
    if (!equals_0(this.pj_1, tmp0_other_with_cast.pj_1))
      return false;
    if (!equals_0(this.qj_1, tmp0_other_with_cast.qj_1))
      return false;
    return true;
  };
  CompletedWithCancellation.$metadata$ = classMeta('CompletedWithCancellation');
  function recoverResult(state, uCont) {
    var tmp;
    if (state instanceof CompletedExceptionally) {
      var tmp$ret$0;
      // Inline function 'kotlin.Companion.failure' call
      var tmp0_failure = Companion_getInstance_4();
      var tmp1_failure = recoverStackTrace(state.if_1, uCont);
      tmp$ret$0 = _Result___init__impl__xyqfz8(createFailure(tmp1_failure));
      tmp = tmp$ret$0;
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.Companion.success' call
      var tmp2_success = Companion_getInstance_4();
      var tmp3_success = (state == null ? true : isObject(state)) ? state : THROW_CCE();
      tmp$ret$1 = _Result___init__impl__xyqfz8(tmp3_success);
      tmp = tmp$ret$1;
    }
    return tmp;
  }
  function CoroutineDispatcher$Key$_init_$lambda_akl8b5(it) {
    return it instanceof CoroutineDispatcher ? it : null;
  }
  function Key_1() {
    Key_instance_0 = this;
    var tmp = Key_getInstance();
    AbstractCoroutineContextKey.call(this, tmp, CoroutineDispatcher$Key$_init_$lambda_akl8b5);
  }
  Key_1.$metadata$ = objectMeta('Key', undefined, undefined, undefined, undefined, AbstractCoroutineContextKey.prototype);
  var Key_instance_0;
  function Key_getInstance_0() {
    if (Key_instance_0 == null)
      new Key_1();
    return Key_instance_0;
  }
  function CoroutineDispatcher() {
    Key_getInstance_0();
    AbstractCoroutineContextElement.call(this, Key_getInstance());
  }
  CoroutineDispatcher.prototype.sj = function (context) {
    return true;
  };
  CoroutineDispatcher.prototype.z3 = function (continuation) {
    return new DispatchedContinuation(this, continuation);
  };
  CoroutineDispatcher.prototype.a4 = function (continuation) {
    var dispatched = continuation instanceof DispatchedContinuation ? continuation : THROW_CCE();
    dispatched.uj();
  };
  CoroutineDispatcher.prototype.toString = function () {
    return get_classSimpleName(this) + '@' + get_hexAddress(this);
  };
  CoroutineDispatcher.$metadata$ = classMeta('CoroutineDispatcher', [ContinuationInterceptor], undefined, undefined, undefined, AbstractCoroutineContextElement.prototype);
  function handleCoroutineException(context, exception) {
    try {
      var tmp0_safe_receiver = context.b4(Key_getInstance_1());
      if (tmp0_safe_receiver == null)
        null;
      else {
        var tmp$ret$0;
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        tmp0_safe_receiver.vj(context, exception);
        return Unit_getInstance();
      }
    } catch ($p) {
      if ($p instanceof Error) {
        handleCoroutineExceptionImpl(context, handlerException(exception, $p));
        return Unit_getInstance();
      } else {
        throw $p;
      }
    }
    handleCoroutineExceptionImpl(context, exception);
  }
  function Key_2() {
    Key_instance_1 = this;
  }
  Key_2.$metadata$ = objectMeta('Key', [Key_0]);
  var Key_instance_1;
  function Key_getInstance_1() {
    if (Key_instance_1 == null)
      new Key_2();
    return Key_instance_1;
  }
  function handlerException(originalException, thrownException) {
    if (originalException === thrownException)
      return originalException;
    var tmp$ret$0;
    // Inline function 'kotlin.apply' call
    var tmp0_apply = RuntimeException_init_$Create$('Exception while trying to handle coroutine exception', thrownException);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlinx.coroutines.handlerException.<anonymous>' call
    // Inline function 'kotlinx.coroutines.addSuppressedThrowable' call
    tmp$ret$0 = tmp0_apply;
    return tmp$ret$0;
  }
  function CoroutineScope() {
  }
  CoroutineScope.$metadata$ = interfaceMeta('CoroutineScope');
  function CoroutineScope_0(context) {
    var tmp;
    if (!(context.b4(Key_getInstance_2()) == null)) {
      tmp = context;
    } else {
      tmp = context.i4(Job$default(null, 1, null));
    }
    return new ContextScope(tmp);
  }
  function coroutineScope(block, $cont) {
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'kotlinx.coroutines.coroutineScope.<anonymous>' call
    var tmp0__anonymous__q1qw7t = $cont;
    var coroutine = new ScopeCoroutine(tmp0__anonymous__q1qw7t.q3(), tmp0__anonymous__q1qw7t);
    tmp$ret$0 = startUndispatchedOrReturn(coroutine, coroutine, block);
    return tmp$ret$0;
  }
  var CoroutineStart_DEFAULT_instance;
  var CoroutineStart_LAZY_instance;
  var CoroutineStart_ATOMIC_instance;
  var CoroutineStart_UNDISPATCHED_instance;
  var CoroutineStart_entriesInitialized;
  function CoroutineStart_initEntries() {
    if (CoroutineStart_entriesInitialized)
      return Unit_getInstance();
    CoroutineStart_entriesInitialized = true;
    CoroutineStart_DEFAULT_instance = new CoroutineStart('DEFAULT', 0);
    CoroutineStart_LAZY_instance = new CoroutineStart('LAZY', 1);
    CoroutineStart_ATOMIC_instance = new CoroutineStart('ATOMIC', 2);
    CoroutineStart_UNDISPATCHED_instance = new CoroutineStart('UNDISPATCHED', 3);
  }
  function CoroutineStart(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  CoroutineStart.prototype.tf = function (block, receiver, completion) {
    var tmp0_subject = this;
    var tmp0 = tmp0_subject.o4_1;
    var tmp;
    switch (tmp0) {
      case 0:
        startCoroutineCancellable$default(block, receiver, completion, null, 4, null);
        tmp = Unit_getInstance();
        break;
      case 2:
        startCoroutine(block, receiver, completion);
        tmp = Unit_getInstance();
        break;
      case 3:
        startCoroutineUndispatched(block, receiver, completion);
        tmp = Unit_getInstance();
        break;
      case 1:
        tmp = Unit_getInstance();
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    return tmp;
  };
  CoroutineStart.prototype.wg = function () {
    return this === CoroutineStart_LAZY_getInstance();
  };
  CoroutineStart.$metadata$ = classMeta('CoroutineStart', undefined, undefined, undefined, undefined, Enum.prototype);
  function CoroutineStart_DEFAULT_getInstance() {
    CoroutineStart_initEntries();
    return CoroutineStart_DEFAULT_instance;
  }
  function CoroutineStart_LAZY_getInstance() {
    CoroutineStart_initEntries();
    return CoroutineStart_LAZY_instance;
  }
  function CoroutineStart_UNDISPATCHED_getInstance() {
    CoroutineStart_initEntries();
    return CoroutineStart_UNDISPATCHED_instance;
  }
  function CopyableThrowable() {
  }
  CopyableThrowable.$metadata$ = interfaceMeta('CopyableThrowable');
  function Delay() {
  }
  Delay.$metadata$ = interfaceMeta('Delay');
  function delta($this, unconfined) {
    return unconfined ? new Long(0, 1) : new Long(1, 0);
  }
  function EventLoop() {
    CoroutineDispatcher.call(this);
    this.xj_1 = new Long(0, 0);
    this.yj_1 = false;
    this.zj_1 = null;
  }
  EventLoop.prototype.ak = function () {
    var tmp0_elvis_lhs = this.zj_1;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return false;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var queue = tmp;
    var tmp1_elvis_lhs = queue.ek();
    var tmp_0;
    if (tmp1_elvis_lhs == null) {
      return false;
    } else {
      tmp_0 = tmp1_elvis_lhs;
    }
    var task = tmp_0;
    task.hj();
    return true;
  };
  EventLoop.prototype.fk = function (task) {
    var tmp0_elvis_lhs = this.zj_1;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      var tmp$ret$0;
      // Inline function 'kotlin.also' call
      var tmp0_also = new ArrayQueue();
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlinx.coroutines.EventLoop.dispatchUnconfined.<anonymous>' call
      this.zj_1 = tmp0_also;
      tmp$ret$0 = tmp0_also;
      tmp = tmp$ret$0;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var queue = tmp;
    queue.gk(task);
  };
  EventLoop.prototype.hk = function () {
    return this.xj_1.b1(delta(this, true)) >= 0;
  };
  EventLoop.prototype.ik = function () {
    var tmp0_safe_receiver = this.zj_1;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.jk();
    return tmp1_elvis_lhs == null ? true : tmp1_elvis_lhs;
  };
  EventLoop.prototype.kk = function (unconfined) {
    var tmp0_this = this;
    tmp0_this.xj_1 = tmp0_this.xj_1.t5(delta(this, unconfined));
    if (!unconfined)
      this.yj_1 = true;
  };
  EventLoop.prototype.lk = function (unconfined) {
    var tmp0_this = this;
    tmp0_this.xj_1 = tmp0_this.xj_1.yc(delta(this, unconfined));
    if (this.xj_1.b1(new Long(0, 0)) > 0)
      return Unit_getInstance();
    // Inline function 'kotlinx.coroutines.assert' call
    if (this.yj_1) {
      this.mk();
    }
  };
  EventLoop.prototype.mk = function () {
  };
  EventLoop.$metadata$ = classMeta('EventLoop', undefined, undefined, undefined, undefined, CoroutineDispatcher.prototype);
  function ThreadLocalEventLoop() {
    ThreadLocalEventLoop_instance = this;
    this.nk_1 = new CommonThreadLocal();
  }
  ThreadLocalEventLoop.prototype.ok = function () {
    var tmp0_elvis_lhs = this.nk_1.qk();
    var tmp;
    if (tmp0_elvis_lhs == null) {
      var tmp$ret$0;
      // Inline function 'kotlin.also' call
      var tmp0_also = createEventLoop();
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlinx.coroutines.ThreadLocalEventLoop.<get-eventLoop>.<anonymous>' call
      ThreadLocalEventLoop_getInstance().nk_1.rk(tmp0_also);
      tmp$ret$0 = tmp0_also;
      tmp = tmp$ret$0;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  ThreadLocalEventLoop.$metadata$ = objectMeta('ThreadLocalEventLoop');
  var ThreadLocalEventLoop_instance;
  function ThreadLocalEventLoop_getInstance() {
    if (ThreadLocalEventLoop_instance == null)
      new ThreadLocalEventLoop();
    return ThreadLocalEventLoop_instance;
  }
  function CompletionHandlerException(message, cause) {
    RuntimeException_init_$Init$_1(message, cause, this);
    captureStack(this, CompletionHandlerException);
  }
  CompletionHandlerException.$metadata$ = classMeta('CompletionHandlerException', undefined, undefined, undefined, undefined, RuntimeException.prototype);
  function CoroutinesInternalError(message, cause) {
    Error_init_$Init$_0(message, cause, this);
    captureStack(this, CoroutinesInternalError);
  }
  CoroutinesInternalError.$metadata$ = classMeta('CoroutinesInternalError', undefined, undefined, undefined, undefined, Error_0.prototype);
  function DisposableHandle() {
  }
  DisposableHandle.$metadata$ = interfaceMeta('DisposableHandle');
  function Key_3() {
    Key_instance_2 = this;
  }
  Key_3.$metadata$ = objectMeta('Key', [Key_0]);
  var Key_instance_2;
  function Key_getInstance_2() {
    if (Key_instance_2 == null)
      new Key_3();
    return Key_instance_2;
  }
  function Job() {
  }
  Job.$metadata$ = interfaceMeta('Job', [Element_0]);
  function ChildJob() {
  }
  ChildJob.$metadata$ = interfaceMeta('ChildJob', [Job]);
  function ParentJob() {
  }
  ParentJob.$metadata$ = interfaceMeta('ParentJob', [Job]);
  function ChildHandle() {
  }
  ChildHandle.$metadata$ = interfaceMeta('ChildHandle', [DisposableHandle]);
  function NonDisposableHandle() {
    NonDisposableHandle_instance = this;
  }
  NonDisposableHandle.prototype.pi = function () {
  };
  NonDisposableHandle.prototype.mg = function (cause) {
    return false;
  };
  NonDisposableHandle.prototype.toString = function () {
    return 'NonDisposableHandle';
  };
  NonDisposableHandle.$metadata$ = objectMeta('NonDisposableHandle', [DisposableHandle, ChildHandle]);
  var NonDisposableHandle_instance;
  function NonDisposableHandle_getInstance() {
    if (NonDisposableHandle_instance == null)
      new NonDisposableHandle();
    return NonDisposableHandle_instance;
  }
  function ensureActive(_this__u8e3s4) {
    var tmp0_safe_receiver = _this__u8e3s4.b4(Key_getInstance_2());
    if (tmp0_safe_receiver == null)
      null;
    else {
      ensureActive_0(tmp0_safe_receiver);
    }
  }
  function ensureActive_0(_this__u8e3s4) {
    if (!_this__u8e3s4.df())
      throw _this__u8e3s4.ag();
  }
  function Job_0(parent) {
    return new JobImpl(parent);
  }
  function Job$default(parent, $mask0, $handler) {
    if (!(($mask0 & 1) === 0))
      parent = null;
    return Job_0(parent);
  }
  function get_job(_this__u8e3s4) {
    var tmp0_elvis_lhs = _this__u8e3s4.b4(Key_getInstance_2());
    var tmp;
    if (tmp0_elvis_lhs == null) {
      var tmp0_error = "Current context doesn't contain Job in it: " + _this__u8e3s4;
      throw IllegalStateException_init_$Create$_0(toString_2(tmp0_error));
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  }
  function cancel(_this__u8e3s4, message, cause) {
    return _this__u8e3s4.ig(CancellationException_init_$Create$_0(message, cause));
  }
  function cancel$default_1(_this__u8e3s4, message, cause, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      cause = null;
    return cancel(_this__u8e3s4, message, cause);
  }
  function get_COMPLETING_ALREADY() {
    init_properties_JobSupport_kt_iaxwag();
    return COMPLETING_ALREADY;
  }
  var COMPLETING_ALREADY;
  function get_COMPLETING_WAITING_CHILDREN() {
    init_properties_JobSupport_kt_iaxwag();
    return COMPLETING_WAITING_CHILDREN;
  }
  var COMPLETING_WAITING_CHILDREN;
  function get_COMPLETING_RETRY() {
    init_properties_JobSupport_kt_iaxwag();
    return COMPLETING_RETRY;
  }
  var COMPLETING_RETRY;
  function get_TOO_LATE_TO_CANCEL() {
    init_properties_JobSupport_kt_iaxwag();
    return TOO_LATE_TO_CANCEL;
  }
  var TOO_LATE_TO_CANCEL;
  function get_SEALED() {
    init_properties_JobSupport_kt_iaxwag();
    return SEALED;
  }
  var SEALED;
  function get_EMPTY_NEW() {
    init_properties_JobSupport_kt_iaxwag();
    return EMPTY_NEW;
  }
  var EMPTY_NEW;
  function get_EMPTY_ACTIVE() {
    init_properties_JobSupport_kt_iaxwag();
    return EMPTY_ACTIVE;
  }
  var EMPTY_ACTIVE;
  function Empty(isActive) {
    this.sk_1 = isActive;
  }
  Empty.prototype.df = function () {
    return this.sk_1;
  };
  Empty.prototype.tk = function () {
    return null;
  };
  Empty.prototype.toString = function () {
    return 'Empty{' + (this.sk_1 ? 'Active' : 'New') + '}';
  };
  Empty.$metadata$ = classMeta('Empty', [Incomplete]);
  function Incomplete() {
  }
  Incomplete.$metadata$ = interfaceMeta('Incomplete');
  function NodeList() {
    LinkedListHead.call(this);
  }
  NodeList.prototype.df = function () {
    return true;
  };
  NodeList.prototype.tk = function () {
    return this;
  };
  NodeList.prototype.xk = function (state) {
    var tmp$ret$1;
    // Inline function 'kotlin.text.buildString' call
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'kotlin.apply' call
    var tmp0_apply = StringBuilder_init_$Create$_0();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlinx.coroutines.NodeList.getString.<anonymous>' call
    tmp0_apply.yb('List{');
    tmp0_apply.yb(state);
    tmp0_apply.yb('}[');
    var first = true;
    // Inline function 'kotlinx.coroutines.internal.LinkedListHead.forEach' call
    var cur = this.yk_1;
    while (!equals_0(cur, this)) {
      if (cur instanceof JobNode) {
        // Inline function 'kotlinx.coroutines.NodeList.getString.<anonymous>.<anonymous>' call
        var tmp0__anonymous__q1qw7t = cur;
        if (first)
          first = false;
        else {
          tmp0_apply.yb(', ');
        }
        tmp0_apply.xb(tmp0__anonymous__q1qw7t);
      }
      cur = cur.yk_1;
    }
    tmp0_apply.yb(']');
    tmp$ret$0 = tmp0_apply;
    tmp$ret$1 = tmp$ret$0.toString();
    return tmp$ret$1;
  };
  NodeList.prototype.toString = function () {
    return get_DEBUG() ? this.xk('Active') : LinkedListHead.prototype.toString.call(this);
  };
  NodeList.$metadata$ = classMeta('NodeList', [Incomplete], undefined, undefined, undefined, LinkedListHead.prototype);
  function JobNode() {
    CompletionHandlerBase.call(this);
  }
  JobNode.prototype.ml = function () {
    var tmp = this.ll_1;
    if (!(tmp == null))
      return tmp;
    else {
      throwUninitializedPropertyAccessException('job');
    }
  };
  JobNode.prototype.df = function () {
    return true;
  };
  JobNode.prototype.tk = function () {
    return null;
  };
  JobNode.prototype.pi = function () {
    return this.ml().gg(this);
  };
  JobNode.prototype.toString = function () {
    return get_classSimpleName(this) + '@' + get_hexAddress(this) + '[job@' + get_hexAddress(this.ml()) + ']';
  };
  JobNode.$metadata$ = classMeta('JobNode', [DisposableHandle, Incomplete], undefined, undefined, undefined, CompletionHandlerBase.prototype);
  function _set_exceptionsHolder__tqm22h($this, value) {
    $this.sl_1.pe_1 = value;
  }
  function _get_exceptionsHolder__nhszp($this) {
    return $this.sl_1.pe_1;
  }
  function allocateList($this) {
    return ArrayList_init_$Create$_0(4);
  }
  function finalizeFinishingState($this, state, proposedUpdate) {
    // Inline function 'kotlinx.coroutines.assert' call
    // Inline function 'kotlinx.coroutines.assert' call
    // Inline function 'kotlinx.coroutines.assert' call
    var tmp0_safe_receiver = proposedUpdate instanceof CompletedExceptionally ? proposedUpdate : null;
    var proposedException = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.if_1;
    var wasCancelling = false;
    var tmp$ret$1;
    // Inline function 'kotlinx.coroutines.internal.synchronized' call
    var tmp$ret$0;
    // Inline function 'kotlinx.coroutines.JobSupport.finalizeFinishingState.<anonymous>' call
    wasCancelling = state.tl();
    var exceptions = state.ul(proposedException);
    var finalCause = getFinalRootCause($this, state, exceptions);
    if (!(finalCause == null)) {
      addSuppressedExceptions($this, finalCause, exceptions);
    }
    tmp$ret$0 = finalCause;
    tmp$ret$1 = tmp$ret$0;
    var finalException = tmp$ret$1;
    var tmp;
    if (finalException == null) {
      tmp = proposedUpdate;
    } else if (finalException === proposedException) {
      tmp = proposedUpdate;
    } else {
      tmp = CompletedExceptionally_init_$Create$(finalException, false, 2, null);
    }
    var finalState = tmp;
    if (!(finalException == null)) {
      var handled = cancelParent($this, finalException) ? true : $this.ug(finalException);
      if (handled) {
        (finalState instanceof CompletedExceptionally ? finalState : THROW_CCE()).ej();
      }
    }
    if (!wasCancelling) {
      $this.rg(finalException);
    }
    $this.hf(finalState);
    var casSuccess = $this.we_1.atomicfu$compareAndSet(state, boxIncomplete(finalState));
    // Inline function 'kotlinx.coroutines.assert' call
    completeStateFinalization($this, state, finalState);
    return finalState;
  }
  function getFinalRootCause($this, state, exceptions) {
    if (exceptions.i()) {
      if (state.tl()) {
        var tmp$ret$0;
        // Inline function 'kotlinx.coroutines.JobSupport.defaultCancellationException' call
        var tmp0_elvis_lhs = null;
        tmp$ret$0 = new JobCancellationException(tmp0_elvis_lhs == null ? $this.gf() : tmp0_elvis_lhs, null, $this);
        return tmp$ret$0;
      }
      return null;
    }
    var tmp$ret$2;
    $l$block: {
      // Inline function 'kotlin.collections.firstOrNull' call
      var tmp0_iterator = exceptions.d();
      while (tmp0_iterator.e()) {
        var element = tmp0_iterator.f();
        var tmp$ret$1;
        // Inline function 'kotlinx.coroutines.JobSupport.getFinalRootCause.<anonymous>' call
        tmp$ret$1 = !(element instanceof CancellationException);
        if (tmp$ret$1) {
          tmp$ret$2 = element;
          break $l$block;
        }
      }
      tmp$ret$2 = null;
    }
    var firstNonCancellation = tmp$ret$2;
    if (!(firstNonCancellation == null))
      return firstNonCancellation;
    var first = exceptions.h(0);
    if (first instanceof TimeoutCancellationException) {
      var tmp$ret$4;
      $l$block_0: {
        // Inline function 'kotlin.collections.firstOrNull' call
        var tmp0_iterator_0 = exceptions.d();
        while (tmp0_iterator_0.e()) {
          var element_0 = tmp0_iterator_0.f();
          var tmp$ret$3;
          // Inline function 'kotlinx.coroutines.JobSupport.getFinalRootCause.<anonymous>' call
          var tmp;
          if (!(element_0 === first)) {
            tmp = element_0 instanceof TimeoutCancellationException;
          } else {
            tmp = false;
          }
          tmp$ret$3 = tmp;
          if (tmp$ret$3) {
            tmp$ret$4 = element_0;
            break $l$block_0;
          }
        }
        tmp$ret$4 = null;
      }
      var detailedTimeoutException = tmp$ret$4;
      if (!(detailedTimeoutException == null))
        return detailedTimeoutException;
    }
    return first;
  }
  function addSuppressedExceptions($this, rootCause, exceptions) {
    if (exceptions.g() <= 1)
      return Unit_getInstance();
    var seenExceptions = identitySet(exceptions.g());
    var unwrappedCause = unwrap(rootCause);
    var tmp0_iterator = exceptions.d();
    while (tmp0_iterator.e()) {
      var exception = tmp0_iterator.f();
      var unwrapped = unwrap(exception);
      var tmp;
      var tmp_0;
      if (!(unwrapped === rootCause) ? !(unwrapped === unwrappedCause) : false) {
        tmp_0 = !(unwrapped instanceof CancellationException);
      } else {
        tmp_0 = false;
      }
      if (tmp_0) {
        tmp = seenExceptions.b(unwrapped);
      } else {
        tmp = false;
      }
      if (tmp) {
        // Inline function 'kotlinx.coroutines.addSuppressedThrowable' call
      }
    }
  }
  function tryFinalizeSimpleState($this, state, update) {
    // Inline function 'kotlinx.coroutines.assert' call
    // Inline function 'kotlinx.coroutines.assert' call
    if (!$this.we_1.atomicfu$compareAndSet(state, boxIncomplete(update)))
      return false;
    $this.rg(null);
    $this.hf(update);
    completeStateFinalization($this, state, update);
    return true;
  }
  function completeStateFinalization($this, state, update) {
    var tmp0_safe_receiver = $this.vf();
    if (tmp0_safe_receiver == null)
      null;
    else {
      var tmp$ret$0;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      tmp0_safe_receiver.pi();
      $this.uf(NonDisposableHandle_getInstance());
      tmp$ret$0 = Unit_getInstance();
    }
    var tmp1_safe_receiver = update instanceof CompletedExceptionally ? update : null;
    var cause = tmp1_safe_receiver == null ? null : tmp1_safe_receiver.if_1;
    if (state instanceof JobNode) {
      try {
        state.invoke(cause);
      } catch ($p) {
        if ($p instanceof Error) {
          $this.of(new CompletionHandlerException('Exception in completion handler ' + state + ' for ' + $this, $p));
        } else {
          throw $p;
        }
      }
    } else {
      var tmp2_safe_receiver = state.tk();
      if (tmp2_safe_receiver == null)
        null;
      else {
        notifyCompletion(tmp2_safe_receiver, $this, cause);
      }
    }
  }
  function notifyCancelling($this, list, cause) {
    $this.rg(cause);
    // Inline function 'kotlinx.coroutines.JobSupport.notifyHandlers' call
    var exception = null;
    // Inline function 'kotlinx.coroutines.internal.LinkedListHead.forEach' call
    var cur = list.yk_1;
    while (!equals_0(cur, list)) {
      if (cur instanceof JobCancellingNode) {
        // Inline function 'kotlinx.coroutines.JobSupport.notifyHandlers.<anonymous>' call
        var tmp0__anonymous__q1qw7t = cur;
        try {
          tmp0__anonymous__q1qw7t.invoke(cause);
        } catch ($p) {
          if ($p instanceof Error) {
            var tmp0_safe_receiver = exception;
            var tmp;
            if (tmp0_safe_receiver == null) {
              tmp = null;
            } else {
              var tmp$ret$0;
              // Inline function 'kotlin.apply' call
              // Inline function 'kotlin.contracts.contract' call
              // Inline function 'kotlinx.coroutines.JobSupport.notifyHandlers.<anonymous>.<anonymous>' call
              // Inline function 'kotlinx.coroutines.addSuppressedThrowable' call
              tmp$ret$0 = tmp0_safe_receiver;
              tmp = tmp$ret$0;
            }
            var tmp1_elvis_lhs = tmp;
            if (tmp1_elvis_lhs == null) {
              var tmp$ret$1;
              // Inline function 'kotlin.run' call
              // Inline function 'kotlin.contracts.contract' call
              exception = new CompletionHandlerException('Exception in completion handler ' + tmp0__anonymous__q1qw7t + ' for ' + $this, $p);
              tmp$ret$1 = Unit_getInstance();
            } else
              tmp1_elvis_lhs;
          } else {
            throw $p;
          }
        }
      }
      cur = cur.yk_1;
    }
    var tmp0_safe_receiver_0 = exception;
    if (tmp0_safe_receiver_0 == null)
      null;
    else {
      var tmp$ret$2;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      $this.of(tmp0_safe_receiver_0);
      tmp$ret$2 = Unit_getInstance();
    }
    cancelParent($this, cause);
  }
  function cancelParent($this, cause) {
    if ($this.sg())
      return true;
    var isCancellation = cause instanceof CancellationException;
    var parent = $this.vf();
    if (parent === null ? true : parent === NonDisposableHandle_getInstance()) {
      return isCancellation;
    }
    return parent.mg(cause) ? true : isCancellation;
  }
  function notifyCompletion(_this__u8e3s4, $this, cause) {
    var exception = null;
    // Inline function 'kotlinx.coroutines.internal.LinkedListHead.forEach' call
    var cur = _this__u8e3s4.yk_1;
    while (!equals_0(cur, _this__u8e3s4)) {
      if (cur instanceof JobNode) {
        // Inline function 'kotlinx.coroutines.JobSupport.notifyHandlers.<anonymous>' call
        var tmp0__anonymous__q1qw7t = cur;
        try {
          tmp0__anonymous__q1qw7t.invoke(cause);
        } catch ($p) {
          if ($p instanceof Error) {
            var tmp0_safe_receiver = exception;
            var tmp;
            if (tmp0_safe_receiver == null) {
              tmp = null;
            } else {
              var tmp$ret$0;
              // Inline function 'kotlin.apply' call
              // Inline function 'kotlin.contracts.contract' call
              // Inline function 'kotlinx.coroutines.JobSupport.notifyHandlers.<anonymous>.<anonymous>' call
              // Inline function 'kotlinx.coroutines.addSuppressedThrowable' call
              tmp$ret$0 = tmp0_safe_receiver;
              tmp = tmp$ret$0;
            }
            var tmp1_elvis_lhs = tmp;
            if (tmp1_elvis_lhs == null) {
              var tmp$ret$1;
              // Inline function 'kotlin.run' call
              // Inline function 'kotlin.contracts.contract' call
              exception = new CompletionHandlerException('Exception in completion handler ' + tmp0__anonymous__q1qw7t + ' for ' + $this, $p);
              tmp$ret$1 = Unit_getInstance();
            } else
              tmp1_elvis_lhs;
          } else {
            throw $p;
          }
        }
      }
      cur = cur.yk_1;
    }
    var tmp0_safe_receiver_0 = exception;
    if (tmp0_safe_receiver_0 == null)
      null;
    else {
      var tmp$ret$2;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      $this.of(tmp0_safe_receiver_0);
      tmp$ret$2 = Unit_getInstance();
    }
    return Unit_getInstance();
  }
  function startInternal($this, state) {
    var tmp0_subject = state;
    if (tmp0_subject instanceof Empty) {
      if (state.sk_1)
        return 0;
      if (!$this.we_1.atomicfu$compareAndSet(state, get_EMPTY_ACTIVE()))
        return -1;
      $this.zf();
      return 1;
    } else {
      if (tmp0_subject instanceof InactiveNodeList) {
        if (!$this.we_1.atomicfu$compareAndSet(state, state.vl_1))
          return -1;
        $this.zf();
        return 1;
      } else {
        return 0;
      }
    }
  }
  function makeNode($this, handler, onCancelling) {
    var tmp;
    if (onCancelling) {
      var tmp0_elvis_lhs = handler instanceof JobCancellingNode ? handler : null;
      tmp = tmp0_elvis_lhs == null ? new InvokeOnCancelling(handler) : tmp0_elvis_lhs;
    } else {
      var tmp1_safe_receiver = handler instanceof JobNode ? handler : null;
      var tmp_0;
      if (tmp1_safe_receiver == null) {
        tmp_0 = null;
      } else {
        var tmp$ret$0;
        // Inline function 'kotlin.also' call
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'kotlinx.coroutines.JobSupport.makeNode.<anonymous>' call
        // Inline function 'kotlinx.coroutines.assert' call
        tmp$ret$0 = tmp1_safe_receiver;
        tmp_0 = tmp$ret$0;
      }
      var tmp2_elvis_lhs = tmp_0;
      tmp = tmp2_elvis_lhs == null ? new InvokeOnCompletion(handler) : tmp2_elvis_lhs;
    }
    var node = tmp;
    node.ll_1 = $this;
    return node;
  }
  function addLastAtomic($this, expect, list, node) {
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlinx.coroutines.internal.LinkedListNode.addLastIf' call
      var tmp$ret$0;
      // Inline function 'kotlinx.coroutines.JobSupport.addLastAtomic.<anonymous>' call
      tmp$ret$0 = $this.wf() === expect;
      if (!tmp$ret$0) {
        tmp$ret$1 = false;
        break $l$block;
      }
      list.fl(node);
      tmp$ret$1 = true;
    }
    return tmp$ret$1;
  }
  function promoteEmptyToNodeList($this, state) {
    var list = new NodeList();
    var update = state.sk_1 ? list : new InactiveNodeList(list);
    $this.we_1.atomicfu$compareAndSet(state, update);
  }
  function promoteSingleToNodeList($this, state) {
    state.ol(new NodeList());
    var tmp$ret$0;
    // Inline function 'kotlinx.coroutines.internal.LinkedListNode.nextNode' call
    tmp$ret$0 = state.yk_1;
    var list = tmp$ret$0;
    $this.we_1.atomicfu$compareAndSet(state, list);
  }
  function cancelMakeCompleting($this, cause) {
    // Inline function 'kotlinx.coroutines.JobSupport.loopOnState' call
    while (true) {
      // Inline function 'kotlinx.coroutines.JobSupport.cancelMakeCompleting.<anonymous>' call
      var tmp0__anonymous__q1qw7t = $this.wf();
      var tmp;
      if (!(!(tmp0__anonymous__q1qw7t == null) ? isInterface(tmp0__anonymous__q1qw7t, Incomplete) : false)) {
        tmp = true;
      } else {
        var tmp_0;
        if (tmp0__anonymous__q1qw7t instanceof Finishing) {
          tmp_0 = tmp0__anonymous__q1qw7t.wl();
        } else {
          tmp_0 = false;
        }
        tmp = tmp_0;
      }
      if (tmp) {
        return get_COMPLETING_ALREADY();
      }
      var tmp_1 = createCauseException($this, cause);
      var proposedUpdate = CompletedExceptionally_init_$Create$(tmp_1, false, 2, null);
      var finalState = tryMakeCompleting($this, tmp0__anonymous__q1qw7t, proposedUpdate);
      if (!(finalState === get_COMPLETING_RETRY()))
        return finalState;
    }
  }
  function createCauseException($this, cause) {
    var tmp0_subject = cause;
    var tmp;
    if (tmp0_subject == null ? true : tmp0_subject instanceof Error) {
      var tmp1_elvis_lhs = cause;
      var tmp_0;
      if (tmp1_elvis_lhs == null) {
        var tmp$ret$0;
        // Inline function 'kotlinx.coroutines.JobSupport.defaultCancellationException' call
        var tmp0_elvis_lhs = null;
        tmp$ret$0 = new JobCancellationException(tmp0_elvis_lhs == null ? $this.gf() : tmp0_elvis_lhs, null, $this);
        tmp_0 = tmp$ret$0;
      } else {
        tmp_0 = tmp1_elvis_lhs;
      }
      tmp = tmp_0;
    } else {
      tmp = ((!(cause == null) ? isInterface(cause, ParentJob) : false) ? cause : THROW_CCE()).pg();
    }
    return tmp;
  }
  function makeCancelling($this, cause) {
    var causeExceptionCache = null;
    // Inline function 'kotlinx.coroutines.JobSupport.loopOnState' call
    while (true) {
      var tmp$ret$7;
      $l$block: {
        // Inline function 'kotlinx.coroutines.JobSupport.makeCancelling.<anonymous>' call
        var tmp0__anonymous__q1qw7t = $this.wf();
        var tmp0_subject = tmp0__anonymous__q1qw7t;
        if (tmp0_subject instanceof Finishing) {
          var tmp$ret$4;
          // Inline function 'kotlinx.coroutines.internal.synchronized' call
          var tmp$ret$3;
          // Inline function 'kotlinx.coroutines.JobSupport.makeCancelling.<anonymous>.<anonymous>' call
          if (tmp0__anonymous__q1qw7t.xl())
            return get_TOO_LATE_TO_CANCEL();
          var wasCancelling = tmp0__anonymous__q1qw7t.tl();
          if (!(cause == null) ? true : !wasCancelling) {
            var tmp0_elvis_lhs = causeExceptionCache;
            var tmp;
            if (tmp0_elvis_lhs == null) {
              var tmp$ret$0;
              // Inline function 'kotlin.also' call
              var tmp0_also = createCauseException($this, cause);
              // Inline function 'kotlin.contracts.contract' call
              // Inline function 'kotlinx.coroutines.JobSupport.makeCancelling.<anonymous>.<anonymous>.<anonymous>' call
              causeExceptionCache = tmp0_also;
              tmp$ret$0 = tmp0_also;
              tmp = tmp$ret$0;
            } else {
              tmp = tmp0_elvis_lhs;
            }
            var causeException = tmp;
            tmp0__anonymous__q1qw7t.yl(causeException);
          }
          var tmp$ret$2;
          // Inline function 'kotlin.takeIf' call
          var tmp1_takeIf = tmp0__anonymous__q1qw7t.zl();
          // Inline function 'kotlin.contracts.contract' call
          var tmp_0;
          var tmp$ret$1;
          // Inline function 'kotlinx.coroutines.JobSupport.makeCancelling.<anonymous>.<anonymous>.<anonymous>' call
          tmp$ret$1 = !wasCancelling;
          if (tmp$ret$1) {
            tmp_0 = tmp1_takeIf;
          } else {
            tmp_0 = null;
          }
          tmp$ret$2 = tmp_0;
          tmp$ret$3 = tmp$ret$2;
          tmp$ret$4 = tmp$ret$3;
          var notifyRootCause = tmp$ret$4;
          var tmp1_safe_receiver = notifyRootCause;
          if (tmp1_safe_receiver == null)
            null;
          else {
            var tmp$ret$5;
            // Inline function 'kotlin.let' call
            // Inline function 'kotlin.contracts.contract' call
            notifyCancelling($this, tmp0__anonymous__q1qw7t.pl_1, tmp1_safe_receiver);
            tmp$ret$5 = Unit_getInstance();
          }
          return get_COMPLETING_ALREADY();
        } else {
          if (!(tmp0_subject == null) ? isInterface(tmp0_subject, Incomplete) : false) {
            var tmp2_elvis_lhs = causeExceptionCache;
            var tmp_1;
            if (tmp2_elvis_lhs == null) {
              var tmp$ret$6;
              // Inline function 'kotlin.also' call
              var tmp0_also_0 = createCauseException($this, cause);
              // Inline function 'kotlin.contracts.contract' call
              // Inline function 'kotlinx.coroutines.JobSupport.makeCancelling.<anonymous>.<anonymous>' call
              causeExceptionCache = tmp0_also_0;
              tmp$ret$6 = tmp0_also_0;
              tmp_1 = tmp$ret$6;
            } else {
              tmp_1 = tmp2_elvis_lhs;
            }
            var causeException_0 = tmp_1;
            if (tmp0__anonymous__q1qw7t.df()) {
              if (tryMakeCancelling($this, tmp0__anonymous__q1qw7t, causeException_0))
                return get_COMPLETING_ALREADY();
            } else {
              var finalState = tryMakeCompleting($this, tmp0__anonymous__q1qw7t, CompletedExceptionally_init_$Create$(causeException_0, false, 2, null));
              if (finalState === get_COMPLETING_ALREADY()) {
                // Inline function 'kotlin.error' call
                var tmp1_error = 'Cannot happen in ' + toString_1(tmp0__anonymous__q1qw7t);
                throw IllegalStateException_init_$Create$_0(toString_2(tmp1_error));
              } else if (finalState === get_COMPLETING_RETRY()) {
                tmp$ret$7 = Unit_getInstance();
                break $l$block;
              } else
                return finalState;
            }
          } else {
            return get_TOO_LATE_TO_CANCEL();
          }
        }
      }
    }
  }
  function getOrPromoteCancellingList($this, state) {
    var tmp1_elvis_lhs = state.tk();
    var tmp;
    if (tmp1_elvis_lhs == null) {
      var tmp0_subject = state;
      var tmp_0;
      if (tmp0_subject instanceof Empty) {
        tmp_0 = new NodeList();
      } else {
        if (tmp0_subject instanceof JobNode) {
          promoteSingleToNodeList($this, state);
          tmp_0 = null;
        } else {
          var tmp0_error = 'State should have list: ' + state;
          throw IllegalStateException_init_$Create$_0(toString_2(tmp0_error));
        }
      }
      tmp = tmp_0;
    } else {
      tmp = tmp1_elvis_lhs;
    }
    return tmp;
  }
  function tryMakeCancelling($this, state, rootCause) {
    // Inline function 'kotlinx.coroutines.assert' call
    // Inline function 'kotlinx.coroutines.assert' call
    var tmp0_elvis_lhs = getOrPromoteCancellingList($this, state);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return false;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var list = tmp;
    var cancelling = new Finishing(list, false, rootCause);
    if (!$this.we_1.atomicfu$compareAndSet(state, cancelling))
      return false;
    notifyCancelling($this, list, rootCause);
    return true;
  }
  function tryMakeCompleting($this, state, proposedUpdate) {
    if (!(!(state == null) ? isInterface(state, Incomplete) : false))
      return get_COMPLETING_ALREADY();
    var tmp;
    var tmp_0;
    var tmp_1;
    if (state instanceof Empty) {
      tmp_1 = true;
    } else {
      tmp_1 = state instanceof JobNode;
    }
    if (tmp_1) {
      tmp_0 = !(state instanceof ChildHandleNode);
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = !(proposedUpdate instanceof CompletedExceptionally);
    } else {
      tmp = false;
    }
    if (tmp) {
      if (tryFinalizeSimpleState($this, state, proposedUpdate)) {
        return proposedUpdate;
      }
      return get_COMPLETING_RETRY();
    }
    return tryMakeCompletingSlowPath($this, state, proposedUpdate);
  }
  function tryMakeCompletingSlowPath($this, state, proposedUpdate) {
    var tmp0_elvis_lhs = getOrPromoteCancellingList($this, state);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return get_COMPLETING_RETRY();
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var list = tmp;
    var tmp1_elvis_lhs = state instanceof Finishing ? state : null;
    var finishing = tmp1_elvis_lhs == null ? new Finishing(list, false, null) : tmp1_elvis_lhs;
    var notifyRootCause = null;
    var tmp$ret$3;
    // Inline function 'kotlinx.coroutines.internal.synchronized' call
    if (finishing.wl())
      return get_COMPLETING_ALREADY();
    finishing.am(true);
    if (!(finishing === state)) {
      if (!$this.we_1.atomicfu$compareAndSet(state, finishing))
        return get_COMPLETING_RETRY();
    }
    // Inline function 'kotlinx.coroutines.assert' call
    var wasCancelling = finishing.tl();
    var tmp0_safe_receiver = proposedUpdate instanceof CompletedExceptionally ? proposedUpdate : null;
    if (tmp0_safe_receiver == null)
      null;
    else {
      var tmp$ret$0;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      finishing.yl(tmp0_safe_receiver.if_1);
      tmp$ret$0 = Unit_getInstance();
    }
    var tmp$ret$2;
    // Inline function 'kotlin.takeIf' call
    var tmp0_takeIf = finishing.zl();
    // Inline function 'kotlin.contracts.contract' call
    var tmp_0;
    var tmp$ret$1;
    // Inline function 'kotlinx.coroutines.JobSupport.tryMakeCompletingSlowPath.<anonymous>.<anonymous>' call
    tmp$ret$1 = !wasCancelling;
    if (tmp$ret$1) {
      tmp_0 = tmp0_takeIf;
    } else {
      tmp_0 = null;
    }
    tmp$ret$2 = tmp_0;
    notifyRootCause = tmp$ret$2;
    tmp$ret$3 = Unit_getInstance();
    var tmp2_safe_receiver = notifyRootCause;
    if (tmp2_safe_receiver == null)
      null;
    else {
      var tmp$ret$4;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      notifyCancelling($this, list, tmp2_safe_receiver);
      tmp$ret$4 = Unit_getInstance();
    }
    var child = firstChild($this, state);
    if (!(child == null) ? tryWaitForChild($this, finishing, child, proposedUpdate) : false)
      return get_COMPLETING_WAITING_CHILDREN();
    return finalizeFinishingState($this, finishing, proposedUpdate);
  }
  function _get_exceptionOrNull__b3j7js(_this__u8e3s4, $this) {
    var tmp0_safe_receiver = _this__u8e3s4 instanceof CompletedExceptionally ? _this__u8e3s4 : null;
    return tmp0_safe_receiver == null ? null : tmp0_safe_receiver.if_1;
  }
  function firstChild($this, state) {
    var tmp1_elvis_lhs = state instanceof ChildHandleNode ? state : null;
    var tmp;
    if (tmp1_elvis_lhs == null) {
      var tmp0_safe_receiver = state.tk();
      tmp = tmp0_safe_receiver == null ? null : nextChild(tmp0_safe_receiver, $this);
    } else {
      tmp = tmp1_elvis_lhs;
    }
    return tmp;
  }
  function tryWaitForChild($this, state, child, proposedUpdate) {
    var $this_0 = $this;
    var state_0 = state;
    var child_0 = child;
    var proposedUpdate_0 = proposedUpdate;
    $l$1: do {
      $l$0: do {
        var tmp = child_0.fm_1;
        var tmp$ret$1;
        // Inline function 'kotlinx.coroutines.asHandler' call
        var tmp0__get_asHandler__gq3rkj = new ChildCompletion($this_0, state_0, child_0, proposedUpdate_0);
        var tmp$ret$0;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$0 = tmp0__get_asHandler__gq3rkj;
        tmp$ret$1 = tmp$ret$0;
        var handle = tmp.fg(false, false, tmp$ret$1, 1, null);
        if (!(handle === NonDisposableHandle_getInstance()))
          return true;
        var tmp0_elvis_lhs = nextChild(child_0, $this_0);
        var tmp_0;
        if (tmp0_elvis_lhs == null) {
          return false;
        } else {
          tmp_0 = tmp0_elvis_lhs;
        }
        var nextChild_0 = tmp_0;
        var tmp0 = $this_0;
        var tmp1 = state_0;
        var tmp2 = nextChild_0;
        var tmp3 = proposedUpdate_0;
        $this_0 = tmp0;
        state_0 = tmp1;
        child_0 = tmp2;
        proposedUpdate_0 = tmp3;
        continue $l$0;
      }
       while (false);
    }
     while (true);
  }
  function continueCompleting($this, state, lastChild, proposedUpdate) {
    // Inline function 'kotlinx.coroutines.assert' call
    var waitChild = nextChild(lastChild, $this);
    if (!(waitChild == null) ? tryWaitForChild($this, state, waitChild, proposedUpdate) : false)
      return Unit_getInstance();
    var finalState = finalizeFinishingState($this, state, proposedUpdate);
    $this.nf(finalState);
  }
  function nextChild(_this__u8e3s4, $this) {
    var cur = _this__u8e3s4;
    $l$loop: while (true) {
      var tmp$ret$0;
      // Inline function 'kotlinx.coroutines.internal.LinkedListNode.isRemoved' call
      var tmp0__get_isRemoved__hsfvgr = cur;
      tmp$ret$0 = tmp0__get_isRemoved__hsfvgr.al_1;
      if (!tmp$ret$0) {
        break $l$loop;
      }
      var tmp$ret$1;
      // Inline function 'kotlinx.coroutines.internal.LinkedListNode.prevNode' call
      var tmp1__get_prevNode__b1i0ed = cur;
      tmp$ret$1 = tmp1__get_prevNode__b1i0ed.zk_1;
      cur = tmp$ret$1;
    }
    $l$loop_0: while (true) {
      var tmp$ret$2;
      // Inline function 'kotlinx.coroutines.internal.LinkedListNode.nextNode' call
      var tmp2__get_nextNode__ek7k4a = cur;
      tmp$ret$2 = tmp2__get_nextNode__ek7k4a.yk_1;
      cur = tmp$ret$2;
      var tmp$ret$3;
      // Inline function 'kotlinx.coroutines.internal.LinkedListNode.isRemoved' call
      var tmp3__get_isRemoved__lodk3s = cur;
      tmp$ret$3 = tmp3__get_isRemoved__lodk3s.al_1;
      if (tmp$ret$3)
        continue $l$loop_0;
      if (cur instanceof ChildHandleNode)
        return cur;
      if (cur instanceof NodeList)
        return null;
    }
  }
  function stateString($this, state) {
    var tmp0_subject = state;
    var tmp;
    if (tmp0_subject instanceof Finishing) {
      tmp = state.tl() ? 'Cancelling' : state.wl() ? 'Completing' : 'Active';
    } else {
      if (!(tmp0_subject == null) ? isInterface(tmp0_subject, Incomplete) : false) {
        tmp = state.df() ? 'Active' : 'New';
      } else {
        if (tmp0_subject instanceof CompletedExceptionally) {
          tmp = 'Cancelled';
        } else {
          tmp = 'Completed';
        }
      }
    }
    return tmp;
  }
  function Finishing(list, isCompleting, rootCause) {
    this.pl_1 = list;
    this.ql_1 = atomic$boolean$1(isCompleting);
    this.rl_1 = atomic$ref$1(rootCause);
    this.sl_1 = atomic$ref$1(null);
  }
  Finishing.prototype.tk = function () {
    return this.pl_1;
  };
  Finishing.prototype.am = function (value) {
    this.ql_1.te_1 = value;
  };
  Finishing.prototype.wl = function () {
    return this.ql_1.te_1;
  };
  Finishing.prototype.gm = function (value) {
    this.rl_1.pe_1 = value;
  };
  Finishing.prototype.zl = function () {
    return this.rl_1.pe_1;
  };
  Finishing.prototype.xl = function () {
    return _get_exceptionsHolder__nhszp(this) === get_SEALED();
  };
  Finishing.prototype.tl = function () {
    return !(this.zl() == null);
  };
  Finishing.prototype.df = function () {
    return this.zl() == null;
  };
  Finishing.prototype.ul = function (proposedException) {
    var eh = _get_exceptionsHolder__nhszp(this);
    var tmp;
    if (eh == null) {
      tmp = allocateList(this);
    } else {
      if (eh instanceof Error) {
        var tmp$ret$0;
        // Inline function 'kotlin.also' call
        var tmp0_also = allocateList(this);
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'kotlinx.coroutines.Finishing.sealLocked.<anonymous>' call
        tmp0_also.b(eh);
        tmp$ret$0 = tmp0_also;
        tmp = tmp$ret$0;
      } else {
        if (eh instanceof ArrayList) {
          tmp = eh instanceof ArrayList ? eh : THROW_CCE();
        } else {
          var tmp1_error = 'State is ' + toString_1(eh);
          throw IllegalStateException_init_$Create$_0(toString_2(tmp1_error));
        }
      }
    }
    var list = tmp;
    var rootCause = this.zl();
    var tmp0_safe_receiver = rootCause;
    if (tmp0_safe_receiver == null)
      null;
    else {
      var tmp$ret$1;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      list.d7(0, tmp0_safe_receiver);
      tmp$ret$1 = Unit_getInstance();
    }
    if (!(proposedException == null) ? !equals_0(proposedException, rootCause) : false) {
      list.b(proposedException);
    }
    _set_exceptionsHolder__tqm22h(this, get_SEALED());
    return list;
  };
  Finishing.prototype.yl = function (exception) {
    var rootCause = this.zl();
    if (rootCause == null) {
      this.gm(exception);
      return Unit_getInstance();
    }
    if (exception === rootCause)
      return Unit_getInstance();
    var eh = _get_exceptionsHolder__nhszp(this);
    if (eh == null) {
      _set_exceptionsHolder__tqm22h(this, exception);
    } else {
      if (eh instanceof Error) {
        if (exception === eh)
          return Unit_getInstance();
        var tmp$ret$0;
        // Inline function 'kotlin.apply' call
        var tmp0_apply = allocateList(this);
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'kotlinx.coroutines.Finishing.addExceptionLocked.<anonymous>' call
        tmp0_apply.b(eh);
        tmp0_apply.b(exception);
        tmp$ret$0 = tmp0_apply;
        _set_exceptionsHolder__tqm22h(this, tmp$ret$0);
      } else {
        if (eh instanceof ArrayList) {
          (eh instanceof ArrayList ? eh : THROW_CCE()).b(exception);
        } else {
          var tmp1_error = 'State is ' + toString_1(eh);
          throw IllegalStateException_init_$Create$_0(toString_2(tmp1_error));
        }
      }
    }
  };
  Finishing.prototype.toString = function () {
    return 'Finishing[cancelling=' + this.tl() + ', completing=' + this.wl() + ', rootCause=' + this.zl() + ', exceptions=' + toString_1(_get_exceptionsHolder__nhszp(this)) + ', list=' + this.pl_1 + ']';
  };
  Finishing.$metadata$ = classMeta('Finishing', [Incomplete]);
  function ChildCompletion(parent, state, child, proposedUpdate) {
    JobNode.call(this);
    this.lm_1 = parent;
    this.mm_1 = state;
    this.nm_1 = child;
    this.om_1 = proposedUpdate;
  }
  ChildCompletion.prototype.nj = function (cause) {
    continueCompleting(this.lm_1, this.mm_1, this.nm_1, this.om_1);
  };
  ChildCompletion.prototype.invoke = function (cause) {
    return this.nj(cause);
  };
  ChildCompletion.$metadata$ = classMeta('ChildCompletion', undefined, undefined, undefined, undefined, JobNode.prototype);
  function JobSupport$_get_children_$slambda_k839f8(this$0, resultContinuation) {
    this.xm_1 = this$0;
    CoroutineImpl.call(this, resultContinuation);
  }
  JobSupport$_get_children_$slambda_k839f8.prototype.en = function ($this$sequence, $cont) {
    var tmp = this.fn($this$sequence, $cont);
    tmp.jd_1 = Unit_getInstance();
    tmp.kd_1 = null;
    return tmp.qd();
  };
  JobSupport$_get_children_$slambda_k839f8.prototype.rd = function (p1, $cont) {
    return this.en(p1 instanceof SequenceScope ? p1 : THROW_CCE(), $cont);
  };
  JobSupport$_get_children_$slambda_k839f8.prototype.qd = function () {
    var suspendResult = this.jd_1;
    $sm: do
      try {
        var tmp = this.hd_1;
        switch (tmp) {
          case 0:
            this.id_1 = 8;
            this.zm_1 = this.xm_1.wf();
            var tmp_0 = this.zm_1;
            if (tmp_0 instanceof ChildHandleNode) {
              this.hd_1 = 6;
              suspendResult = this.ym_1.i3(this.zm_1.fm_1, this);
              if (suspendResult === get_COROUTINE_SUSPENDED()) {
                return suspendResult;
              }
              continue $sm;
            } else {
              var tmp_1 = this.zm_1;
              if (!(tmp_1 == null) ? isInterface(tmp_1, Incomplete) : false) {
                this.an_1 = this.zm_1.tk();
                if (this.an_1 == null) {
                  this.bn_1 = null;
                  this.hd_1 = 5;
                  continue $sm;
                } else {
                  this.cn_1 = this.an_1.yk_1;
                  this.hd_1 = 1;
                  continue $sm;
                }
              } else {
                this.hd_1 = 7;
                continue $sm;
              }
            }

            break;
          case 1:
            if (!!equals_0(this.cn_1, this.an_1)) {
              this.hd_1 = 4;
              continue $sm;
            }

            var tmp_2 = this.cn_1;
            if (tmp_2 instanceof ChildHandleNode) {
              var tmp_3 = this;
              tmp_3.dn_1 = this.cn_1;
              this.hd_1 = 2;
              suspendResult = this.ym_1.i3(this.dn_1.fm_1, this);
              if (suspendResult === get_COROUTINE_SUSPENDED()) {
                return suspendResult;
              }
              continue $sm;
            } else {
              this.hd_1 = 3;
              continue $sm;
            }

            break;
          case 2:
            this.hd_1 = 3;
            continue $sm;
          case 3:
            this.cn_1 = this.cn_1.yk_1;
            this.hd_1 = 1;
            continue $sm;
          case 4:
            this.bn_1 = Unit_getInstance();
            this.hd_1 = 5;
            continue $sm;
          case 5:
            ;
            this.hd_1 = 7;
            continue $sm;
          case 6:
            this.hd_1 = 7;
            continue $sm;
          case 7:
            return Unit_getInstance();
          case 8:
            throw this.kd_1;
        }
      } catch ($p) {
        if (this.id_1 === 8) {
          throw $p;
        } else {
          this.hd_1 = this.id_1;
          this.kd_1 = $p;
        }
      }
     while (true);
  };
  JobSupport$_get_children_$slambda_k839f8.prototype.fn = function ($this$sequence, completion) {
    var i = new JobSupport$_get_children_$slambda_k839f8(this.xm_1, completion);
    i.ym_1 = $this$sequence;
    return i;
  };
  JobSupport$_get_children_$slambda_k839f8.$metadata$ = classMeta('JobSupport$<get-children>$slambda', undefined, undefined, undefined, [1], CoroutineImpl.prototype);
  function JobSupport$_get_children_$slambda_k839f8_0(this$0, resultContinuation) {
    var i = new JobSupport$_get_children_$slambda_k839f8(this$0, resultContinuation);
    var l = function ($this$sequence, $cont) {
      return i.en($this$sequence, $cont);
    };
    l.$arity = 1;
    return l;
  }
  function JobSupport(active) {
    this.we_1 = atomic$ref$1(active ? get_EMPTY_ACTIVE() : get_EMPTY_NEW());
    this.xe_1 = atomic$ref$1(null);
  }
  JobSupport.prototype.y1 = function () {
    return Key_getInstance_2();
  };
  JobSupport.prototype.uf = function (value) {
    this.xe_1.pe_1 = value;
  };
  JobSupport.prototype.vf = function () {
    return this.xe_1.pe_1;
  };
  JobSupport.prototype.ye = function (parent) {
    // Inline function 'kotlinx.coroutines.assert' call
    if (parent == null) {
      this.uf(NonDisposableHandle_getInstance());
      return Unit_getInstance();
    }
    parent.yf();
    var handle = parent.qg(this);
    this.uf(handle);
    if (this.xf()) {
      handle.pi();
      this.uf(NonDisposableHandle_getInstance());
    }
  };
  JobSupport.prototype.wf = function () {
    // Inline function 'kotlinx.atomicfu.loop' call
    var tmp0_loop = this.we_1;
    while (true) {
      // Inline function 'kotlinx.coroutines.JobSupport.<get-state>.<anonymous>' call
      var tmp1__anonymous__uwfjfc = tmp0_loop.pe_1;
      if (!(tmp1__anonymous__uwfjfc instanceof OpDescriptor))
        return tmp1__anonymous__uwfjfc;
      tmp1__anonymous__uwfjfc.gn(this);
    }
  };
  JobSupport.prototype.df = function () {
    var state = this.wf();
    var tmp;
    if (!(state == null) ? isInterface(state, Incomplete) : false) {
      tmp = state.df();
    } else {
      tmp = false;
    }
    return tmp;
  };
  JobSupport.prototype.xf = function () {
    var tmp = this.wf();
    return !(!(tmp == null) ? isInterface(tmp, Incomplete) : false);
  };
  JobSupport.prototype.yf = function () {
    // Inline function 'kotlinx.coroutines.JobSupport.loopOnState' call
    while (true) {
      // Inline function 'kotlinx.coroutines.JobSupport.start.<anonymous>' call
      var tmp0__anonymous__q1qw7t = this.wf();
      var tmp0_subject = startInternal(this, tmp0__anonymous__q1qw7t);
      if (tmp0_subject === 0)
        return false;
      else if (tmp0_subject === 1)
        return true;
    }
  };
  JobSupport.prototype.zf = function () {
  };
  JobSupport.prototype.ag = function () {
    var state = this.wf();
    var tmp;
    if (state instanceof Finishing) {
      var tmp0_safe_receiver = state.zl();
      var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : this.bg(tmp0_safe_receiver, get_classSimpleName(this) + ' is cancelling');
      var tmp_0;
      if (tmp1_elvis_lhs == null) {
        var tmp0_error = 'Job is still new or active: ' + this;
        throw IllegalStateException_init_$Create$_0(toString_2(tmp0_error));
      } else {
        tmp_0 = tmp1_elvis_lhs;
      }
      tmp = tmp_0;
    } else {
      if (!(state == null) ? isInterface(state, Incomplete) : false) {
        var tmp1_error = 'Job is still new or active: ' + this;
        throw IllegalStateException_init_$Create$_0(toString_2(tmp1_error));
      } else {
        if (state instanceof CompletedExceptionally) {
          tmp = this.cg(state.if_1, null, 1, null);
        } else {
          tmp = new JobCancellationException(get_classSimpleName(this) + ' has completed normally', null, this);
        }
      }
    }
    return tmp;
  };
  JobSupport.prototype.bg = function (_this__u8e3s4, message) {
    var tmp0_elvis_lhs = _this__u8e3s4 instanceof CancellationException ? _this__u8e3s4 : null;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      var tmp$ret$0;
      // Inline function 'kotlinx.coroutines.JobSupport.defaultCancellationException' call
      var tmp0_elvis_lhs_0 = message;
      tmp$ret$0 = new JobCancellationException(tmp0_elvis_lhs_0 == null ? this.gf() : tmp0_elvis_lhs_0, _this__u8e3s4, this);
      tmp = tmp$ret$0;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  JobSupport.prototype.cg = function (_this__u8e3s4, message, $mask0, $handler) {
    if (!(($mask0 & 1) === 0))
      message = null;
    return this.bg(_this__u8e3s4, message);
  };
  JobSupport.prototype.dg = function (handler) {
    return this.eg(false, true, handler);
  };
  JobSupport.prototype.eg = function (onCancelling, invokeImmediately, handler) {
    var node = makeNode(this, handler, onCancelling);
    // Inline function 'kotlinx.coroutines.JobSupport.loopOnState' call
    while (true) {
      var tmp$ret$1;
      $l$block: {
        // Inline function 'kotlinx.coroutines.JobSupport.invokeOnCompletion.<anonymous>' call
        var tmp0__anonymous__q1qw7t = this.wf();
        var tmp0_subject = tmp0__anonymous__q1qw7t;
        if (tmp0_subject instanceof Empty) {
          if (tmp0__anonymous__q1qw7t.sk_1) {
            if (this.we_1.atomicfu$compareAndSet(tmp0__anonymous__q1qw7t, node))
              return node;
          } else {
            promoteEmptyToNodeList(this, tmp0__anonymous__q1qw7t);
          }
        } else {
          if (!(tmp0_subject == null) ? isInterface(tmp0_subject, Incomplete) : false) {
            var list = tmp0__anonymous__q1qw7t.tk();
            if (list == null) {
              promoteSingleToNodeList(this, tmp0__anonymous__q1qw7t instanceof JobNode ? tmp0__anonymous__q1qw7t : THROW_CCE());
            } else {
              var rootCause = null;
              var handle = NonDisposableHandle_getInstance();
              var tmp;
              if (onCancelling) {
                tmp = tmp0__anonymous__q1qw7t instanceof Finishing;
              } else {
                tmp = false;
              }
              if (tmp) {
                var tmp$ret$2;
                // Inline function 'kotlinx.coroutines.internal.synchronized' call
                rootCause = tmp0__anonymous__q1qw7t.zl();
                var tmp_0;
                var tmp_1;
                if (rootCause == null) {
                  tmp_1 = true;
                } else {
                  var tmp_2;
                  var tmp$ret$0;
                  // Inline function 'kotlinx.coroutines.isHandlerOf' call
                  tmp$ret$0 = handler instanceof ChildHandleNode;
                  if (tmp$ret$0) {
                    tmp_2 = !tmp0__anonymous__q1qw7t.wl();
                  } else {
                    tmp_2 = false;
                  }
                  tmp_1 = tmp_2;
                }
                if (tmp_1) {
                  if (!addLastAtomic(this, tmp0__anonymous__q1qw7t, list, node)) {
                    tmp$ret$1 = Unit_getInstance();
                    break $l$block;
                  }
                  if (rootCause == null)
                    return node;
                  handle = node;
                  tmp_0 = Unit_getInstance();
                }
                tmp$ret$2 = tmp_0;
              }
              if (!(rootCause == null)) {
                if (invokeImmediately) {
                  invokeIt(handler, rootCause);
                }
                return handle;
              } else {
                if (addLastAtomic(this, tmp0__anonymous__q1qw7t, list, node))
                  return node;
              }
            }
          } else {
            if (invokeImmediately) {
              var tmp1_safe_receiver = tmp0__anonymous__q1qw7t instanceof CompletedExceptionally ? tmp0__anonymous__q1qw7t : null;
              invokeIt(handler, tmp1_safe_receiver == null ? null : tmp1_safe_receiver.if_1);
            }
            return NonDisposableHandle_getInstance();
          }
        }
      }
    }
  };
  JobSupport.prototype.gg = function (node) {
    // Inline function 'kotlinx.coroutines.JobSupport.loopOnState' call
    while (true) {
      // Inline function 'kotlinx.coroutines.JobSupport.removeNode.<anonymous>' call
      var tmp0__anonymous__q1qw7t = this.wf();
      var tmp0_subject = tmp0__anonymous__q1qw7t;
      if (tmp0_subject instanceof JobNode) {
        if (!(tmp0__anonymous__q1qw7t === node))
          return Unit_getInstance();
        if (this.we_1.atomicfu$compareAndSet(tmp0__anonymous__q1qw7t, get_EMPTY_ACTIVE()))
          return Unit_getInstance();
      } else {
        if (!(tmp0_subject == null) ? isInterface(tmp0_subject, Incomplete) : false) {
          if (!(tmp0__anonymous__q1qw7t.tk() == null)) {
            node.nl();
          }
          return Unit_getInstance();
        } else {
          return Unit_getInstance();
        }
      }
    }
  };
  JobSupport.prototype.hg = function () {
    return false;
  };
  JobSupport.prototype.ig = function (cause) {
    var tmp0_elvis_lhs = cause;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      var tmp$ret$0;
      // Inline function 'kotlinx.coroutines.JobSupport.defaultCancellationException' call
      var tmp0_elvis_lhs_0 = null;
      tmp$ret$0 = new JobCancellationException(tmp0_elvis_lhs_0 == null ? this.gf() : tmp0_elvis_lhs_0, null, this);
      tmp = tmp$ret$0;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    this.kg(tmp);
  };
  JobSupport.prototype.gf = function () {
    return 'Job was cancelled';
  };
  JobSupport.prototype.kg = function (cause) {
    this.ng(cause);
  };
  JobSupport.prototype.lg = function (parentJob) {
    this.ng(parentJob);
  };
  JobSupport.prototype.mg = function (cause) {
    if (cause instanceof CancellationException)
      return true;
    return this.ng(cause) ? this.tg() : false;
  };
  JobSupport.prototype.ng = function (cause) {
    var finalState = get_COMPLETING_ALREADY();
    if (this.hg()) {
      finalState = cancelMakeCompleting(this, cause);
      if (finalState === get_COMPLETING_WAITING_CHILDREN())
        return true;
    }
    if (finalState === get_COMPLETING_ALREADY()) {
      finalState = makeCancelling(this, cause);
    }
    var tmp;
    if (finalState === get_COMPLETING_ALREADY()) {
      tmp = true;
    } else if (finalState === get_COMPLETING_WAITING_CHILDREN()) {
      tmp = true;
    } else if (finalState === get_TOO_LATE_TO_CANCEL()) {
      tmp = false;
    } else {
      this.nf(finalState);
      tmp = true;
    }
    return tmp;
  };
  JobSupport.prototype.og = function (message, cause) {
    var tmp0_elvis_lhs = message;
    return new JobCancellationException(tmp0_elvis_lhs == null ? this.gf() : tmp0_elvis_lhs, cause, this);
  };
  JobSupport.prototype.pg = function () {
    var state = this.wf();
    var tmp0_subject = state;
    var tmp;
    if (tmp0_subject instanceof Finishing) {
      tmp = state.zl();
    } else {
      if (tmp0_subject instanceof CompletedExceptionally) {
        tmp = state.if_1;
      } else {
        if (!(tmp0_subject == null) ? isInterface(tmp0_subject, Incomplete) : false) {
          var tmp0_error = 'Cannot be cancelling child in this state: ' + toString_1(state);
          throw IllegalStateException_init_$Create$_0(toString_2(tmp0_error));
        } else {
          tmp = null;
        }
      }
    }
    var rootCause = tmp;
    var tmp1_elvis_lhs = rootCause instanceof CancellationException ? rootCause : null;
    return tmp1_elvis_lhs == null ? new JobCancellationException('Parent job is ' + stateString(this, state), rootCause, this) : tmp1_elvis_lhs;
  };
  JobSupport.prototype.lf = function (proposedUpdate) {
    // Inline function 'kotlinx.coroutines.JobSupport.loopOnState' call
    while (true) {
      var tmp$ret$0;
      $l$block: {
        // Inline function 'kotlinx.coroutines.JobSupport.makeCompletingOnce.<anonymous>' call
        var tmp0__anonymous__q1qw7t = this.wf();
        var finalState = tryMakeCompleting(this, tmp0__anonymous__q1qw7t, proposedUpdate);
        if (finalState === get_COMPLETING_ALREADY())
          throw IllegalStateException_init_$Create$_1('Job ' + this + ' is already complete or completing, ' + ('but is being completed with ' + toString_1(proposedUpdate)), _get_exceptionOrNull__b3j7js(proposedUpdate, this));
        else if (finalState === get_COMPLETING_RETRY()) {
          tmp$ret$0 = Unit_getInstance();
          break $l$block;
        } else
          return finalState;
      }
    }
  };
  JobSupport.prototype.oj = function () {
    return sequence(JobSupport$_get_children_$slambda_k839f8_0(this, null));
  };
  JobSupport.prototype.qg = function (child) {
    var tmp$ret$1;
    // Inline function 'kotlinx.coroutines.asHandler' call
    var tmp0__get_asHandler__gq3rkj = new ChildHandleNode(child);
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = tmp0__get_asHandler__gq3rkj;
    tmp$ret$1 = tmp$ret$0;
    var tmp = this.fg(true, false, tmp$ret$1, 2, null);
    return isInterface(tmp, ChildHandle) ? tmp : THROW_CCE();
  };
  JobSupport.prototype.of = function (exception) {
    throw exception;
  };
  JobSupport.prototype.rg = function (cause) {
  };
  JobSupport.prototype.sg = function () {
    return false;
  };
  JobSupport.prototype.tg = function () {
    return true;
  };
  JobSupport.prototype.ug = function (exception) {
    return false;
  };
  JobSupport.prototype.hf = function (state) {
  };
  JobSupport.prototype.nf = function (state) {
  };
  JobSupport.prototype.toString = function () {
    return this.vg() + '@' + get_hexAddress(this);
  };
  JobSupport.prototype.vg = function () {
    return this.pf() + '{' + stateString(this, this.wf()) + '}';
  };
  JobSupport.prototype.pf = function () {
    return get_classSimpleName(this);
  };
  JobSupport.$metadata$ = classMeta('JobSupport', [Job, ChildJob, ParentJob, SelectClause0]);
  function boxIncomplete(_this__u8e3s4) {
    init_properties_JobSupport_kt_iaxwag();
    var tmp;
    if (!(_this__u8e3s4 == null) ? isInterface(_this__u8e3s4, Incomplete) : false) {
      tmp = new IncompleteStateBox(_this__u8e3s4);
    } else {
      tmp = _this__u8e3s4;
    }
    return tmp;
  }
  function JobCancellingNode() {
    JobNode.call(this);
  }
  JobCancellingNode.$metadata$ = classMeta('JobCancellingNode', undefined, undefined, undefined, undefined, JobNode.prototype);
  function get_FALSE() {
    return FALSE;
  }
  var FALSE;
  function get_TRUE() {
    return TRUE;
  }
  var TRUE;
  function InactiveNodeList(list) {
    this.vl_1 = list;
  }
  InactiveNodeList.prototype.tk = function () {
    return this.vl_1;
  };
  InactiveNodeList.prototype.df = function () {
    return false;
  };
  InactiveNodeList.prototype.toString = function () {
    return get_DEBUG() ? this.vl_1.xk('New') : anyToString(this);
  };
  InactiveNodeList.$metadata$ = classMeta('InactiveNodeList', [Incomplete]);
  function ChildHandleNode(childJob) {
    JobCancellingNode.call(this);
    this.fm_1 = childJob;
  }
  ChildHandleNode.prototype.nj = function (cause) {
    return this.fm_1.lg(this.ml());
  };
  ChildHandleNode.prototype.invoke = function (cause) {
    return this.nj(cause);
  };
  ChildHandleNode.prototype.mg = function (cause) {
    return this.ml().mg(cause);
  };
  ChildHandleNode.$metadata$ = classMeta('ChildHandleNode', [ChildHandle], undefined, undefined, undefined, JobCancellingNode.prototype);
  function InvokeOnCancelling(handler) {
    JobCancellingNode.call(this);
    this.ln_1 = handler;
    this.mn_1 = atomic$int$1(0);
  }
  InvokeOnCancelling.prototype.nj = function (cause) {
    if (this.mn_1.atomicfu$compareAndSet(0, 1))
      this.ln_1(cause);
  };
  InvokeOnCancelling.prototype.invoke = function (cause) {
    return this.nj(cause);
  };
  InvokeOnCancelling.$metadata$ = classMeta('InvokeOnCancelling', undefined, undefined, undefined, undefined, JobCancellingNode.prototype);
  function InvokeOnCompletion(handler) {
    JobNode.call(this);
    this.rn_1 = handler;
  }
  InvokeOnCompletion.prototype.nj = function (cause) {
    return this.rn_1(cause);
  };
  InvokeOnCompletion.prototype.invoke = function (cause) {
    return this.nj(cause);
  };
  InvokeOnCompletion.$metadata$ = classMeta('InvokeOnCompletion', undefined, undefined, undefined, undefined, JobNode.prototype);
  function unboxState(_this__u8e3s4) {
    init_properties_JobSupport_kt_iaxwag();
    var tmp0_safe_receiver = _this__u8e3s4 instanceof IncompleteStateBox ? _this__u8e3s4 : null;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.sn_1;
    return tmp1_elvis_lhs == null ? _this__u8e3s4 : tmp1_elvis_lhs;
  }
  function IncompleteStateBox(state) {
    this.sn_1 = state;
  }
  IncompleteStateBox.$metadata$ = classMeta('IncompleteStateBox');
  function ChildContinuation(child) {
    JobCancellingNode.call(this);
    this.xn_1 = child;
  }
  ChildContinuation.prototype.nj = function (cause) {
    this.xn_1.bj(this.xn_1.cj(this.ml()));
  };
  ChildContinuation.prototype.invoke = function (cause) {
    return this.nj(cause);
  };
  ChildContinuation.$metadata$ = classMeta('ChildContinuation', undefined, undefined, undefined, undefined, JobCancellingNode.prototype);
  function handlesException($this) {
    var tmp = $this.vf();
    var tmp0_safe_receiver = tmp instanceof ChildHandleNode ? tmp : null;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.ml();
    var tmp_0;
    if (tmp1_elvis_lhs == null) {
      return false;
    } else {
      tmp_0 = tmp1_elvis_lhs;
    }
    var parentJob = tmp_0;
    while (true) {
      if (parentJob.tg())
        return true;
      var tmp_1 = parentJob.vf();
      var tmp2_safe_receiver = tmp_1 instanceof ChildHandleNode ? tmp_1 : null;
      var tmp3_elvis_lhs = tmp2_safe_receiver == null ? null : tmp2_safe_receiver.ml();
      var tmp_2;
      if (tmp3_elvis_lhs == null) {
        return false;
      } else {
        tmp_2 = tmp3_elvis_lhs;
      }
      parentJob = tmp_2;
    }
  }
  function JobImpl(parent) {
    JobSupport.call(this, true);
    this.ye(parent);
    this.ao_1 = handlesException(this);
  }
  JobImpl.prototype.hg = function () {
    return true;
  };
  JobImpl.prototype.tg = function () {
    return this.ao_1;
  };
  JobImpl.$metadata$ = classMeta('JobImpl', [CompletableJob], undefined, undefined, undefined, JobSupport.prototype);
  var properties_initialized_JobSupport_kt_5iq8a4;
  function init_properties_JobSupport_kt_iaxwag() {
    if (properties_initialized_JobSupport_kt_5iq8a4) {
    } else {
      properties_initialized_JobSupport_kt_5iq8a4 = true;
      COMPLETING_ALREADY = new Symbol('COMPLETING_ALREADY');
      COMPLETING_WAITING_CHILDREN = new Symbol('COMPLETING_WAITING_CHILDREN');
      COMPLETING_RETRY = new Symbol('COMPLETING_RETRY');
      TOO_LATE_TO_CANCEL = new Symbol('TOO_LATE_TO_CANCEL');
      SEALED = new Symbol('SEALED');
      EMPTY_NEW = new Empty(false);
      EMPTY_ACTIVE = new Empty(true);
    }
  }
  function MainCoroutineDispatcher() {
    CoroutineDispatcher.call(this);
  }
  MainCoroutineDispatcher.prototype.toString = function () {
    var tmp0_elvis_lhs = this.do();
    return tmp0_elvis_lhs == null ? get_classSimpleName(this) + '@' + get_hexAddress(this) : tmp0_elvis_lhs;
  };
  MainCoroutineDispatcher.prototype.do = function () {
    var main = Dispatchers_getInstance().io();
    if (this === main)
      return 'Dispatchers.Main';
    var tmp;
    try {
      tmp = main.co();
    } catch ($p) {
      var tmp_0;
      if ($p instanceof UnsupportedOperationException) {
        tmp_0 = null;
      } else {
        throw $p;
      }
      tmp = tmp_0;
    }
    var immediate = tmp;
    if (this === immediate)
      return 'Dispatchers.Main.immediate';
    return null;
  };
  MainCoroutineDispatcher.$metadata$ = classMeta('MainCoroutineDispatcher', undefined, undefined, undefined, undefined, CoroutineDispatcher.prototype);
  function SupervisorJob(parent) {
    return new SupervisorJobImpl(parent);
  }
  function SupervisorJob$default(parent, $mask0, $handler) {
    if (!(($mask0 & 1) === 0))
      parent = null;
    return SupervisorJob(parent);
  }
  function SupervisorJobImpl(parent) {
    JobImpl.call(this, parent);
  }
  SupervisorJobImpl.prototype.mg = function (cause) {
    return false;
  };
  SupervisorJobImpl.$metadata$ = classMeta('SupervisorJobImpl', undefined, undefined, undefined, undefined, JobImpl.prototype);
  function TimeoutCancellationException() {
  }
  TimeoutCancellationException.$metadata$ = classMeta('TimeoutCancellationException', [CopyableThrowable], undefined, undefined, undefined, CancellationException.prototype);
  function Unconfined() {
    Unconfined_instance = this;
    CoroutineDispatcher.call(this);
  }
  Unconfined.prototype.sj = function (context) {
    return false;
  };
  Unconfined.prototype.tj = function (context, block) {
    var yieldContext = context.b4(Key_getInstance_3());
    if (!(yieldContext == null)) {
      yieldContext.oo_1 = true;
      return Unit_getInstance();
    }
    throw UnsupportedOperationException_init_$Create$_0('Dispatchers.Unconfined.dispatch function can only be used by the yield function. If you wrap Unconfined dispatcher in your code, make sure you properly delegate isDispatchNeeded and dispatch calls.');
  };
  Unconfined.prototype.toString = function () {
    return 'Dispatchers.Unconfined';
  };
  Unconfined.$metadata$ = objectMeta('Unconfined', undefined, undefined, undefined, undefined, CoroutineDispatcher.prototype);
  var Unconfined_instance;
  function Unconfined_getInstance() {
    if (Unconfined_instance == null)
      new Unconfined();
    return Unconfined_instance;
  }
  function Key_4() {
    Key_instance_3 = this;
  }
  Key_4.$metadata$ = objectMeta('Key', [Key_0]);
  var Key_instance_3;
  function Key_getInstance_3() {
    if (Key_instance_3 == null)
      new Key_4();
    return Key_instance_3;
  }
  function Flow() {
  }
  Flow.$metadata$ = interfaceMeta('Flow');
  function FlowCollector() {
  }
  FlowCollector.$metadata$ = interfaceMeta('FlowCollector');
  function MutableSharedFlow() {
  }
  MutableSharedFlow.$metadata$ = interfaceMeta('MutableSharedFlow', [SharedFlow, FlowCollector]);
  function SharedFlow() {
  }
  SharedFlow.$metadata$ = interfaceMeta('SharedFlow', [Flow]);
  function get_NONE() {
    init_properties_StateFlow_kt_6znnsl();
    return NONE;
  }
  var NONE;
  function get_PENDING() {
    init_properties_StateFlow_kt_6znnsl();
    return PENDING;
  }
  var PENDING;
  function MutableStateFlow() {
  }
  MutableStateFlow.$metadata$ = interfaceMeta('MutableStateFlow', [StateFlow, MutableSharedFlow]);
  function MutableStateFlow_0(value) {
    init_properties_StateFlow_kt_6znnsl();
    var tmp0_elvis_lhs = value;
    return new StateFlowImpl(tmp0_elvis_lhs == null ? get_NULL() : tmp0_elvis_lhs);
  }
  function StateFlow() {
  }
  StateFlow.$metadata$ = interfaceMeta('StateFlow', [SharedFlow]);
  function updateState($this, expectedState, newState) {
    var curSequence = 0;
    var curSlots = $this.ro_1;
    var tmp$ret$0;
    // Inline function 'kotlinx.coroutines.internal.synchronized' call
    var oldState = $this.zo_1.pe_1;
    if (!(expectedState == null) ? !equals_0(oldState, expectedState) : false)
      return false;
    if (equals_0(oldState, newState))
      return true;
    $this.zo_1.pe_1 = newState;
    curSequence = $this.ap_1;
    if ((curSequence & 1) === 0) {
      var tmp0 = curSequence;
      curSequence = tmp0 + 1 | 0;
      $this.ap_1 = curSequence;
    } else {
      $this.ap_1 = curSequence + 2 | 0;
      return true;
    }
    curSlots = $this.ro_1;
    tmp$ret$0 = Unit_getInstance();
    while (true) {
      var tmp0_safe_receiver = curSlots;
      if (tmp0_safe_receiver == null)
        null;
      else {
        // Inline function 'kotlin.collections.forEach' call
        var tmp0_iterator = arrayIterator(tmp0_safe_receiver);
        while (tmp0_iterator.e()) {
          var element = tmp0_iterator.f();
          // Inline function 'kotlinx.coroutines.flow.StateFlowImpl.updateState.<anonymous>' call
          var tmp0_safe_receiver_0 = element;
          if (tmp0_safe_receiver_0 == null)
            null;
          else {
            tmp0_safe_receiver_0.cp();
          }
        }
      }
      var tmp$ret$1;
      // Inline function 'kotlinx.coroutines.internal.synchronized' call
      if ($this.ap_1 === curSequence) {
        $this.ap_1 = curSequence + 1 | 0;
        return true;
      }
      curSequence = $this.ap_1;
      curSlots = $this.ro_1;
      tmp$ret$1 = Unit_getInstance();
    }
  }
  function StateFlowImpl(initialState) {
    AbstractSharedFlow.call(this);
    this.zo_1 = atomic$ref$1(initialState);
    this.ap_1 = 0;
  }
  StateFlowImpl.prototype.po = function (value) {
    var tmp0_elvis_lhs = value;
    updateState(this, null, tmp0_elvis_lhs == null ? get_NULL() : tmp0_elvis_lhs);
  };
  StateFlowImpl.prototype.a2 = function () {
    var tmp$ret$0;
    // Inline function 'kotlinx.coroutines.internal.Symbol.unbox' call
    var tmp0_unbox = get_NULL();
    var tmp1_unbox = this.zo_1.pe_1;
    var tmp;
    if (tmp1_unbox === tmp0_unbox) {
      tmp = (null == null ? true : isObject(null)) ? null : THROW_CCE();
    } else {
      tmp = isObject(tmp1_unbox) ? tmp1_unbox : THROW_CCE();
    }
    tmp$ret$0 = tmp;
    return tmp$ret$0;
  };
  StateFlowImpl.prototype.qo = function (expect, update) {
    var tmp0_elvis_lhs = expect;
    var tmp = tmp0_elvis_lhs == null ? get_NULL() : tmp0_elvis_lhs;
    var tmp1_elvis_lhs = update;
    return updateState(this, tmp, tmp1_elvis_lhs == null ? get_NULL() : tmp1_elvis_lhs);
  };
  StateFlowImpl.$metadata$ = classMeta('StateFlowImpl', [MutableStateFlow, CancellableFlow, FusibleFlow], undefined, undefined, undefined, AbstractSharedFlow.prototype);
  var properties_initialized_StateFlow_kt_nsqikx;
  function init_properties_StateFlow_kt_6znnsl() {
    if (properties_initialized_StateFlow_kt_nsqikx) {
    } else {
      properties_initialized_StateFlow_kt_nsqikx = true;
      NONE = new Symbol('NONE');
      PENDING = new Symbol('PENDING');
    }
  }
  function AbstractSharedFlow() {
    this.ro_1 = null;
    this.so_1 = 0;
    this.to_1 = 0;
    this.uo_1 = null;
  }
  AbstractSharedFlow.$metadata$ = classMeta('AbstractSharedFlow');
  function FusibleFlow() {
  }
  FusibleFlow.$metadata$ = interfaceMeta('FusibleFlow', [Flow]);
  function get_NULL() {
    init_properties_NullSurrogate_kt_8d5lbx();
    return NULL;
  }
  var NULL;
  var UNINITIALIZED;
  var DONE;
  var properties_initialized_NullSurrogate_kt_39v8bl;
  function init_properties_NullSurrogate_kt_8d5lbx() {
    if (properties_initialized_NullSurrogate_kt_39v8bl) {
    } else {
      properties_initialized_NullSurrogate_kt_39v8bl = true;
      NULL = new Symbol('NULL');
      UNINITIALIZED = new Symbol('UNINITIALIZED');
      DONE = new Symbol('DONE');
    }
  }
  function CancellableFlow() {
  }
  CancellableFlow.$metadata$ = interfaceMeta('CancellableFlow', [Flow]);
  function ensureCapacity($this) {
    var currentSize = $this.bk_1.length;
    var newCapacity = currentSize << 1;
    var tmp$ret$0;
    // Inline function 'kotlin.arrayOfNulls' call
    tmp$ret$0 = fillArrayVal(Array(newCapacity), null);
    var newElements = tmp$ret$0;
    var tmp$ret$1;
    // Inline function 'kotlin.collections.copyInto' call
    var tmp0_copyInto = $this.bk_1;
    var tmp1_copyInto = $this.ck_1;
    var tmp2_copyInto = tmp0_copyInto.length;
    arrayCopy(tmp0_copyInto, newElements, 0, tmp1_copyInto, tmp2_copyInto);
    tmp$ret$1 = newElements;
    var tmp$ret$2;
    // Inline function 'kotlin.collections.copyInto' call
    var tmp3_copyInto = $this.bk_1;
    var tmp4_copyInto = $this.bk_1.length - $this.ck_1 | 0;
    var tmp5_copyInto = $this.ck_1;
    arrayCopy(tmp3_copyInto, newElements, tmp4_copyInto, 0, tmp5_copyInto);
    tmp$ret$2 = newElements;
    $this.bk_1 = newElements;
    $this.ck_1 = 0;
    $this.dk_1 = currentSize;
  }
  function ArrayQueue() {
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.arrayOfNulls' call
    tmp$ret$0 = fillArrayVal(Array(16), null);
    tmp.bk_1 = tmp$ret$0;
    this.ck_1 = 0;
    this.dk_1 = 0;
  }
  ArrayQueue.prototype.jk = function () {
    return this.ck_1 === this.dk_1;
  };
  ArrayQueue.prototype.gk = function (element) {
    this.bk_1[this.dk_1] = element;
    this.dk_1 = (this.dk_1 + 1 | 0) & (this.bk_1.length - 1 | 0);
    if (this.dk_1 === this.ck_1) {
      ensureCapacity(this);
    }
  };
  ArrayQueue.prototype.ek = function () {
    if (this.ck_1 === this.dk_1)
      return null;
    var element = this.bk_1[this.ck_1];
    this.bk_1[this.ck_1] = null;
    this.ck_1 = (this.ck_1 + 1 | 0) & (this.bk_1.length - 1 | 0);
    return isObject(element) ? element : THROW_CCE();
  };
  ArrayQueue.$metadata$ = classMeta('ArrayQueue');
  function OpDescriptor() {
  }
  OpDescriptor.$metadata$ = classMeta('OpDescriptor');
  function get_UNDEFINED() {
    init_properties_DispatchedContinuation_kt_s7rtw6();
    return UNDEFINED;
  }
  var UNDEFINED;
  function get_REUSABLE_CLAIMED() {
    init_properties_DispatchedContinuation_kt_s7rtw6();
    return REUSABLE_CLAIMED;
  }
  var REUSABLE_CLAIMED;
  function resumeCancellableWith(_this__u8e3s4, result, onCancellation) {
    init_properties_DispatchedContinuation_kt_s7rtw6();
    var tmp0_subject = _this__u8e3s4;
    var tmp;
    if (tmp0_subject instanceof DispatchedContinuation) {
      var tmp1_resumeCancellableWith = _this__u8e3s4;
      var state = toState_0(result, onCancellation);
      var tmp_0;
      if (tmp1_resumeCancellableWith.yh_1.sj(tmp1_resumeCancellableWith.q3())) {
        tmp1_resumeCancellableWith.ai_1 = state;
        tmp1_resumeCancellableWith.ei_1 = get_MODE_CANCELLABLE();
        tmp1_resumeCancellableWith.yh_1.tj(tmp1_resumeCancellableWith.q3(), tmp1_resumeCancellableWith);
        tmp_0 = Unit_getInstance();
      } else {
        var tmp$ret$0;
        $l$block: {
          // Inline function 'kotlinx.coroutines.internal.executeUnconfined' call
          var tmp0_executeUnconfined = get_MODE_CANCELLABLE();
          // Inline function 'kotlinx.coroutines.assert' call
          var eventLoop = ThreadLocalEventLoop_getInstance().ok();
          if (false ? eventLoop.ik() : false) {
            tmp$ret$0 = false;
            break $l$block;
          }
          var tmp_1;
          if (eventLoop.hk()) {
            tmp1_resumeCancellableWith.ai_1 = state;
            tmp1_resumeCancellableWith.ei_1 = tmp0_executeUnconfined;
            eventLoop.fk(tmp1_resumeCancellableWith);
            tmp_1 = true;
          } else {
            // Inline function 'kotlinx.coroutines.runUnconfinedEventLoop' call
            eventLoop.kk(true);
            try {
              // Inline function 'kotlinx.coroutines.internal.DispatchedContinuation.resumeCancellableWith.<anonymous>' call
              var tmp$ret$3;
              $l$block_0: {
                // Inline function 'kotlinx.coroutines.internal.DispatchedContinuation.resumeCancelled' call
                var job = tmp1_resumeCancellableWith.q3().b4(Key_getInstance_2());
                if (!(job == null) ? !job.df() : false) {
                  var cause = job.ag();
                  tmp1_resumeCancellableWith.ri(state, cause);
                  var tmp$ret$2;
                  // Inline function 'kotlin.coroutines.resumeWithException' call
                  var tmp$ret$1;
                  // Inline function 'kotlin.Companion.failure' call
                  var tmp0_failure = Companion_getInstance_4();
                  tmp$ret$1 = _Result___init__impl__xyqfz8(createFailure(cause));
                  tmp1_resumeCancellableWith.o3(tmp$ret$1);
                  tmp$ret$2 = Unit_getInstance();
                  tmp$ret$3 = true;
                  break $l$block_0;
                }
                tmp$ret$3 = false;
              }
              if (!tmp$ret$3) {
                // Inline function 'kotlinx.coroutines.internal.DispatchedContinuation.resumeUndispatchedWith' call
                var tmp$ret$4;
                // Inline function 'kotlinx.coroutines.withContinuationContext' call
                var tmp0_withContinuationContext = tmp1_resumeCancellableWith.zh_1;
                var tmp1_withContinuationContext = tmp1_resumeCancellableWith.bi_1;
                tmp1_resumeCancellableWith.zh_1.o3(result);
                tmp$ret$4 = Unit_getInstance();
              }
              $l$loop: while (true) {
                if (!eventLoop.ak())
                  break $l$loop;
              }
            } catch ($p) {
              if ($p instanceof Error) {
                tmp1_resumeCancellableWith.ij($p, null);
              } else {
                throw $p;
              }
            }
            finally {
              eventLoop.lk(true);
            }
            tmp_1 = false;
          }
          tmp$ret$0 = tmp_1;
        }
        tmp_0 = Unit_getInstance();
      }
      tmp = tmp_0;
    } else {
      _this__u8e3s4.o3(result);
      tmp = Unit_getInstance();
    }
    return tmp;
  }
  function resumeCancellableWith$default(_this__u8e3s4, result, onCancellation, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      onCancellation = null;
    return resumeCancellableWith(_this__u8e3s4, result, onCancellation);
  }
  function _get_reusableCancellableContinuation__9qex09($this) {
    var tmp = $this.ci_1.pe_1;
    return tmp instanceof CancellableContinuationImpl ? tmp : null;
  }
  function DispatchedContinuation(dispatcher, continuation) {
    DispatchedTask.call(this, get_MODE_UNINITIALIZED());
    this.yh_1 = dispatcher;
    this.zh_1 = continuation;
    this.ai_1 = get_UNDEFINED();
    this.bi_1 = threadContextElements(this.q3());
    this.ci_1 = atomic$ref$1(null);
  }
  DispatchedContinuation.prototype.dp = function () {
    return this.zh_1;
  };
  DispatchedContinuation.prototype.q3 = function () {
    return this.zh_1.q3();
  };
  DispatchedContinuation.prototype.ep = function () {
    return this.bi_1;
  };
  DispatchedContinuation.prototype.di = function () {
    return !(this.ci_1.pe_1 == null);
  };
  DispatchedContinuation.prototype.fp = function () {
    // Inline function 'kotlinx.atomicfu.loop' call
    var tmp0_loop = this.ci_1;
    while (true) {
      // Inline function 'kotlinx.coroutines.internal.DispatchedContinuation.awaitReusability.<anonymous>' call
      var tmp1__anonymous__uwfjfc = tmp0_loop.pe_1;
      if (!(tmp1__anonymous__uwfjfc === get_REUSABLE_CLAIMED()))
        return Unit_getInstance();
    }
  };
  DispatchedContinuation.prototype.uj = function () {
    this.fp();
    var tmp0_safe_receiver = _get_reusableCancellableContinuation__9qex09(this);
    if (tmp0_safe_receiver == null)
      null;
    else {
      tmp0_safe_receiver.hi();
    }
  };
  DispatchedContinuation.prototype.gi = function (continuation) {
    // Inline function 'kotlinx.atomicfu.loop' call
    var tmp0_loop = this.ci_1;
    while (true) {
      // Inline function 'kotlinx.coroutines.internal.DispatchedContinuation.tryReleaseClaimedContinuation.<anonymous>' call
      var tmp1__anonymous__uwfjfc = tmp0_loop.pe_1;
      if (tmp1__anonymous__uwfjfc === get_REUSABLE_CLAIMED()) {
        if (this.ci_1.atomicfu$compareAndSet(get_REUSABLE_CLAIMED(), continuation))
          return null;
      } else {
        if (tmp1__anonymous__uwfjfc instanceof Error) {
          // Inline function 'kotlin.require' call
          var tmp0_require = this.ci_1.atomicfu$compareAndSet(tmp1__anonymous__uwfjfc, null);
          // Inline function 'kotlin.contracts.contract' call
          // Inline function 'kotlin.require' call
          // Inline function 'kotlin.contracts.contract' call
          if (!tmp0_require) {
            var tmp$ret$0;
            // Inline function 'kotlin.require.<anonymous>' call
            tmp$ret$0 = 'Failed requirement.';
            var message = tmp$ret$0;
            throw IllegalArgumentException_init_$Create$(toString_2(message));
          }
          return tmp1__anonymous__uwfjfc;
        } else {
          var tmp1_error = 'Inconsistent state ' + toString_1(tmp1__anonymous__uwfjfc);
          throw IllegalStateException_init_$Create$_0(toString_2(tmp1_error));
        }
      }
    }
  };
  DispatchedContinuation.prototype.fi = function (cause) {
    // Inline function 'kotlinx.atomicfu.loop' call
    var tmp0_loop = this.ci_1;
    while (true) {
      // Inline function 'kotlinx.coroutines.internal.DispatchedContinuation.postponeCancellation.<anonymous>' call
      var tmp1__anonymous__uwfjfc = tmp0_loop.pe_1;
      var tmp0_subject = tmp1__anonymous__uwfjfc;
      if (equals_0(tmp0_subject, get_REUSABLE_CLAIMED())) {
        if (this.ci_1.atomicfu$compareAndSet(get_REUSABLE_CLAIMED(), cause))
          return true;
      } else {
        if (tmp0_subject instanceof Error)
          return true;
        else {
          if (this.ci_1.atomicfu$compareAndSet(tmp1__anonymous__uwfjfc, null))
            return false;
        }
      }
    }
  };
  DispatchedContinuation.prototype.qi = function () {
    var state = this.ai_1;
    // Inline function 'kotlinx.coroutines.assert' call
    this.ai_1 = get_UNDEFINED();
    return state;
  };
  DispatchedContinuation.prototype.ni = function () {
    return this;
  };
  DispatchedContinuation.prototype.o3 = function (result) {
    var context = this.zh_1.q3();
    var state = toState$default(result, null, 1, null);
    if (this.yh_1.sj(context)) {
      this.ai_1 = state;
      this.ei_1 = get_MODE_ATOMIC();
      this.yh_1.tj(context, this);
    } else {
      var tmp$ret$0;
      $l$block: {
        // Inline function 'kotlinx.coroutines.internal.executeUnconfined' call
        var tmp0_executeUnconfined = get_MODE_ATOMIC();
        // Inline function 'kotlinx.coroutines.assert' call
        var eventLoop = ThreadLocalEventLoop_getInstance().ok();
        if (false ? eventLoop.ik() : false) {
          tmp$ret$0 = false;
          break $l$block;
        }
        var tmp;
        if (eventLoop.hk()) {
          this.ai_1 = state;
          this.ei_1 = tmp0_executeUnconfined;
          eventLoop.fk(this);
          tmp = true;
        } else {
          // Inline function 'kotlinx.coroutines.runUnconfinedEventLoop' call
          eventLoop.kk(true);
          try {
            // Inline function 'kotlinx.coroutines.internal.DispatchedContinuation.resumeWith.<anonymous>' call
            var tmp$ret$1;
            // Inline function 'kotlinx.coroutines.withCoroutineContext' call
            var tmp0_withCoroutineContext = this.q3();
            var tmp1_withCoroutineContext = this.bi_1;
            this.zh_1.o3(result);
            tmp$ret$1 = Unit_getInstance();
            $l$loop: while (true) {
              if (!eventLoop.ak())
                break $l$loop;
            }
          } catch ($p) {
            if ($p instanceof Error) {
              this.ij($p, null);
            } else {
              throw $p;
            }
          }
          finally {
            eventLoop.lk(true);
          }
          tmp = false;
        }
        tmp$ret$0 = tmp;
      }
    }
  };
  DispatchedContinuation.prototype.ri = function (takenState, cause) {
    if (takenState instanceof CompletedWithCancellation) {
      takenState.qj_1(cause);
    }
  };
  DispatchedContinuation.prototype.gp = function (state) {
    var job = this.q3().b4(Key_getInstance_2());
    if (!(job == null) ? !job.df() : false) {
      var cause = job.ag();
      this.ri(state, cause);
      var tmp$ret$1;
      // Inline function 'kotlin.coroutines.resumeWithException' call
      var tmp$ret$0;
      // Inline function 'kotlin.Companion.failure' call
      var tmp0_failure = Companion_getInstance_4();
      tmp$ret$0 = _Result___init__impl__xyqfz8(createFailure(cause));
      this.o3(tmp$ret$0);
      tmp$ret$1 = Unit_getInstance();
      return true;
    }
    return false;
  };
  DispatchedContinuation.prototype.hp = function (result) {
    var tmp$ret$0;
    // Inline function 'kotlinx.coroutines.withContinuationContext' call
    var tmp0_withContinuationContext = this.zh_1;
    var tmp1_withContinuationContext = this.bi_1;
    this.zh_1.o3(result);
    tmp$ret$0 = Unit_getInstance();
  };
  DispatchedContinuation.prototype.toString = function () {
    return 'DispatchedContinuation[' + this.yh_1 + ', ' + toDebugString(this.zh_1) + ']';
  };
  DispatchedContinuation.$metadata$ = classMeta('DispatchedContinuation', [CoroutineStackFrame, Continuation], undefined, undefined, undefined, DispatchedTask.prototype);
  function executeUnconfined(_this__u8e3s4, contState, mode, doYield, block) {
    init_properties_DispatchedContinuation_kt_s7rtw6();
    // Inline function 'kotlinx.coroutines.assert' call
    var eventLoop = ThreadLocalEventLoop_getInstance().ok();
    if (doYield ? eventLoop.ik() : false)
      return false;
    var tmp;
    if (eventLoop.hk()) {
      _this__u8e3s4.ai_1 = contState;
      _this__u8e3s4.ei_1 = mode;
      eventLoop.fk(_this__u8e3s4);
      tmp = true;
    } else {
      // Inline function 'kotlinx.coroutines.runUnconfinedEventLoop' call
      eventLoop.kk(true);
      try {
        block();
        $l$loop: while (true) {
          if (!eventLoop.ak())
            break $l$loop;
        }
      } catch ($p) {
        if ($p instanceof Error) {
          _this__u8e3s4.ij($p, null);
        } else {
          throw $p;
        }
      }
      finally {
        eventLoop.lk(true);
      }
      tmp = false;
    }
    return tmp;
  }
  var properties_initialized_DispatchedContinuation_kt_2siadq;
  function init_properties_DispatchedContinuation_kt_s7rtw6() {
    if (properties_initialized_DispatchedContinuation_kt_2siadq) {
    } else {
      properties_initialized_DispatchedContinuation_kt_2siadq = true;
      UNDEFINED = new Symbol('UNDEFINED');
      REUSABLE_CLAIMED = new Symbol('REUSABLE_CLAIMED');
    }
  }
  function get_MODE_CANCELLABLE() {
    return MODE_CANCELLABLE;
  }
  var MODE_CANCELLABLE;
  function DispatchedTask(resumeMode) {
    SchedulerTask.call(this);
    this.ei_1 = resumeMode;
  }
  DispatchedTask.prototype.gj = function () {
    return this.ei_1;
  };
  DispatchedTask.prototype.ri = function (takenState, cause) {
  };
  DispatchedTask.prototype.dj = function (state) {
    return (state == null ? true : isObject(state)) ? state : THROW_CCE();
  };
  DispatchedTask.prototype.fj = function (state) {
    var tmp0_safe_receiver = state instanceof CompletedExceptionally ? state : null;
    return tmp0_safe_receiver == null ? null : tmp0_safe_receiver.if_1;
  };
  DispatchedTask.prototype.hj = function () {
    // Inline function 'kotlinx.coroutines.assert' call
    get_taskContext(this);
    var taskContext = Unit_getInstance();
    var fatalException = null;
    try {
      var tmp = this.ni();
      var delegate = tmp instanceof DispatchedContinuation ? tmp : THROW_CCE();
      var continuation = delegate.zh_1;
      var tmp$ret$5;
      // Inline function 'kotlinx.coroutines.withContinuationContext' call
      var tmp0_withContinuationContext = delegate.bi_1;
      var context = continuation.q3();
      var state = this.qi();
      var exception = this.fj(state);
      var job = (exception == null ? get_isCancellableMode(this.ei_1) : false) ? context.b4(Key_getInstance_2()) : null;
      var tmp_0;
      if (!(job == null) ? !job.df() : false) {
        var cause = job.ag();
        this.ri(state, cause);
        var tmp$ret$0;
        // Inline function 'kotlin.Companion.failure' call
        var tmp0_failure = Companion_getInstance_4();
        var tmp1_failure = recoverStackTrace(cause, continuation);
        tmp$ret$0 = _Result___init__impl__xyqfz8(createFailure(tmp1_failure));
        continuation.o3(tmp$ret$0);
        tmp_0 = Unit_getInstance();
      } else {
        var tmp_1;
        if (!(exception == null)) {
          var tmp$ret$2;
          // Inline function 'kotlin.coroutines.resumeWithException' call
          var tmp$ret$1;
          // Inline function 'kotlin.Companion.failure' call
          var tmp0_failure_0 = Companion_getInstance_4();
          tmp$ret$1 = _Result___init__impl__xyqfz8(createFailure(exception));
          continuation.o3(tmp$ret$1);
          tmp$ret$2 = Unit_getInstance();
          tmp_1 = tmp$ret$2;
        } else {
          var tmp$ret$4;
          // Inline function 'kotlin.coroutines.resume' call
          var tmp2_resume = this.dj(state);
          var tmp$ret$3;
          // Inline function 'kotlin.Companion.success' call
          var tmp0_success = Companion_getInstance_4();
          tmp$ret$3 = _Result___init__impl__xyqfz8(tmp2_resume);
          continuation.o3(tmp$ret$3);
          tmp$ret$4 = Unit_getInstance();
          tmp_1 = tmp$ret$4;
        }
        tmp_0 = tmp_1;
      }
      tmp$ret$5 = tmp_0;
    } catch ($p) {
      if ($p instanceof Error) {
        fatalException = $p;
      } else {
        throw $p;
      }
    }
    finally {
      var tmp$ret$8;
      // Inline function 'kotlin.runCatching' call
      var tmp_2;
      try {
        var tmp$ret$6;
        // Inline function 'kotlin.Companion.success' call
        var tmp0_success_0 = Companion_getInstance_4();
        var tmp1_success = Unit_getInstance();
        tmp$ret$6 = _Result___init__impl__xyqfz8(Unit_getInstance());
        tmp_2 = tmp$ret$6;
      } catch ($p) {
        var tmp_3;
        if ($p instanceof Error) {
          var tmp$ret$7;
          // Inline function 'kotlin.Companion.failure' call
          var tmp2_failure = Companion_getInstance_4();
          tmp$ret$7 = _Result___init__impl__xyqfz8(createFailure($p));
          tmp_3 = tmp$ret$7;
        } else {
          throw $p;
        }
        tmp_2 = tmp_3;
      }
      tmp$ret$8 = tmp_2;
      var result = tmp$ret$8;
      this.ij(fatalException, Result__exceptionOrNull_impl_p6xea9(result));
    }
  };
  DispatchedTask.prototype.ij = function (exception, finallyException) {
    if (exception === null ? finallyException === null : false)
      return Unit_getInstance();
    if (!(exception === null) ? !(finallyException === null) : false) {
      // Inline function 'kotlinx.coroutines.addSuppressedThrowable' call
    }
    var tmp0_elvis_lhs = exception;
    var cause = tmp0_elvis_lhs == null ? finallyException : tmp0_elvis_lhs;
    var reason = new CoroutinesInternalError('Fatal exception in coroutines machinery for ' + this + '. ' + "Please read KDoc to 'handleFatalException' method and report this incident to maintainers", ensureNotNull(cause));
    handleCoroutineException(this.ni().q3(), reason);
  };
  DispatchedTask.$metadata$ = classMeta('DispatchedTask', undefined, undefined, undefined, undefined, SchedulerTask.prototype);
  function get_MODE_UNINITIALIZED() {
    return MODE_UNINITIALIZED;
  }
  var MODE_UNINITIALIZED;
  function get_isReusableMode(_this__u8e3s4) {
    return _this__u8e3s4 === 2;
  }
  function get_isCancellableMode(_this__u8e3s4) {
    return _this__u8e3s4 === 1 ? true : _this__u8e3s4 === 2;
  }
  function dispatch(_this__u8e3s4, mode) {
    // Inline function 'kotlinx.coroutines.assert' call
    var delegate = _this__u8e3s4.ni();
    var undispatched = mode === 4;
    var tmp;
    var tmp_0;
    if (!undispatched) {
      tmp_0 = delegate instanceof DispatchedContinuation;
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = get_isCancellableMode(mode) === get_isCancellableMode(_this__u8e3s4.ei_1);
    } else {
      tmp = false;
    }
    if (tmp) {
      var dispatcher = delegate.yh_1;
      var context = delegate.q3();
      if (dispatcher.sj(context)) {
        dispatcher.tj(context, _this__u8e3s4);
      } else {
        resumeUnconfined(_this__u8e3s4);
      }
    } else {
      resume_0(_this__u8e3s4, delegate, undispatched);
    }
  }
  function get_MODE_ATOMIC() {
    return MODE_ATOMIC;
  }
  var MODE_ATOMIC;
  function runUnconfinedEventLoop(_this__u8e3s4, eventLoop, block) {
    eventLoop.kk(true);
    try {
      block();
      $l$loop: while (true) {
        if (!eventLoop.ak())
          break $l$loop;
      }
    } catch ($p) {
      if ($p instanceof Error) {
        _this__u8e3s4.ij($p, null);
      } else {
        throw $p;
      }
    }
    finally {
      eventLoop.lk(true);
    }
  }
  function resumeUnconfined(_this__u8e3s4) {
    var eventLoop = ThreadLocalEventLoop_getInstance().ok();
    if (eventLoop.hk()) {
      eventLoop.fk(_this__u8e3s4);
    } else {
      // Inline function 'kotlinx.coroutines.runUnconfinedEventLoop' call
      eventLoop.kk(true);
      try {
        // Inline function 'kotlinx.coroutines.resumeUnconfined.<anonymous>' call
        resume_0(_this__u8e3s4, _this__u8e3s4.ni(), true);
        $l$loop: while (true) {
          if (!eventLoop.ak())
            break $l$loop;
        }
      } catch ($p) {
        if ($p instanceof Error) {
          _this__u8e3s4.ij($p, null);
        } else {
          throw $p;
        }
      }
      finally {
        eventLoop.lk(true);
      }
    }
  }
  function resume_0(_this__u8e3s4, delegate, undispatched) {
    var state = _this__u8e3s4.qi();
    var exception = _this__u8e3s4.fj(state);
    var tmp;
    if (!(exception == null)) {
      var tmp$ret$0;
      // Inline function 'kotlin.Companion.failure' call
      var tmp0_failure = Companion_getInstance_4();
      tmp$ret$0 = _Result___init__impl__xyqfz8(createFailure(exception));
      tmp = tmp$ret$0;
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.Companion.success' call
      var tmp1_success = Companion_getInstance_4();
      var tmp2_success = _this__u8e3s4.dj(state);
      tmp$ret$1 = _Result___init__impl__xyqfz8(tmp2_success);
      tmp = tmp$ret$1;
    }
    var result = tmp;
    if (undispatched) {
      // Inline function 'kotlinx.coroutines.internal.DispatchedContinuation.resumeUndispatchedWith' call
      var tmp3_resumeUndispatchedWith = delegate instanceof DispatchedContinuation ? delegate : THROW_CCE();
      var tmp$ret$2;
      // Inline function 'kotlinx.coroutines.withContinuationContext' call
      var tmp0_withContinuationContext = tmp3_resumeUndispatchedWith.zh_1;
      var tmp1_withContinuationContext = tmp3_resumeUndispatchedWith.bi_1;
      tmp3_resumeUndispatchedWith.zh_1.o3(result);
      tmp$ret$2 = Unit_getInstance();
    } else {
      delegate.o3(result);
    }
  }
  function ContextScope(context) {
    this.ip_1 = context;
  }
  ContextScope.prototype.cf = function () {
    return this.ip_1;
  };
  ContextScope.prototype.toString = function () {
    return 'CoroutineScope(coroutineContext=' + this.ip_1 + ')';
  };
  ContextScope.$metadata$ = classMeta('ContextScope', [CoroutineScope]);
  function ScopeCoroutine(context, uCont) {
    AbstractCoroutine.call(this, context, true, true);
    this.nh_1 = uCont;
  }
  ScopeCoroutine.prototype.sg = function () {
    return true;
  };
  ScopeCoroutine.prototype.nf = function (state) {
    var tmp = intercepted(this.nh_1);
    var tmp_0 = recoverResult(state, this.nh_1);
    resumeCancellableWith$default(tmp, tmp_0, null, 2, null);
  };
  ScopeCoroutine.prototype.mf = function (state) {
    this.nh_1.o3(recoverResult(state, this.nh_1));
  };
  ScopeCoroutine.$metadata$ = classMeta('ScopeCoroutine', [CoroutineStackFrame], undefined, undefined, undefined, AbstractCoroutine.prototype);
  function Symbol(symbol) {
    this.jp_1 = symbol;
  }
  Symbol.prototype.toString = function () {
    return '<' + this.jp_1 + '>';
  };
  Symbol.prototype.kp = function (value) {
    var tmp;
    if (value === this) {
      tmp = (null == null ? true : isObject(null)) ? null : THROW_CCE();
    } else {
      tmp = (value == null ? true : isObject(value)) ? value : THROW_CCE();
    }
    return tmp;
  };
  Symbol.$metadata$ = classMeta('Symbol');
  function startCoroutineCancellable(_this__u8e3s4, receiver, completion, onCancellation) {
    var tmp;
    try {
      var tmp_0 = intercepted(createCoroutineUnintercepted(_this__u8e3s4, receiver, completion));
      var tmp$ret$0;
      // Inline function 'kotlin.Companion.success' call
      var tmp0_success = Companion_getInstance_4();
      tmp$ret$0 = _Result___init__impl__xyqfz8(Unit_getInstance());
      resumeCancellableWith(tmp_0, tmp$ret$0, onCancellation);
      tmp = Unit_getInstance();
    } catch ($p) {
      var tmp_1;
      if ($p instanceof Error) {
        dispatcherFailure$accessor$glj1hg(completion, $p);
        tmp_1 = Unit_getInstance();
      } else {
        throw $p;
      }
      tmp = tmp_1;
    }
    return tmp;
  }
  function startCoroutineCancellable$default(_this__u8e3s4, receiver, completion, onCancellation, $mask0, $handler) {
    if (!(($mask0 & 4) === 0))
      onCancellation = null;
    return startCoroutineCancellable(_this__u8e3s4, receiver, completion, onCancellation);
  }
  function dispatcherFailure(completion, e) {
    var tmp$ret$0;
    // Inline function 'kotlin.Companion.failure' call
    var tmp0_failure = Companion_getInstance_4();
    tmp$ret$0 = _Result___init__impl__xyqfz8(createFailure(e));
    completion.o3(tmp$ret$0);
    throw e;
  }
  function startCoroutineCancellable_0(_this__u8e3s4, fatalCompletion) {
    var tmp;
    try {
      var tmp_0 = intercepted(_this__u8e3s4);
      var tmp$ret$0;
      // Inline function 'kotlin.Companion.success' call
      var tmp0_success = Companion_getInstance_4();
      tmp$ret$0 = _Result___init__impl__xyqfz8(Unit_getInstance());
      var tmp_1 = tmp$ret$0;
      resumeCancellableWith$default(tmp_0, tmp_1, null, 2, null);
      tmp = Unit_getInstance();
    } catch ($p) {
      var tmp_2;
      if ($p instanceof Error) {
        dispatcherFailure$accessor$glj1hg(fatalCompletion, $p);
        tmp_2 = Unit_getInstance();
      } else {
        throw $p;
      }
      tmp = tmp_2;
    }
    return tmp;
  }
  function dispatcherFailure$accessor$glj1hg(completion, e) {
    return dispatcherFailure(completion, e);
  }
  function startDirect(completion, block) {
    var tmp$ret$0;
    // Inline function 'kotlinx.coroutines.internal.probeCoroutineCreated' call
    tmp$ret$0 = completion;
    var actualCompletion = tmp$ret$0;
    var tmp;
    try {
      tmp = block(actualCompletion);
    } catch ($p) {
      var tmp_0;
      if ($p instanceof Error) {
        var tmp$ret$2;
        // Inline function 'kotlin.coroutines.resumeWithException' call
        var tmp$ret$1;
        // Inline function 'kotlin.Companion.failure' call
        var tmp0_failure = Companion_getInstance_4();
        tmp$ret$1 = _Result___init__impl__xyqfz8(createFailure($p));
        actualCompletion.o3(tmp$ret$1);
        tmp$ret$2 = Unit_getInstance();
        return Unit_getInstance();
      } else {
        throw $p;
      }
      tmp = tmp_0;
    }
    var value = tmp;
    if (!(value === get_COROUTINE_SUSPENDED())) {
      var tmp$ret$4;
      // Inline function 'kotlin.coroutines.resume' call
      var tmp0_resume = (value == null ? true : isObject(value)) ? value : THROW_CCE();
      var tmp$ret$3;
      // Inline function 'kotlin.Companion.success' call
      var tmp0_success = Companion_getInstance_4();
      tmp$ret$3 = _Result___init__impl__xyqfz8(tmp0_resume);
      actualCompletion.o3(tmp$ret$3);
      tmp$ret$4 = Unit_getInstance();
    }
  }
  function startUndispatchedOrReturn(_this__u8e3s4, receiver, block) {
    var tmp$ret$3;
    $l$block_0: {
      // Inline function 'kotlinx.coroutines.intrinsics.undispatchedResult' call
      var tmp;
      try {
        var tmp$ret$2;
        // Inline function 'kotlinx.coroutines.intrinsics.startUndispatchedOrReturn.<anonymous>' call
        var tmp$ret$1;
        // Inline function 'kotlin.coroutines.intrinsics.startCoroutineUninterceptedOrReturn' call
        var tmp$ret$0;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$0 = block;
        var a = tmp$ret$0;
        tmp$ret$1 = typeof a === 'function' ? a(receiver, _this__u8e3s4) : block.rd(receiver, _this__u8e3s4);
        tmp$ret$2 = tmp$ret$1;
        tmp = tmp$ret$2;
      } catch ($p) {
        var tmp_0;
        if ($p instanceof Error) {
          tmp_0 = CompletedExceptionally_init_$Create$($p, false, 2, null);
        } else {
          throw $p;
        }
        tmp = tmp_0;
      }
      var result = tmp;
      if (result === get_COROUTINE_SUSPENDED()) {
        tmp$ret$3 = get_COROUTINE_SUSPENDED();
        break $l$block_0;
      }
      var state = _this__u8e3s4.lf(result);
      if (state === get_COMPLETING_WAITING_CHILDREN()) {
        tmp$ret$3 = get_COROUTINE_SUSPENDED();
        break $l$block_0;
      }
      var tmp_1;
      if (state instanceof CompletedExceptionally) {
        var tmp_2;
        var tmp$ret$4;
        // Inline function 'kotlinx.coroutines.intrinsics.startUndispatchedOrReturn.<anonymous>' call
        var tmp0__anonymous__q1qw7t = state.if_1;
        tmp$ret$4 = true;
        if (tmp$ret$4) {
          throw recoverStackTrace(state.if_1, _this__u8e3s4.nh_1);
        } else {
          if (result instanceof CompletedExceptionally) {
            throw recoverStackTrace(result.if_1, _this__u8e3s4.nh_1);
          } else {
            tmp_2 = result;
          }
        }
        tmp_1 = tmp_2;
      } else {
        tmp_1 = unboxState(state);
      }
      tmp$ret$3 = tmp_1;
    }
    return tmp$ret$3;
  }
  function undispatchedResult(_this__u8e3s4, shouldThrow, startBlock) {
    var tmp;
    try {
      tmp = startBlock();
    } catch ($p) {
      var tmp_0;
      if ($p instanceof Error) {
        tmp_0 = CompletedExceptionally_init_$Create$($p, false, 2, null);
      } else {
        throw $p;
      }
      tmp = tmp_0;
    }
    var result = tmp;
    if (result === get_COROUTINE_SUSPENDED())
      return get_COROUTINE_SUSPENDED();
    var state = _this__u8e3s4.lf(result);
    if (state === get_COMPLETING_WAITING_CHILDREN())
      return get_COROUTINE_SUSPENDED();
    var tmp_1;
    if (state instanceof CompletedExceptionally) {
      var tmp_2;
      if (shouldThrow(state.if_1)) {
        throw recoverStackTrace(state.if_1, _this__u8e3s4.nh_1);
      } else {
        if (result instanceof CompletedExceptionally) {
          throw recoverStackTrace(result.if_1, _this__u8e3s4.nh_1);
        } else {
          tmp_2 = result;
        }
      }
      tmp_1 = tmp_2;
    } else {
      tmp_1 = unboxState(state);
    }
    return tmp_1;
  }
  function startCoroutineUndispatched(_this__u8e3s4, receiver, completion) {
    var tmp$ret$8;
    $l$block: {
      // Inline function 'kotlinx.coroutines.intrinsics.startDirect' call
      var tmp$ret$0;
      // Inline function 'kotlinx.coroutines.internal.probeCoroutineCreated' call
      tmp$ret$0 = completion;
      var actualCompletion = tmp$ret$0;
      var tmp;
      try {
        var tmp$ret$5;
        // Inline function 'kotlinx.coroutines.intrinsics.startCoroutineUndispatched.<anonymous>' call
        var tmp$ret$4;
        // Inline function 'kotlinx.coroutines.withCoroutineContext' call
        var tmp0_withCoroutineContext = completion.q3();
        var tmp$ret$3;
        // Inline function 'kotlinx.coroutines.intrinsics.startCoroutineUndispatched.<anonymous>.<anonymous>' call
        var tmp$ret$2;
        // Inline function 'kotlin.coroutines.intrinsics.startCoroutineUninterceptedOrReturn' call
        var tmp$ret$1;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$1 = _this__u8e3s4;
        var a = tmp$ret$1;
        tmp$ret$2 = typeof a === 'function' ? a(receiver, actualCompletion) : _this__u8e3s4.rd(receiver, actualCompletion);
        tmp$ret$3 = tmp$ret$2;
        tmp$ret$4 = tmp$ret$3;
        tmp$ret$5 = tmp$ret$4;
        tmp = tmp$ret$5;
      } catch ($p) {
        var tmp_0;
        if ($p instanceof Error) {
          var tmp$ret$7;
          // Inline function 'kotlin.coroutines.resumeWithException' call
          var tmp$ret$6;
          // Inline function 'kotlin.Companion.failure' call
          var tmp0_failure = Companion_getInstance_4();
          tmp$ret$6 = _Result___init__impl__xyqfz8(createFailure($p));
          actualCompletion.o3(tmp$ret$6);
          tmp$ret$7 = Unit_getInstance();
          tmp$ret$8 = Unit_getInstance();
          break $l$block;
        } else {
          throw $p;
        }
        tmp = tmp_0;
      }
      var value = tmp;
      if (!(value === get_COROUTINE_SUSPENDED())) {
        var tmp$ret$10;
        // Inline function 'kotlin.coroutines.resume' call
        var tmp0_resume = (value == null ? true : isObject(value)) ? value : THROW_CCE();
        var tmp$ret$9;
        // Inline function 'kotlin.Companion.success' call
        var tmp0_success = Companion_getInstance_4();
        tmp$ret$9 = _Result___init__impl__xyqfz8(tmp0_resume);
        actualCompletion.o3(tmp$ret$9);
        tmp$ret$10 = Unit_getInstance();
      }
    }
  }
  function SelectClause0() {
  }
  SelectClause0.$metadata$ = interfaceMeta('SelectClause0');
  function CompletionHandlerBase() {
    LinkedListNode.call(this);
  }
  CompletionHandlerBase.$metadata$ = classMeta('CompletionHandlerBase', undefined, undefined, undefined, undefined, LinkedListNode.prototype);
  function invokeIt(_this__u8e3s4, cause) {
    var tmp0_subject = typeof _this__u8e3s4;
    if (tmp0_subject === 'function')
      _this__u8e3s4(cause);
    else {
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = _this__u8e3s4;
      tmp$ret$0.invoke(cause);
    }
  }
  function get_asHandler(_this__u8e3s4) {
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    return tmp$ret$0;
  }
  function CancelHandlerBase() {
  }
  CancelHandlerBase.$metadata$ = classMeta('CancelHandlerBase');
  function toDebugString(_this__u8e3s4) {
    return toString_2(_this__u8e3s4);
  }
  function withCoroutineContext(context, countOrElement, block) {
    return block();
  }
  function withContinuationContext(continuation, countOrElement, block) {
    return block();
  }
  function createDefaultDispatcher() {
    var tmp;
    if (isJsdom()) {
      tmp = NodeDispatcher_getInstance();
    } else {
      var tmp_0;
      var tmp_1;
      if (!(typeof window === 'undefined')) {
        var tmp$ret$0;
        // Inline function 'kotlin.js.asDynamic' call
        var tmp0_asDynamic = window;
        tmp$ret$0 = tmp0_asDynamic;
        tmp_1 = tmp$ret$0 != null;
      } else {
        tmp_1 = false;
      }
      if (tmp_1) {
        var tmp$ret$1;
        // Inline function 'kotlin.js.asDynamic' call
        var tmp1_asDynamic = window;
        tmp$ret$1 = tmp1_asDynamic;
        tmp_0 = !(typeof tmp$ret$1.addEventListener === 'undefined');
      } else {
        tmp_0 = false;
      }
      if (tmp_0) {
        tmp = asCoroutineDispatcher(window);
      } else {
        if (typeof process === 'undefined' ? true : typeof process.nextTick === 'undefined') {
          tmp = SetTimeoutDispatcher_getInstance();
        } else {
          tmp = NodeDispatcher_getInstance();
        }
      }
    }
    return tmp;
  }
  function isJsdom() {
    return ((((!(typeof navigator === 'undefined') ? navigator != null : false) ? navigator.userAgent != null : false) ? !(typeof navigator.userAgent === 'undefined') : false) ? !(typeof navigator.userAgent.match === 'undefined') : false) ? navigator.userAgent.match('\\bjsdom\\b') : false;
  }
  function newCoroutineContext(_this__u8e3s4, context) {
    var combined = _this__u8e3s4.cf().i4(context);
    return (!(combined === Dispatchers_getInstance().eo_1) ? combined.b4(Key_getInstance()) == null : false) ? combined.i4(Dispatchers_getInstance().eo_1) : combined;
  }
  function newCoroutineContext_0(_this__u8e3s4, addedContext) {
    return _this__u8e3s4.i4(addedContext);
  }
  function UndispatchedCoroutine(context, uCont) {
    ScopeCoroutine.call(this, context, uCont);
  }
  UndispatchedCoroutine.prototype.mf = function (state) {
    return this.nh_1.o3(recoverResult(state, this.nh_1));
  };
  UndispatchedCoroutine.$metadata$ = classMeta('UndispatchedCoroutine', undefined, undefined, undefined, undefined, ScopeCoroutine.prototype);
  function get_coroutineName(_this__u8e3s4) {
    return null;
  }
  function handleCoroutineExceptionImpl(context, exception) {
    console.error(exception);
  }
  var counter;
  function get_DEBUG() {
    return DEBUG;
  }
  var DEBUG;
  function get_classSimpleName(_this__u8e3s4) {
    var tmp0_elvis_lhs = getKClassFromExpression(_this__u8e3s4).aa();
    return tmp0_elvis_lhs == null ? 'Unknown' : tmp0_elvis_lhs;
  }
  function get_hexAddress(_this__u8e3s4) {
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    var result = tmp$ret$0.__debug_counter;
    if (!(typeof result === 'number')) {
      counter = counter + 1 | 0;
      result = counter;
      var tmp$ret$1;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$1 = _this__u8e3s4;
      tmp$ret$1.__debug_counter = result;
    }
    return ((!(result == null) ? typeof result === 'number' : false) ? result : THROW_CCE()).toString();
  }
  function assert(value) {
  }
  function Dispatchers() {
    Dispatchers_instance = this;
    this.eo_1 = createDefaultDispatcher();
    this.fo_1 = Unconfined_getInstance();
    this.go_1 = new JsMainDispatcher(this.eo_1, false);
    this.ho_1 = null;
  }
  Dispatchers.prototype.io = function () {
    var tmp0_elvis_lhs = this.ho_1;
    return tmp0_elvis_lhs == null ? this.go_1 : tmp0_elvis_lhs;
  };
  Dispatchers.$metadata$ = objectMeta('Dispatchers');
  var Dispatchers_instance;
  function Dispatchers_getInstance() {
    if (Dispatchers_instance == null)
      new Dispatchers();
    return Dispatchers_instance;
  }
  function JsMainDispatcher(delegate, invokeImmediately) {
    MainCoroutineDispatcher.call(this);
    this.qp_1 = delegate;
    this.rp_1 = invokeImmediately;
    this.sp_1 = this.rp_1 ? this : new JsMainDispatcher(this.qp_1, true);
  }
  JsMainDispatcher.prototype.co = function () {
    return this.sp_1;
  };
  JsMainDispatcher.prototype.sj = function (context) {
    return !this.rp_1;
  };
  JsMainDispatcher.prototype.tj = function (context, block) {
    return this.qp_1.tj(context, block);
  };
  JsMainDispatcher.prototype.toString = function () {
    var tmp0_elvis_lhs = this.do();
    return tmp0_elvis_lhs == null ? this.qp_1.toString() : tmp0_elvis_lhs;
  };
  JsMainDispatcher.$metadata$ = classMeta('JsMainDispatcher', undefined, undefined, undefined, undefined, MainCoroutineDispatcher.prototype);
  function createEventLoop() {
    return new UnconfinedEventLoop();
  }
  function UnconfinedEventLoop() {
    EventLoop.call(this);
  }
  UnconfinedEventLoop.prototype.tj = function (context, block) {
    unsupported();
  };
  UnconfinedEventLoop.$metadata$ = classMeta('UnconfinedEventLoop', undefined, undefined, undefined, undefined, EventLoop.prototype);
  function unsupported() {
    throw UnsupportedOperationException_init_$Create$_0('runBlocking event loop is not supported');
  }
  function JobCancellationException(message, cause, job) {
    CancellationException_init_$Init$_0(message, cause, this);
    this.xp_1 = job;
    captureStack(this, JobCancellationException);
  }
  JobCancellationException.prototype.toString = function () {
    return CancellationException.prototype.toString.call(this) + '; job=' + this.xp_1;
  };
  JobCancellationException.prototype.equals = function (other) {
    var tmp;
    if (other === this) {
      tmp = true;
    } else {
      var tmp_0;
      var tmp_1;
      var tmp_2;
      if (other instanceof JobCancellationException) {
        tmp_2 = other.message == this.message;
      } else {
        tmp_2 = false;
      }
      if (tmp_2) {
        tmp_1 = equals_0(other.xp_1, this.xp_1);
      } else {
        tmp_1 = false;
      }
      if (tmp_1) {
        tmp_0 = equals_0(other.cause, this.cause);
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    }
    return tmp;
  };
  JobCancellationException.prototype.hashCode = function () {
    var tmp = imul(imul(getStringHashCode(ensureNotNull(this.message)), 31) + hashCode_0(this.xp_1) | 0, 31);
    var tmp0_safe_receiver = this.cause;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode_0(tmp0_safe_receiver);
    return tmp + (tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs) | 0;
  };
  JobCancellationException.$metadata$ = classMeta('JobCancellationException', undefined, undefined, undefined, undefined, CancellationException.prototype);
  function addSuppressedThrowable(_this__u8e3s4, other) {
  }
  function NodeDispatcher() {
    NodeDispatcher_instance = this;
    SetTimeoutBasedDispatcher.call(this);
  }
  NodeDispatcher.prototype.aq = function () {
    process.nextTick(this.jq_1.gq_1);
  };
  NodeDispatcher.$metadata$ = objectMeta('NodeDispatcher', undefined, undefined, undefined, undefined, SetTimeoutBasedDispatcher.prototype);
  var NodeDispatcher_instance;
  function NodeDispatcher_getInstance() {
    if (NodeDispatcher_instance == null)
      new NodeDispatcher();
    return NodeDispatcher_instance;
  }
  function SetTimeoutDispatcher() {
    SetTimeoutDispatcher_instance = this;
    SetTimeoutBasedDispatcher.call(this);
  }
  SetTimeoutDispatcher.prototype.aq = function () {
    setTimeout(this.jq_1.gq_1, 0);
  };
  SetTimeoutDispatcher.$metadata$ = objectMeta('SetTimeoutDispatcher', undefined, undefined, undefined, undefined, SetTimeoutBasedDispatcher.prototype);
  var SetTimeoutDispatcher_instance;
  function SetTimeoutDispatcher_getInstance() {
    if (SetTimeoutDispatcher_instance == null)
      new SetTimeoutDispatcher();
    return SetTimeoutDispatcher_instance;
  }
  function SetTimeoutBasedDispatcher$ScheduledMessageQueue$processQueue$lambda(this$0) {
    return function () {
      this$0.rq();
      return Unit_getInstance();
    };
  }
  function ScheduledMessageQueue($outer) {
    this.hq_1 = $outer;
    MessageQueue.call(this);
    var tmp = this;
    tmp.gq_1 = SetTimeoutBasedDispatcher$ScheduledMessageQueue$processQueue$lambda(this);
  }
  ScheduledMessageQueue.prototype.sq = function () {
    this.hq_1.aq();
  };
  ScheduledMessageQueue.prototype.tq = function () {
    setTimeout(this.gq_1, 0);
  };
  ScheduledMessageQueue.$metadata$ = classMeta('ScheduledMessageQueue', undefined, undefined, undefined, undefined, MessageQueue.prototype);
  function SetTimeoutBasedDispatcher() {
    CoroutineDispatcher.call(this);
    this.jq_1 = new ScheduledMessageQueue(this);
  }
  SetTimeoutBasedDispatcher.prototype.tj = function (context, block) {
    this.jq_1.uq(block);
  };
  SetTimeoutBasedDispatcher.$metadata$ = classMeta('SetTimeoutBasedDispatcher', [Delay], undefined, undefined, undefined, CoroutineDispatcher.prototype);
  function MessageQueue() {
    ArrayQueue.call(this);
    this.pq_1 = 16;
    this.qq_1 = false;
  }
  MessageQueue.prototype.uq = function (element) {
    this.gk(element);
    if (!this.qq_1) {
      this.qq_1 = true;
      this.sq();
    }
  };
  MessageQueue.prototype.rq = function () {
    try {
      // Inline function 'kotlin.repeat' call
      var tmp0_repeat = this.pq_1;
      // Inline function 'kotlin.contracts.contract' call
      var inductionVariable = 0;
      if (inductionVariable < tmp0_repeat)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          // Inline function 'kotlinx.coroutines.MessageQueue.process.<anonymous>' call
          var tmp0_elvis_lhs = this.ek();
          var tmp;
          if (tmp0_elvis_lhs == null) {
            return Unit_getInstance();
          } else {
            tmp = tmp0_elvis_lhs;
          }
          var element = tmp;
          element.hj();
        }
         while (inductionVariable < tmp0_repeat);
    }finally {
      if (this.jk()) {
        this.qq_1 = false;
      } else {
        this.tq();
      }
    }
  };
  MessageQueue.$metadata$ = classMeta('MessageQueue', undefined, undefined, undefined, undefined, ArrayQueue.prototype);
  function WindowDispatcher(window_0) {
    CoroutineDispatcher.call(this);
    this.wq_1 = window_0;
    this.xq_1 = new WindowMessageQueue(this.wq_1);
  }
  WindowDispatcher.prototype.tj = function (context, block) {
    return this.xq_1.uq(block);
  };
  WindowDispatcher.$metadata$ = classMeta('WindowDispatcher', [Delay], undefined, undefined, undefined, CoroutineDispatcher.prototype);
  function WindowMessageQueue$lambda(this$0) {
    return function (event) {
      var tmp;
      if (event.source == this$0.dr_1 ? event.data == this$0.er_1 : false) {
        event.stopPropagation();
        this$0.rq();
        tmp = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  function WindowMessageQueue$schedule$lambda(this$0) {
    return function (it) {
      this$0.rq();
      return Unit_getInstance();
    };
  }
  function WindowMessageQueue(window_0) {
    MessageQueue.call(this);
    this.dr_1 = window_0;
    this.er_1 = 'dispatchCoroutine';
    this.dr_1.addEventListener('message', WindowMessageQueue$lambda(this), true);
  }
  WindowMessageQueue.prototype.sq = function () {
    var tmp = Promise.resolve(Unit_getInstance());
    tmp.then(WindowMessageQueue$schedule$lambda(this));
  };
  WindowMessageQueue.prototype.tq = function () {
    this.dr_1.postMessage(this.er_1, '*');
  };
  WindowMessageQueue.$metadata$ = classMeta('WindowMessageQueue', undefined, undefined, undefined, undefined, MessageQueue.prototype);
  function Runnable() {
  }
  Runnable.$metadata$ = interfaceMeta('Runnable');
  function SchedulerTask() {
  }
  SchedulerTask.$metadata$ = classMeta('SchedulerTask', [Runnable]);
  function get_taskContext(_this__u8e3s4) {
    return Unit_getInstance();
  }
  function asCoroutineDispatcher(_this__u8e3s4) {
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    var tmp0_elvis_lhs = tmp$ret$0.coroutineDispatcher;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      var tmp$ret$2;
      // Inline function 'kotlin.also' call
      var tmp0_also = new WindowDispatcher(_this__u8e3s4);
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlinx.coroutines.asCoroutineDispatcher.<anonymous>' call
      var tmp$ret$1;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$1 = _this__u8e3s4;
      tmp$ret$1.coroutineDispatcher = tmp0_also;
      tmp$ret$2 = tmp0_also;
      tmp = tmp$ret$2;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  }
  function identitySet(expectedSize) {
    return HashSet_init_$Create$_0(expectedSize);
  }
  function LinkedListHead() {
    LinkedListNode.call(this);
  }
  LinkedListHead.$metadata$ = classMeta('LinkedListHead', undefined, undefined, undefined, undefined, LinkedListNode.prototype);
  function LinkedListNode() {
    this.yk_1 = this;
    this.zk_1 = this;
    this.al_1 = false;
  }
  LinkedListNode.prototype.bl = function () {
    return this.yk_1;
  };
  LinkedListNode.prototype.cl = function () {
    return this.yk_1;
  };
  LinkedListNode.prototype.dl = function () {
    return this.zk_1;
  };
  LinkedListNode.prototype.el = function () {
    return this.al_1;
  };
  LinkedListNode.prototype.fl = function (node) {
    var prev = this.zk_1;
    node.yk_1 = this;
    node.zk_1 = prev;
    prev.yk_1 = node;
    this.zk_1 = node;
  };
  LinkedListNode.prototype.nl = function () {
    return this.gl();
  };
  LinkedListNode.prototype.gl = function () {
    if (this.al_1)
      return false;
    var prev = this.zk_1;
    var next = this.yk_1;
    prev.yk_1 = next;
    next.zk_1 = prev;
    this.al_1 = true;
    return true;
  };
  LinkedListNode.prototype.ol = function (node) {
    if (!(this.yk_1 === this))
      return false;
    this.fl(node);
    return true;
  };
  LinkedListNode.prototype.hl = function (node, condition) {
    if (!condition())
      return false;
    this.fl(node);
    return true;
  };
  LinkedListNode.$metadata$ = classMeta('LinkedListNode');
  function probeCoroutineCreated(completion) {
    return completion;
  }
  function unwrap(exception) {
    return exception;
  }
  function CoroutineStackFrame() {
  }
  CoroutineStackFrame.$metadata$ = interfaceMeta('CoroutineStackFrame');
  function recoverStackTrace(exception, continuation) {
    return exception;
  }
  function synchronized_0(lock, block) {
    return block();
  }
  function threadContextElements(context) {
    return 0;
  }
  function CommonThreadLocal() {
    this.pk_1 = null;
  }
  CommonThreadLocal.prototype.qk = function () {
    var tmp = this.pk_1;
    return (tmp == null ? true : isObject(tmp)) ? tmp : THROW_CCE();
  };
  CommonThreadLocal.prototype.rk = function (value) {
    this.pk_1 = value;
  };
  CommonThreadLocal.$metadata$ = classMeta('CommonThreadLocal');
  function Applier() {
  }
  Applier.$metadata$ = interfaceMeta('Applier');
  function OffsetApplier(applier, offset) {
    this.or_1 = applier;
    this.pr_1 = offset;
    this.qr_1 = 0;
  }
  OffsetApplier.prototype.fr = function () {
    return this.or_1.fr();
  };
  OffsetApplier.prototype.ir = function (node) {
    var tmp0_this = this;
    var tmp1 = tmp0_this.qr_1;
    tmp0_this.qr_1 = tmp1 + 1 | 0;
    this.or_1.ir(node);
  };
  OffsetApplier.prototype.jr = function () {
    // Inline function 'androidx.compose.runtime.runtimeCheck' call
    var tmp0_runtimeCheck = this.qr_1 > 0;
    if (!tmp0_runtimeCheck) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.OffsetApplier.up.<anonymous>' call
      tmp$ret$0 = 'OffsetApplier up called with no corresponding down';
      var message = tmp$ret$0;
      composeRuntimeError(toString_2(message));
    }
    var tmp0_this = this;
    var tmp1 = tmp0_this.qr_1;
    tmp0_this.qr_1 = tmp1 - 1 | 0;
    this.or_1.jr();
  };
  OffsetApplier.prototype.kr = function (index, instance) {
    this.or_1.kr(index + (this.qr_1 === 0 ? this.pr_1 : 0) | 0, instance);
  };
  OffsetApplier.prototype.lr = function (index, instance) {
    this.or_1.lr(index + (this.qr_1 === 0 ? this.pr_1 : 0) | 0, instance);
  };
  OffsetApplier.prototype.mr = function (index, count) {
    this.or_1.mr(index + (this.qr_1 === 0 ? this.pr_1 : 0) | 0, count);
  };
  OffsetApplier.prototype.nr = function (from, to, count) {
    var effectiveOffset = this.qr_1 === 0 ? this.pr_1 : 0;
    this.or_1.nr(from + effectiveOffset | 0, to + effectiveOffset | 0, count);
  };
  OffsetApplier.$metadata$ = classMeta('OffsetApplier', [Applier]);
  function AbstractApplier(root) {
    this.rr_1 = root;
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$0 = ArrayList_init_$Create$();
    tmp.sr_1 = tmp$ret$0;
    this.tr_1 = this.rr_1;
    this.ur_1 = 8;
  }
  AbstractApplier.prototype.vr = function (_set____db54di) {
    this.tr_1 = _set____db54di;
  };
  AbstractApplier.prototype.fr = function () {
    return this.tr_1;
  };
  AbstractApplier.prototype.wr = function (node) {
    this.sr_1.b(this.fr());
    this.vr(node);
  };
  AbstractApplier.prototype.ir = function (node) {
    return this.wr((node == null ? true : isObject(node)) ? node : THROW_CCE());
  };
  AbstractApplier.prototype.jr = function () {
    // Inline function 'kotlin.check' call
    var tmp$ret$0;
    // Inline function 'kotlin.collections.isNotEmpty' call
    var tmp0_isNotEmpty = this.sr_1;
    tmp$ret$0 = !tmp0_isNotEmpty.i();
    var tmp1_check = tmp$ret$0;
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.check' call
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp1_check) {
      var tmp$ret$1;
      // Inline function 'kotlin.check.<anonymous>' call
      tmp$ret$1 = 'Check failed.';
      var message = tmp$ret$1;
      throw IllegalStateException_init_$Create$_0(toString_2(message));
    }
    this.vr(this.sr_1.f3(this.sr_1.g() - 1 | 0));
  };
  AbstractApplier.$metadata$ = classMeta('AbstractApplier', [Applier]);
  function rol(_this__u8e3s4, other) {
    return rotateLeft(_this__u8e3s4, other);
  }
  function ror(_this__u8e3s4, other) {
    return rotateRight(_this__u8e3s4, other);
  }
  function FrameAwaiter(onFrame, continuation) {
    this.xr_1 = onFrame;
    this.yr_1 = continuation;
  }
  FrameAwaiter.prototype.zr = function () {
    return this.xr_1;
  };
  FrameAwaiter.prototype.dp = function () {
    return this.yr_1;
  };
  FrameAwaiter.prototype.as = function (timeNanos) {
    var tmp$ret$3;
    // Inline function 'kotlin.runCatching' call
    var tmp;
    try {
      var tmp$ret$1;
      // Inline function 'kotlin.Companion.success' call
      var tmp0_success = Companion_getInstance_4();
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.FrameAwaiter.resume.<anonymous>' call
      tmp$ret$0 = this.xr_1(timeNanos);
      var tmp1_success = tmp$ret$0;
      tmp$ret$1 = _Result___init__impl__xyqfz8(tmp1_success);
      tmp = tmp$ret$1;
    } catch ($p) {
      var tmp_0;
      if ($p instanceof Error) {
        var tmp$ret$2;
        // Inline function 'kotlin.Companion.failure' call
        var tmp2_failure = Companion_getInstance_4();
        tmp$ret$2 = _Result___init__impl__xyqfz8(createFailure($p));
        tmp_0 = tmp$ret$2;
      } else {
        throw $p;
      }
      tmp = tmp_0;
    }
    tmp$ret$3 = tmp;
    this.yr_1.o3(tmp$ret$3);
  };
  FrameAwaiter.$metadata$ = classMeta('FrameAwaiter');
  function fail($this, cause) {
    var tmp$ret$3;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = $this.cs_1;
    var tmp$ret$2;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    if (!($this.ds_1 == null))
      return Unit_getInstance();
    $this.ds_1 = cause;
    // Inline function 'androidx.compose.runtime.snapshots.fastForEach' call
    var tmp0_fastForEach = $this.es_1;
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    var last = tmp0_fastForEach.g() - 1 | 0;
    if (inductionVariable <= last)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var item = tmp0_fastForEach.h(index);
        // Inline function 'androidx.compose.runtime.BroadcastFrameClock.fail.<anonymous>.<anonymous>' call
        var tmp$ret$1;
        // Inline function 'kotlin.coroutines.resumeWithException' call
        var tmp0_resumeWithException = item.yr_1;
        var tmp$ret$0;
        // Inline function 'kotlin.Companion.failure' call
        var tmp0_failure = Companion_getInstance_4();
        tmp$ret$0 = _Result___init__impl__xyqfz8(createFailure(cause));
        tmp0_resumeWithException.o3(tmp$ret$0);
        tmp$ret$1 = Unit_getInstance();
      }
       while (inductionVariable <= last);
    $this.es_1.q6();
    tmp$ret$2 = Unit_getInstance();
    tmp$ret$3 = tmp$ret$2;
  }
  function BroadcastFrameClock$withFrameNanos$lambda(this$0, $awaiter) {
    return function (it) {
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.synchronized' call
      var tmp0_synchronized = this$0.cs_1;
      var tmp$ret$0;
      // Inline function 'kotlinx.atomicfu.locks.synchronized' call
      var tmp = this$0.es_1;
      var tmp_0;
      if ($awaiter._v == null) {
        throwUninitializedPropertyAccessException('awaiter');
      } else {
        tmp_0 = $awaiter._v;
      }
      tmp.n6(tmp_0);
      tmp$ret$0 = Unit_getInstance();
      tmp$ret$1 = tmp$ret$0;
      return Unit_getInstance();
    };
  }
  function BroadcastFrameClock(onNewAwaiters) {
    this.bs_1 = onNewAwaiters;
    this.cs_1 = createSynchronizedObject();
    this.ds_1 = null;
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$0 = ArrayList_init_$Create$();
    tmp.es_1 = tmp$ret$0;
    var tmp_0 = this;
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$1 = ArrayList_init_$Create$();
    tmp_0.fs_1 = tmp$ret$1;
    this.gs_1 = 8;
  }
  BroadcastFrameClock.prototype.hs = function () {
    var tmp$ret$3;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = this.cs_1;
    var tmp$ret$2;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.BroadcastFrameClock.<get-hasAwaiters>.<anonymous>' call
    var tmp$ret$0;
    // Inline function 'kotlin.collections.isNotEmpty' call
    var tmp0_isNotEmpty = this.es_1;
    tmp$ret$0 = !tmp0_isNotEmpty.i();
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    return tmp$ret$3;
  };
  BroadcastFrameClock.prototype.is = function (timeNanos) {
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = this.cs_1;
    var tmp$ret$0;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    var toResume = this.es_1;
    this.es_1 = this.fs_1;
    this.fs_1 = toResume;
    var inductionVariable = 0;
    var last = toResume.g();
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        toResume.h(i).as(timeNanos);
      }
       while (inductionVariable < last);
    toResume.q6();
    tmp$ret$0 = Unit_getInstance();
    tmp$ret$1 = tmp$ret$0;
  };
  BroadcastFrameClock.prototype.js = function (onFrame, $cont) {
    var tmp$ret$7;
    // Inline function 'kotlinx.coroutines.suspendCancellableCoroutine.<anonymous>' call
    var tmp0__anonymous__q1qw7t = $cont;
    var cancellable = new CancellableContinuationImpl(intercepted(tmp0__anonymous__q1qw7t), get_MODE_CANCELLABLE());
    cancellable.oi();
    var tmp$ret$2;
    $l$block: {
      // Inline function 'androidx.compose.runtime.BroadcastFrameClock.withFrameNanos.<anonymous>' call
      var awaiter = {_v: null};
      var tmp$ret$6;
      // Inline function 'androidx.compose.runtime.synchronized' call
      var tmp0_synchronized = this.cs_1;
      var tmp$ret$5;
      // Inline function 'kotlinx.atomicfu.locks.synchronized' call
      var tmp$ret$4;
      // Inline function 'androidx.compose.runtime.BroadcastFrameClock.withFrameNanos.<anonymous>.<anonymous>' call
      var cause = this.ds_1;
      if (!(cause == null)) {
        var tmp$ret$1;
        // Inline function 'kotlin.coroutines.resumeWithException' call
        var tmp$ret$0;
        // Inline function 'kotlin.Companion.failure' call
        var tmp0_failure = Companion_getInstance_4();
        tmp$ret$0 = _Result___init__impl__xyqfz8(createFailure(cause));
        cancellable.o3(tmp$ret$0);
        tmp$ret$1 = Unit_getInstance();
        tmp$ret$2 = Unit_getInstance();
        break $l$block;
      }
      awaiter._v = new FrameAwaiter(onFrame, cancellable);
      var tmp$ret$3;
      // Inline function 'kotlin.collections.isNotEmpty' call
      var tmp0_isNotEmpty = this.es_1;
      tmp$ret$3 = !tmp0_isNotEmpty.i();
      var hadAwaiters = tmp$ret$3;
      var tmp = this.es_1;
      var tmp_0;
      if (awaiter._v == null) {
        throwUninitializedPropertyAccessException('awaiter');
      } else {
        tmp_0 = awaiter._v;
      }
      tmp.b(tmp_0);
      tmp$ret$4 = !hadAwaiters;
      tmp$ret$5 = tmp$ret$4;
      tmp$ret$6 = tmp$ret$5;
      var hasNewAwaiters = tmp$ret$6;
      cancellable.qh(BroadcastFrameClock$withFrameNanos$lambda(this, awaiter));
      if (hasNewAwaiters ? !(this.bs_1 == null) : false) {
        try {
          this.bs_1();
        } catch ($p) {
          if ($p instanceof Error) {
            fail(this, $p);
          } else {
            throw $p;
          }
        }
      }
    }
    tmp$ret$7 = cancellable.ch();
    return tmp$ret$7;
  };
  BroadcastFrameClock.$metadata$ = classMeta('BroadcastFrameClock', [MonotonicFrameClock]);
  function remember$composable(calculation, $composer, $changed) {
    var $composer_0 = $composer;
    $composer_0.ks(547886695);
    sourceInformation($composer_0, 'C(remember$composable):Composables.kt#9igjgp');
    var tmp$ret$2;
    // Inline function 'androidx.compose.runtime.cache' call
    var tmp1_cache = $composer_0;
    var tmp$ret$1;
    // Inline function 'kotlin.let' call
    var tmp0_let = tmp1_cache.ls();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
    var tmp;
    if (false ? true : tmp0_let === Companion_getInstance_8().ns_1) {
      var value = calculation();
      tmp1_cache.ms(value);
      tmp = value;
    } else {
      tmp = tmp0_let;
    }
    tmp$ret$0 = tmp;
    tmp$ret$1 = tmp$ret$0;
    var tmp_0 = tmp$ret$1;
    tmp$ret$2 = (tmp_0 == null ? true : isObject(tmp_0)) ? tmp_0 : THROW_CCE();
    var tmp0 = tmp$ret$2;
    $composer_0.os();
    return tmp0;
  }
  function remember$composable_0(key1, calculation, $composer, $changed) {
    var $composer_0 = $composer;
    $composer_0.ks(-838505973);
    sourceInformation($composer_0, 'C(remember$composable)P(1):Composables.kt#9igjgp');
    var tmp$ret$2;
    // Inline function 'androidx.compose.runtime.cache' call
    var tmp1_cache = $composer_0;
    var tmp2_cache = $composer_0.ps(key1);
    var tmp$ret$1;
    // Inline function 'kotlin.let' call
    var tmp0_let = tmp1_cache.ls();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
    var tmp;
    if (tmp2_cache ? true : tmp0_let === Companion_getInstance_8().ns_1) {
      var value = calculation();
      tmp1_cache.ms(value);
      tmp = value;
    } else {
      tmp = tmp0_let;
    }
    tmp$ret$0 = tmp;
    tmp$ret$1 = tmp$ret$0;
    var tmp_0 = tmp$ret$1;
    tmp$ret$2 = (tmp_0 == null ? true : isObject(tmp_0)) ? tmp_0 : THROW_CCE();
    var tmp0 = tmp$ret$2;
    $composer_0.os();
    return tmp0;
  }
  function remember$composable_1(key1, key2, calculation, $composer, $changed) {
    var $composer_0 = $composer;
    $composer_0.ks(-1124426577);
    sourceInformation($composer_0, 'C(remember$composable)P(1,2):Composables.kt#9igjgp');
    var tmp$ret$2;
    // Inline function 'androidx.compose.runtime.cache' call
    var tmp1_cache = $composer_0;
    var tmp2_cache = !!($composer_0.ps(key1) | $composer_0.ps(key2));
    var tmp$ret$1;
    // Inline function 'kotlin.let' call
    var tmp0_let = tmp1_cache.ls();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
    var tmp;
    if (tmp2_cache ? true : tmp0_let === Companion_getInstance_8().ns_1) {
      var value = calculation();
      tmp1_cache.ms(value);
      tmp = value;
    } else {
      tmp = tmp0_let;
    }
    tmp$ret$0 = tmp;
    tmp$ret$1 = tmp$ret$0;
    var tmp_0 = tmp$ret$1;
    tmp$ret$2 = (tmp_0 == null ? true : isObject(tmp_0)) ? tmp_0 : THROW_CCE();
    var tmp0 = tmp$ret$2;
    $composer_0.os();
    return tmp0;
  }
  function remember$composable_2(keys, calculation, $composer, $changed) {
    var $composer_0 = $composer;
    $composer_0.ks(-1603429786);
    sourceInformation($composer_0, 'C(remember$composable)P(1):Composables.kt#9igjgp');
    var invalid = false;
    var indexedObject = keys;
    var inductionVariable = 0;
    var last = indexedObject.length;
    while (inductionVariable < last) {
      var key = indexedObject[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      invalid = !!(invalid | $composer_0.ps(key));
    }
    var tmp$ret$2;
    // Inline function 'androidx.compose.runtime.cache' call
    var tmp1_cache = $composer_0;
    var tmp2_cache = invalid;
    var tmp$ret$1;
    // Inline function 'kotlin.let' call
    var tmp0_let = tmp1_cache.ls();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
    var tmp;
    if (tmp2_cache ? true : tmp0_let === Companion_getInstance_8().ns_1) {
      var value = calculation();
      tmp1_cache.ms(value);
      tmp = value;
    } else {
      tmp = tmp0_let;
    }
    tmp$ret$0 = tmp;
    tmp$ret$1 = tmp$ret$0;
    var tmp_0 = tmp$ret$1;
    tmp$ret$2 = (tmp_0 == null ? true : isObject(tmp_0)) ? tmp_0 : THROW_CCE();
    var tmp0 = tmp$ret$2;
    $composer_0.os();
    return tmp0;
  }
  function invalidApplier() {
    throw IllegalStateException_init_$Create$_0('Invalid applier');
  }
  function get_compositionTracer() {
    init_properties_Composer_kt_de8r5y();
    return compositionTracer;
  }
  var compositionTracer;
  function get_removeCurrentGroupInstance() {
    init_properties_Composer_kt_de8r5y();
    return removeCurrentGroupInstance;
  }
  var removeCurrentGroupInstance;
  function get_skipToGroupEndInstance() {
    init_properties_Composer_kt_de8r5y();
    return skipToGroupEndInstance;
  }
  var skipToGroupEndInstance;
  function get_endGroupInstance() {
    init_properties_Composer_kt_de8r5y();
    return endGroupInstance;
  }
  var endGroupInstance;
  function get_startRootGroup() {
    init_properties_Composer_kt_de8r5y();
    return startRootGroup;
  }
  var startRootGroup;
  function get_resetSlotsInstance() {
    init_properties_Composer_kt_de8r5y();
    return resetSlotsInstance;
  }
  var resetSlotsInstance;
  function get_invocation() {
    init_properties_Composer_kt_de8r5y();
    return invocation;
  }
  var invocation;
  function get_provider() {
    init_properties_Composer_kt_de8r5y();
    return provider;
  }
  var provider;
  function get_compositionLocalMap() {
    init_properties_Composer_kt_de8r5y();
    return compositionLocalMap;
  }
  var compositionLocalMap;
  function get_providerValues() {
    init_properties_Composer_kt_de8r5y();
    return providerValues;
  }
  var providerValues;
  function get_providerMaps() {
    init_properties_Composer_kt_de8r5y();
    return providerMaps;
  }
  var providerMaps;
  var reference;
  function RememberManager() {
  }
  RememberManager.$metadata$ = interfaceMeta('RememberManager');
  function removeCurrentGroup(_this__u8e3s4, rememberManager) {
    init_properties_Composer_kt_de8r5y();
    var tmp$ret$0;
    // Inline function 'kotlin.collections.iterator' call
    var tmp0_iterator = _this__u8e3s4.nt();
    tmp$ret$0 = tmp0_iterator;
    var tmp0_iterator_0 = tmp$ret$0;
    while (tmp0_iterator_0.e()) {
      var slot = tmp0_iterator_0.f();
      var tmp1_subject = slot;
      if (!(tmp1_subject == null) ? isInterface(tmp1_subject, RememberObserver) : false) {
        rememberManager.rs(slot);
      } else {
        if (tmp1_subject instanceof RecomposeScopeImpl) {
          var composition = slot.pt_1;
          if (!(composition == null)) {
            composition.iu_1 = true;
            slot.uj();
          }
        }
      }
    }
    _this__u8e3s4.qu();
  }
  function startRoot($this) {
    $this.xv_1 = $this.tu_1.zw();
    startGroup($this, 100);
    $this.su_1.bx();
    $this.lv_1 = $this.su_1.cx();
    $this.ov_1.fx(asInt($this.nv_1));
    $this.nv_1 = $this.ps($this.lv_1);
    $this.bw_1 = null;
    if (!$this.gv_1) {
      $this.gv_1 = $this.su_1.gx();
    }
    var tmp0_safe_receiver = resolveCompositionLocal($this, get_LocalInspectionTables(), $this.lv_1);
    if (tmp0_safe_receiver == null)
      null;
    else {
      var tmp$ret$0;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      tmp0_safe_receiver.b($this.tu_1);
      $this.su_1.hx(tmp0_safe_receiver);
      tmp$ret$0 = Unit_getInstance();
    }
    startGroup($this, $this.su_1.ix());
  }
  function endRoot($this) {
    endGroup($this);
    $this.su_1.jx();
    endGroup($this);
    recordEndRoot($this);
    finalizeCompose($this);
    $this.xv_1.vx();
    $this.hv_1 = false;
  }
  function abortRoot($this) {
    cleanUpCompose($this);
    $this.yu_1.q6();
    $this.bv_1.q6();
    $this.dv_1.q6();
    $this.kv_1.q6();
    $this.ov_1.q6();
    $this.mv_1.q6();
    $this.xv_1.vx();
    $this.fw_1 = 0;
    $this.rv_1 = 0;
    $this.iv_1 = false;
    $this.vv_1 = false;
    $this.hv_1 = false;
  }
  function startGroup($this, key) {
    return start($this, key, null, false, null);
  }
  function startGroup_0($this, key, dataKey) {
    return start($this, key, dataKey, false, null);
  }
  function endGroup($this) {
    return end($this, false);
  }
  function skipGroup($this) {
    var tmp0_this = $this;
    tmp0_this.cv_1 = tmp0_this.cv_1 + $this.xv_1.xx() | 0;
  }
  function currentCompositionLocalScope($this, group) {
    if (group == null) {
      var tmp0_safe_receiver = $this.bw_1;
      if (tmp0_safe_receiver == null)
        null;
      else {
        var tmp$ret$0;
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        return tmp0_safe_receiver;
      }
    }
    if ($this.ew_1 ? $this.aw_1 : false) {
      var current = $this.zv_1.kt_1;
      while (current > 0) {
        if ($this.zv_1.ay(current) === 202 ? equals_0($this.zv_1.zx(current), get_compositionLocalMap()) : false) {
          var tmp = $this.zv_1.yx(current);
          var providers = (!(tmp == null) ? isInterface(tmp, PersistentMap) : false) ? tmp : THROW_CCE();
          $this.bw_1 = providers;
          return providers;
        }
        current = $this.zv_1.by(current);
      }
    }
    if ($this.xv_1.g() > 0) {
      var tmp1_elvis_lhs = group;
      var current_0 = tmp1_elvis_lhs == null ? $this.xv_1.rx_1 : tmp1_elvis_lhs;
      while (current_0 > 0) {
        if ($this.xv_1.ay(current_0) === 202 ? equals_0($this.xv_1.zx(current_0), get_compositionLocalMap()) : false) {
          var tmp2_elvis_lhs = $this.mv_1.l2(current_0);
          var tmp_0;
          if (tmp2_elvis_lhs == null) {
            var tmp_1 = $this.xv_1.yx(current_0);
            tmp_0 = (!(tmp_1 == null) ? isInterface(tmp_1, PersistentMap) : false) ? tmp_1 : THROW_CCE();
          } else {
            tmp_0 = tmp2_elvis_lhs;
          }
          var providers_0 = tmp_0;
          $this.bw_1 = providers_0;
          return providers_0;
        }
        current_0 = $this.xv_1.by(current_0);
      }
    }
    $this.bw_1 = $this.lv_1;
    return $this.lv_1;
  }
  function currentCompositionLocalScope$default($this, group, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      group = null;
    return currentCompositionLocalScope($this, group);
  }
  function updateProviderMapGroup($this, parentScope, currentProviders) {
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.mutate' call
    var tmp$ret$0;
    // Inline function 'kotlin.apply' call
    var tmp0_apply = parentScope.cy();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'androidx.compose.runtime.ComposerImpl.updateProviderMapGroup.<anonymous>' call
    tmp0_apply.w7(currentProviders);
    tmp$ret$0 = tmp0_apply;
    tmp$ret$1 = tmp$ret$0.dy();
    var providerScope = tmp$ret$1;
    startGroup_0($this, 204, get_providerMaps());
    $this.ps(providerScope);
    $this.ps(currentProviders);
    endGroup($this);
    return providerScope;
  }
  function resolveCompositionLocal($this, key, scope) {
    var tmp;
    if (contains_4(scope, key)) {
      tmp = getValueOf(scope, key);
    } else {
      tmp = key.ey_1.a2();
    }
    return tmp;
  }
  function ensureWriter($this) {
    if ($this.zv_1.lt_1) {
      $this.zv_1 = $this.yv_1.gy();
      $this.zv_1.hy();
      $this.aw_1 = false;
      $this.bw_1 = null;
    }
  }
  function createFreshInsertTable($this) {
    runtimeCheck($this.zv_1.lt_1);
    $this.yv_1 = new SlotTable();
    var tmp = $this;
    var tmp$ret$0;
    // Inline function 'kotlin.also' call
    var tmp0_also = $this.yv_1.gy();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'androidx.compose.runtime.ComposerImpl.createFreshInsertTable.<anonymous>' call
    tmp0_also.vx();
    tmp$ret$0 = tmp0_also;
    tmp.zv_1 = tmp$ret$0;
  }
  function startReaderGroup($this, isNode, data) {
    if (isNode) {
      $this.xv_1.ky();
    } else {
      if (!(data == null) ? !($this.xv_1.iy() === data) : false) {
        recordSlotTableOperation$default($this, false, ComposerImpl$startReaderGroup$lambda(data), 2, null);
      }
      $this.xv_1.jy();
    }
  }
  function start($this, key, objectKey, isNode, data) {
    validateNodeNotExpected($this);
    updateCompoundKeyWhenWeEnterGroup($this, key, objectKey, data);
    if ($this.ew_1) {
      $this.xv_1.ly();
      var startIndex = $this.zv_1.jt_1;
      if (isNode) {
        $this.zv_1.oy(Companion_getInstance_8().ns_1);
      } else if (!(data == null)) {
        var tmp = $this.zv_1;
        var tmp0_elvis_lhs = objectKey;
        tmp.ny(key, tmp0_elvis_lhs == null ? Companion_getInstance_8().ns_1 : tmp0_elvis_lhs, data);
      } else {
        var tmp_0 = $this.zv_1;
        var tmp1_elvis_lhs = objectKey;
        tmp_0.my(key, tmp1_elvis_lhs == null ? Companion_getInstance_8().ns_1 : tmp1_elvis_lhs);
      }
      var tmp2_safe_receiver = $this.zu_1;
      if (tmp2_safe_receiver == null)
        null;
      else {
        var tmp$ret$1;
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        var tmp$ret$0;
        // Inline function 'androidx.compose.runtime.ComposerImpl.start.<anonymous>' call
        var insertKeyInfo = new KeyInfo(key, -1, insertedGroupVirtualIndex($this, startIndex), -1, 0);
        tmp2_safe_receiver.vy(insertKeyInfo, $this.av_1 - tmp2_safe_receiver.qy_1 | 0);
        tmp$ret$0 = tmp2_safe_receiver.wy(insertKeyInfo);
        tmp$ret$1 = tmp$ret$0;
      }
      enterGroup($this, isNode, null);
      return Unit_getInstance();
    }
    if ($this.zu_1 == null) {
      var slotKey = $this.xv_1.xy();
      if (slotKey === key ? equals_0(objectKey, $this.xv_1.zy()) : false) {
        startReaderGroup($this, isNode, data);
      } else {
        $this.zu_1 = new Pending($this.xv_1.yy(), $this.av_1);
      }
    }
    var pending = $this.zu_1;
    var newPending = null;
    if (!(pending == null)) {
      var keyInfo = pending.az(key, objectKey);
      if (!(keyInfo == null)) {
        pending.wy(keyInfo);
        var location = keyInfo.fz_1;
        $this.av_1 = pending.iz(keyInfo) + pending.qy_1 | 0;
        var relativePosition = pending.jz(keyInfo);
        var currentRelativePosition = relativePosition - pending.ry_1 | 0;
        pending.kz(relativePosition, pending.ry_1);
        recordReaderMoving($this, location);
        $this.xv_1.lz(location);
        if (currentRelativePosition > 0) {
          recordSlotEditingOperation($this, ComposerImpl$start$lambda(currentRelativePosition));
        }
        startReaderGroup($this, isNode, data);
      } else {
        $this.xv_1.ly();
        $this.ew_1 = true;
        $this.bw_1 = null;
        ensureWriter($this);
        $this.zv_1.bz();
        var startIndex_0 = $this.zv_1.jt_1;
        if (isNode) {
          $this.zv_1.oy(Companion_getInstance_8().ns_1);
        } else if (!(data == null)) {
          var tmp_1 = $this.zv_1;
          var tmp3_elvis_lhs = objectKey;
          tmp_1.ny(key, tmp3_elvis_lhs == null ? Companion_getInstance_8().ns_1 : tmp3_elvis_lhs, data);
        } else {
          var tmp_2 = $this.zv_1;
          var tmp4_elvis_lhs = objectKey;
          tmp_2.my(key, tmp4_elvis_lhs == null ? Companion_getInstance_8().ns_1 : tmp4_elvis_lhs);
        }
        $this.cw_1 = $this.zv_1.cz(startIndex_0);
        var insertKeyInfo_0 = new KeyInfo(key, -1, insertedGroupVirtualIndex($this, startIndex_0), -1, 0);
        pending.vy(insertKeyInfo_0, $this.av_1 - pending.qy_1 | 0);
        pending.wy(insertKeyInfo_0);
        var tmp$ret$2;
        // Inline function 'kotlin.collections.mutableListOf' call
        tmp$ret$2 = ArrayList_init_$Create$();
        newPending = new Pending(tmp$ret$2, isNode ? 0 : $this.av_1);
      }
    }
    enterGroup($this, isNode, newPending);
  }
  function enterGroup($this, isNode, newPending) {
    $this.yu_1.mz($this.zu_1);
    $this.zu_1 = newPending;
    $this.bv_1.fx($this.av_1);
    if (isNode)
      $this.av_1 = 0;
    $this.dv_1.fx($this.cv_1);
    $this.cv_1 = 0;
  }
  function exitGroup($this, expectedNodeCount, inserting) {
    var previousPending = $this.yu_1.nz();
    if (!(previousPending == null) ? !inserting : false) {
      var tmp0_this = previousPending;
      var tmp1 = tmp0_this.ry_1;
      tmp0_this.ry_1 = tmp1 + 1 | 0;
    }
    $this.zu_1 = previousPending;
    $this.av_1 = $this.bv_1.nz() + expectedNodeCount | 0;
    $this.cv_1 = $this.dv_1.nz() + expectedNodeCount | 0;
  }
  function end($this, isNode) {
    if ($this.ew_1) {
      var parent = $this.zv_1.kt_1;
      updateCompoundKeyWhenWeExitGroup($this, $this.zv_1.ay(parent), $this.zv_1.zx(parent), $this.zv_1.yx(parent));
    } else {
      var parent_0 = $this.xv_1.rx_1;
      updateCompoundKeyWhenWeExitGroup($this, $this.xv_1.ay(parent_0), $this.xv_1.zx(parent_0), $this.xv_1.yx(parent_0));
    }
    var expectedNodeCount = $this.cv_1;
    var pending = $this.zu_1;
    if (!(pending == null) ? pending.py_1.g() > 0 : false) {
      var previous = pending.py_1;
      var current = pending.oz();
      var usedKeys = fastToSet(current);
      var tmp$ret$0;
      // Inline function 'kotlin.collections.mutableSetOf' call
      tmp$ret$0 = LinkedHashSet_init_$Create$();
      var placedKeys = tmp$ret$0;
      var currentIndex = 0;
      var currentEnd = current.g();
      var previousIndex = 0;
      var previousEnd = previous.g();
      var nodeOffset = 0;
      $l$loop_0: while (previousIndex < previousEnd) {
        var previousInfo = previous.h(previousIndex);
        if (!usedKeys.j(previousInfo)) {
          var deleteOffset = pending.iz(previousInfo);
          recordRemoveNode($this, deleteOffset + pending.qy_1 | 0, previousInfo.gz_1);
          pending.pz(previousInfo.fz_1, 0);
          recordReaderMoving($this, previousInfo.fz_1);
          $this.xv_1.lz(previousInfo.fz_1);
          recordDelete($this);
          $this.xv_1.xx();
          removeRange($this.jv_1, previousInfo.fz_1, previousInfo.fz_1 + $this.xv_1.qz(previousInfo.fz_1) | 0);
          var tmp0 = previousIndex;
          previousIndex = tmp0 + 1 | 0;
          continue $l$loop_0;
        }
        if (placedKeys.j(previousInfo)) {
          var tmp1 = previousIndex;
          previousIndex = tmp1 + 1 | 0;
          continue $l$loop_0;
        }
        if (currentIndex < currentEnd) {
          var currentInfo = current.h(currentIndex);
          if (!(currentInfo === previousInfo)) {
            var nodePosition = pending.iz(currentInfo);
            placedKeys.b(currentInfo);
            if (!(nodePosition === nodeOffset)) {
              var updatedCount = pending.rz(currentInfo);
              recordMoveNode($this, nodePosition + pending.qy_1 | 0, nodeOffset + pending.qy_1 | 0, updatedCount);
              pending.sz(nodePosition, nodeOffset, updatedCount);
            }
          } else {
            var tmp2 = previousIndex;
            previousIndex = tmp2 + 1 | 0;
          }
          var tmp3 = currentIndex;
          currentIndex = tmp3 + 1 | 0;
          nodeOffset = nodeOffset + pending.rz(currentInfo) | 0;
        }
      }
      realizeMovement($this);
      if (previous.g() > 0) {
        recordReaderMoving($this, $this.xv_1.tz());
        $this.xv_1.hy();
      }
    }
    var removeIndex = $this.av_1;
    while (!$this.xv_1.uz()) {
      var startSlot = $this.xv_1.px_1;
      recordDelete($this);
      var nodesToRemove = $this.xv_1.xx();
      recordRemoveNode($this, removeIndex, nodesToRemove);
      removeRange($this.jv_1, startSlot, $this.xv_1.px_1);
    }
    var inserting = $this.ew_1;
    if (inserting) {
      if (isNode) {
        registerInsertUpFixup($this);
        expectedNodeCount = 1;
      }
      $this.xv_1.wz();
      var parentGroup = $this.zv_1.kt_1;
      $this.zv_1.xz();
      if (!$this.xv_1.zz()) {
        var virtualIndex = insertedGroupVirtualIndex($this, parentGroup);
        $this.zv_1.yz();
        $this.zv_1.vx();
        recordInsert($this, $this.cw_1);
        $this.ew_1 = false;
        if (!$this.tu_1.jk()) {
          updateNodeCount($this, virtualIndex, 0);
          updateNodeCountOverrides($this, virtualIndex, expectedNodeCount);
        }
      }
    } else {
      if (isNode) {
        recordUp($this);
      }
      recordEndGroup($this);
      var parentGroup_0 = $this.xv_1.rx_1;
      var parentNodeCount = updatedNodeCount($this, parentGroup_0);
      if (!(expectedNodeCount === parentNodeCount)) {
        updateNodeCountOverrides($this, parentGroup_0, expectedNodeCount);
      }
      if (isNode) {
        expectedNodeCount = 1;
      }
      $this.xv_1.vz();
      realizeMovement($this);
    }
    exitGroup($this, expectedNodeCount, inserting);
  }
  function recomposeToGroupEnd($this) {
    var wasComposing = $this.vv_1;
    $this.vv_1 = true;
    var recomposed = false;
    var parent = $this.xv_1.rx_1;
    var end = parent + $this.xv_1.qz(parent) | 0;
    var recomposeIndex = $this.av_1;
    var recomposeCompoundKey = $this.fw_1;
    var oldGroupNodeCount = $this.cv_1;
    var oldGroup = parent;
    var firstInRange_0 = firstInRange($this.jv_1, $this.xv_1.px_1, end);
    while (!(firstInRange_0 == null)) {
      var location = firstInRange_0.b10_1;
      removeLocation($this.jv_1, location);
      if (firstInRange_0.g10()) {
        recomposed = true;
        $this.xv_1.lz(location);
        var newGroup = $this.xv_1.px_1;
        recordUpsAndDowns($this, oldGroup, newGroup, parent);
        oldGroup = newGroup;
        $this.av_1 = nodeIndexOf($this, location, newGroup, parent, recomposeIndex);
        $this.fw_1 = compoundKeyOf($this, $this.xv_1.by(newGroup), parent, recomposeCompoundKey);
        $this.bw_1 = null;
        firstInRange_0.a10_1.e10($this);
        $this.bw_1 = null;
        $this.xv_1.f10(parent);
      } else {
        $this.uv_1.mz(firstInRange_0.a10_1);
        firstInRange_0.a10_1.d10();
        $this.uv_1.nz();
      }
      firstInRange_0 = firstInRange($this.jv_1, $this.xv_1.px_1, end);
    }
    if (recomposed) {
      recordUpsAndDowns($this, oldGroup, parent, parent);
      $this.xv_1.hy();
      var parentGroupNodes = updatedNodeCount($this, parent);
      $this.av_1 = recomposeIndex + parentGroupNodes | 0;
      $this.cv_1 = oldGroupNodeCount + parentGroupNodes | 0;
    } else {
      skipReaderToGroupEnd($this);
    }
    $this.fw_1 = recomposeCompoundKey;
    $this.vv_1 = wasComposing;
  }
  function insertedGroupVirtualIndex($this, index) {
    return -2 - index | 0;
  }
  function updateNodeCountOverrides($this, group, newCount) {
    var currentCount = updatedNodeCount($this, group);
    if (!(currentCount === newCount)) {
      var delta = newCount - currentCount | 0;
      var current = group;
      var minPending = $this.yu_1.g() - 1 | 0;
      $l$loop_0: while (!(current === -1)) {
        var newCurrentNodes = updatedNodeCount($this, current) + delta | 0;
        updateNodeCount($this, current, newCurrentNodes);
        var inductionVariable = minPending;
        if (0 <= inductionVariable)
          $l$loop: do {
            var pendingIndex = inductionVariable;
            inductionVariable = inductionVariable + -1 | 0;
            var pending = $this.yu_1.h10(pendingIndex);
            if (!(pending == null) ? pending.pz(current, newCurrentNodes) : false) {
              minPending = pendingIndex - 1 | 0;
              break $l$loop;
            }
          }
           while (0 <= inductionVariable);
        if (current < 0) {
          current = $this.xv_1.rx_1;
        } else {
          if ($this.xv_1.i10(current))
            break $l$loop_0;
          current = $this.xv_1.by(current);
        }
      }
    }
  }
  function nodeIndexOf($this, groupLocation, group, recomposeGroup, recomposeIndex) {
    var anchorGroup = $this.xv_1.by(group);
    $l$loop: while (!(anchorGroup === recomposeGroup)) {
      if ($this.xv_1.i10(anchorGroup))
        break $l$loop;
      anchorGroup = $this.xv_1.by(anchorGroup);
    }
    var index = $this.xv_1.i10(anchorGroup) ? 0 : recomposeIndex;
    if (anchorGroup === group)
      return index;
    var current = anchorGroup;
    var nodeIndexLimit = index + (updatedNodeCount($this, anchorGroup) - $this.xv_1.j10(group) | 0) | 0;
    loop: while (index < nodeIndexLimit) {
      if (current === groupLocation)
        break loop;
      var tmp0 = current;
      current = tmp0 + 1 | 0;
      while (current < groupLocation) {
        var end = current + $this.xv_1.qz(current) | 0;
        if (groupLocation < end)
          continue loop;
        index = index + updatedNodeCount($this, current) | 0;
        current = end;
      }
      break loop;
    }
    return index;
  }
  function updatedNodeCount($this, group) {
    if (group < 0) {
      var tmp0_safe_receiver = $this.fv_1;
      var tmp;
      if (tmp0_safe_receiver == null) {
        tmp = null;
      } else {
        var tmp$ret$1;
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        var tmp$ret$0;
        // Inline function 'androidx.compose.runtime.ComposerImpl.updatedNodeCount.<anonymous>' call
        tmp$ret$0 = tmp0_safe_receiver.l2(group);
        tmp$ret$1 = tmp$ret$0;
        tmp = tmp$ret$1;
      }
      var tmp1_elvis_lhs = tmp;
      return tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
    }
    var nodeCounts = $this.ev_1;
    if (!(nodeCounts == null)) {
      var override = nodeCounts[group];
      if (override >= 0)
        return override;
    }
    return $this.xv_1.j10(group);
  }
  function updateNodeCount($this, group, count) {
    if (!(updatedNodeCount($this, group) === count)) {
      if (group < 0) {
        var tmp0_elvis_lhs = $this.fv_1;
        var tmp;
        if (tmp0_elvis_lhs == null) {
          var tmp$ret$1;
          // Inline function 'kotlin.run' call
          // Inline function 'kotlin.contracts.contract' call
          var tmp$ret$0;
          // Inline function 'androidx.compose.runtime.ComposerImpl.updateNodeCount.<anonymous>' call
          var newCounts = HashMap_init_$Create$();
          $this.fv_1 = newCounts;
          tmp$ret$0 = newCounts;
          tmp$ret$1 = tmp$ret$0;
          tmp = tmp$ret$1;
        } else {
          tmp = tmp0_elvis_lhs;
        }
        var virtualCounts = tmp;
        // Inline function 'kotlin.collections.set' call
        virtualCounts.a(group, count);
      } else {
        var tmp1_elvis_lhs = $this.ev_1;
        var tmp_0;
        if (tmp1_elvis_lhs == null) {
          var tmp$ret$3;
          // Inline function 'kotlin.run' call
          // Inline function 'kotlin.contracts.contract' call
          var tmp$ret$2;
          // Inline function 'androidx.compose.runtime.ComposerImpl.updateNodeCount.<anonymous>' call
          var newCounts_0 = new Int32Array($this.xv_1.g());
          fill$default(newCounts_0, -1, 0, 0, 6, null);
          $this.ev_1 = newCounts_0;
          tmp$ret$2 = newCounts_0;
          tmp$ret$3 = tmp$ret$2;
          tmp_0 = tmp$ret$3;
        } else {
          tmp_0 = tmp1_elvis_lhs;
        }
        var nodeCounts = tmp_0;
        nodeCounts[group] = count;
      }
    }
  }
  function clearUpdatedNodeCounts($this) {
    $this.ev_1 = null;
    $this.fv_1 = null;
  }
  function recordUpsAndDowns($this, oldGroup, newGroup, commonRoot) {
    var reader = $this.xv_1;
    var nearestCommonRoot = nearestCommonRootOf(reader, oldGroup, newGroup, commonRoot);
    var current = oldGroup;
    while (current > 0 ? !(current === nearestCommonRoot) : false) {
      if (reader.i10(current)) {
        recordUp($this);
      }
      current = reader.by(current);
    }
    doRecordDownsFor($this, newGroup, nearestCommonRoot);
  }
  function doRecordDownsFor($this, group, nearestCommonRoot) {
    if (group > 0 ? !(group === nearestCommonRoot) : false) {
      doRecordDownsFor($this, $this.xv_1.by(group), nearestCommonRoot);
      if ($this.xv_1.i10(group)) {
        recordDown($this, nodeAt($this.xv_1, $this, group));
      }
    }
  }
  function compoundKeyOf($this, group, recomposeGroup, recomposeKey) {
    var tmp;
    if (group === recomposeGroup) {
      tmp = recomposeKey;
    } else {
      var tmp$ret$2;
      // Inline function 'kotlin.run' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.ComposerImpl.compoundKeyOf.<anonymous>' call
      var groupKey = groupCompoundKeyPart($this.xv_1, $this, group);
      var tmp_0;
      if (groupKey === get_movableContentKey()) {
        tmp_0 = groupKey;
      } else {
        var tmp$ret$0;
        // Inline function 'androidx.compose.runtime.rol' call
        var tmp0_rol = compoundKeyOf($this, $this.xv_1.by(group), recomposeGroup, recomposeKey);
        tmp$ret$0 = rotateLeft(tmp0_rol, 3);
        tmp_0 = tmp$ret$0 ^ groupKey;
      }
      tmp$ret$1 = tmp_0;
      tmp$ret$2 = tmp$ret$1;
      tmp = tmp$ret$2;
    }
    return tmp;
  }
  function groupCompoundKeyPart(_this__u8e3s4, $this, group) {
    var tmp;
    if (_this__u8e3s4.k10(group)) {
      var tmp0_safe_receiver = _this__u8e3s4.zx(group);
      var tmp_0;
      if (tmp0_safe_receiver == null) {
        tmp_0 = null;
      } else {
        var tmp$ret$1;
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        var tmp$ret$0;
        // Inline function 'androidx.compose.runtime.ComposerImpl.groupCompoundKeyPart.<anonymous>' call
        var tmp0_subject = tmp0_safe_receiver;
        var tmp_1;
        if (tmp0_subject instanceof Enum) {
          tmp_1 = tmp0_safe_receiver.o4_1;
        } else {
          if (tmp0_subject instanceof MovableContent) {
            tmp_1 = get_movableContentKey();
          } else {
            tmp_1 = hashCode_0(tmp0_safe_receiver);
          }
        }
        tmp$ret$0 = tmp_1;
        tmp$ret$1 = tmp$ret$0;
        tmp_0 = tmp$ret$1;
      }
      var tmp1_elvis_lhs = tmp_0;
      tmp = tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
    } else {
      var tmp$ret$5;
      // Inline function 'kotlin.let' call
      var tmp0_let = _this__u8e3s4.ay(group);
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$4;
      // Inline function 'androidx.compose.runtime.ComposerImpl.groupCompoundKeyPart.<anonymous>' call
      var tmp_2;
      if (tmp0_let === 207) {
        var tmp0_safe_receiver_0 = _this__u8e3s4.yx(group);
        var tmp_3;
        if (tmp0_safe_receiver_0 == null) {
          tmp_3 = null;
        } else {
          var tmp$ret$3;
          // Inline function 'kotlin.let' call
          // Inline function 'kotlin.contracts.contract' call
          var tmp$ret$2;
          // Inline function 'androidx.compose.runtime.ComposerImpl.groupCompoundKeyPart.<anonymous>.<anonymous>' call
          tmp$ret$2 = equals_0(tmp0_safe_receiver_0, Companion_getInstance_8().ns_1) ? tmp0_let : hashCode_0(tmp0_safe_receiver_0);
          tmp$ret$3 = tmp$ret$2;
          tmp_3 = tmp$ret$3;
        }
        var tmp1_elvis_lhs_0 = tmp_3;
        tmp_2 = tmp1_elvis_lhs_0 == null ? tmp0_let : tmp1_elvis_lhs_0;
      } else {
        tmp_2 = tmp0_let;
      }
      tmp$ret$4 = tmp_2;
      tmp$ret$5 = tmp$ret$4;
      tmp = tmp$ret$5;
    }
    return tmp;
  }
  function skipReaderToGroupEnd($this) {
    $this.cv_1 = $this.xv_1.l10();
    $this.xv_1.hy();
  }
  function addRecomposeScope($this) {
    if ($this.ew_1) {
      var tmp = $this.xu_1;
      var scope = new RecomposeScopeImpl(tmp instanceof CompositionImpl ? tmp : THROW_CCE());
      $this.uv_1.mz(scope);
      $this.m10(scope);
      scope.o10($this.tv_1);
    } else {
      var invalidation = removeLocation($this.jv_1, $this.xv_1.rx_1);
      var slot = $this.xv_1.f();
      var tmp_0;
      if (equals_0(slot, Companion_getInstance_8().ns_1)) {
        var tmp_1 = $this.xu_1;
        var newScope = new RecomposeScopeImpl(tmp_1 instanceof CompositionImpl ? tmp_1 : THROW_CCE());
        $this.m10(newScope);
        tmp_0 = newScope;
      } else {
        tmp_0 = slot instanceof RecomposeScopeImpl ? slot : THROW_CCE();
      }
      var scope_0 = tmp_0;
      scope_0.n10(!(invalidation == null));
      $this.uv_1.mz(scope_0);
      scope_0.o10($this.tv_1);
    }
  }
  function invokeMovableContentLambda($this, content, locals, parameter, force) {
    $this.p10(get_movableContentKey(), content);
    $this.ps(parameter);
    var savedCompoundKeyHash = $this.fw_1;
    $this.fw_1 = get_movableContentKey();
    if ($this.ew_1) {
      var tmp = $this.zv_1;
      tmp.q10(0, 1, null);
    }
    var providersChanged = $this.ew_1 ? false : !equals_0($this.xv_1.iy(), locals);
    if (providersChanged) {
      // Inline function 'kotlin.collections.set' call
      var tmp0_set = $this.mv_1;
      var tmp1_set = $this.xv_1.px_1;
      tmp0_set.a(tmp1_set, locals);
    }
    start($this, 202, get_compositionLocalMap(), false, locals);
    if ($this.ew_1 ? !force : false) {
      $this.aw_1 = true;
      $this.bw_1 = null;
      var anchor = $this.zv_1.cz($this.zv_1.by($this.zv_1.kt_1));
      var tmp_0 = $this.yv_1;
      var tmp_1 = emptyList();
      var reference = new MovableContentStateReference(content, parameter, $this.xu_1, tmp_0, anchor, tmp_1, currentCompositionLocalScope$default($this, null, 2, null));
      $this.su_1.r10(reference);
    } else {
      var savedProvidersInvalid = $this.nv_1;
      $this.nv_1 = providersChanged;
      invokeComposable$composable($this, ComposableLambda$invoke$ref(composableLambdaInstance(1378964644, true, ComposerImpl$invokeMovableContentLambda$lambda(content, parameter))));
      $this.nv_1 = savedProvidersInvalid;
    }
    endGroup($this);
    $this.fw_1 = savedCompoundKeyHash;
    $this.s10();
  }
  function recomposeMovableContent($this, from, to, index, invalidations, block) {
    var savedImplicitRootStart = $this.kw_1;
    var savedIsComposing = $this.vv_1;
    var savedNodeIndex = $this.av_1;
    try {
      $this.kw_1 = false;
      $this.vv_1 = true;
      $this.av_1 = 0;
      // Inline function 'androidx.compose.runtime.snapshots.fastForEach' call
      // Inline function 'kotlin.contracts.contract' call
      var inductionVariable = 0;
      var last = invalidations.g() - 1 | 0;
      if (inductionVariable <= last)
        do {
          var index_0 = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var item = invalidations.h(index_0);
          // Inline function 'androidx.compose.runtime.ComposerImpl.recomposeMovableContent.<anonymous>' call
          var scope = item.a3();
          var instances = item.b3();
          if (!(instances == null)) {
            // Inline function 'kotlin.collections.forEach' call
            var tmp0_iterator = instances.d();
            while (tmp0_iterator.e()) {
              var element = tmp0_iterator.f();
              // Inline function 'androidx.compose.runtime.ComposerImpl.recomposeMovableContent.<anonymous>.<anonymous>' call
              $this.t10(scope, element);
            }
          } else {
            $this.t10(scope, null);
          }
        }
         while (inductionVariable <= last);
      var tmp1_safe_receiver = from;
      var tmp;
      if (tmp1_safe_receiver == null) {
        tmp = null;
      } else {
        var tmp0_elvis_lhs = index;
        tmp = tmp1_safe_receiver.u10(to, tmp0_elvis_lhs == null ? -1 : tmp0_elvis_lhs, block);
      }
      var tmp2_elvis_lhs = tmp;
      return tmp2_elvis_lhs == null ? block() : tmp2_elvis_lhs;
    }finally {
      $this.kw_1 = savedImplicitRootStart;
      $this.vv_1 = savedIsComposing;
      $this.av_1 = savedNodeIndex;
    }
  }
  function recomposeMovableContent$default($this, from, to, index, invalidations, block, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      from = null;
    if (!(($mask0 & 4) === 0))
      to = null;
    if (!(($mask0 & 8) === 0))
      index = null;
    if (!(($mask0 & 16) === 0))
      invalidations = emptyList();
    return recomposeMovableContent($this, from, to, index, invalidations, block);
  }
  function _get_node__db0vwp(_this__u8e3s4, $this) {
    return _this__u8e3s4.v10(_this__u8e3s4.rx_1);
  }
  function nodeAt(_this__u8e3s4, $this, index) {
    return _this__u8e3s4.v10(index);
  }
  function validateNodeExpected($this) {
    // Inline function 'androidx.compose.runtime.runtimeCheck' call
    var tmp0_runtimeCheck = $this.iv_1;
    if (!tmp0_runtimeCheck) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.ComposerImpl.validateNodeExpected.<anonymous>' call
      tmp$ret$0 = 'A call to createNode(), emitNode() or useNode() expected was not expected';
      var message = tmp$ret$0;
      composeRuntimeError(toString_2(message));
    }
    $this.iv_1 = false;
  }
  function validateNodeNotExpected($this) {
    // Inline function 'androidx.compose.runtime.runtimeCheck' call
    var tmp0_runtimeCheck = !$this.iv_1;
    if (!tmp0_runtimeCheck) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.ComposerImpl.validateNodeNotExpected.<anonymous>' call
      tmp$ret$0 = 'A call to createNode(), emitNode() or useNode() expected';
      var message = tmp$ret$0;
      composeRuntimeError(toString_2(message));
    }
  }
  function record($this, change) {
    $this.vu_1.b(change);
  }
  function recordApplierOperation($this, change) {
    realizeUps($this);
    realizeDowns_0($this);
    record($this, change);
  }
  function recordSlotEditingOperation($this, change) {
    realizeOperationLocation$default($this, false, 2, null);
    recordSlotEditing($this);
    record($this, change);
  }
  function recordSlotTableOperation($this, forParent, change) {
    realizeOperationLocation($this, forParent);
    record($this, change);
  }
  function recordSlotTableOperation$default($this, forParent, change, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      forParent = false;
    return recordSlotTableOperation($this, forParent, change);
  }
  function realizeUps($this) {
    var count = $this.gw_1;
    if (count > 0) {
      $this.gw_1 = 0;
      record($this, ComposerImpl$realizeUps$lambda(count));
    }
  }
  function realizeDowns($this, nodes) {
    record($this, ComposerImpl$realizeDowns$lambda(nodes));
  }
  function realizeDowns_0($this) {
    if ($this.hw_1.w10()) {
      realizeDowns($this, $this.hw_1.z7());
      $this.hw_1.q6();
    }
  }
  function recordDown($this, node) {
    $this.hw_1.mz(node);
  }
  function recordUp($this) {
    if ($this.hw_1.w10()) {
      $this.hw_1.nz();
    } else {
      var tmp0_this = $this;
      var tmp1 = tmp0_this.gw_1;
      tmp0_this.gw_1 = tmp1 + 1 | 0;
    }
  }
  function realizeOperationLocation($this, forParent) {
    var location = forParent ? $this.xv_1.rx_1 : $this.xv_1.px_1;
    var distance = location - $this.iw_1 | 0;
    // Inline function 'androidx.compose.runtime.runtimeCheck' call
    var tmp0_runtimeCheck = distance >= 0;
    if (!tmp0_runtimeCheck) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.ComposerImpl.realizeOperationLocation.<anonymous>' call
      tmp$ret$0 = 'Tried to seek backward';
      var message = tmp$ret$0;
      composeRuntimeError(toString_2(message));
    }
    if (distance > 0) {
      record($this, ComposerImpl$realizeOperationLocation$lambda(distance));
      $this.iw_1 = location;
    }
  }
  function realizeOperationLocation$default($this, forParent, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      forParent = false;
    return realizeOperationLocation($this, forParent);
  }
  function recordInsert($this, anchor) {
    if ($this.dw_1.i()) {
      var insertTable = $this.yv_1;
      recordSlotEditingOperation($this, ComposerImpl$recordInsert$lambda(insertTable, anchor));
    } else {
      var fixups = toMutableList_0($this.dw_1);
      $this.dw_1.q6();
      realizeUps($this);
      realizeDowns_0($this);
      var insertTable_0 = $this.yv_1;
      recordSlotEditingOperation($this, ComposerImpl$recordInsert$lambda_0(insertTable_0, fixups, anchor));
    }
  }
  function recordFixup($this, change) {
    $this.dw_1.b(change);
  }
  function recordInsertUpFixup($this, change) {
    $this.mw_1.mz(change);
  }
  function registerInsertUpFixup($this) {
    $this.dw_1.b($this.mw_1.nz());
  }
  function recordDelete($this) {
    reportFreeMovableContent($this, $this.xv_1.px_1);
    recordSlotEditingOperation($this, get_removeCurrentGroupInstance());
    var tmp0_this = $this;
    tmp0_this.iw_1 = tmp0_this.iw_1 + $this.xv_1.x10() | 0;
  }
  function reportFreeMovableContent($this, groupBeingRemoved) {
    reportFreeMovableContent$reportGroup($this, groupBeingRemoved, false, 0);
    realizeMovement($this);
  }
  function recordReaderMoving($this, location) {
    var distance = $this.xv_1.px_1 - $this.iw_1 | 0;
    $this.iw_1 = location - distance | 0;
  }
  function recordSlotEditing($this) {
    if ($this.xv_1.g() > 0) {
      var reader = $this.xv_1;
      var location = reader.rx_1;
      if (!($this.lw_1.y10(-1) === location)) {
        if (!$this.jw_1 ? $this.kw_1 : false) {
          recordSlotTableOperation$default($this, false, get_startRootGroup(), 2, null);
          $this.jw_1 = true;
        }
        var anchor = reader.cz(location);
        $this.lw_1.fx(location);
        recordSlotTableOperation$default($this, false, ComposerImpl$recordSlotEditing$lambda(anchor), 2, null);
      }
    }
  }
  function recordEndGroup($this) {
    var location = $this.xv_1.rx_1;
    var currentStartedGroup = $this.lw_1.y10(-1);
    // Inline function 'androidx.compose.runtime.runtimeCheck' call
    var tmp0_runtimeCheck = currentStartedGroup <= location;
    if (!tmp0_runtimeCheck) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.ComposerImpl.recordEndGroup.<anonymous>' call
      tmp$ret$0 = 'Missed recording an endGroup';
      var message = tmp$ret$0;
      composeRuntimeError(toString_2(message));
    }
    if ($this.lw_1.y10(-1) === location) {
      $this.lw_1.nz();
      recordSlotTableOperation$default($this, false, get_endGroupInstance(), 2, null);
    }
  }
  function recordEndRoot($this) {
    if ($this.jw_1) {
      recordSlotTableOperation$default($this, false, get_endGroupInstance(), 2, null);
      $this.jw_1 = false;
    }
  }
  function finalizeCompose($this) {
    realizeUps($this);
    // Inline function 'androidx.compose.runtime.runtimeCheck' call
    var tmp0_runtimeCheck = $this.yu_1.i();
    if (!tmp0_runtimeCheck) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.ComposerImpl.finalizeCompose.<anonymous>' call
      tmp$ret$0 = 'Start/end imbalance';
      var message = tmp$ret$0;
      composeRuntimeError(toString_2(message));
    }
    // Inline function 'androidx.compose.runtime.runtimeCheck' call
    var tmp1_runtimeCheck = $this.lw_1.i();
    if (!tmp1_runtimeCheck) {
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.ComposerImpl.finalizeCompose.<anonymous>' call
      tmp$ret$1 = 'Missed recording an endGroup()';
      var message_0 = tmp$ret$1;
      composeRuntimeError(toString_2(message_0));
    }
    cleanUpCompose($this);
  }
  function cleanUpCompose($this) {
    $this.zu_1 = null;
    $this.av_1 = 0;
    $this.cv_1 = 0;
    $this.iw_1 = 0;
    $this.fw_1 = 0;
    $this.iv_1 = false;
    $this.jw_1 = false;
    $this.lw_1.q6();
    $this.uv_1.q6();
    clearUpdatedNodeCounts($this);
  }
  function recordRemoveNode($this, nodeIndex, count) {
    if (count > 0) {
      // Inline function 'androidx.compose.runtime.runtimeCheck' call
      var tmp0_runtimeCheck = nodeIndex >= 0;
      if (!tmp0_runtimeCheck) {
        var tmp$ret$0;
        // Inline function 'androidx.compose.runtime.ComposerImpl.recordRemoveNode.<anonymous>' call
        tmp$ret$0 = 'Invalid remove index ' + nodeIndex;
        var message = tmp$ret$0;
        composeRuntimeError(toString_2(message));
      }
      if ($this.nw_1 === nodeIndex) {
        var tmp0_this = $this;
        tmp0_this.qw_1 = tmp0_this.qw_1 + count | 0;
      } else {
        realizeMovement($this);
        $this.nw_1 = nodeIndex;
        $this.qw_1 = count;
      }
    }
  }
  function recordMoveNode($this, from, to, count) {
    if (count > 0) {
      if (($this.qw_1 > 0 ? $this.ow_1 === (from - $this.qw_1 | 0) : false) ? $this.pw_1 === (to - $this.qw_1 | 0) : false) {
        var tmp0_this = $this;
        tmp0_this.qw_1 = tmp0_this.qw_1 + count | 0;
      } else {
        realizeMovement($this);
        $this.ow_1 = from;
        $this.pw_1 = to;
        $this.qw_1 = count;
      }
    }
  }
  function realizeMovement($this) {
    var count = $this.qw_1;
    $this.qw_1 = 0;
    if (count > 0) {
      if ($this.nw_1 >= 0) {
        var removeIndex = $this.nw_1;
        $this.nw_1 = -1;
        recordApplierOperation($this, ComposerImpl$realizeMovement$lambda(removeIndex, count));
      } else {
        var from = $this.ow_1;
        $this.ow_1 = -1;
        var to = $this.pw_1;
        $this.pw_1 = -1;
        recordApplierOperation($this, ComposerImpl$realizeMovement$lambda_0(from, to, count));
      }
    }
  }
  function updateCompoundKeyWhenWeEnterGroup($this, groupKey, dataKey, data) {
    if (dataKey == null)
      if ((!(data == null) ? groupKey === 207 : false) ? !equals_0(data, Companion_getInstance_8().ns_1) : false) {
        updateCompoundKeyWhenWeEnterGroupKeyHash($this, hashCode_0(data));
      } else {
        updateCompoundKeyWhenWeEnterGroupKeyHash($this, groupKey);
      }
     else {
      if (dataKey instanceof Enum) {
        updateCompoundKeyWhenWeEnterGroupKeyHash($this, dataKey.o4_1);
      } else {
        updateCompoundKeyWhenWeEnterGroupKeyHash($this, hashCode_0(dataKey));
      }
    }
  }
  function updateCompoundKeyWhenWeEnterGroupKeyHash($this, keyHash) {
    var tmp = $this;
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.rol' call
    var tmp0_rol = $this.fw_1;
    tmp$ret$0 = rotateLeft(tmp0_rol, 3);
    tmp.fw_1 = tmp$ret$0 ^ keyHash;
  }
  function updateCompoundKeyWhenWeExitGroup($this, groupKey, dataKey, data) {
    if (dataKey == null)
      if ((!(data == null) ? groupKey === 207 : false) ? !equals_0(data, Companion_getInstance_8().ns_1) : false) {
        updateCompoundKeyWhenWeExitGroupKeyHash($this, hashCode_0(data));
      } else {
        updateCompoundKeyWhenWeExitGroupKeyHash($this, groupKey);
      }
     else {
      if (dataKey instanceof Enum) {
        updateCompoundKeyWhenWeExitGroupKeyHash($this, dataKey.o4_1);
      } else {
        updateCompoundKeyWhenWeExitGroupKeyHash($this, hashCode_0(dataKey));
      }
    }
  }
  function updateCompoundKeyWhenWeExitGroupKeyHash($this, groupKey) {
    var tmp = $this;
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.ror' call
    var tmp0_ror = $this.fw_1 ^ groupKey;
    tmp$ret$0 = rotateRight(tmp0_ror, 3);
    tmp.fw_1 = tmp$ret$0;
  }
  function doCompose$composable($this, invalidationsRequested, content) {
    // Inline function 'androidx.compose.runtime.runtimeCheck' call
    var tmp0_runtimeCheck = !$this.vv_1;
    if (!tmp0_runtimeCheck) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.ComposerImpl.doCompose$composable.<anonymous>' call
      tmp$ret$0 = 'Reentrant composition is not supported';
      var message = tmp$ret$0;
      composeRuntimeError(toString_2(message));
    }
    var tmp$ret$2;
    $l$block: {
      // Inline function 'androidx.compose.runtime.trace' call
      var token = Trace_getInstance().z10('Compose:recompose');
      try {
        $this.sv_1 = currentSnapshot();
        $this.tv_1 = $this.sv_1.f11();
        $this.mv_1.q6();
        // Inline function 'androidx.compose.runtime.collection.IdentityArrayMap.forEach' call
        var inductionVariable = 0;
        var last = invalidationsRequested.i11_1;
        if (inductionVariable < last)
          do {
            var index = inductionVariable;
            inductionVariable = inductionVariable + 1 | 0;
            // Inline function 'androidx.compose.runtime.ComposerImpl.doCompose$composable.<anonymous>.<anonymous>' call
            var tmp = invalidationsRequested.g11_1[index];
            var tmp0__anonymous__q1qw7t = isObject(tmp) ? tmp : THROW_CCE();
            var tmp_0 = invalidationsRequested.h11_1[index];
            var tmp1__anonymous__uwfjfc = (tmp_0 == null ? true : isObject(tmp_0)) ? tmp_0 : THROW_CCE();
            var tmp0_safe_receiver = tmp0__anonymous__q1qw7t.qt_1;
            var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.j11_1;
            var tmp_1;
            if (tmp1_elvis_lhs == null) {
              return Unit_getInstance();
            } else {
              tmp_1 = tmp1_elvis_lhs;
            }
            var location = tmp_1;
            $this.jv_1.b(new Invalidation(tmp0__anonymous__q1qw7t, location, tmp1__anonymous__uwfjfc));
          }
           while (inductionVariable < last);
        // Inline function 'kotlin.collections.sortBy' call
        var tmp2_sortBy = $this.jv_1;
        if (tmp2_sortBy.g() > 1) {
          var tmp$ret$1;
          // Inline function 'kotlin.comparisons.compareBy' call
          var tmp_2 = ComposerImpl$doCompose$composable$lambda;
          tmp$ret$1 = new sam$kotlin_Comparator$0_2(tmp_2);
          sortWith(tmp2_sortBy, tmp$ret$1);
        }
        $this.av_1 = 0;
        var complete = false;
        $this.vv_1 = true;
        var tmp_3;
        try {
          startRoot($this);
          var savedContent = $this.k11();
          if (!(savedContent === content) ? !(content == null) : false) {
            $this.m10((content == null ? true : isObject(content)) ? content : THROW_CCE());
          }
          var tmp_4 = ComposerImpl$doCompose$composable$lambda_0($this);
          var tmp_5 = ComposerImpl$doCompose$composable$lambda_1($this);
          observeDerivedStateRecalculations(tmp_4, tmp_5, ComposerImpl$doCompose$composable$lambda_2(content, $this, savedContent));
          endRoot($this);
          complete = true;
          tmp_3 = Unit_getInstance();
        }finally {
          $this.vv_1 = false;
          $this.jv_1.q6();
          if (!complete) {
            abortRoot($this);
          }
        }
        tmp$ret$2 = tmp_3;
        break $l$block;
      }finally {
        Trace_getInstance().l11(token);
      }
    }
  }
  function sam$kotlin_Comparator$0_2(function_0) {
    this.m11_1 = function_0;
  }
  sam$kotlin_Comparator$0_2.prototype.s = function (a, b) {
    return this.m11_1(a, b);
  };
  sam$kotlin_Comparator$0_2.prototype.compare = function (a, b) {
    return this.s(a, b);
  };
  sam$kotlin_Comparator$0_2.$metadata$ = classMeta('sam$kotlin_Comparator$0', [Comparator]);
  function insertMovableContentReferences$positionToParentOf(slots, applier, index) {
    while (!slots.n11(index)) {
      slots.hy();
      if (slots.i10(slots.kt_1)) {
        applier.jr();
      }
      slots.xz();
    }
  }
  function insertMovableContentReferences$currentNodeIndex(slots) {
    var original = slots.jt_1;
    var current = slots.kt_1;
    while (current >= 0 ? !slots.i10(current) : false) {
      current = slots.by(current);
    }
    var index = 0;
    var tmp0 = current;
    current = tmp0 + 1 | 0;
    while (current < original) {
      if (slots.o11(original, current)) {
        if (slots.i10(current))
          index = 0;
        var tmp1 = current;
        current = tmp1 + 1 | 0;
      } else {
        index = index + (slots.i10(current) ? 1 : slots.j10(current)) | 0;
        current = current + slots.qz(current) | 0;
      }
    }
    return index;
  }
  function insertMovableContentReferences$positionToInsert(slots, anchor, applier) {
    var destination = slots.p11(anchor);
    runtimeCheck(slots.jt_1 < destination);
    insertMovableContentReferences$positionToParentOf(slots, applier, destination);
    var nodeIndex = insertMovableContentReferences$currentNodeIndex(slots);
    while (slots.jt_1 < destination) {
      if (slots.r11(destination)) {
        if (slots.q11()) {
          applier.ir(slots.v10(slots.jt_1));
          nodeIndex = 0;
        }
        slots.jy();
      } else
        nodeIndex = nodeIndex + slots.xx() | 0;
    }
    runtimeCheck(slots.jt_1 === destination);
    return nodeIndex;
  }
  function reportFreeMovableContent$reportGroup(this$0, group, needsNodeDelete, nodeIndex) {
    var tmp;
    if (this$0.xv_1.v11(group)) {
      var tmp_0 = this$0.xv_1.zx(group);
      var value = tmp_0 instanceof MovableContent ? tmp_0 : THROW_CCE();
      var parameter = this$0.xv_1.t11(group, 0);
      var anchor = this$0.xv_1.cz(group);
      var end = group + this$0.xv_1.qz(group) | 0;
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.snapshots.fastMap' call
      var tmp0_fastMap = filterToRange(this$0.jv_1, group, end);
      // Inline function 'kotlin.contracts.contract' call
      var target = ArrayList_init_$Create$_0(tmp0_fastMap.g());
      // Inline function 'androidx.compose.runtime.snapshots.fastForEach' call
      // Inline function 'kotlin.contracts.contract' call
      var inductionVariable = 0;
      var last = tmp0_fastMap.g() - 1 | 0;
      if (inductionVariable <= last)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var item = tmp0_fastMap.h(index);
          // Inline function 'androidx.compose.runtime.snapshots.fastMap.<anonymous>' call
          // Inline function 'kotlin.collections.plusAssign' call
          var tmp$ret$0;
          // Inline function 'androidx.compose.runtime.ComposerImpl.reportFreeMovableContent.reportGroup.<anonymous>' call
          tmp$ret$0 = to(item.a10_1, item.c10_1);
          var tmp0_plusAssign = tmp$ret$0;
          target.b(tmp0_plusAssign);
        }
         while (inductionVariable <= last);
      tmp$ret$1 = target;
      var invalidations = tmp$ret$1;
      var reference = new MovableContentStateReference(value, parameter, this$0.xu_1, this$0.tu_1, anchor, invalidations, currentCompositionLocalScope(this$0, group));
      this$0.su_1.u11(reference);
      recordSlotEditing(this$0);
      record(this$0, ComposerImpl$reportFreeMovableContent$reportGroup$lambda(anchor, this$0, reference));
      var tmp_1;
      if (needsNodeDelete) {
        realizeMovement(this$0);
        realizeUps(this$0);
        realizeDowns_0(this$0);
        var nodeCount = this$0.xv_1.i10(group) ? 1 : this$0.xv_1.j10(group);
        if (nodeCount > 0) {
          recordRemoveNode(this$0, nodeIndex, nodeCount);
        }
        tmp_1 = 0;
      } else {
        tmp_1 = this$0.xv_1.j10(group);
      }
      tmp = tmp_1;
    } else if (this$0.xv_1.s11(group)) {
      var size = this$0.xv_1.qz(group);
      var end_0 = group + size | 0;
      var current = group + 1 | 0;
      var runningNodeCount = 0;
      while (current < end_0) {
        var isNode = this$0.xv_1.i10(current);
        if (isNode) {
          realizeMovement(this$0);
          recordDown(this$0, this$0.xv_1.v10(current));
        }
        runningNodeCount = runningNodeCount + reportFreeMovableContent$reportGroup(this$0, current, isNode ? true : needsNodeDelete, isNode ? 0 : nodeIndex + runningNodeCount | 0) | 0;
        if (isNode) {
          realizeMovement(this$0);
          recordUp(this$0);
        }
        current = current + this$0.xv_1.qz(current) | 0;
      }
      tmp = runningNodeCount;
    } else {
      tmp = this$0.xv_1.j10(group);
    }
    return tmp;
  }
  function ComposerImpl$createNode$lambda($factory, $groupAnchor, $insertIndex) {
    return function (applier, slots, _anonymous_parameter_2__qggqfi) {
      var node = $factory();
      slots.w11($groupAnchor, node);
      var nodeApplier = isInterface(applier, Applier) ? applier : THROW_CCE();
      nodeApplier.kr($insertIndex, node);
      applier.ir(node);
      return Unit_getInstance();
    };
  }
  function ComposerImpl$createNode$lambda_0($groupAnchor, $insertIndex) {
    return function (applier, slots, _anonymous_parameter_2__qggqfi) {
      var nodeToInsert = slots.x11($groupAnchor);
      applier.jr();
      var nodeApplier = isInterface(applier, Applier) ? applier : THROW_CCE();
      nodeApplier.lr($insertIndex, nodeToInsert);
      return Unit_getInstance();
    };
  }
  function ComposerImpl$apply$lambda($block, $value) {
    return function (applier, _anonymous_parameter_1__qggqgd, _anonymous_parameter_2__qggqfi) {
      var tmp = applier.fr();
      $block((tmp == null ? true : isObject(tmp)) ? tmp : THROW_CCE(), $value);
      return Unit_getInstance();
    };
  }
  function ComposerImpl$updateValue$lambda($value) {
    return function (_anonymous_parameter_0__qggqh8, _anonymous_parameter_1__qggqgd, rememberManager) {
      rememberManager.qs($value);
      return Unit_getInstance();
    };
  }
  function ComposerImpl$updateValue$lambda_0($value, $groupSlotIndex) {
    return function (_anonymous_parameter_0__qggqh8, slots, rememberManager) {
      var tmp;
      if (!($value == null) ? isInterface($value, RememberObserver) : false) {
        rememberManager.qs($value);
        tmp = Unit_getInstance();
      }
      var previous = slots.y11($groupSlotIndex, $value);
      var tmp_0;
      if (!(previous == null) ? isInterface(previous, RememberObserver) : false) {
        rememberManager.rs(previous);
        tmp_0 = Unit_getInstance();
      } else {
        if (previous instanceof RecomposeScopeImpl) {
          var composition = previous.pt_1;
          var tmp_1;
          if (!(composition == null)) {
            previous.uj();
            composition.iu_1 = true;
            tmp_1 = Unit_getInstance();
          }
          tmp_0 = tmp_1;
        }
      }
      return Unit_getInstance();
    };
  }
  function ComposerImpl$startProviders$lambda($values, $parentScope) {
    return function ($composer, $changed) {
      var $composer_0 = $composer;
      $composer_0.ks(935231726);
      sourceInformation($composer_0, 'C1872@69334L42:Composer.kt#9igjgp');
      var tmp0 = compositionLocalMapOf$composable($values, $parentScope, $composer_0, 0);
      $composer_0.os();
      return tmp0;
    };
  }
  function ComposerImpl$startReaderGroup$lambda($data) {
    return function (_anonymous_parameter_0__qggqh8, slots, _anonymous_parameter_2__qggqfi) {
      slots.z11($data);
      return Unit_getInstance();
    };
  }
  function ComposerImpl$start$lambda($currentRelativePosition) {
    return function (_anonymous_parameter_0__qggqh8, slots, _anonymous_parameter_2__qggqfi) {
      slots.a12($currentRelativePosition);
      return Unit_getInstance();
    };
  }
  function ComposerImpl$endRestartGroup$lambda($tmp2_safe_receiver, this$0) {
    return function (_anonymous_parameter_0__qggqh8, _anonymous_parameter_1__qggqgd, _anonymous_parameter_2__qggqfi) {
      $tmp2_safe_receiver(this$0.xu_1);
      return Unit_getInstance();
    };
  }
  function ComposableLambda$invoke$ref($boundThis) {
    return function (p0, p1) {
      return $boundThis.b12(p0, p1);
    };
  }
  function ComposerImpl$invokeMovableContentLambda$lambda($content, $parameter) {
    return function ($composer, $changed) {
      var $composer_0 = $composer;
      sourceInformation($composer_0, 'C2821@107760L18:Composer.kt#9igjgp');
      var tmp;
      if (!(($changed & 11) === 2) ? true : !$composer_0.d12()) {
        tmp = $content.c12_1($parameter, $composer_0, 0);
      } else {
        $composer_0.hy();
        tmp = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  function ComposerImpl$insertMovableContentReferences$lambda($effectiveNodeIndex, $anchor) {
    return function (applier, slots, _anonymous_parameter_2__qggqfi) {
      if (isInterface(applier, Applier))
        applier;
      else
        THROW_CCE();
      $effectiveNodeIndex._v = insertMovableContentReferences$positionToInsert(slots, $anchor, applier);
      return Unit_getInstance();
    };
  }
  function ComposerImpl$insertMovableContentReferences$lambda_0(this$0, $offsetChanges, $tmp0_let, $to) {
    return function () {
      var tmp$ret$1;
      $l$block_0: {
        // Inline function 'androidx.compose.runtime.ComposerImpl.withChanges' call
        var savedChanges = this$0.vu_1;
        try {
          this$0.vu_1 = $offsetChanges;
          var tmp$ret$0;
          $l$block: {
            // Inline function 'androidx.compose.runtime.ComposerImpl.withReader' call
            var savedReader = this$0.xv_1;
            var savedCountOverrides = this$0.ev_1;
            this$0.ev_1 = null;
            try {
              this$0.xv_1 = $tmp0_let;
              invokeMovableContentLambda(this$0, $to.e12_1, $to.k12_1, $to.f12_1, true);
              tmp$ret$0 = Unit_getInstance();
              break $l$block;
            }finally {
              this$0.xv_1 = savedReader;
              this$0.ev_1 = savedCountOverrides;
            }
          }
          tmp$ret$1 = tmp$ret$0;
          break $l$block_0;
        }finally {
          this$0.vu_1 = savedChanges;
        }
      }
      return Unit_getInstance();
    };
  }
  function ComposerImpl$insertMovableContentReferences$lambda_1($effectiveNodeIndex, $offsetChanges) {
    return function (applier, slots, rememberManager) {
      var offsetApplier = $effectiveNodeIndex._v > 0 ? new OffsetApplier(applier, $effectiveNodeIndex._v) : applier;
      // Inline function 'kotlin.contracts.contract' call
      var inductionVariable = 0;
      var last = $offsetChanges.g() - 1 | 0;
      var tmp;
      if (inductionVariable <= last) {
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var item = $offsetChanges.h(index);
          // Inline function 'androidx.compose.runtime.ComposerImpl.insertMovableContentReferences.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
          item(offsetApplier, slots, rememberManager);
        }
         while (inductionVariable <= last);
        tmp = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  function ComposerImpl$insertMovableContentReferences$lambda_2($effectiveNodeIndex, $nodesToInsert) {
    return function (applier, _anonymous_parameter_1__qggqgd, _anonymous_parameter_2__qggqfi) {
      var base = $effectiveNodeIndex._v;
      // Inline function 'kotlin.contracts.contract' call
      var inductionVariable = 0;
      var last = $nodesToInsert.g() - 1 | 0;
      var tmp;
      if (inductionVariable <= last) {
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var item = $nodesToInsert.h(index);
          // Inline function 'androidx.compose.runtime.ComposerImpl.insertMovableContentReferences.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
          if (isInterface(applier, Applier))
            applier;
          else
            THROW_CCE();
          applier.lr(base + index | 0, item);
          applier.kr(base + index | 0, item);
        }
         while (inductionVariable <= last);
        tmp = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  function ComposerImpl$insertMovableContentReferences$lambda_3(this$0, $from, $to) {
    return function (_anonymous_parameter_0__qggqh8, slots, _anonymous_parameter_2__qggqfi) {
      var tmp0_elvis_lhs = this$0.su_1.m12($from);
      var tmp;
      if (tmp0_elvis_lhs == null) {
        composeRuntimeError('Could not resolve state for movable content');
      } else {
        tmp = tmp0_elvis_lhs;
      }
      var state = tmp;
      var anchors = slots.p12(1, state.n12_1, 1);
      var tmp_0;
      var tmp$ret$0;
      // Inline function 'kotlin.collections.isNotEmpty' call
      tmp$ret$0 = !anchors.i();
      if (tmp$ret$0) {
        var tmp_1 = $to.g12_1;
        var toComposition = tmp_1 instanceof CompositionImpl ? tmp_1 : THROW_CCE();
        // Inline function 'kotlin.contracts.contract' call
        var inductionVariable = 0;
        var last = anchors.g() - 1 | 0;
        var tmp_2;
        if (inductionVariable <= last) {
          do {
            var index = inductionVariable;
            inductionVariable = inductionVariable + 1 | 0;
            var item = anchors.h(index);
            // Inline function 'androidx.compose.runtime.ComposerImpl.insertMovableContentReferences.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
            var tmp_3 = slots.q12(item, 0);
            var recomposeScope = tmp_3 instanceof RecomposeScopeImpl ? tmp_3 : null;
            var tmp0_safe_receiver = recomposeScope;
            if (tmp0_safe_receiver == null)
              null;
            else {
              tmp0_safe_receiver.r12(toComposition);
            }
          }
           while (inductionVariable <= last);
          tmp_2 = Unit_getInstance();
        }
        tmp_0 = tmp_2;
      }
      return Unit_getInstance();
    };
  }
  function ComposerImpl$insertMovableContentReferences$lambda_4(this$0, $to) {
    return function () {
      invokeMovableContentLambda(this$0, $to.e12_1, $to.k12_1, $to.f12_1, true);
      return Unit_getInstance();
    };
  }
  function ComposerImpl$insertMovableContentReferences$lambda_5($effectiveNodeIndex, $offsetChanges) {
    return function (applier, slots, rememberManager) {
      var offsetApplier = $effectiveNodeIndex._v > 0 ? new OffsetApplier(applier, $effectiveNodeIndex._v) : applier;
      // Inline function 'kotlin.contracts.contract' call
      var inductionVariable = 0;
      var last = $offsetChanges.g() - 1 | 0;
      var tmp;
      if (inductionVariable <= last) {
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var item = $offsetChanges.h(index);
          // Inline function 'androidx.compose.runtime.ComposerImpl.insertMovableContentReferences.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
          item(offsetApplier, slots, rememberManager);
        }
         while (inductionVariable <= last);
        tmp = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  function ComposerImpl$insertMovableContentReferences$lambda_6(applier, slots, _anonymous_parameter_2__qggqfi) {
    if (isInterface(applier, Applier))
      applier;
    else
      THROW_CCE();
    insertMovableContentReferences$positionToParentOf(slots, applier, 0);
    slots.xz();
    return Unit_getInstance();
  }
  function ComposerImpl$realizeUps$lambda($count) {
    return function (applier, _anonymous_parameter_1__qggqgd, _anonymous_parameter_2__qggqfi) {
      // Inline function 'kotlin.contracts.contract' call
      var inductionVariable = 0;
      var tmp;
      if (inductionVariable < $count) {
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          // Inline function 'androidx.compose.runtime.ComposerImpl.realizeUps.<anonymous>.<anonymous>' call
          applier.jr();
        }
         while (inductionVariable < $count);
        tmp = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  function ComposerImpl$realizeDowns$lambda($nodes) {
    return function (applier, _anonymous_parameter_1__qggqgd, _anonymous_parameter_2__qggqfi) {
      var inductionVariable = 0;
      var last = $nodes.length - 1 | 0;
      var tmp;
      if (inductionVariable <= last) {
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var nodeApplier = isInterface(applier, Applier) ? applier : THROW_CCE();
          nodeApplier.ir($nodes[index]);
        }
         while (inductionVariable <= last);
        tmp = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  function ComposerImpl$realizeOperationLocation$lambda($distance) {
    return function (_anonymous_parameter_0__qggqh8, slots, _anonymous_parameter_2__qggqfi) {
      slots.s12($distance);
      return Unit_getInstance();
    };
  }
  function ComposerImpl$recordInsert$lambda($insertTable, $anchor) {
    return function (_anonymous_parameter_0__qggqh8, slots, _anonymous_parameter_2__qggqfi) {
      slots.bz();
      slots.u12($insertTable, $anchor.t12($insertTable));
      slots.yz();
      return Unit_getInstance();
    };
  }
  function ComposerImpl$recordInsert$lambda_0($insertTable, $fixups, $anchor) {
    return function (applier, slots, rememberManager) {
      var tmp$ret$2;
      // Inline function 'androidx.compose.runtime.SlotTable.write' call
      var tmp$ret$1;
      // Inline function 'kotlin.let' call
      var tmp0_let = $insertTable.gy();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.SlotTable.write.<anonymous>' call
      var tmp;
      try {
        // Inline function 'kotlin.contracts.contract' call
        var inductionVariable = 0;
        var last = $fixups.g() - 1 | 0;
        var tmp_0;
        if (inductionVariable <= last) {
          do {
            var index = inductionVariable;
            inductionVariable = inductionVariable + 1 | 0;
            var item = $fixups.h(index);
            // Inline function 'androidx.compose.runtime.ComposerImpl.recordInsert.<anonymous>.<anonymous>.<anonymous>' call
            item(applier, tmp0_let, rememberManager);
          }
           while (inductionVariable <= last);
          tmp_0 = Unit_getInstance();
        }
        tmp = tmp_0;
      }finally {
        tmp0_let.vx();
      }
      tmp$ret$0 = tmp;
      tmp$ret$1 = tmp$ret$0;
      tmp$ret$2 = tmp$ret$1;
      slots.bz();
      slots.u12($insertTable, $anchor.t12($insertTable));
      slots.yz();
      return Unit_getInstance();
    };
  }
  function ComposerImpl$recordSlotEditing$lambda($anchor) {
    return function (_anonymous_parameter_0__qggqh8, slots, _anonymous_parameter_2__qggqfi) {
      slots.v12($anchor);
      return Unit_getInstance();
    };
  }
  function ComposerImpl$realizeMovement$lambda($removeIndex, $count) {
    return function (applier, _anonymous_parameter_1__qggqgd, _anonymous_parameter_2__qggqfi) {
      applier.mr($removeIndex, $count);
      return Unit_getInstance();
    };
  }
  function ComposerImpl$realizeMovement$lambda_0($from, $to, $count) {
    return function (applier, _anonymous_parameter_1__qggqgd, _anonymous_parameter_2__qggqfi) {
      applier.nr($from, $to, $count);
      return Unit_getInstance();
    };
  }
  function ComposerImpl$doCompose$composable$lambda(a, b) {
    var tmp$ret$2;
    // Inline function 'kotlin.comparisons.compareValuesBy' call
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.ComposerImpl.doCompose$composable.<anonymous>.<anonymous>' call
    tmp$ret$0 = a.b10_1;
    var tmp = tmp$ret$0;
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.ComposerImpl.doCompose$composable.<anonymous>.<anonymous>' call
    tmp$ret$1 = b.b10_1;
    tmp$ret$2 = compareValues(tmp, tmp$ret$1);
    return tmp$ret$2;
  }
  function ComposerImpl$doCompose$composable$lambda_0(this$0) {
    return function (it) {
      var tmp0_this = this$0;
      var tmp1 = tmp0_this.rv_1;
      tmp0_this.rv_1 = tmp1 + 1 | 0;
      return Unit_getInstance();
    };
  }
  function ComposerImpl$doCompose$composable$lambda_1(this$0) {
    return function (it) {
      var tmp0_this = this$0;
      var tmp1 = tmp0_this.rv_1;
      tmp0_this.rv_1 = tmp1 - 1 | 0;
      return Unit_getInstance();
    };
  }
  function ComposerImpl$doCompose$composable$lambda_2($content, this$0, $savedContent) {
    return function () {
      var tmp;
      if (!($content == null)) {
        startGroup_0(this$0, 200, get_invocation());
        invokeComposable$composable(this$0, $content);
        endGroup(this$0);
        tmp = Unit_getInstance();
      } else if ((this$0.hv_1 ? !($savedContent == null) : false) ? !equals_0($savedContent, Companion_getInstance_8().ns_1) : false) {
        startGroup_0(this$0, 200, get_invocation());
        invokeComposable$composable(this$0, (!($savedContent == null) ? typeof $savedContent === 'function' : false) ? $savedContent : THROW_CCE());
        endGroup(this$0);
        tmp = Unit_getInstance();
      } else {
        this$0.w12();
        tmp = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  function ComposerImpl$reportFreeMovableContent$reportGroup$lambda($anchor, this$0, $reference) {
    return function (_anonymous_parameter_0__qggqh8, slots, _anonymous_parameter_2__qggqfi) {
      var slotTable = new SlotTable();
      var tmp$ret$2;
      // Inline function 'androidx.compose.runtime.SlotTable.write' call
      var tmp$ret$1;
      // Inline function 'kotlin.let' call
      var tmp0_let = slotTable.gy();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.SlotTable.write.<anonymous>' call
      var tmp;
      try {
        tmp0_let.bz();
        slots.x12($anchor, 1, tmp0_let);
        tmp0_let.yz();
        tmp = Unit_getInstance();
      }finally {
        tmp0_let.vx();
      }
      tmp$ret$0 = tmp;
      tmp$ret$1 = tmp$ret$0;
      tmp$ret$2 = tmp$ret$1;
      var state = new MovableContentState(slotTable);
      this$0.su_1.y12($reference, state);
      return Unit_getInstance();
    };
  }
  function ComposerImpl(applier, parentContext, slotTable, abandonSet, changes, lateChanges, composition) {
    this.ru_1 = applier;
    this.su_1 = parentContext;
    this.tu_1 = slotTable;
    this.uu_1 = abandonSet;
    this.vu_1 = changes;
    this.wu_1 = lateChanges;
    this.xu_1 = composition;
    this.yu_1 = new Stack();
    this.zu_1 = null;
    this.av_1 = 0;
    this.bv_1 = new IntStack();
    this.cv_1 = 0;
    this.dv_1 = new IntStack();
    this.ev_1 = null;
    this.fv_1 = null;
    this.gv_1 = false;
    this.hv_1 = false;
    this.iv_1 = false;
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$0 = ArrayList_init_$Create$();
    tmp.jv_1 = tmp$ret$0;
    this.kv_1 = new IntStack();
    this.lv_1 = persistentHashMapOf();
    this.mv_1 = HashMap_init_$Create$();
    this.nv_1 = false;
    this.ov_1 = new IntStack();
    this.pv_1 = false;
    this.qv_1 = -1;
    this.rv_1 = 0;
    this.sv_1 = currentSnapshot();
    this.tv_1 = 0;
    this.uv_1 = new Stack();
    this.vv_1 = false;
    this.wv_1 = false;
    var tmp_0 = this;
    var tmp$ret$1;
    // Inline function 'kotlin.also' call
    var tmp0_also = this.tu_1.zw();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'androidx.compose.runtime.ComposerImpl.reader.<anonymous>' call
    tmp0_also.vx();
    tmp$ret$1 = tmp0_also;
    tmp_0.xv_1 = tmp$ret$1;
    this.yv_1 = new SlotTable();
    var tmp_1 = this;
    var tmp$ret$2;
    // Inline function 'kotlin.also' call
    var tmp0_also_0 = this.yv_1.gy();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'androidx.compose.runtime.ComposerImpl.writer.<anonymous>' call
    tmp0_also_0.vx();
    tmp$ret$2 = tmp0_also_0;
    tmp_1.zv_1 = tmp$ret$2;
    this.aw_1 = false;
    this.bw_1 = null;
    var tmp_2 = this;
    var tmp$ret$6;
    // Inline function 'androidx.compose.runtime.SlotTable.read' call
    var tmp1_read = this.yv_1;
    var tmp$ret$5;
    // Inline function 'kotlin.let' call
    var tmp0_let = tmp1_read.zw();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$4;
    // Inline function 'androidx.compose.runtime.SlotTable.read.<anonymous>' call
    var tmp_3;
    try {
      var tmp$ret$3;
      // Inline function 'androidx.compose.runtime.ComposerImpl.insertAnchor.<anonymous>' call
      tmp$ret$3 = tmp0_let.cz(0);
      tmp_3 = tmp$ret$3;
    }finally {
      tmp0_let.vx();
    }
    tmp$ret$4 = tmp_3;
    tmp$ret$5 = tmp$ret$4;
    tmp$ret$6 = tmp$ret$5;
    tmp_2.cw_1 = tmp$ret$6;
    var tmp_4 = this;
    var tmp$ret$7;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$7 = ArrayList_init_$Create$();
    tmp_4.dw_1 = tmp$ret$7;
    this.ew_1 = false;
    this.fw_1 = 0;
    this.gw_1 = 0;
    this.hw_1 = new Stack();
    this.iw_1 = 0;
    this.jw_1 = false;
    this.kw_1 = true;
    this.lw_1 = new IntStack();
    this.mw_1 = new Stack();
    this.nw_1 = -1;
    this.ow_1 = -1;
    this.pw_1 = -1;
    this.qw_1 = 0;
  }
  ComposerImpl.prototype.z12 = function () {
    return this.ru_1;
  };
  ComposerImpl.prototype.a13 = function () {
    return this.rv_1 > 0;
  };
  ComposerImpl.prototype.b13 = function () {
    return this.yv_1;
  };
  ComposerImpl.prototype.c13 = function () {
    return this.su_1.d13();
  };
  ComposerImpl.prototype.ks = function (key) {
    return start(this, key, null, false, null);
  };
  ComposerImpl.prototype.os = function () {
    return endGroup(this);
  };
  ComposerImpl.prototype.e13 = function () {
    return start(this, -127, null, false, null);
  };
  ComposerImpl.prototype.f13 = function () {
    endGroup(this);
    var scope = this.g13();
    if (!(scope == null) ? scope.oz() : false) {
      scope.h13(true);
    }
  };
  ComposerImpl.prototype.i13 = function () {
    var tmp;
    if (this.nv_1) {
      tmp = true;
    } else {
      var tmp0_safe_receiver = this.g13();
      tmp = (tmp0_safe_receiver == null ? null : tmp0_safe_receiver.i13()) === true;
    }
    return tmp;
  };
  ComposerImpl.prototype.p10 = function (key, dataKey) {
    return start(this, key, dataKey, false, null);
  };
  ComposerImpl.prototype.s10 = function () {
    return endGroup(this);
  };
  ComposerImpl.prototype.j13 = function () {
    this.mv_1.q6();
  };
  ComposerImpl.prototype.k13 = function () {
    return this.ew_1;
  };
  ComposerImpl.prototype.d12 = function () {
    var tmp;
    var tmp_0;
    if ((!this.ew_1 ? !this.pv_1 : false) ? !this.nv_1 : false) {
      var tmp0_safe_receiver = this.g13();
      tmp_0 = (tmp0_safe_receiver == null ? null : tmp0_safe_receiver.l13()) === false;
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = !this.hv_1;
    } else {
      tmp = false;
    }
    return tmp;
  };
  ComposerImpl.prototype.ky = function () {
    var key = this.ew_1 ? 125 : this.pv_1 ? this.xv_1.xy() === 125 ? 126 : 125 : this.xv_1.xy() === 126 ? 126 : 125;
    start(this, key, null, true, null);
    this.iv_1 = true;
  };
  ComposerImpl.prototype.m13 = function (factory) {
    validateNodeExpected(this);
    // Inline function 'androidx.compose.runtime.runtimeCheck' call
    var tmp0_runtimeCheck = this.ew_1;
    if (!tmp0_runtimeCheck) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.ComposerImpl.createNode.<anonymous>' call
      tmp$ret$0 = 'createNode() can only be called when inserting';
      var message = tmp$ret$0;
      composeRuntimeError(toString_2(message));
    }
    var insertIndex = this.bv_1.n13();
    var groupAnchor = this.zv_1.cz(this.zv_1.kt_1);
    var tmp0_this = this;
    var tmp1 = tmp0_this.cv_1;
    tmp0_this.cv_1 = tmp1 + 1 | 0;
    recordFixup(this, ComposerImpl$createNode$lambda(factory, groupAnchor, insertIndex));
    recordInsertUpFixup(this, ComposerImpl$createNode$lambda_0(groupAnchor, insertIndex));
  };
  ComposerImpl.prototype.o13 = function () {
    validateNodeExpected(this);
    // Inline function 'androidx.compose.runtime.runtimeCheck' call
    var tmp0_runtimeCheck = !this.ew_1;
    if (!tmp0_runtimeCheck) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.ComposerImpl.useNode.<anonymous>' call
      tmp$ret$0 = 'useNode() called while inserting';
      var message = tmp$ret$0;
      composeRuntimeError(toString_2(message));
    }
    recordDown(this, _get_node__db0vwp(this.xv_1, this));
  };
  ComposerImpl.prototype.p13 = function () {
    return end(this, true);
  };
  ComposerImpl.prototype.q13 = function (value, block) {
    var operation = ComposerImpl$apply$lambda(block, value);
    if (this.ew_1) {
      recordFixup(this, operation);
    } else {
      recordApplierOperation(this, operation);
    }
  };
  ComposerImpl.prototype.k11 = function () {
    var tmp;
    if (this.ew_1) {
      validateNodeNotExpected(this);
      tmp = Companion_getInstance_8().ns_1;
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.let' call
      var tmp0_let = this.xv_1.f();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.ComposerImpl.nextSlot.<anonymous>' call
      tmp$ret$0 = this.pv_1 ? Companion_getInstance_8().ns_1 : tmp0_let;
      tmp$ret$1 = tmp$ret$0;
      tmp = tmp$ret$1;
    }
    return tmp;
  };
  ComposerImpl.prototype.ps = function (value) {
    var tmp;
    if (!equals_0(this.k11(), value)) {
      this.m10(value);
      tmp = true;
    } else {
      tmp = false;
    }
    return tmp;
  };
  ComposerImpl.prototype.r13 = function (value) {
    var next = this.k11();
    if (!(next == null) ? typeof next === 'boolean' : false) {
      var nextPrimitive = next;
      if (value === nextPrimitive)
        return false;
    }
    this.m10(value);
    return true;
  };
  ComposerImpl.prototype.s13 = function (value) {
    var next = this.k11();
    if (!(next == null) ? typeof next === 'number' : false) {
      var nextPrimitive = next;
      if (value === nextPrimitive)
        return false;
    }
    this.m10(value);
    return true;
  };
  ComposerImpl.prototype.m10 = function (value) {
    if (this.ew_1) {
      this.zv_1.u13(value);
      if (!(value == null) ? isInterface(value, RememberObserver) : false) {
        record(this, ComposerImpl$updateValue$lambda(value));
        this.uu_1.b(value);
      }
    } else {
      var groupSlotIndex = this.xv_1.t13() - 1 | 0;
      if (!(value == null) ? isInterface(value, RememberObserver) : false) {
        this.uu_1.b(value);
      }
      recordSlotTableOperation(this, true, ComposerImpl$updateValue$lambda_0(value, groupSlotIndex));
    }
  };
  ComposerImpl.prototype.v13 = function (values) {
    var parentScope = currentCompositionLocalScope$default(this, null, 2, null);
    startGroup_0(this, 201, get_provider());
    startGroup_0(this, 203, get_providerValues());
    var currentProviders = invokeComposableForResult$composable(this, ComposerImpl$startProviders$lambda(values, parentScope));
    endGroup(this);
    var providers;
    var invalid;
    if (this.ew_1) {
      providers = updateProviderMapGroup(this, parentScope, currentProviders);
      invalid = false;
      this.aw_1 = true;
    } else {
      var tmp = this.xv_1.w13(0);
      var oldScope = (!(tmp == null) ? isInterface(tmp, PersistentMap) : false) ? tmp : THROW_CCE();
      var tmp_0 = this.xv_1.w13(1);
      var oldValues = (!(tmp_0 == null) ? isInterface(tmp_0, PersistentMap) : false) ? tmp_0 : THROW_CCE();
      if (!this.d12() ? true : !equals_0(oldValues, currentProviders)) {
        providers = updateProviderMapGroup(this, parentScope, currentProviders);
        invalid = !equals_0(providers, oldScope);
      } else {
        skipGroup(this);
        providers = oldScope;
        invalid = false;
      }
    }
    if (invalid ? !this.ew_1 : false) {
      // Inline function 'kotlin.collections.set' call
      var tmp0_set = this.mv_1;
      var tmp1_set = this.xv_1.px_1;
      tmp0_set.a(tmp1_set, providers);
    }
    this.ov_1.fx(asInt(this.nv_1));
    this.nv_1 = invalid;
    this.bw_1 = providers;
    start(this, 202, get_compositionLocalMap(), false, providers);
  };
  ComposerImpl.prototype.x13 = function () {
    endGroup(this);
    endGroup(this);
    this.nv_1 = asBool(this.ov_1.nz());
    this.bw_1 = null;
  };
  ComposerImpl.prototype.g13 = function () {
    var tmp$ret$1;
    // Inline function 'kotlin.let' call
    var tmp0_let = this.uv_1;
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.ComposerImpl.<get-currentRecomposeScope>.<anonymous>' call
    tmp$ret$0 = (this.rv_1 === 0 ? tmp0_let.w10() : false) ? tmp0_let.n13() : null;
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  };
  ComposerImpl.prototype.t10 = function (scope, instance) {
    var tmp0_elvis_lhs = scope.qt_1;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return false;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var anchor = tmp;
    var location = anchor.t12(this.tu_1);
    if (this.vv_1 ? location >= this.xv_1.px_1 : false) {
      insertIfMissing(this.jv_1, location, scope, instance);
      return true;
    }
    return false;
  };
  ComposerImpl.prototype.w12 = function () {
    if (this.jv_1.i()) {
      skipGroup(this);
    } else {
      var reader = this.xv_1;
      var key = reader.xy();
      var dataKey = reader.zy();
      var aux = reader.iy();
      updateCompoundKeyWhenWeEnterGroup(this, key, dataKey, aux);
      startReaderGroup(this, reader.q11(), null);
      recomposeToGroupEnd(this);
      reader.vz();
      updateCompoundKeyWhenWeExitGroup(this, key, dataKey, aux);
    }
  };
  ComposerImpl.prototype.hy = function () {
    // Inline function 'androidx.compose.runtime.runtimeCheck' call
    var tmp0_runtimeCheck = this.cv_1 === 0;
    if (!tmp0_runtimeCheck) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.ComposerImpl.skipToGroupEnd.<anonymous>' call
      tmp$ret$0 = 'No nodes can be emitted before calling skipAndEndGroup';
      var message = tmp$ret$0;
      composeRuntimeError(toString_2(message));
    }
    var tmp0_safe_receiver = this.g13();
    if (tmp0_safe_receiver == null)
      null;
    else {
      tmp0_safe_receiver.y13();
    }
    if (this.jv_1.i()) {
      skipReaderToGroupEnd(this);
    } else {
      recomposeToGroupEnd(this);
    }
  };
  ComposerImpl.prototype.z13 = function (key) {
    start(this, key, null, false, null);
    addRecomposeScope(this);
    return this;
  };
  ComposerImpl.prototype.a14 = function () {
    var scope = this.uv_1.w10() ? this.uv_1.nz() : null;
    var tmp0_safe_receiver = scope;
    if (tmp0_safe_receiver == null) {
    } else {
      tmp0_safe_receiver.n10(false);
    }
    var tmp1_safe_receiver = scope;
    var tmp2_safe_receiver = tmp1_safe_receiver == null ? null : tmp1_safe_receiver.b14(this.tv_1);
    if (tmp2_safe_receiver == null)
      null;
    else {
      var tmp$ret$0;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      record(this, ComposerImpl$endRestartGroup$lambda(tmp2_safe_receiver, this));
      tmp$ret$0 = Unit_getInstance();
    }
    var tmp;
    if ((!(scope == null) ? !scope.d14() : false) ? scope.oz() ? true : this.gv_1 : false) {
      if (scope.qt_1 == null) {
        var tmp_0 = scope;
        var tmp_1;
        if (this.ew_1) {
          tmp_1 = this.zv_1.cz(this.zv_1.kt_1);
        } else {
          tmp_1 = this.xv_1.cz(this.xv_1.rx_1);
        }
        tmp_0.qt_1 = tmp_1;
      }
      scope.c14(false);
      tmp = scope;
    } else {
      tmp = null;
    }
    var result = tmp;
    end(this, false);
    return result;
  };
  ComposerImpl.prototype.e14 = function (references) {
    var tmp$ret$13;
    $l$block_1: {
      // Inline function 'androidx.compose.runtime.ComposerImpl.withChanges' call
      var tmp0_withChanges = this.wu_1;
      var savedChanges = this.vu_1;
      try {
        this.vu_1 = tmp0_withChanges;
        record(this, get_resetSlotsInstance());
        // Inline function 'androidx.compose.runtime.snapshots.fastForEach' call
        // Inline function 'kotlin.contracts.contract' call
        var inductionVariable = 0;
        var last = references.g() - 1 | 0;
        if (inductionVariable <= last)
          do {
            var index = inductionVariable;
            inductionVariable = inductionVariable + 1 | 0;
            var item = references.h(index);
            // Inline function 'androidx.compose.runtime.ComposerImpl.insertMovableContentReferences.<anonymous>.<anonymous>' call
            var to = item.a3();
            var from = item.b3();
            var anchor = to.i12_1;
            var location = to.h12_1.p11(anchor);
            var effectiveNodeIndex = {_v: 0};
            realizeUps(this);
            record(this, ComposerImpl$insertMovableContentReferences$lambda(effectiveNodeIndex, anchor));
            if (from == null) {
              var toSlotTable = to.h12_1;
              if (equals_0(toSlotTable, this.yv_1)) {
                createFreshInsertTable(this);
              }
              var tmp$ret$4;
              // Inline function 'androidx.compose.runtime.SlotTable.read' call
              var tmp1_read = to.h12_1;
              var tmp$ret$3;
              // Inline function 'kotlin.let' call
              var tmp0_let = tmp1_read.zw();
              // Inline function 'kotlin.contracts.contract' call
              var tmp$ret$2;
              // Inline function 'androidx.compose.runtime.SlotTable.read.<anonymous>' call
              var tmp;
              try {
                tmp0_let.lz(location);
                this.iw_1 = location;
                var tmp$ret$0;
                // Inline function 'kotlin.collections.mutableListOf' call
                tmp$ret$0 = ArrayList_init_$Create$();
                var offsetChanges = tmp$ret$0;
                recomposeMovableContent$default(this, null, null, null, null, ComposerImpl$insertMovableContentReferences$lambda_0(this, offsetChanges, tmp0_let, to), 30, null);
                var tmp_0;
                var tmp$ret$1;
                // Inline function 'kotlin.collections.isNotEmpty' call
                tmp$ret$1 = !offsetChanges.i();
                if (tmp$ret$1) {
                  record(this, ComposerImpl$insertMovableContentReferences$lambda_1(effectiveNodeIndex, offsetChanges));
                  tmp_0 = Unit_getInstance();
                }
                tmp = tmp_0;
              }finally {
                tmp0_let.vx();
              }
              tmp$ret$2 = tmp;
              tmp$ret$3 = tmp$ret$2;
              tmp$ret$4 = tmp$ret$3;
            } else {
              var nodesToInsert = collectNodesFrom(from.h12_1, from.i12_1);
              var tmp$ret$5;
              // Inline function 'kotlin.collections.isNotEmpty' call
              tmp$ret$5 = !nodesToInsert.i();
              if (tmp$ret$5) {
                record(this, ComposerImpl$insertMovableContentReferences$lambda_2(effectiveNodeIndex, nodesToInsert));
                var group = this.tu_1.p11(anchor);
                updateNodeCount(this, group, updatedNodeCount(this, group) + nodesToInsert.g() | 0);
              }
              record(this, ComposerImpl$insertMovableContentReferences$lambda_3(this, from, to));
              var fromTable = from.h12_1;
              var tmp$ret$12;
              // Inline function 'androidx.compose.runtime.SlotTable.read' call
              var tmp$ret$11;
              // Inline function 'kotlin.let' call
              var tmp2_let = fromTable.zw();
              // Inline function 'kotlin.contracts.contract' call
              var tmp$ret$10;
              // Inline function 'androidx.compose.runtime.SlotTable.read.<anonymous>' call
              var tmp_1;
              try {
                var tmp$ret$9;
                $l$block_0: {
                  // Inline function 'androidx.compose.runtime.ComposerImpl.withReader' call
                  var savedReader = this.xv_1;
                  var savedCountOverrides = this.ev_1;
                  this.ev_1 = null;
                  try {
                    this.xv_1 = tmp2_let;
                    var newLocation = fromTable.p11(from.i12_1);
                    tmp2_let.lz(newLocation);
                    this.iw_1 = newLocation;
                    var tmp$ret$6;
                    // Inline function 'kotlin.collections.mutableListOf' call
                    tmp$ret$6 = ArrayList_init_$Create$();
                    var offsetChanges_0 = tmp$ret$6;
                    var tmp$ret$7;
                    $l$block: {
                      // Inline function 'androidx.compose.runtime.ComposerImpl.withChanges' call
                      var savedChanges_0 = this.vu_1;
                      try {
                        this.vu_1 = offsetChanges_0;
                        var tmp_2 = tmp2_let.px_1;
                        tmp$ret$7 = recomposeMovableContent(this, from.g12_1, to.g12_1, tmp_2, from.j12_1, ComposerImpl$insertMovableContentReferences$lambda_4(this, to));
                        break $l$block;
                      }finally {
                        this.vu_1 = savedChanges_0;
                      }
                    }
                    var tmp_3;
                    var tmp$ret$8;
                    // Inline function 'kotlin.collections.isNotEmpty' call
                    tmp$ret$8 = !offsetChanges_0.i();
                    if (tmp$ret$8) {
                      record(this, ComposerImpl$insertMovableContentReferences$lambda_5(effectiveNodeIndex, offsetChanges_0));
                      tmp_3 = Unit_getInstance();
                    }
                    tmp$ret$9 = tmp_3;
                    break $l$block_0;
                  }finally {
                    this.xv_1 = savedReader;
                    this.ev_1 = savedCountOverrides;
                  }
                }
                tmp_1 = tmp$ret$9;
              }finally {
                tmp2_let.vx();
              }
              tmp$ret$10 = tmp_1;
              tmp$ret$11 = tmp$ret$10;
              tmp$ret$12 = tmp$ret$11;
            }
            record(this, get_skipToGroupEndInstance());
          }
           while (inductionVariable <= last);
        record(this, ComposerImpl$insertMovableContentReferences$lambda_6);
        this.iw_1 = 0;
        tmp$ret$13 = Unit_getInstance();
        break $l$block_1;
      }finally {
        this.vu_1 = savedChanges;
      }
    }
    cleanUpCompose(this);
  };
  ComposerImpl.prototype.f14 = function (sourceInformation) {
    if (this.ew_1) {
      this.zv_1.g14(sourceInformation);
    }
  };
  ComposerImpl.prototype.h14 = function (block) {
    // Inline function 'androidx.compose.runtime.runtimeCheck' call
    var tmp0_runtimeCheck = !this.vv_1;
    if (!tmp0_runtimeCheck) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.ComposerImpl.prepareCompose.<anonymous>' call
      tmp$ret$0 = 'Preparing a composition while composing is not supported';
      var message = tmp$ret$0;
      composeRuntimeError(toString_2(message));
    }
    this.vv_1 = true;
    try {
      block();
    }finally {
      this.vv_1 = false;
    }
  };
  ComposerImpl.prototype.i14 = function (invalidationsRequested) {
    // Inline function 'androidx.compose.runtime.runtimeCheck' call
    var tmp0_runtimeCheck = this.vu_1.i();
    if (!tmp0_runtimeCheck) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.ComposerImpl.recompose.<anonymous>' call
      tmp$ret$0 = 'Expected applyChanges() to have been called';
      var message = tmp$ret$0;
      composeRuntimeError(toString_2(message));
    }
    var tmp;
    var tmp_0;
    if (invalidationsRequested.w10()) {
      tmp_0 = true;
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.collections.isNotEmpty' call
      var tmp1_isNotEmpty = this.jv_1;
      tmp$ret$1 = !tmp1_isNotEmpty.i();
      tmp_0 = tmp$ret$1;
    }
    if (tmp_0) {
      tmp = true;
    } else {
      tmp = this.hv_1;
    }
    if (tmp) {
      doCompose$composable(this, invalidationsRequested, null);
      var tmp$ret$2;
      // Inline function 'kotlin.collections.isNotEmpty' call
      var tmp2_isNotEmpty = this.vu_1;
      tmp$ret$2 = !tmp2_isNotEmpty.i();
      return tmp$ret$2;
    }
    return false;
  };
  ComposerImpl.prototype.j14 = function () {
    return this.g13();
  };
  ComposerImpl.prototype.ls = function () {
    return this.k11();
  };
  ComposerImpl.prototype.ms = function (value) {
    return this.m10(value);
  };
  ComposerImpl.prototype.k14 = function (scope) {
    var tmp0_safe_receiver = scope instanceof RecomposeScopeImpl ? scope : null;
    if (tmp0_safe_receiver == null) {
    } else {
      tmp0_safe_receiver.l14(true);
    }
  };
  ComposerImpl.prototype.m14 = function (invalidationsRequested, content) {
    // Inline function 'androidx.compose.runtime.runtimeCheck' call
    var tmp0_runtimeCheck = this.vu_1.i();
    if (!tmp0_runtimeCheck) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.ComposerImpl.composeContent$composable.<anonymous>' call
      tmp$ret$0 = 'Expected applyChanges() to have been called';
      var message = tmp$ret$0;
      composeRuntimeError(toString_2(message));
    }
    doCompose$composable(this, invalidationsRequested, content);
  };
  ComposerImpl.$metadata$ = classMeta('ComposerImpl', [Composer]);
  function Composer$Companion$Empty$1() {
  }
  Composer$Companion$Empty$1.prototype.toString = function () {
    return 'Empty';
  };
  Composer$Companion$Empty$1.$metadata$ = classMeta();
  function Companion_8() {
    Companion_instance_8 = this;
    var tmp = this;
    tmp.ns_1 = new Composer$Companion$Empty$1();
  }
  Companion_8.prototype.n14 = function () {
    return this.ns_1;
  };
  Companion_8.$metadata$ = objectMeta('Companion');
  var Companion_instance_8;
  function Companion_getInstance_8() {
    if (Companion_instance_8 == null)
      new Companion_8();
    return Companion_instance_8;
  }
  function Composer() {
  }
  Composer.$metadata$ = interfaceMeta('Composer');
  var InvalidationResult_IGNORED_instance;
  var InvalidationResult_SCHEDULED_instance;
  var InvalidationResult_DEFERRED_instance;
  var InvalidationResult_IMMINENT_instance;
  var InvalidationResult_entriesInitialized;
  function InvalidationResult_initEntries() {
    if (InvalidationResult_entriesInitialized)
      return Unit_getInstance();
    InvalidationResult_entriesInitialized = true;
    InvalidationResult_IGNORED_instance = new InvalidationResult('IGNORED', 0);
    InvalidationResult_SCHEDULED_instance = new InvalidationResult('SCHEDULED', 1);
    InvalidationResult_DEFERRED_instance = new InvalidationResult('DEFERRED', 2);
    InvalidationResult_IMMINENT_instance = new InvalidationResult('IMMINENT', 3);
  }
  function InvalidationResult(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  InvalidationResult.$metadata$ = classMeta('InvalidationResult', undefined, undefined, undefined, undefined, Enum.prototype);
  function MovableContentStateReference(content, parameter, composition, slotTable, anchor, invalidations, locals) {
    this.e12_1 = content;
    this.f12_1 = parameter;
    this.g12_1 = composition;
    this.h12_1 = slotTable;
    this.i12_1 = anchor;
    this.j12_1 = invalidations;
    this.k12_1 = locals;
    this.l12_1 = 8;
  }
  MovableContentStateReference.prototype.o14 = function () {
    return this.e12_1;
  };
  MovableContentStateReference.prototype.p14 = function () {
    return this.f12_1;
  };
  MovableContentStateReference.prototype.q14 = function () {
    return this.g12_1;
  };
  MovableContentStateReference.prototype.r14 = function () {
    return this.h12_1;
  };
  MovableContentStateReference.prototype.s14 = function () {
    return this.i12_1;
  };
  MovableContentStateReference.prototype.t14 = function () {
    return this.j12_1;
  };
  MovableContentStateReference.prototype.u14 = function () {
    return this.k12_1;
  };
  MovableContentStateReference.$metadata$ = classMeta('MovableContentStateReference');
  function runtimeCheck(value) {
    init_properties_Composer_kt_de8r5y();
    var tmp;
    if (!value) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.runtimeCheck.<anonymous>' call
      tmp$ret$0 = 'Check failed';
      var message = tmp$ret$0;
      composeRuntimeError(toString_2(message));
    }
    return tmp;
  }
  function MovableContentState(slotTable) {
    this.n12_1 = slotTable;
    this.o12_1 = 8;
  }
  MovableContentState.prototype.r14 = function () {
    return this.n12_1;
  };
  MovableContentState.$metadata$ = classMeta('MovableContentState');
  function sourceInformation(composer, sourceInformation) {
    init_properties_Composer_kt_de8r5y();
    composer.f14(sourceInformation);
  }
  function ProvidedValue(compositionLocal, value, canOverride) {
    this.v14_1 = compositionLocal;
    this.w14_1 = value;
    this.x14_1 = canOverride;
    this.y14_1 = 0;
  }
  ProvidedValue.prototype.z14 = function () {
    return this.v14_1;
  };
  ProvidedValue.prototype.a2 = function () {
    return this.w14_1;
  };
  ProvidedValue.prototype.a15 = function () {
    return this.x14_1;
  };
  ProvidedValue.$metadata$ = classMeta('ProvidedValue');
  function ScopeUpdateScope() {
  }
  ScopeUpdateScope.$metadata$ = interfaceMeta('ScopeUpdateScope');
  function MovableContent() {
  }
  MovableContent.$metadata$ = classMeta('MovableContent');
  function runtimeCheck_0(value, lazyMessage) {
    init_properties_Composer_kt_de8r5y();
    if (!value) {
      var message = lazyMessage();
      composeRuntimeError(toString_2(message));
    }
  }
  function Pending$keyMap$delegate$lambda(this$0) {
    return function () {
      var tmp$ret$0;
      // Inline function 'kotlin.also' call
      var tmp0_also = multiMap();
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'androidx.compose.runtime.Pending.keyMap$delegate.<anonymous>.<anonymous>' call
      var inductionVariable = 0;
      var last = this$0.py_1.g();
      if (inductionVariable < last)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var keyInfo = this$0.py_1.h(index);
          put(tmp0_also, get_joinedKey(keyInfo), keyInfo);
        }
         while (inductionVariable < last);
      tmp$ret$0 = tmp0_also;
      return tmp$ret$0;
    };
  }
  function Pending(keyInfos, startIndex) {
    this.py_1 = keyInfos;
    this.qy_1 = startIndex;
    this.ry_1 = 0;
    // Inline function 'kotlin.require' call
    var tmp0_require = this.qy_1 >= 0;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.Pending.<anonymous>' call
      tmp$ret$0 = 'Invalid start index';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString_2(message));
    }
    var tmp = this;
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$1 = ArrayList_init_$Create$();
    tmp.sy_1 = tmp$ret$1;
    var tmp_0 = this;
    var tmp$ret$4;
    // Inline function 'kotlin.run' call
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$3;
    // Inline function 'androidx.compose.runtime.Pending.groupInfos.<anonymous>' call
    var runningNodeIndex = 0;
    var tmp$ret$2;
    // Inline function 'kotlin.collections.hashMapOf' call
    tmp$ret$2 = HashMap_init_$Create$();
    var result = tmp$ret$2;
    var inductionVariable = 0;
    var last = this.py_1.g();
    if (inductionVariable < last)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var keyInfo = this.py_1.h(index);
        // Inline function 'kotlin.collections.set' call
        var tmp0_set = keyInfo.fz_1;
        var tmp1_set = new GroupInfo(index, runningNodeIndex, keyInfo.gz_1);
        result.a(tmp0_set, tmp1_set);
        runningNodeIndex = runningNodeIndex + keyInfo.gz_1 | 0;
      }
       while (inductionVariable < last);
    tmp$ret$3 = result;
    tmp$ret$4 = tmp$ret$3;
    tmp_0.ty_1 = tmp$ret$4;
    var tmp_1 = this;
    tmp_1.uy_1 = lazy(Pending$keyMap$delegate$lambda(this));
  }
  Pending.prototype.c15 = function () {
    return this.py_1;
  };
  Pending.prototype.d15 = function () {
    return this.qy_1;
  };
  Pending.prototype.e15 = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = keyMap$factory();
    tmp$ret$0 = this.uy_1.a2();
    return tmp$ret$0;
  };
  Pending.prototype.az = function (key, dataKey) {
    var joinedKey = !(dataKey == null) ? new JoinedKey(key, dataKey) : key;
    return pop(this.e15(), joinedKey);
  };
  Pending.prototype.wy = function (keyInfo) {
    return this.sy_1.b(keyInfo);
  };
  Pending.prototype.oz = function () {
    return this.sy_1;
  };
  Pending.prototype.kz = function (from, to) {
    if (from > to) {
      // Inline function 'kotlin.collections.forEach' call
      var tmp0_forEach = this.ty_1.x7();
      var tmp0_iterator = tmp0_forEach.d();
      while (tmp0_iterator.e()) {
        var element = tmp0_iterator.f();
        // Inline function 'androidx.compose.runtime.Pending.registerMoveSlot.<anonymous>' call
        var position = element.f15_1;
        if (position === from)
          element.f15_1 = to;
        else if (to <= position ? position < from : false)
          element.f15_1 = position + 1 | 0;
      }
    } else if (to > from) {
      // Inline function 'kotlin.collections.forEach' call
      var tmp1_forEach = this.ty_1.x7();
      var tmp0_iterator_0 = tmp1_forEach.d();
      while (tmp0_iterator_0.e()) {
        var element_0 = tmp0_iterator_0.f();
        // Inline function 'androidx.compose.runtime.Pending.registerMoveSlot.<anonymous>' call
        var position_0 = element_0.f15_1;
        if (position_0 === from)
          element_0.f15_1 = to;
        else if ((from + 1 | 0) <= position_0 ? position_0 < to : false)
          element_0.f15_1 = position_0 - 1 | 0;
      }
    }
  };
  Pending.prototype.sz = function (from, to, count) {
    if (from > to) {
      // Inline function 'kotlin.collections.forEach' call
      var tmp0_forEach = this.ty_1.x7();
      var tmp0_iterator = tmp0_forEach.d();
      while (tmp0_iterator.e()) {
        var element = tmp0_iterator.f();
        // Inline function 'androidx.compose.runtime.Pending.registerMoveNode.<anonymous>' call
        var position = element.g15_1;
        if (from <= position ? position < (from + count | 0) : false)
          element.g15_1 = to + (position - from | 0) | 0;
        else if (to <= position ? position < from : false)
          element.g15_1 = position + count | 0;
      }
    } else if (to > from) {
      // Inline function 'kotlin.collections.forEach' call
      var tmp1_forEach = this.ty_1.x7();
      var tmp0_iterator_0 = tmp1_forEach.d();
      while (tmp0_iterator_0.e()) {
        var element_0 = tmp0_iterator_0.f();
        // Inline function 'androidx.compose.runtime.Pending.registerMoveNode.<anonymous>' call
        var position_0 = element_0.g15_1;
        if (from <= position_0 ? position_0 < (from + count | 0) : false)
          element_0.g15_1 = to + (position_0 - from | 0) | 0;
        else if ((from + 1 | 0) <= position_0 ? position_0 < to : false)
          element_0.g15_1 = position_0 - count | 0;
      }
    }
  };
  Pending.prototype.vy = function (keyInfo, insertIndex) {
    // Inline function 'kotlin.collections.set' call
    var tmp0_set = this.ty_1;
    var tmp1_set = keyInfo.fz_1;
    var tmp2_set = new GroupInfo(-1, insertIndex, 0);
    tmp0_set.a(tmp1_set, tmp2_set);
  };
  Pending.prototype.pz = function (group, newCount) {
    var groupInfo = this.ty_1.l2(group);
    if (!(groupInfo == null)) {
      var index = groupInfo.g15_1;
      var difference = newCount - groupInfo.h15_1 | 0;
      groupInfo.h15_1 = newCount;
      if (!(difference === 0)) {
        // Inline function 'kotlin.collections.forEach' call
        var tmp0_forEach = this.ty_1.x7();
        var tmp0_iterator = tmp0_forEach.d();
        while (tmp0_iterator.e()) {
          var element = tmp0_iterator.f();
          // Inline function 'androidx.compose.runtime.Pending.updateNodeCount.<anonymous>' call
          if (element.g15_1 >= index ? !equals_0(element, groupInfo) : false) {
            var newIndex = element.g15_1 + difference | 0;
            if (newIndex >= 0)
              element.g15_1 = newIndex;
          }
        }
      }
      return true;
    }
    return false;
  };
  Pending.prototype.jz = function (keyInfo) {
    var tmp0_safe_receiver = this.ty_1.l2(keyInfo.fz_1);
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.f15_1;
    return tmp1_elvis_lhs == null ? -1 : tmp1_elvis_lhs;
  };
  Pending.prototype.iz = function (keyInfo) {
    var tmp0_safe_receiver = this.ty_1.l2(keyInfo.fz_1);
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.g15_1;
    return tmp1_elvis_lhs == null ? -1 : tmp1_elvis_lhs;
  };
  Pending.prototype.rz = function (keyInfo) {
    var tmp0_safe_receiver = this.ty_1.l2(keyInfo.fz_1);
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.h15_1;
    return tmp1_elvis_lhs == null ? keyInfo.gz_1 : tmp1_elvis_lhs;
  };
  Pending.$metadata$ = classMeta('Pending');
  function Invalidation(scope, location, instances) {
    this.a10_1 = scope;
    this.b10_1 = location;
    this.c10_1 = instances;
  }
  Invalidation.prototype.i15 = function () {
    return this.a10_1;
  };
  Invalidation.prototype.j15 = function () {
    return this.b10_1;
  };
  Invalidation.prototype.k15 = function () {
    return this.c10_1;
  };
  Invalidation.prototype.g10 = function () {
    return this.a10_1.l15(this.c10_1);
  };
  Invalidation.$metadata$ = classMeta('Invalidation');
  function asInt(_this__u8e3s4) {
    init_properties_Composer_kt_de8r5y();
    return _this__u8e3s4 ? 1 : 0;
  }
  function mutate(_this__u8e3s4, mutator) {
    init_properties_Composer_kt_de8r5y();
    var tmp$ret$0;
    // Inline function 'kotlin.apply' call
    var tmp0_apply = _this__u8e3s4.cy();
    // Inline function 'kotlin.contracts.contract' call
    mutator(tmp0_apply);
    tmp$ret$0 = tmp0_apply;
    return tmp$ret$0.dy();
  }
  function compositionLocalMapOf$composable(values, parentScope, $composer, $changed) {
    init_properties_Composer_kt_de8r5y();
    var $composer_0 = $composer;
    $composer_0.ks(692276709);
    sourceInformation($composer_0, 'C(compositionLocalMapOf$composable)P(1)*317@11596L24:Composer.kt#9igjgp');
    var result = persistentHashMapOf();
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.mutate' call
    var tmp$ret$0;
    // Inline function 'kotlin.apply' call
    var tmp0_apply = result.cy();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'androidx.compose.runtime.compositionLocalMapOf$composable.<anonymous>' call
    var indexedObject = values;
    var inductionVariable = 0;
    var last = indexedObject.length;
    while (inductionVariable < last) {
      var provided = indexedObject[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      if (provided.x14_1 ? true : !contains_4(parentScope, provided.v14_1)) {
        // Inline function 'kotlin.collections.set' call
        var tmp = provided.v14_1;
        var tmp0_set = tmp instanceof CompositionLocal ? tmp : THROW_CCE();
        var tmp1_set = provided.v14_1.m15(provided.w14_1, $composer_0, 0);
        tmp0_apply.a(tmp0_set, tmp1_set);
      }
    }
    tmp$ret$0 = tmp0_apply;
    tmp$ret$1 = tmp$ret$0.dy();
    var tmp1_group = tmp$ret$1;
    var tmp0 = tmp1_group;
    $composer_0.os();
    return tmp0;
  }
  function asBool(_this__u8e3s4) {
    init_properties_Composer_kt_de8r5y();
    return !(_this__u8e3s4 === 0);
  }
  function contains_4(_this__u8e3s4, key) {
    init_properties_Composer_kt_de8r5y();
    return _this__u8e3s4.h2(key instanceof CompositionLocal ? key : THROW_CCE());
  }
  function getValueOf(_this__u8e3s4, key) {
    init_properties_Composer_kt_de8r5y();
    var tmp0_safe_receiver = _this__u8e3s4.l2(key instanceof CompositionLocal ? key : THROW_CCE());
    var tmp = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.a2();
    return (tmp == null ? true : isObject(tmp)) ? tmp : THROW_CCE();
  }
  function removeRange(_this__u8e3s4, start, end) {
    init_properties_Composer_kt_de8r5y();
    var index = findInsertLocation(_this__u8e3s4, start);
    $l$loop: while (index < _this__u8e3s4.g()) {
      var validation = _this__u8e3s4.h(index);
      if (validation.b10_1 < end) {
        _this__u8e3s4.f3(index);
      } else
        break $l$loop;
    }
  }
  function firstInRange(_this__u8e3s4, start, end) {
    init_properties_Composer_kt_de8r5y();
    var index = findInsertLocation(_this__u8e3s4, start);
    if (index < _this__u8e3s4.g()) {
      var firstInvalidation = _this__u8e3s4.h(index);
      if (firstInvalidation.b10_1 < end)
        return firstInvalidation;
    }
    return null;
  }
  function removeLocation(_this__u8e3s4, location) {
    init_properties_Composer_kt_de8r5y();
    var index = findLocation(_this__u8e3s4, location);
    return index >= 0 ? _this__u8e3s4.f3(index) : null;
  }
  function nearestCommonRootOf(_this__u8e3s4, a, b, common) {
    init_properties_Composer_kt_de8r5y();
    if (a === b)
      return a;
    if (a === common ? true : b === common)
      return common;
    if (_this__u8e3s4.by(a) === b)
      return b;
    if (_this__u8e3s4.by(b) === a)
      return a;
    if (_this__u8e3s4.by(a) === _this__u8e3s4.by(b))
      return _this__u8e3s4.by(a);
    var currentA = a;
    var currentB = b;
    var aDistance = distanceFrom(_this__u8e3s4, a, common);
    var bDistance = distanceFrom(_this__u8e3s4, b, common);
    // Inline function 'kotlin.repeat' call
    var tmp0_repeat = aDistance - bDistance | 0;
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    if (inductionVariable < tmp0_repeat)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'androidx.compose.runtime.nearestCommonRootOf.<anonymous>' call
        currentA = _this__u8e3s4.by(currentA);
      }
       while (inductionVariable < tmp0_repeat);
    // Inline function 'kotlin.repeat' call
    var tmp1_repeat = bDistance - aDistance | 0;
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable_0 = 0;
    if (inductionVariable_0 < tmp1_repeat)
      do {
        var index_0 = inductionVariable_0;
        inductionVariable_0 = inductionVariable_0 + 1 | 0;
        // Inline function 'androidx.compose.runtime.nearestCommonRootOf.<anonymous>' call
        currentB = _this__u8e3s4.by(currentB);
      }
       while (inductionVariable_0 < tmp1_repeat);
    while (!(currentA === currentB)) {
      currentA = _this__u8e3s4.by(currentA);
      currentB = _this__u8e3s4.by(currentB);
    }
    return currentA;
  }
  function get_reuseKey() {
    return reuseKey;
  }
  var reuseKey;
  function insertIfMissing(_this__u8e3s4, location, scope, instance) {
    init_properties_Composer_kt_de8r5y();
    var index = findLocation(_this__u8e3s4, location);
    if (index < 0) {
      var tmp = -(index + 1 | 0) | 0;
      var tmp0_safe_receiver = instance;
      var tmp_0;
      if (tmp0_safe_receiver == null) {
        tmp_0 = null;
      } else {
        var tmp$ret$2;
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        var tmp$ret$1;
        // Inline function 'androidx.compose.runtime.insertIfMissing.<anonymous>' call
        var tmp$ret$0;
        // Inline function 'kotlin.also' call
        var tmp0_also = new IdentityArraySet();
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'androidx.compose.runtime.insertIfMissing.<anonymous>.<anonymous>' call
        tmp0_also.p15(tmp0_safe_receiver);
        tmp$ret$0 = tmp0_also;
        tmp$ret$1 = tmp$ret$0;
        tmp$ret$2 = tmp$ret$1;
        tmp_0 = tmp$ret$2;
      }
      _this__u8e3s4.d7(tmp, new Invalidation(scope, location, tmp_0));
    } else {
      if (instance == null) {
        _this__u8e3s4.h(index).c10_1 = null;
      } else {
        var tmp1_safe_receiver = _this__u8e3s4.h(index).c10_1;
        if (tmp1_safe_receiver == null)
          null;
        else
          tmp1_safe_receiver.p15(instance);
      }
    }
  }
  function collectNodesFrom(_this__u8e3s4, anchor) {
    init_properties_Composer_kt_de8r5y();
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$0 = ArrayList_init_$Create$();
    var result = tmp$ret$0;
    var tmp$ret$3;
    // Inline function 'androidx.compose.runtime.SlotTable.read' call
    var tmp$ret$2;
    // Inline function 'kotlin.let' call
    var tmp0_let = _this__u8e3s4.zw();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.SlotTable.read.<anonymous>' call
    var tmp;
    try {
      var index = _this__u8e3s4.p11(anchor);
      collectNodesFrom$collectFromGroup(tmp0_let, result, index);
      tmp = Unit_getInstance();
    }finally {
      tmp0_let.vx();
    }
    tmp$ret$1 = tmp;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    return result;
  }
  function composeRuntimeError(message) {
    init_properties_Composer_kt_de8r5y();
    // Inline function 'kotlin.error' call
    var tmp0_error = 'Compose Runtime internal error. Unexpected or incorrect use of the Compose ' + ('internal runtime API (' + message + '). Please report to Google or use ') + 'https://goo.gle/compose-feedback';
    throw IllegalStateException_init_$Create$_0(toString_2(tmp0_error));
  }
  function filterToRange(_this__u8e3s4, start, end) {
    init_properties_Composer_kt_de8r5y();
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$0 = ArrayList_init_$Create$();
    var result = tmp$ret$0;
    var index = findInsertLocation(_this__u8e3s4, start);
    $l$loop: while (index < _this__u8e3s4.g()) {
      var invalidation = _this__u8e3s4.h(index);
      if (invalidation.b10_1 < end) {
        result.b(invalidation);
      } else
        break $l$loop;
      var tmp0 = index;
      index = tmp0 + 1 | 0;
    }
    return result;
  }
  function GroupInfo(slotIndex, nodeIndex, nodeCount) {
    this.f15_1 = slotIndex;
    this.g15_1 = nodeIndex;
    this.h15_1 = nodeCount;
  }
  GroupInfo.prototype.q15 = function (_set____db54di) {
    this.f15_1 = _set____db54di;
  };
  GroupInfo.prototype.r15 = function () {
    return this.f15_1;
  };
  GroupInfo.prototype.s15 = function (_set____db54di) {
    this.g15_1 = _set____db54di;
  };
  GroupInfo.prototype.t15 = function () {
    return this.g15_1;
  };
  GroupInfo.$metadata$ = classMeta('GroupInfo');
  function put(_this__u8e3s4, key, value) {
    init_properties_Composer_kt_de8r5y();
    var tmp$ret$1;
    // Inline function 'kotlin.collections.getOrPut' call
    var value_0 = _this__u8e3s4.l2(key);
    var tmp;
    if (value_0 == null) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.put.<anonymous>' call
      tmp$ret$0 = LinkedHashSet_init_$Create$();
      var answer = tmp$ret$0;
      _this__u8e3s4.a(key, answer);
      tmp = answer;
    } else {
      tmp = value_0;
    }
    tmp$ret$1 = tmp;
    return tmp$ret$1.b(value);
  }
  function get_joinedKey(_this__u8e3s4) {
    init_properties_Composer_kt_de8r5y();
    return !(_this__u8e3s4.ez_1 == null) ? new JoinedKey(_this__u8e3s4.dz_1, _this__u8e3s4.ez_1) : _this__u8e3s4.dz_1;
  }
  function multiMap() {
    init_properties_Composer_kt_de8r5y();
    return HashMap_init_$Create$();
  }
  function pop(_this__u8e3s4, key) {
    init_properties_Composer_kt_de8r5y();
    var tmp0_safe_receiver = _this__u8e3s4.l2(key);
    var tmp1_safe_receiver = tmp0_safe_receiver == null ? null : firstOrNull_1(tmp0_safe_receiver);
    var tmp;
    if (tmp1_safe_receiver == null) {
      tmp = null;
    } else {
      var tmp$ret$0;
      // Inline function 'kotlin.also' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'androidx.compose.runtime.pop.<anonymous>' call
      remove_1(_this__u8e3s4, key, tmp1_safe_receiver);
      tmp$ret$0 = tmp1_safe_receiver;
      tmp = tmp$ret$0;
    }
    return tmp;
  }
  function findInsertLocation(_this__u8e3s4, location) {
    init_properties_Composer_kt_de8r5y();
    var tmp$ret$1;
    // Inline function 'kotlin.let' call
    var tmp0_let = findLocation(_this__u8e3s4, location);
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.findInsertLocation.<anonymous>' call
    tmp$ret$0 = tmp0_let < 0 ? -(tmp0_let + 1 | 0) | 0 : tmp0_let;
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  }
  function findLocation(_this__u8e3s4, location) {
    init_properties_Composer_kt_de8r5y();
    var low = 0;
    var high = _this__u8e3s4.g() - 1 | 0;
    while (low <= high) {
      var mid = (low + high | 0) >>> 1 | 0;
      var midVal = _this__u8e3s4.h(mid);
      var cmp = compareTo_0(midVal.b10_1, location);
      if (cmp < 0)
        low = mid + 1 | 0;
      else if (cmp > 0)
        high = mid - 1 | 0;
      else
        return mid;
    }
    return -(low + 1 | 0) | 0;
  }
  function distanceFrom(_this__u8e3s4, index, root) {
    init_properties_Composer_kt_de8r5y();
    var count = 0;
    var current = index;
    while (current > 0 ? !(current === root) : false) {
      current = _this__u8e3s4.by(current);
      var tmp0 = count;
      count = tmp0 + 1 | 0;
    }
    return count;
  }
  function remove_1(_this__u8e3s4, key, value) {
    init_properties_Composer_kt_de8r5y();
    var tmp0_safe_receiver = _this__u8e3s4.l2(key);
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      var tmp$ret$0;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      tmp0_safe_receiver.n6(value);
      var tmp_0;
      if (tmp0_safe_receiver.i()) {
        _this__u8e3s4.z2(key);
        tmp_0 = Unit_getInstance();
      }
      tmp$ret$0 = tmp_0;
      tmp = Unit_getInstance();
    }
    return tmp;
  }
  function isTraceInProgress() {
    init_properties_Composer_kt_de8r5y();
    var tmp$ret$1;
    // Inline function 'kotlin.let' call
    var tmp0_let = get_compositionTracer();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.isTraceInProgress.<anonymous>' call
    tmp$ret$0 = !(tmp0_let == null) ? tmp0_let.u15() : false;
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  }
  function traceEventStart(key, dirty1, dirty2, info) {
    init_properties_Composer_kt_de8r5y();
    var tmp0_safe_receiver = get_compositionTracer();
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      tmp0_safe_receiver.v15(key, dirty1, dirty2, info);
      tmp = Unit_getInstance();
    }
    var tmp1_elvis_lhs = tmp;
    var tmp_0;
    if (tmp1_elvis_lhs == null) {
      tmp_0 = Unit_getInstance();
    } else {
      tmp_0 = Unit_getInstance();
    }
    return tmp_0;
  }
  function traceEventEnd() {
    init_properties_Composer_kt_de8r5y();
    var tmp0_safe_receiver = get_compositionTracer();
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      tmp0_safe_receiver.w15();
      tmp = Unit_getInstance();
    }
    var tmp1_elvis_lhs = tmp;
    var tmp_0;
    if (tmp1_elvis_lhs == null) {
      tmp_0 = Unit_getInstance();
    } else {
      tmp_0 = Unit_getInstance();
    }
    return tmp_0;
  }
  function cache(_this__u8e3s4, invalid, block) {
    init_properties_Composer_kt_de8r5y();
    var tmp$ret$1;
    // Inline function 'kotlin.let' call
    var tmp0_let = _this__u8e3s4.ls();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
    var tmp;
    if (invalid ? true : tmp0_let === Companion_getInstance_8().ns_1) {
      var value = block();
      _this__u8e3s4.ms(value);
      tmp = value;
    } else {
      tmp = tmp0_let;
    }
    tmp$ret$0 = tmp;
    tmp$ret$1 = tmp$ret$0;
    var tmp_0 = tmp$ret$1;
    return (tmp_0 == null ? true : isObject(tmp_0)) ? tmp_0 : THROW_CCE();
  }
  function _Updater___init__impl__rbfxm8(composer) {
    return composer;
  }
  function _Updater___get_composer__impl__9ty7av($this) {
    return $this;
  }
  function Updater__set_impl_v7kwss($this, value, block) {
    var tmp$ret$0;
    // Inline function 'kotlin.with' call
    var tmp0_with = _Updater___get_composer__impl__9ty7av($this);
    // Inline function 'kotlin.contracts.contract' call
    var tmp;
    if (tmp0_with.k13() ? true : !equals_0(tmp0_with.ls(), value)) {
      tmp0_with.ms(value);
      _Updater___get_composer__impl__9ty7av($this).q13(value, block);
      tmp = Unit_getInstance();
    }
    tmp$ret$0 = tmp;
    return tmp$ret$0;
  }
  function Updater__toString_impl_xbgnns($this) {
    return 'Updater(composer=' + $this + ')';
  }
  function Updater__hashCode_impl_fyhhih($this) {
    return hashCode_0($this);
  }
  function Updater__equals_impl_pu56kb($this, other) {
    if (!(other instanceof Updater))
      return false;
    var tmp0_other_with_cast = other instanceof Updater ? other.x15_1 : THROW_CCE();
    if (!equals_0($this, tmp0_other_with_cast))
      return false;
    return true;
  }
  function Updater(composer) {
    this.x15_1 = composer;
  }
  Updater.prototype.toString = function () {
    return Updater__toString_impl_xbgnns(this.x15_1);
  };
  Updater.prototype.hashCode = function () {
    return Updater__hashCode_impl_fyhhih(this.x15_1);
  };
  Updater.prototype.equals = function (other) {
    return Updater__equals_impl_pu56kb(this.x15_1, other);
  };
  Updater.$metadata$ = classMeta('Updater');
  function _SkippableUpdater___init__impl__4ft0t9(composer) {
    return composer;
  }
  function _SkippableUpdater___get_composer__impl__6t7yne($this) {
    return $this;
  }
  function SkippableUpdater__update_impl_yrdzqy($this, block) {
    _SkippableUpdater___get_composer__impl__6t7yne($this).ks(509942095);
    block(new Updater(_Updater___init__impl__rbfxm8(_SkippableUpdater___get_composer__impl__6t7yne($this))));
    _SkippableUpdater___get_composer__impl__6t7yne($this).os();
  }
  function SkippableUpdater__toString_impl_9wisn1($this) {
    return 'SkippableUpdater(composer=' + $this + ')';
  }
  function SkippableUpdater__hashCode_impl_vnopfw($this) {
    return hashCode_0($this);
  }
  function SkippableUpdater__equals_impl_vm8qds($this, other) {
    if (!(other instanceof SkippableUpdater))
      return false;
    var tmp0_other_with_cast = other instanceof SkippableUpdater ? other.y15_1 : THROW_CCE();
    if (!equals_0($this, tmp0_other_with_cast))
      return false;
    return true;
  }
  function SkippableUpdater(composer) {
    this.y15_1 = composer;
  }
  SkippableUpdater.prototype.toString = function () {
    return SkippableUpdater__toString_impl_9wisn1(this.y15_1);
  };
  SkippableUpdater.prototype.hashCode = function () {
    return SkippableUpdater__hashCode_impl_vnopfw(this.y15_1);
  };
  SkippableUpdater.prototype.equals = function (other) {
    return SkippableUpdater__equals_impl_vm8qds(this.y15_1, other);
  };
  SkippableUpdater.$metadata$ = classMeta('SkippableUpdater');
  function collectNodesFrom$collectFromGroup(tmp0_let, result, group) {
    if (tmp0_let.i10(group)) {
      result.b(tmp0_let.v10(group));
    } else {
      var current = group + 1 | 0;
      var end = group + tmp0_let.qz(group) | 0;
      while (current < end) {
        collectNodesFrom$collectFromGroup(tmp0_let, result, current);
        current = current + tmp0_let.qz(current) | 0;
      }
    }
  }
  function removeCurrentGroupInstance$lambda(_anonymous_parameter_0__qggqh8, slots, rememberManager) {
    init_properties_Composer_kt_de8r5y();
    removeCurrentGroup(slots, rememberManager);
    return Unit_getInstance();
  }
  function skipToGroupEndInstance$lambda(_anonymous_parameter_0__qggqh8, slots, _anonymous_parameter_2__qggqfi) {
    init_properties_Composer_kt_de8r5y();
    slots.hy();
    return Unit_getInstance();
  }
  function endGroupInstance$lambda(_anonymous_parameter_0__qggqh8, slots, _anonymous_parameter_2__qggqfi) {
    init_properties_Composer_kt_de8r5y();
    slots.xz();
    return Unit_getInstance();
  }
  function startRootGroup$lambda(_anonymous_parameter_0__qggqh8, slots, _anonymous_parameter_2__qggqfi) {
    init_properties_Composer_kt_de8r5y();
    slots.z15(0);
    return Unit_getInstance();
  }
  function resetSlotsInstance$lambda(_anonymous_parameter_0__qggqh8, slots, _anonymous_parameter_2__qggqfi) {
    init_properties_Composer_kt_de8r5y();
    slots.a16();
    return Unit_getInstance();
  }
  function InvalidationResult_IGNORED_getInstance() {
    InvalidationResult_initEntries();
    return InvalidationResult_IGNORED_instance;
  }
  function InvalidationResult_SCHEDULED_getInstance() {
    InvalidationResult_initEntries();
    return InvalidationResult_SCHEDULED_instance;
  }
  function InvalidationResult_DEFERRED_getInstance() {
    InvalidationResult_initEntries();
    return InvalidationResult_DEFERRED_instance;
  }
  function InvalidationResult_IMMINENT_getInstance() {
    InvalidationResult_initEntries();
    return InvalidationResult_IMMINENT_instance;
  }
  function keyMap$factory() {
    return getPropertyCallableRef('keyMap', 1, KProperty1, function (receiver) {
      return receiver.e15();
    }, null);
  }
  var properties_initialized_Composer_kt_89qzc2;
  function init_properties_Composer_kt_de8r5y() {
    if (properties_initialized_Composer_kt_89qzc2) {
    } else {
      properties_initialized_Composer_kt_89qzc2 = true;
      compositionTracer = null;
      removeCurrentGroupInstance = removeCurrentGroupInstance$lambda;
      skipToGroupEndInstance = skipToGroupEndInstance$lambda;
      endGroupInstance = endGroupInstance$lambda;
      startRootGroup = startRootGroup$lambda;
      resetSlotsInstance = resetSlotsInstance$lambda;
      invocation = new OpaqueKey('provider');
      provider = new OpaqueKey('provider');
      compositionLocalMap = new OpaqueKey('compositionLocalMap');
      providerValues = new OpaqueKey('providerValues');
      providerMaps = new OpaqueKey('providers');
      reference = new OpaqueKey('reference');
    }
  }
  function get_PendingApplyNoModifications() {
    init_properties_Composition_kt_ckysay();
    return PendingApplyNoModifications;
  }
  var PendingApplyNoModifications;
  function CompositionImpl_init_$Init$(parent, applier, recomposeContext, $mask0, $marker, $this) {
    if (!(($mask0 & 4) === 0))
      recomposeContext = null;
    CompositionImpl.call($this, parent, applier, recomposeContext);
    return $this;
  }
  function CompositionImpl_init_$Create$(parent, applier, recomposeContext, $mask0, $marker) {
    return CompositionImpl_init_$Init$(parent, applier, recomposeContext, $mask0, $marker, Object.create(CompositionImpl.prototype));
  }
  function _get_areChildrenComposing__c1uwup($this) {
    return $this.lu_1.a13();
  }
  function drainPendingModificationsForCompositionLocked($this) {
    var toRecord = $this.xt_1.d16(get_PendingApplyNoModifications());
    if (toRecord == null) {
    } else {
      if (equals_0(toRecord, get_PendingApplyNoModifications())) {
        // Inline function 'kotlin.error' call
        throw IllegalStateException_init_$Create$_0('pending composition has not been applied');
      } else {
        if (!(toRecord == null) ? isInterface(toRecord, Set) : false) {
          addPendingInvalidationsLocked($this, (!(toRecord == null) ? isInterface(toRecord, Set) : false) ? toRecord : THROW_CCE(), true);
        } else {
          if (!(toRecord == null) ? isArray(toRecord) : false) {
            var indexedObject = (!(toRecord == null) ? isArray(toRecord) : false) ? toRecord : THROW_CCE();
            var inductionVariable = 0;
            var last = indexedObject.length;
            while (inductionVariable < last) {
              var changed = indexedObject[inductionVariable];
              inductionVariable = inductionVariable + 1 | 0;
              addPendingInvalidationsLocked($this, changed, true);
            }
          } else {
            var tmp0_error = 'corrupt pendingModifications drain: ' + $this.xt_1;
            throw IllegalStateException_init_$Create$_0(toString_2(tmp0_error));
          }
        }
      }
    }
  }
  function drainPendingModificationsLocked($this) {
    var toRecord = $this.xt_1.d16(null);
    if (equals_0(toRecord, get_PendingApplyNoModifications())) {
    } else {
      if (!(toRecord == null) ? isInterface(toRecord, Set) : false) {
        addPendingInvalidationsLocked($this, (!(toRecord == null) ? isInterface(toRecord, Set) : false) ? toRecord : THROW_CCE(), false);
      } else {
        if (!(toRecord == null) ? isArray(toRecord) : false) {
          var indexedObject = (!(toRecord == null) ? isArray(toRecord) : false) ? toRecord : THROW_CCE();
          var inductionVariable = 0;
          var last = indexedObject.length;
          while (inductionVariable < last) {
            var changed = indexedObject[inductionVariable];
            inductionVariable = inductionVariable + 1 | 0;
            addPendingInvalidationsLocked($this, changed, false);
          }
        } else {
          if (toRecord == null) {
            // Inline function 'kotlin.error' call
            throw IllegalStateException_init_$Create$_0('calling recordModificationsOf and applyChanges concurrently is not supported');
          } else {
            var tmp0_error = 'corrupt pendingModifications drain: ' + $this.xt_1;
            throw IllegalStateException_init_$Create$_0(toString_2(tmp0_error));
          }
        }
      }
    }
  }
  function addPendingInvalidationsLocked($this, values, forgetConditionalScopes) {
    var invalidated = {_v: null};
    var tmp0_iterator = values.d();
    while (tmp0_iterator.e()) {
      var value = tmp0_iterator.f();
      if (value instanceof RecomposeScopeImpl) {
        value.e16(null);
      } else {
        addPendingInvalidationsLocked$invalidate($this, forgetConditionalScopes, invalidated, value);
        // Inline function 'androidx.compose.runtime.collection.IdentityScopeMap.forEachScopeOf' call
        var tmp1_forEachScopeOf = $this.du_1;
        var index = find_2(tmp1_forEachScopeOf, value);
        if (index >= 0) {
          // Inline function 'kotlin.collections.forEach' call
          var tmp0_forEach = scopeSetAt(tmp1_forEachScopeOf, index);
          var tmp0_iterator_0 = tmp0_forEach.d();
          while (tmp0_iterator_0.e()) {
            var element = tmp0_iterator_0.f();
            // Inline function 'androidx.compose.runtime.CompositionImpl.addPendingInvalidationsLocked.<anonymous>' call
            addPendingInvalidationsLocked$invalidate($this, forgetConditionalScopes, invalidated, element);
          }
        }
      }
    }
    var tmp;
    if (forgetConditionalScopes) {
      var tmp$ret$0;
      // Inline function 'kotlin.collections.isNotEmpty' call
      var tmp2_isNotEmpty = $this.cu_1;
      tmp$ret$0 = !tmp2_isNotEmpty.i();
      tmp = tmp$ret$0;
    } else {
      tmp = false;
    }
    if (tmp) {
      // Inline function 'androidx.compose.runtime.collection.IdentityScopeMap.removeValueIf' call
      var tmp3_removeValueIf = $this.bu_1;
      // Inline function 'androidx.compose.runtime.collection.IdentityScopeMap.removingScopes' call
      var destinationIndex = 0;
      var inductionVariable = 0;
      var last = tmp3_removeValueIf.i16_1;
      if (inductionVariable < last)
        do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var valueIndex = tmp3_removeValueIf.f16_1[i];
          var set = ensureNotNull(tmp3_removeValueIf.h16_1[valueIndex]);
          // Inline function 'androidx.compose.runtime.collection.IdentityScopeMap.removeValueIf.<anonymous>' call
          // Inline function 'androidx.compose.runtime.collection.IdentityArraySet.removeValueIf' call
          var destinationIndex_0 = 0;
          var inductionVariable_0 = 0;
          var last_0 = set.n15_1;
          if (inductionVariable_0 < last_0)
            do {
              var i_0 = inductionVariable_0;
              inductionVariable_0 = inductionVariable_0 + 1 | 0;
              var tmp_0 = set.o15_1[i_0];
              var item = isObject(tmp_0) ? tmp_0 : THROW_CCE();
              var tmp$ret$3;
              // Inline function 'androidx.compose.runtime.CompositionImpl.addPendingInvalidationsLocked.<anonymous>' call
              var tmp_1;
              if ($this.cu_1.j(item)) {
                tmp_1 = true;
              } else {
                var tmp0_safe_receiver = invalidated._v;
                var tmp_2;
                if (tmp0_safe_receiver == null) {
                  tmp_2 = null;
                } else {
                  var tmp$ret$2;
                  // Inline function 'kotlin.let' call
                  // Inline function 'kotlin.contracts.contract' call
                  var tmp$ret$1;
                  // Inline function 'androidx.compose.runtime.CompositionImpl.addPendingInvalidationsLocked.<anonymous>.<anonymous>' call
                  tmp$ret$1 = tmp0_safe_receiver.j(item);
                  tmp$ret$2 = tmp$ret$1;
                  tmp_2 = tmp$ret$2;
                }
                tmp_1 = tmp_2 === true;
              }
              tmp$ret$3 = tmp_1;
              if (!tmp$ret$3) {
                if (!(destinationIndex_0 === i_0)) {
                  set.o15_1[destinationIndex_0] = item;
                }
                var tmp1 = destinationIndex_0;
                destinationIndex_0 = tmp1 + 1 | 0;
              }
            }
             while (inductionVariable_0 < last_0);
          var inductionVariable_1 = destinationIndex_0;
          var last_1 = set.n15_1;
          if (inductionVariable_1 < last_1)
            do {
              var i_1 = inductionVariable_1;
              inductionVariable_1 = inductionVariable_1 + 1 | 0;
              set.o15_1[i_1] = null;
            }
             while (inductionVariable_1 < last_1);
          set.n15_1 = destinationIndex_0;
          if (set.n15_1 > 0) {
            if (!(destinationIndex === i)) {
              var destinationKeyOrder = tmp3_removeValueIf.f16_1[destinationIndex];
              tmp3_removeValueIf.f16_1[destinationIndex] = valueIndex;
              tmp3_removeValueIf.f16_1[i] = destinationKeyOrder;
            }
            var tmp1_0 = destinationIndex;
            destinationIndex = tmp1_0 + 1 | 0;
          }
        }
         while (inductionVariable < last);
      var inductionVariable_2 = destinationIndex;
      var last_2 = tmp3_removeValueIf.i16_1;
      if (inductionVariable_2 < last_2)
        do {
          var i_2 = inductionVariable_2;
          inductionVariable_2 = inductionVariable_2 + 1 | 0;
          tmp3_removeValueIf.g16_1[tmp3_removeValueIf.f16_1[i_2]] = null;
        }
         while (inductionVariable_2 < last_2);
      tmp3_removeValueIf.i16_1 = destinationIndex;
      cleanUpDerivedStateObservations($this);
      $this.cu_1.q6();
    } else {
      var tmp1_safe_receiver = invalidated._v;
      if (tmp1_safe_receiver == null)
        null;
      else {
        var tmp$ret$5;
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'androidx.compose.runtime.collection.IdentityScopeMap.removeValueIf' call
        var tmp0_removeValueIf = $this.bu_1;
        // Inline function 'androidx.compose.runtime.collection.IdentityScopeMap.removingScopes' call
        var destinationIndex_1 = 0;
        var inductionVariable_3 = 0;
        var last_3 = tmp0_removeValueIf.i16_1;
        if (inductionVariable_3 < last_3)
          do {
            var i_3 = inductionVariable_3;
            inductionVariable_3 = inductionVariable_3 + 1 | 0;
            var valueIndex_0 = tmp0_removeValueIf.f16_1[i_3];
            var set_0 = ensureNotNull(tmp0_removeValueIf.h16_1[valueIndex_0]);
            // Inline function 'androidx.compose.runtime.collection.IdentityScopeMap.removeValueIf.<anonymous>' call
            // Inline function 'androidx.compose.runtime.collection.IdentityArraySet.removeValueIf' call
            var destinationIndex_2 = 0;
            var inductionVariable_4 = 0;
            var last_4 = set_0.n15_1;
            if (inductionVariable_4 < last_4)
              do {
                var i_4 = inductionVariable_4;
                inductionVariable_4 = inductionVariable_4 + 1 | 0;
                var tmp_3 = set_0.o15_1[i_4];
                var item_0 = isObject(tmp_3) ? tmp_3 : THROW_CCE();
                var tmp$ret$4;
                // Inline function 'androidx.compose.runtime.CompositionImpl.addPendingInvalidationsLocked.<anonymous>.<anonymous>' call
                tmp$ret$4 = tmp1_safe_receiver.j(item_0);
                if (!tmp$ret$4) {
                  if (!(destinationIndex_2 === i_4)) {
                    set_0.o15_1[destinationIndex_2] = item_0;
                  }
                  var tmp1_1 = destinationIndex_2;
                  destinationIndex_2 = tmp1_1 + 1 | 0;
                }
              }
               while (inductionVariable_4 < last_4);
            var inductionVariable_5 = destinationIndex_2;
            var last_5 = set_0.n15_1;
            if (inductionVariable_5 < last_5)
              do {
                var i_5 = inductionVariable_5;
                inductionVariable_5 = inductionVariable_5 + 1 | 0;
                set_0.o15_1[i_5] = null;
              }
               while (inductionVariable_5 < last_5);
            set_0.n15_1 = destinationIndex_2;
            if (set_0.n15_1 > 0) {
              if (!(destinationIndex_1 === i_3)) {
                var destinationKeyOrder_0 = tmp0_removeValueIf.f16_1[destinationIndex_1];
                tmp0_removeValueIf.f16_1[destinationIndex_1] = valueIndex_0;
                tmp0_removeValueIf.f16_1[i_3] = destinationKeyOrder_0;
              }
              var tmp1_2 = destinationIndex_1;
              destinationIndex_1 = tmp1_2 + 1 | 0;
            }
          }
           while (inductionVariable_3 < last_3);
        var inductionVariable_6 = destinationIndex_1;
        var last_6 = tmp0_removeValueIf.i16_1;
        if (inductionVariable_6 < last_6)
          do {
            var i_6 = inductionVariable_6;
            inductionVariable_6 = inductionVariable_6 + 1 | 0;
            tmp0_removeValueIf.g16_1[tmp0_removeValueIf.f16_1[i_6]] = null;
          }
           while (inductionVariable_6 < last_6);
        tmp0_removeValueIf.i16_1 = destinationIndex_1;
        cleanUpDerivedStateObservations($this);
        tmp$ret$5 = Unit_getInstance();
      }
    }
  }
  function cleanUpDerivedStateObservations($this) {
    // Inline function 'androidx.compose.runtime.collection.IdentityScopeMap.removeValueIf' call
    var tmp0_removeValueIf = $this.du_1;
    // Inline function 'androidx.compose.runtime.collection.IdentityScopeMap.removingScopes' call
    var destinationIndex = 0;
    var inductionVariable = 0;
    var last = tmp0_removeValueIf.i16_1;
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var valueIndex = tmp0_removeValueIf.f16_1[i];
        var set = ensureNotNull(tmp0_removeValueIf.h16_1[valueIndex]);
        // Inline function 'androidx.compose.runtime.collection.IdentityScopeMap.removeValueIf.<anonymous>' call
        // Inline function 'androidx.compose.runtime.collection.IdentityArraySet.removeValueIf' call
        var destinationIndex_0 = 0;
        var inductionVariable_0 = 0;
        var last_0 = set.n15_1;
        if (inductionVariable_0 < last_0)
          do {
            var i_0 = inductionVariable_0;
            inductionVariable_0 = inductionVariable_0 + 1 | 0;
            var tmp = set.o15_1[i_0];
            var item = isObject(tmp) ? tmp : THROW_CCE();
            var tmp$ret$0;
            // Inline function 'androidx.compose.runtime.CompositionImpl.cleanUpDerivedStateObservations.<anonymous>' call
            tmp$ret$0 = !$this.bu_1.j16(item);
            if (!tmp$ret$0) {
              if (!(destinationIndex_0 === i_0)) {
                set.o15_1[destinationIndex_0] = item;
              }
              var tmp1 = destinationIndex_0;
              destinationIndex_0 = tmp1 + 1 | 0;
            }
          }
           while (inductionVariable_0 < last_0);
        var inductionVariable_1 = destinationIndex_0;
        var last_1 = set.n15_1;
        if (inductionVariable_1 < last_1)
          do {
            var i_1 = inductionVariable_1;
            inductionVariable_1 = inductionVariable_1 + 1 | 0;
            set.o15_1[i_1] = null;
          }
           while (inductionVariable_1 < last_1);
        set.n15_1 = destinationIndex_0;
        if (set.n15_1 > 0) {
          if (!(destinationIndex === i)) {
            var destinationKeyOrder = tmp0_removeValueIf.f16_1[destinationIndex];
            tmp0_removeValueIf.f16_1[destinationIndex] = valueIndex;
            tmp0_removeValueIf.f16_1[i] = destinationKeyOrder;
          }
          var tmp1_0 = destinationIndex;
          destinationIndex = tmp1_0 + 1 | 0;
        }
      }
       while (inductionVariable < last);
    var inductionVariable_2 = destinationIndex;
    var last_2 = tmp0_removeValueIf.i16_1;
    if (inductionVariable_2 < last_2)
      do {
        var i_2 = inductionVariable_2;
        inductionVariable_2 = inductionVariable_2 + 1 | 0;
        tmp0_removeValueIf.g16_1[tmp0_removeValueIf.f16_1[i_2]] = null;
      }
       while (inductionVariable_2 < last_2);
    tmp0_removeValueIf.i16_1 = destinationIndex;
    // Inline function 'androidx.compose.runtime.removeValueIf' call
    var tmp1_removeValueIf = $this.cu_1;
    var iter = tmp1_removeValueIf.d();
    while (iter.e()) {
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.CompositionImpl.cleanUpDerivedStateObservations.<anonymous>' call
      var tmp2__anonymous__z9zvc9 = iter.f();
      tmp$ret$1 = !tmp2__anonymous__z9zvc9.k16();
      if (tmp$ret$1) {
        iter.g3();
      }
    }
  }
  function invalidateScopeOfLocked($this, value) {
    // Inline function 'androidx.compose.runtime.collection.IdentityScopeMap.forEachScopeOf' call
    var tmp1_forEachScopeOf = $this.bu_1;
    var index = find_2(tmp1_forEachScopeOf, value);
    if (index >= 0) {
      // Inline function 'kotlin.collections.forEach' call
      var tmp0_forEach = scopeSetAt(tmp1_forEachScopeOf, index);
      var tmp0_iterator = tmp0_forEach.d();
      while (tmp0_iterator.e()) {
        var element = tmp0_iterator.f();
        // Inline function 'androidx.compose.runtime.CompositionImpl.invalidateScopeOfLocked.<anonymous>' call
        if (element.e16(value).equals(InvalidationResult_IMMINENT_getInstance())) {
          $this.gu_1.l16(value, element);
        }
      }
    }
  }
  function applyChangesInLocked($this, changes) {
    var manager = new RememberEventDispatcher($this.zt_1);
    try {
      if (changes.i())
        return Unit_getInstance();
      var tmp$ret$3;
      $l$block: {
        // Inline function 'androidx.compose.runtime.trace' call
        var token = Trace_getInstance().z10('Compose:applyChanges');
        try {
          $this.wt_1.gr();
          var tmp$ret$2;
          // Inline function 'androidx.compose.runtime.SlotTable.write' call
          var tmp1_write = $this.au_1;
          var tmp$ret$1;
          // Inline function 'kotlin.let' call
          var tmp0_let = tmp1_write.gy();
          // Inline function 'kotlin.contracts.contract' call
          var tmp$ret$0;
          // Inline function 'androidx.compose.runtime.SlotTable.write.<anonymous>' call
          var tmp;
          try {
            var applier = $this.wt_1;
            // Inline function 'androidx.compose.runtime.snapshots.fastForEach' call
            // Inline function 'kotlin.contracts.contract' call
            var inductionVariable = 0;
            var last = changes.g() - 1 | 0;
            if (inductionVariable <= last)
              do {
                var index = inductionVariable;
                inductionVariable = inductionVariable + 1 | 0;
                var item = changes.h(index);
                // Inline function 'androidx.compose.runtime.CompositionImpl.applyChangesInLocked.<anonymous>.<anonymous>.<anonymous>' call
                item(applier, tmp0_let, manager);
              }
               while (inductionVariable <= last);
            changes.q6();
            tmp = Unit_getInstance();
          }finally {
            tmp0_let.vx();
          }
          tmp$ret$0 = tmp;
          tmp$ret$1 = tmp$ret$0;
          tmp$ret$2 = tmp$ret$1;
          $this.wt_1.hr();
          tmp$ret$3 = Unit_getInstance();
          break $l$block;
        }finally {
          Trace_getInstance().l11(token);
        }
      }
      manager.q16();
      manager.r16();
      if ($this.iu_1) {
        var tmp$ret$5;
        $l$block_0: {
          // Inline function 'androidx.compose.runtime.trace' call
          var token_0 = Trace_getInstance().z10('Compose:unobserve');
          try {
            $this.iu_1 = false;
            // Inline function 'androidx.compose.runtime.collection.IdentityScopeMap.removeValueIf' call
            var tmp0_removeValueIf = $this.bu_1;
            // Inline function 'androidx.compose.runtime.collection.IdentityScopeMap.removingScopes' call
            var destinationIndex = 0;
            var inductionVariable_0 = 0;
            var last_0 = tmp0_removeValueIf.i16_1;
            if (inductionVariable_0 < last_0)
              do {
                var i = inductionVariable_0;
                inductionVariable_0 = inductionVariable_0 + 1 | 0;
                var valueIndex = tmp0_removeValueIf.f16_1[i];
                var set = ensureNotNull(tmp0_removeValueIf.h16_1[valueIndex]);
                // Inline function 'androidx.compose.runtime.collection.IdentityScopeMap.removeValueIf.<anonymous>' call
                // Inline function 'androidx.compose.runtime.collection.IdentityArraySet.removeValueIf' call
                var destinationIndex_0 = 0;
                var inductionVariable_1 = 0;
                var last_1 = set.n15_1;
                if (inductionVariable_1 < last_1)
                  do {
                    var i_0 = inductionVariable_1;
                    inductionVariable_1 = inductionVariable_1 + 1 | 0;
                    var tmp_0 = set.o15_1[i_0];
                    var item_0 = isObject(tmp_0) ? tmp_0 : THROW_CCE();
                    var tmp$ret$4;
                    // Inline function 'androidx.compose.runtime.CompositionImpl.applyChangesInLocked.<anonymous>.<anonymous>' call
                    tmp$ret$4 = !item_0.s16();
                    if (!tmp$ret$4) {
                      if (!(destinationIndex_0 === i_0)) {
                        set.o15_1[destinationIndex_0] = item_0;
                      }
                      var tmp1 = destinationIndex_0;
                      destinationIndex_0 = tmp1 + 1 | 0;
                    }
                  }
                   while (inductionVariable_1 < last_1);
                var inductionVariable_2 = destinationIndex_0;
                var last_2 = set.n15_1;
                if (inductionVariable_2 < last_2)
                  do {
                    var i_1 = inductionVariable_2;
                    inductionVariable_2 = inductionVariable_2 + 1 | 0;
                    set.o15_1[i_1] = null;
                  }
                   while (inductionVariable_2 < last_2);
                set.n15_1 = destinationIndex_0;
                if (set.n15_1 > 0) {
                  if (!(destinationIndex === i)) {
                    var destinationKeyOrder = tmp0_removeValueIf.f16_1[destinationIndex];
                    tmp0_removeValueIf.f16_1[destinationIndex] = valueIndex;
                    tmp0_removeValueIf.f16_1[i] = destinationKeyOrder;
                  }
                  var tmp1_0 = destinationIndex;
                  destinationIndex = tmp1_0 + 1 | 0;
                }
              }
               while (inductionVariable_0 < last_0);
            var inductionVariable_3 = destinationIndex;
            var last_3 = tmp0_removeValueIf.i16_1;
            if (inductionVariable_3 < last_3)
              do {
                var i_2 = inductionVariable_3;
                inductionVariable_3 = inductionVariable_3 + 1 | 0;
                tmp0_removeValueIf.g16_1[tmp0_removeValueIf.f16_1[i_2]] = null;
              }
               while (inductionVariable_3 < last_3);
            tmp0_removeValueIf.i16_1 = destinationIndex;
            cleanUpDerivedStateObservations($this);
            tmp$ret$5 = Unit_getInstance();
            break $l$block_0;
          }finally {
            Trace_getInstance().l11(token_0);
          }
        }
      }
    }finally {
      if ($this.fu_1.i()) {
        manager.t16();
      }
    }
  }
  function invalidateChecked($this, scope, anchor, instance) {
    var tmp$ret$4;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = $this.yt_1;
    var tmp$ret$3;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    var tmp$ret$2;
    // Inline function 'androidx.compose.runtime.CompositionImpl.invalidateChecked.<anonymous>' call
    var tmp0_safe_receiver = $this.ju_1;
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.CompositionImpl.invalidateChecked.<anonymous>.<anonymous>' call
      var tmp_0;
      if ($this.au_1.u16($this.ku_1, anchor)) {
        tmp_0 = tmp0_safe_receiver;
      } else {
        tmp_0 = null;
      }
      tmp$ret$0 = tmp_0;
      tmp$ret$1 = tmp$ret$0;
      tmp = tmp$ret$1;
    }
    var delegate = tmp;
    if (delegate == null) {
      if ($this.v16() ? $this.lu_1.t10(scope, instance) : false) {
        return InvalidationResult_IMMINENT_getInstance();
      }
      if (instance == null) {
        $this.hu_1.w16(scope, null);
      } else {
        addValue($this.hu_1, scope, instance);
      }
    }
    tmp$ret$2 = delegate;
    tmp$ret$3 = tmp$ret$2;
    tmp$ret$4 = tmp$ret$3;
    var delegate_0 = tmp$ret$4;
    if (!(delegate_0 == null)) {
      return invalidateChecked(delegate_0, scope, anchor, instance);
    }
    $this.vt_1.x16($this);
    return $this.v16() ? InvalidationResult_DEFERRED_getInstance() : InvalidationResult_SCHEDULED_getInstance();
  }
  function takeInvalidations($this) {
    var invalidations = $this.hu_1;
    var tmp = $this;
    tmp.hu_1 = IdentityArrayMap_init_$Create$(0, 1, null);
    return invalidations;
  }
  function RememberEventDispatcher(abandoning) {
    this.m16_1 = abandoning;
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$0 = ArrayList_init_$Create$();
    tmp.n16_1 = tmp$ret$0;
    var tmp_0 = this;
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$1 = ArrayList_init_$Create$();
    tmp_0.o16_1 = tmp$ret$1;
    var tmp_1 = this;
    var tmp$ret$2;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$2 = ArrayList_init_$Create$();
    tmp_1.p16_1 = tmp$ret$2;
  }
  RememberEventDispatcher.prototype.qs = function (instance) {
    var tmp$ret$1;
    // Inline function 'kotlin.let' call
    var tmp0_let = this.o16_1.w1(instance);
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.RememberEventDispatcher.remembering.<anonymous>' call
    var tmp;
    if (tmp0_let >= 0) {
      this.o16_1.f3(tmp0_let);
      tmp = this.m16_1.n6(instance);
    } else {
      tmp = this.n16_1.b(instance);
    }
    tmp$ret$0 = tmp;
    tmp$ret$1 = tmp$ret$0;
  };
  RememberEventDispatcher.prototype.rs = function (instance) {
    var tmp$ret$1;
    // Inline function 'kotlin.let' call
    var tmp0_let = this.n16_1.w1(instance);
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.RememberEventDispatcher.forgetting.<anonymous>' call
    var tmp;
    if (tmp0_let >= 0) {
      this.n16_1.f3(tmp0_let);
      tmp = this.m16_1.n6(instance);
    } else {
      tmp = this.o16_1.b(instance);
    }
    tmp$ret$0 = tmp;
    tmp$ret$1 = tmp$ret$0;
  };
  RememberEventDispatcher.prototype.q16 = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.isNotEmpty' call
    var tmp0_isNotEmpty = this.o16_1;
    tmp$ret$0 = !tmp0_isNotEmpty.i();
    if (tmp$ret$0) {
      var tmp$ret$1;
      $l$block: {
        // Inline function 'androidx.compose.runtime.trace' call
        var token = Trace_getInstance().z10('Compose:onForgotten');
        try {
          var inductionVariable = this.o16_1.g() - 1 | 0;
          var tmp;
          if (0 <= inductionVariable) {
            do {
              var i = inductionVariable;
              inductionVariable = inductionVariable + -1 | 0;
              var instance = this.o16_1.h(i);
              if (!this.m16_1.j(instance)) {
                instance.y16();
              }
            }
             while (0 <= inductionVariable);
            tmp = Unit_getInstance();
          }
          tmp$ret$1 = tmp;
          break $l$block;
        }finally {
          Trace_getInstance().l11(token);
        }
      }
    }
    var tmp$ret$2;
    // Inline function 'kotlin.collections.isNotEmpty' call
    var tmp1_isNotEmpty = this.n16_1;
    tmp$ret$2 = !tmp1_isNotEmpty.i();
    if (tmp$ret$2) {
      var tmp$ret$3;
      $l$block_0: {
        // Inline function 'androidx.compose.runtime.trace' call
        var token_0 = Trace_getInstance().z10('Compose:onRemembered');
        try {
          var tmp0_fastForEach = this.n16_1;
          // Inline function 'kotlin.contracts.contract' call
          var inductionVariable_0 = 0;
          var last = tmp0_fastForEach.g() - 1 | 0;
          var tmp_0;
          if (inductionVariable_0 <= last) {
            do {
              var index = inductionVariable_0;
              inductionVariable_0 = inductionVariable_0 + 1 | 0;
              var item = tmp0_fastForEach.h(index);
              // Inline function 'androidx.compose.runtime.RememberEventDispatcher.dispatchRememberObservers.<anonymous>.<anonymous>' call
              this.m16_1.n6(item);
              item.z16();
            }
             while (inductionVariable_0 <= last);
            tmp_0 = Unit_getInstance();
          }
          tmp$ret$3 = tmp_0;
          break $l$block_0;
        }finally {
          Trace_getInstance().l11(token_0);
        }
      }
    }
  };
  RememberEventDispatcher.prototype.r16 = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.isNotEmpty' call
    var tmp0_isNotEmpty = this.p16_1;
    tmp$ret$0 = !tmp0_isNotEmpty.i();
    if (tmp$ret$0) {
      var tmp$ret$1;
      $l$block: {
        // Inline function 'androidx.compose.runtime.trace' call
        var token = Trace_getInstance().z10('Compose:sideeffects');
        try {
          // Inline function 'androidx.compose.runtime.snapshots.fastForEach' call
          var tmp0_fastForEach = this.p16_1;
          // Inline function 'kotlin.contracts.contract' call
          var inductionVariable = 0;
          var last = tmp0_fastForEach.g() - 1 | 0;
          if (inductionVariable <= last)
            do {
              var index = inductionVariable;
              inductionVariable = inductionVariable + 1 | 0;
              var item = tmp0_fastForEach.h(index);
              // Inline function 'androidx.compose.runtime.RememberEventDispatcher.dispatchSideEffects.<anonymous>.<anonymous>' call
              item();
            }
             while (inductionVariable <= last);
          this.p16_1.q6();
          tmp$ret$1 = Unit_getInstance();
          break $l$block;
        }finally {
          Trace_getInstance().l11(token);
        }
      }
    }
  };
  RememberEventDispatcher.prototype.t16 = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.isNotEmpty' call
    var tmp0_isNotEmpty = this.m16_1;
    tmp$ret$0 = !tmp0_isNotEmpty.i();
    if (tmp$ret$0) {
      var tmp$ret$1;
      $l$block: {
        // Inline function 'androidx.compose.runtime.trace' call
        var token = Trace_getInstance().z10('Compose:abandons');
        try {
          var iterator = this.m16_1.d();
          while (iterator.e()) {
            var instance = iterator.f();
            iterator.g3();
            instance.a17();
          }
          tmp$ret$1 = Unit_getInstance();
          break $l$block;
        }finally {
          Trace_getInstance().l11(token);
        }
      }
    }
  };
  RememberEventDispatcher.$metadata$ = classMeta('RememberEventDispatcher', [RememberManager]);
  function addPendingInvalidationsLocked$invalidate(this$0, $forgetConditionalScopes, invalidated, value) {
    // Inline function 'androidx.compose.runtime.collection.IdentityScopeMap.forEachScopeOf' call
    var tmp1_forEachScopeOf = this$0.bu_1;
    var index = find_2(tmp1_forEachScopeOf, value);
    if (index >= 0) {
      // Inline function 'kotlin.collections.forEach' call
      var tmp0_forEach = scopeSetAt(tmp1_forEachScopeOf, index);
      var tmp0_iterator = tmp0_forEach.d();
      while (tmp0_iterator.e()) {
        var element = tmp0_iterator.f();
        // Inline function 'androidx.compose.runtime.CompositionImpl.addPendingInvalidationsLocked.invalidate.<anonymous>' call
        if (!this$0.gu_1.b17(value, element) ? !element.e16(value).equals(InvalidationResult_IGNORED_getInstance()) : false) {
          if (element.k16() ? !$forgetConditionalScopes : false) {
            this$0.cu_1.b(element);
          } else {
            var tmp0_elvis_lhs = invalidated._v;
            var tmp;
            if (tmp0_elvis_lhs == null) {
              var tmp$ret$0;
              // Inline function 'kotlin.also' call
              var tmp0_also = HashSet_init_$Create$();
              // Inline function 'kotlin.contracts.contract' call
              // Inline function 'androidx.compose.runtime.CompositionImpl.addPendingInvalidationsLocked.invalidate.<anonymous>.<anonymous>' call
              invalidated._v = tmp0_also;
              tmp$ret$0 = tmp0_also;
              tmp = tmp$ret$0;
            } else {
              tmp = tmp0_elvis_lhs;
            }
            var set = tmp;
            set.b(element);
          }
        }
      }
    }
  }
  function CompositionImpl(parent, applier, recomposeContext) {
    this.vt_1 = parent;
    this.wt_1 = applier;
    this.xt_1 = new AtomicReference(null);
    this.yt_1 = createSynchronizedObject();
    this.zt_1 = HashSet_init_$Create$();
    this.au_1 = new SlotTable();
    this.bu_1 = new IdentityScopeMap();
    this.cu_1 = HashSet_init_$Create$();
    this.du_1 = new IdentityScopeMap();
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$0 = ArrayList_init_$Create$();
    tmp.eu_1 = tmp$ret$0;
    var tmp_0 = this;
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$1 = ArrayList_init_$Create$();
    tmp_0.fu_1 = tmp$ret$1;
    this.gu_1 = new IdentityScopeMap();
    var tmp_1 = this;
    tmp_1.hu_1 = IdentityArrayMap_init_$Create$(0, 1, null);
    this.iu_1 = false;
    this.ju_1 = null;
    this.ku_1 = 0;
    var tmp_2 = this;
    var tmp$ret$2;
    // Inline function 'kotlin.also' call
    var tmp0_also = new ComposerImpl(this.wt_1, this.vt_1, this.au_1, this.zt_1, this.eu_1, this.fu_1, this);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'androidx.compose.runtime.CompositionImpl.composer.<anonymous>' call
    this.vt_1.c17(tmp0_also);
    tmp$ret$2 = tmp0_also;
    tmp_2.lu_1 = tmp$ret$2;
    this.mu_1 = recomposeContext;
    var tmp_3 = this;
    var tmp_4 = this.vt_1;
    tmp_3.nu_1 = tmp_4 instanceof Recomposer;
    this.ou_1 = false;
    this.pu_1 = ComposableSingletons$CompositionKt_getInstance().d17_1;
  }
  CompositionImpl.prototype.r14 = function () {
    return this.au_1;
  };
  CompositionImpl.prototype.v16 = function () {
    return this.lu_1.vv_1;
  };
  CompositionImpl.prototype.f17 = function () {
    return this.ou_1;
  };
  CompositionImpl.prototype.g17 = function (values) {
    $l$loop: while (true) {
      var old = this.xt_1.qk();
      var tmp0_subject = old;
      var tmp;
      if (tmp0_subject == null ? true : equals_0(tmp0_subject, get_PendingApplyNoModifications())) {
        tmp = values;
      } else {
        if (!(tmp0_subject == null) ? isInterface(tmp0_subject, Set) : false) {
          var tmp$ret$2;
          // Inline function 'kotlin.arrayOf' call
          var tmp0_arrayOf = [old, values];
          var tmp$ret$1;
          // Inline function 'kotlin.js.unsafeCast' call
          var tmp$ret$0;
          // Inline function 'kotlin.js.asDynamic' call
          tmp$ret$0 = tmp0_arrayOf;
          tmp$ret$1 = tmp$ret$0;
          tmp$ret$2 = tmp$ret$1;
          tmp = tmp$ret$2;
        } else {
          if (!(tmp0_subject == null) ? isArray(tmp0_subject) : false) {
            tmp = plus_1((!(old == null) ? isArray(old) : false) ? old : THROW_CCE(), values);
          } else {
            var tmp1_error = 'corrupt pendingModifications: ' + this.xt_1;
            throw IllegalStateException_init_$Create$_0(toString_2(tmp1_error));
          }
        }
      }
      var new_0 = tmp;
      if (this.xt_1.h17(old, new_0)) {
        if (old == null) {
          var tmp$ret$4;
          // Inline function 'androidx.compose.runtime.synchronized' call
          var tmp2_synchronized = this.yt_1;
          var tmp$ret$3;
          // Inline function 'kotlinx.atomicfu.locks.synchronized' call
          drainPendingModificationsLocked(this);
          tmp$ret$3 = Unit_getInstance();
          tmp$ret$4 = tmp$ret$3;
        }
        break $l$loop;
      }
    }
  };
  CompositionImpl.prototype.i17 = function (values) {
    var tmp0_iterator = values.d();
    while (tmp0_iterator.e()) {
      var value = tmp0_iterator.f();
      if (this.bu_1.j16(value) ? true : this.du_1.j16(value))
        return true;
    }
    return false;
  };
  CompositionImpl.prototype.h14 = function (block) {
    return this.lu_1.h14(block);
  };
  CompositionImpl.prototype.j17 = function (value) {
    if (!_get_areChildrenComposing__c1uwup(this)) {
      var tmp0_safe_receiver = this.lu_1.g13();
      if (tmp0_safe_receiver == null)
        null;
      else {
        var tmp$ret$0;
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        tmp0_safe_receiver.l14(true);
        this.bu_1.l16(value, tmp0_safe_receiver);
        if (isInterface(value, DerivedState)) {
          this.du_1.k17(value);
          // Inline function 'kotlin.collections.forEach' call
          var tmp0_forEach = value.l17();
          var tmp0_iterator = tmp0_forEach.d();
          while (tmp0_iterator.e()) {
            var element = tmp0_iterator.f();
            // Inline function 'androidx.compose.runtime.CompositionImpl.recordReadOf.<anonymous>.<anonymous>' call
            this.du_1.l16(element, value);
          }
        }
        tmp0_safe_receiver.m17(value);
        tmp$ret$0 = Unit_getInstance();
      }
    }
  };
  CompositionImpl.prototype.n17 = function (value) {
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = this.yt_1;
    var tmp$ret$0;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    invalidateScopeOfLocked(this, value);
    var tmp1_forEachScopeOf = this.du_1;
    var index = find_2(tmp1_forEachScopeOf, value);
    var tmp;
    if (index >= 0) {
      var tmp0_forEach = scopeSetAt(tmp1_forEachScopeOf, index);
      var tmp0_iterator = tmp0_forEach.d();
      while (tmp0_iterator.e()) {
        var element = tmp0_iterator.f();
        // Inline function 'androidx.compose.runtime.CompositionImpl.recordWriteOf.<anonymous>.<anonymous>' call
        invalidateScopeOfLocked(this, element);
      }
      tmp = Unit_getInstance();
    }
    tmp$ret$0 = tmp;
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  };
  CompositionImpl.prototype.o17 = function () {
    var tmp$ret$7;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = this.yt_1;
    var tmp$ret$6;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    var tmp$ret$5;
    // Inline function 'androidx.compose.runtime.CompositionImpl.recompose.<anonymous>' call
    drainPendingModificationsForCompositionLocked(this);
    var tmp$ret$4;
    // Inline function 'androidx.compose.runtime.CompositionImpl.trackAbandonedValues' call
    var success = false;
    var tmp;
    try {
      var tmp$ret$2;
      // Inline function 'kotlin.also' call
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.CompositionImpl.recompose.<anonymous>.<anonymous>' call
      var tmp$ret$0;
      // Inline function 'kotlin.also' call
      var tmp0_also = this.lu_1.i14(takeInvalidations(this));
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'androidx.compose.runtime.CompositionImpl.recompose.<anonymous>.<anonymous>.<anonymous>' call
      if (!tmp0_also) {
        drainPendingModificationsLocked(this);
      }
      tmp$ret$0 = tmp0_also;
      tmp$ret$1 = tmp$ret$0;
      var tmp0_also_0 = tmp$ret$1;
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'androidx.compose.runtime.CompositionImpl.trackAbandonedValues.<anonymous>' call
      success = true;
      tmp$ret$2 = tmp0_also_0;
      tmp = tmp$ret$2;
    }finally {
      var tmp_0;
      if (!success) {
        var tmp$ret$3;
        // Inline function 'kotlin.collections.isNotEmpty' call
        var tmp1_isNotEmpty = this.zt_1;
        tmp$ret$3 = !tmp1_isNotEmpty.i();
        tmp_0 = tmp$ret$3;
      } else {
        tmp_0 = false;
      }
      if (tmp_0) {
        (new RememberEventDispatcher(this.zt_1)).t16();
      }
    }
    tmp$ret$4 = tmp;
    tmp$ret$5 = tmp$ret$4;
    tmp$ret$6 = tmp$ret$5;
    tmp$ret$7 = tmp$ret$6;
    return tmp$ret$7;
  };
  CompositionImpl.prototype.p17 = function (references) {
    var tmp$ret$1;
    $l$block: {
      // Inline function 'androidx.compose.runtime.snapshots.fastAll' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'androidx.compose.runtime.snapshots.fastForEach' call
      // Inline function 'kotlin.contracts.contract' call
      var inductionVariable = 0;
      var last = references.g() - 1 | 0;
      if (inductionVariable <= last)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var item = references.h(index);
          // Inline function 'androidx.compose.runtime.snapshots.fastAll.<anonymous>' call
          var tmp$ret$0;
          // Inline function 'androidx.compose.runtime.CompositionImpl.insertMovableContent.<anonymous>' call
          tmp$ret$0 = equals_0(item.k_1.g12_1, this);
          if (!tmp$ret$0) {
            tmp$ret$1 = false;
            break $l$block;
          }
        }
         while (inductionVariable <= last);
      tmp$ret$1 = true;
    }
    runtimeCheck(tmp$ret$1);
    var tmp$ret$4;
    // Inline function 'androidx.compose.runtime.CompositionImpl.trackAbandonedValues' call
    var success = false;
    var tmp;
    try {
      var tmp$ret$2;
      // Inline function 'kotlin.also' call
      this.lu_1.e14(references);
      var tmp0_also = Unit_getInstance();
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'androidx.compose.runtime.CompositionImpl.trackAbandonedValues.<anonymous>' call
      success = true;
      tmp$ret$2 = tmp0_also;
      tmp = tmp$ret$2;
    }finally {
      var tmp_0;
      if (!success) {
        var tmp$ret$3;
        // Inline function 'kotlin.collections.isNotEmpty' call
        var tmp1_isNotEmpty = this.zt_1;
        tmp$ret$3 = !tmp1_isNotEmpty.i();
        tmp_0 = tmp$ret$3;
      } else {
        tmp_0 = false;
      }
      if (tmp_0) {
        (new RememberEventDispatcher(this.zt_1)).t16();
      }
    }
    tmp$ret$4 = tmp;
  };
  CompositionImpl.prototype.q17 = function (state) {
    var manager = new RememberEventDispatcher(this.zt_1);
    var slotTable = state.n12_1;
    var tmp$ret$2;
    // Inline function 'androidx.compose.runtime.SlotTable.write' call
    var tmp$ret$1;
    // Inline function 'kotlin.let' call
    var tmp0_let = slotTable.gy();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.SlotTable.write.<anonymous>' call
    var tmp;
    try {
      removeCurrentGroup(tmp0_let, manager);
      tmp = Unit_getInstance();
    }finally {
      tmp0_let.vx();
    }
    tmp$ret$0 = tmp;
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    manager.q16();
  };
  CompositionImpl.prototype.r17 = function () {
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = this.yt_1;
    var tmp$ret$0;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    applyChangesInLocked(this, this.eu_1);
    drainPendingModificationsLocked(this);
    tmp$ret$0 = Unit_getInstance();
    tmp$ret$1 = tmp$ret$0;
  };
  CompositionImpl.prototype.s17 = function () {
    var tmp$ret$2;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = this.yt_1;
    var tmp$ret$1;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    var tmp;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.isNotEmpty' call
    var tmp0_isNotEmpty = this.fu_1;
    tmp$ret$0 = !tmp0_isNotEmpty.i();
    if (tmp$ret$0) {
      applyChangesInLocked(this, this.fu_1);
      tmp = Unit_getInstance();
    }
    tmp$ret$1 = tmp;
    tmp$ret$2 = tmp$ret$1;
  };
  CompositionImpl.prototype.j13 = function () {
    var tmp$ret$2;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = this.yt_1;
    var tmp$ret$1;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    this.lu_1.j13();
    var tmp;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.isNotEmpty' call
    var tmp0_isNotEmpty = this.zt_1;
    tmp$ret$0 = !tmp0_isNotEmpty.i();
    if (tmp$ret$0) {
      (new RememberEventDispatcher(this.zt_1)).t16();
      tmp = Unit_getInstance();
    }
    tmp$ret$1 = tmp;
    tmp$ret$2 = tmp$ret$1;
  };
  CompositionImpl.prototype.t17 = function () {
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = this.yt_1;
    var tmp$ret$0;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    var tmp0_forEach = this.au_1.tw_1;
    var indexedObject = tmp0_forEach;
    var inductionVariable = 0;
    var last = indexedObject.length;
    while (inductionVariable < last) {
      var element = indexedObject[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      // Inline function 'androidx.compose.runtime.CompositionImpl.invalidateAll.<anonymous>.<anonymous>' call
      var tmp0_safe_receiver = element instanceof RecomposeScopeImpl ? element : null;
      if (tmp0_safe_receiver == null)
        null;
      else {
        tmp0_safe_receiver.u17();
      }
    }
    tmp$ret$0 = Unit_getInstance();
    tmp$ret$1 = tmp$ret$0;
  };
  CompositionImpl.prototype.u10 = function (to, groupIndex, block) {
    var tmp;
    if ((!(to == null) ? !equals_0(to, this) : false) ? groupIndex >= 0 : false) {
      var tmp_0 = this;
      tmp_0.ju_1 = to instanceof CompositionImpl ? to : THROW_CCE();
      this.ku_1 = groupIndex;
      var tmp_1;
      try {
        tmp_1 = block();
      }finally {
        this.ju_1 = null;
        this.ku_1 = 0;
      }
      tmp = tmp_1;
    } else {
      tmp = block();
    }
    return tmp;
  };
  CompositionImpl.prototype.v17 = function (scope, instance) {
    if (scope.w17()) {
      scope.c14(true);
    }
    var anchor = scope.qt_1;
    if ((anchor == null ? true : !this.au_1.x17(anchor)) ? true : !anchor.s16())
      return InvalidationResult_IGNORED_getInstance();
    if (!anchor.s16())
      return InvalidationResult_IGNORED_getInstance();
    if (!scope.y17())
      return InvalidationResult_IGNORED_getInstance();
    return invalidateChecked(this, scope, anchor, instance);
  };
  CompositionImpl.prototype.z17 = function (instance, scope) {
    this.bu_1.b17(instance, scope);
  };
  CompositionImpl.prototype.a18 = function (state) {
    if (!this.bu_1.j16(state)) {
      this.du_1.k17(state);
    }
  };
  CompositionImpl.prototype.b18 = function (set__$_ezb9bk) {
    this.pu_1 = set__$_ezb9bk;
  };
  CompositionImpl.prototype.c18 = function (content) {
    // Inline function 'kotlin.check' call
    var tmp0_check = !this.ou_1;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_check) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.CompositionImpl.setContent$composable.<anonymous>' call
      tmp$ret$0 = 'The composition is disposed';
      var message = tmp$ret$0;
      throw IllegalStateException_init_$Create$_0(toString_2(message));
    }
    this.b18(content);
    this.vt_1.d18(this, this.pu_1);
  };
  CompositionImpl.prototype.e18 = function (content) {
    var tmp$ret$4;
    // Inline function 'androidx.compose.runtime.CompositionImpl.trackAbandonedValues' call
    var success = false;
    var tmp;
    try {
      var tmp$ret$2;
      // Inline function 'kotlin.also' call
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.synchronized' call
      var tmp0_synchronized = this.yt_1;
      var tmp$ret$0;
      // Inline function 'kotlinx.atomicfu.locks.synchronized' call
      drainPendingModificationsForCompositionLocked(this);
      this.lu_1.m14(takeInvalidations(this), content);
      tmp$ret$0 = Unit_getInstance();
      tmp$ret$1 = tmp$ret$0;
      var tmp0_also = tmp$ret$1;
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'androidx.compose.runtime.CompositionImpl.trackAbandonedValues.<anonymous>' call
      success = true;
      tmp$ret$2 = tmp0_also;
      tmp = tmp$ret$2;
    }finally {
      var tmp_0;
      if (!success) {
        var tmp$ret$3;
        // Inline function 'kotlin.collections.isNotEmpty' call
        var tmp1_isNotEmpty = this.zt_1;
        tmp$ret$3 = !tmp1_isNotEmpty.i();
        tmp_0 = tmp$ret$3;
      } else {
        tmp_0 = false;
      }
      if (tmp_0) {
        (new RememberEventDispatcher(this.zt_1)).t16();
      }
    }
    tmp$ret$4 = tmp;
  };
  CompositionImpl.$metadata$ = classMeta('CompositionImpl', [ControlledComposition]);
  function ControlledComposition() {
  }
  ControlledComposition.$metadata$ = interfaceMeta('ControlledComposition', [Composition]);
  function ComposableLambda$invoke$ref_0($boundThis) {
    return function (p0, p1) {
      return $boundThis.b12(p0, p1);
    };
  }
  function ComposableSingletons$CompositionKt$lambda_1$lambda_xm0u9s($composer, $changed) {
    var $composer_0 = $composer;
    sourceInformation($composer_0, 'C:Composition.kt#9igjgp');
    if (!(($changed & 11) === 2) ? true : !$composer_0.d12()) {
    } else {
      $composer_0.hy();
    }
    return Unit_getInstance();
  }
  function ComposableLambda$invoke$ref_1($boundThis) {
    return function (p0, p1) {
      return $boundThis.b12(p0, p1);
    };
  }
  function ComposableSingletons$CompositionKt$lambda_2$lambda_8lgqn5($composer, $changed) {
    var $composer_0 = $composer;
    sourceInformation($composer_0, 'C:Composition.kt#9igjgp');
    if (!(($changed & 11) === 2) ? true : !$composer_0.d12()) {
    } else {
      $composer_0.hy();
    }
    return Unit_getInstance();
  }
  function ComposableSingletons$CompositionKt() {
    ComposableSingletons$CompositionKt_instance = this;
    var tmp = this;
    tmp.d17_1 = ComposableLambda$invoke$ref_0(composableLambdaInstance(954879418, false, ComposableSingletons$CompositionKt$lambda_1$lambda_xm0u9s));
    var tmp_0 = this;
    tmp_0.e17_1 = ComposableLambda$invoke$ref_1(composableLambdaInstance(1918065384, false, ComposableSingletons$CompositionKt$lambda_2$lambda_8lgqn5));
  }
  ComposableSingletons$CompositionKt.$metadata$ = objectMeta('ComposableSingletons$CompositionKt');
  var ComposableSingletons$CompositionKt_instance;
  function ComposableSingletons$CompositionKt_getInstance() {
    if (ComposableSingletons$CompositionKt_instance == null)
      new ComposableSingletons$CompositionKt();
    return ComposableSingletons$CompositionKt_instance;
  }
  function removeValueIf(_this__u8e3s4, predicate) {
    init_properties_Composition_kt_ckysay();
    var iter = _this__u8e3s4.d();
    while (iter.e()) {
      if (predicate(iter.f())) {
        iter.g3();
      }
    }
  }
  function addValue(_this__u8e3s4, key, value) {
    init_properties_Composition_kt_ckysay();
    if (_this__u8e3s4.g18(key)) {
      var tmp0_safe_receiver = _this__u8e3s4.f18(key);
      if (tmp0_safe_receiver == null)
        null;
      else
        tmp0_safe_receiver.p15(value);
    } else {
      var tmp$ret$0;
      // Inline function 'kotlin.also' call
      var tmp0_also = new IdentityArraySet();
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'androidx.compose.runtime.addValue.<anonymous>' call
      tmp0_also.p15(value);
      tmp$ret$0 = tmp0_also;
      _this__u8e3s4.w16(key, tmp$ret$0);
    }
  }
  function Composition() {
  }
  Composition.$metadata$ = interfaceMeta('Composition');
  function ControlledComposition_0(applier, parent) {
    init_properties_Composition_kt_ckysay();
    return CompositionImpl_init_$Create$(parent, applier, null, 4, null);
  }
  var properties_initialized_Composition_kt_u7hvq2;
  function init_properties_Composition_kt_ckysay() {
    if (properties_initialized_Composition_kt_u7hvq2) {
    } else {
      properties_initialized_Composition_kt_u7hvq2 = true;
      PendingApplyNoModifications = new Object();
    }
  }
  function get_EmptyCompositionLocalMap() {
    init_properties_CompositionContext_kt_yh8t7v();
    return EmptyCompositionLocalMap;
  }
  var EmptyCompositionLocalMap;
  function CompositionContext() {
    this.ax_1 = 0;
  }
  CompositionContext.prototype.hx = function (table) {
  };
  CompositionContext.prototype.c17 = function (composer) {
  };
  CompositionContext.prototype.cx = function () {
    return get_EmptyCompositionLocalMap();
  };
  CompositionContext.prototype.bx = function () {
  };
  CompositionContext.prototype.jx = function () {
  };
  CompositionContext.prototype.m12 = function (reference) {
    return null;
  };
  CompositionContext.$metadata$ = classMeta('CompositionContext');
  var properties_initialized_CompositionContext_kt_mk393b;
  function init_properties_CompositionContext_kt_yh8t7v() {
    if (properties_initialized_CompositionContext_kt_mk393b) {
    } else {
      properties_initialized_CompositionContext_kt_mk393b = true;
      EmptyCompositionLocalMap = persistentHashMapOf();
    }
  }
  function CompositionLocal(defaultFactory) {
    this.ey_1 = new LazyValueHolder(defaultFactory);
  }
  CompositionLocal.$metadata$ = classMeta('CompositionLocal');
  function ProvidableCompositionLocal(defaultFactory) {
    CompositionLocal.call(this, defaultFactory);
  }
  ProvidableCompositionLocal.prototype.i18 = function (value) {
    return new ProvidedValue(this, value, true);
  };
  ProvidableCompositionLocal.$metadata$ = classMeta('ProvidableCompositionLocal', undefined, undefined, undefined, undefined, CompositionLocal.prototype);
  function staticCompositionLocalOf(defaultFactory) {
    return new StaticProvidableCompositionLocal(defaultFactory);
  }
  function StaticProvidableCompositionLocal(defaultFactory) {
    ProvidableCompositionLocal.call(this, defaultFactory);
  }
  StaticProvidableCompositionLocal.prototype.m15 = function (value, $composer, $changed) {
    var $composer_0 = $composer;
    $composer_0.ks(571516549);
    sourceInformation($composer_0, 'C(provided$composable):CompositionLocal.kt#9igjgp');
    var tmp0 = new StaticValueHolder(value);
    $composer_0.os();
    return tmp0;
  };
  StaticProvidableCompositionLocal.$metadata$ = classMeta('StaticProvidableCompositionLocal', undefined, undefined, undefined, undefined, ProvidableCompositionLocal.prototype);
  function compositionLocalOf(policy, defaultFactory) {
    return new DynamicProvidableCompositionLocal(policy, defaultFactory);
  }
  function compositionLocalOf$default(policy, defaultFactory, $mask0, $handler) {
    if (!(($mask0 & 1) === 0))
      policy = structuralEqualityPolicy();
    return compositionLocalOf(policy, defaultFactory);
  }
  function CompositionLocalProvider$composable(values, content, $composer, $changed) {
    var $composer_0 = $composer;
    $composer_0 = $composer_0.z13(-266554972);
    sourceInformation($composer_0, 'C(CompositionLocalProvider$composable)P(1)227@9992L9:CompositionLocal.kt#9igjgp');
    var $dirty = $changed;
    $composer_0.v13(values);
    content($composer_0, 14 & $dirty >> 3);
    $composer_0.x13();
    var tmp0_safe_receiver = $composer_0.a14();
    if (tmp0_safe_receiver === null)
      null;
    else {
      tmp0_safe_receiver.b15(CompositionLocalProvider$composable$lambda$ref(values, content, $changed));
    }
  }
  function DynamicProvidableCompositionLocal(policy, defaultFactory) {
    ProvidableCompositionLocal.call(this, defaultFactory);
    this.l18_1 = policy;
  }
  DynamicProvidableCompositionLocal.prototype.m15 = function (value, $composer, $changed) {
    var $composer_0 = $composer;
    $composer_0.ks(-1327537144);
    sourceInformation($composer_0, 'C(provided$composable)*125@5325L42:CompositionLocal.kt#9igjgp');
    var tmp$ret$5;
    // Inline function 'kotlin.apply' call
    var tmp$ret$4;
    // Inline function 'androidx.compose.runtime.remember$composable' call
    var tmp0_remember$composable = $composer_0;
    var $composer_1 = tmp0_remember$composable;
    $composer_1.ks(547886695);
    sourceInformation($composer_1, 'C(remember$composable):Composables.kt#9igjgp');
    var tmp$ret$3;
    // Inline function 'androidx.compose.runtime.cache' call
    var tmp1_cache = $composer_1;
    var tmp$ret$2;
    // Inline function 'kotlin.let' call
    var tmp0_let = tmp1_cache.ls();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
    var tmp;
    if (false ? true : tmp0_let === Companion_getInstance_8().ns_1) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.DynamicProvidableCompositionLocal.provided$composable.<anonymous>' call
      tmp$ret$0 = mutableStateOf(value, this.l18_1);
      var value_0 = tmp$ret$0;
      tmp1_cache.ms(value_0);
      tmp = value_0;
    } else {
      tmp = tmp0_let;
    }
    tmp$ret$1 = tmp;
    tmp$ret$2 = tmp$ret$1;
    var tmp_0 = tmp$ret$2;
    tmp$ret$3 = (tmp_0 == null ? true : isObject(tmp_0)) ? tmp_0 : THROW_CCE();
    var tmp0 = tmp$ret$3;
    $composer_1.os();
    tmp$ret$4 = tmp0;
    var tmp1_apply = tmp$ret$4;
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'androidx.compose.runtime.DynamicProvidableCompositionLocal.provided$composable.<anonymous>' call
    tmp1_apply.po(value);
    tmp$ret$5 = tmp1_apply;
    var tmp0_0 = tmp$ret$5;
    $composer_0.os();
    return tmp0_0;
  };
  DynamicProvidableCompositionLocal.$metadata$ = classMeta('DynamicProvidableCompositionLocal', undefined, undefined, undefined, undefined, ProvidableCompositionLocal.prototype);
  function CompositionLocalProvider$composable$lambda($values, $content, $$changed, $composer, $force) {
    return CompositionLocalProvider$composable($values.slice(), $content, $composer, $$changed | 1);
  }
  function CompositionLocalProvider$composable$lambda$ref($values, $content, $$changed) {
    return function (p0, p1) {
      CompositionLocalProvider$composable$lambda($values, $content, $$changed, p0, p1);
      return Unit_getInstance();
    };
  }
  function get_derivedStateObservers() {
    init_properties_DerivedState_kt_59k4km();
    return derivedStateObservers;
  }
  var derivedStateObservers;
  var isCalculationBlockRunning;
  function DerivedState() {
  }
  DerivedState.$metadata$ = interfaceMeta('DerivedState', [State_0]);
  function observeDerivedStateRecalculations(start, done, block) {
    init_properties_DerivedState_kt_59k4km();
    var previous = get_derivedStateObservers().qk();
    try {
      var tmp = get_derivedStateObservers();
      var tmp0_elvis_lhs = get_derivedStateObservers().qk();
      tmp.o18((tmp0_elvis_lhs == null ? persistentListOf() : tmp0_elvis_lhs).b(to(start, done)));
      block();
    }finally {
      get_derivedStateObservers().o18(previous);
    }
  }
  var properties_initialized_DerivedState_kt_scch8q;
  function init_properties_DerivedState_kt_59k4km() {
    if (properties_initialized_DerivedState_kt_scch8q) {
    } else {
      properties_initialized_DerivedState_kt_scch8q = true;
      derivedStateObservers = new SnapshotThreadLocal();
      isCalculationBlockRunning = new SnapshotThreadLocal();
    }
  }
  function get_InternalDisposableEffectScope() {
    init_properties_Effects_kt_ajl6oe();
    return InternalDisposableEffectScope;
  }
  var InternalDisposableEffectScope;
  function _no_name_provided__qut3iv_5($onDisposeEffect) {
    this.p18_1 = $onDisposeEffect;
  }
  _no_name_provided__qut3iv_5.prototype.pi = function () {
    this.p18_1();
  };
  _no_name_provided__qut3iv_5.$metadata$ = classMeta(undefined, [DisposableEffectResult]);
  function DisposableEffectScope() {
    this.q18_1 = 0;
  }
  DisposableEffectScope.prototype.r18 = function (onDisposeEffect) {
    return new _no_name_provided__qut3iv_5(onDisposeEffect);
  };
  DisposableEffectScope.$metadata$ = classMeta('DisposableEffectScope');
  function DisposableEffectResult() {
  }
  DisposableEffectResult.$metadata$ = interfaceMeta('DisposableEffectResult');
  function LaunchedEffect$composable(key1, block, $composer, $changed) {
    init_properties_Effects_kt_ajl6oe();
    var $composer_0 = $composer;
    $composer_0.ks(1556009691);
    sourceInformation($composer_0, 'C(LaunchedEffect$composable)P(1)336@14101L58:Effects.kt#9igjgp');
    var applyContext = $composer_0.c13();
    var tmp$ret$4;
    // Inline function 'androidx.compose.runtime.remember$composable' call
    var tmp0_remember$composable = $composer_0;
    var tmp1_remember$composable = 14 & $changed;
    var $composer_1 = tmp0_remember$composable;
    $composer_1.ks(-838505973);
    sourceInformation($composer_1, 'C(remember$composable)P(1):Composables.kt#9igjgp');
    var tmp$ret$3;
    // Inline function 'androidx.compose.runtime.cache' call
    var tmp1_cache = $composer_1;
    var tmp2_cache = $composer_1.ps(key1);
    var tmp$ret$2;
    // Inline function 'kotlin.let' call
    var tmp0_let = tmp1_cache.ls();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
    var tmp;
    if (tmp2_cache ? true : tmp0_let === Companion_getInstance_8().ns_1) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.LaunchedEffect$composable.<anonymous>' call
      tmp$ret$0 = new LaunchedEffectImpl(applyContext, block);
      var value = tmp$ret$0;
      tmp1_cache.ms(value);
      tmp = value;
    } else {
      tmp = tmp0_let;
    }
    tmp$ret$1 = tmp;
    tmp$ret$2 = tmp$ret$1;
    var tmp_0 = tmp$ret$2;
    tmp$ret$3 = (tmp_0 == null ? true : isObject(tmp_0)) ? tmp_0 : THROW_CCE();
    var tmp0 = tmp$ret$3;
    $composer_1.os();
    tmp$ret$4 = tmp0;
    $composer_0.os();
  }
  function LaunchedEffectImpl(parentCoroutineContext, task) {
    this.s18_1 = task;
    this.t18_1 = CoroutineScope_0(parentCoroutineContext);
    this.u18_1 = null;
  }
  LaunchedEffectImpl.prototype.z16 = function () {
    var tmp0_safe_receiver = this.u18_1;
    if (tmp0_safe_receiver == null)
      null;
    else {
      cancel$default_1(tmp0_safe_receiver, 'Old job was still running!', null, 2, null);
    }
    var tmp = this;
    tmp.u18_1 = launch$default(this.t18_1, null, null, this.s18_1, 3, null);
  };
  LaunchedEffectImpl.prototype.y16 = function () {
    var tmp0_safe_receiver = this.u18_1;
    if (tmp0_safe_receiver == null)
      null;
    else {
      tmp0_safe_receiver.jg(null, 1, null);
    }
    this.u18_1 = null;
  };
  LaunchedEffectImpl.prototype.a17 = function () {
    var tmp0_safe_receiver = this.u18_1;
    if (tmp0_safe_receiver == null)
      null;
    else {
      tmp0_safe_receiver.jg(null, 1, null);
    }
    this.u18_1 = null;
  };
  LaunchedEffectImpl.$metadata$ = classMeta('LaunchedEffectImpl', [RememberObserver]);
  function DisposableEffect$composable(key1, effect, $composer, $changed) {
    init_properties_Effects_kt_ajl6oe();
    var $composer_0 = $composer;
    $composer_0.ks(927399050);
    sourceInformation($composer_0, 'C(DisposableEffect$composable)P(1)154@6171L47:Effects.kt#9igjgp');
    var tmp$ret$4;
    // Inline function 'androidx.compose.runtime.remember$composable' call
    var tmp0_remember$composable = $composer_0;
    var tmp1_remember$composable = 14 & $changed;
    var $composer_1 = tmp0_remember$composable;
    $composer_1.ks(-838505973);
    sourceInformation($composer_1, 'C(remember$composable)P(1):Composables.kt#9igjgp');
    var tmp$ret$3;
    // Inline function 'androidx.compose.runtime.cache' call
    var tmp1_cache = $composer_1;
    var tmp2_cache = $composer_1.ps(key1);
    var tmp$ret$2;
    // Inline function 'kotlin.let' call
    var tmp0_let = tmp1_cache.ls();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
    var tmp;
    if (tmp2_cache ? true : tmp0_let === Companion_getInstance_8().ns_1) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.DisposableEffect$composable.<anonymous>' call
      tmp$ret$0 = new DisposableEffectImpl(effect);
      var value = tmp$ret$0;
      tmp1_cache.ms(value);
      tmp = value;
    } else {
      tmp = tmp0_let;
    }
    tmp$ret$1 = tmp;
    tmp$ret$2 = tmp$ret$1;
    var tmp_0 = tmp$ret$2;
    tmp$ret$3 = (tmp_0 == null ? true : isObject(tmp_0)) ? tmp_0 : THROW_CCE();
    var tmp0 = tmp$ret$3;
    $composer_1.os();
    tmp$ret$4 = tmp0;
    $composer_0.os();
  }
  function DisposableEffect$composable_0(keys, effect, $composer, $changed) {
    init_properties_Effects_kt_ajl6oe();
    var $composer_0 = $composer;
    $composer_0.ks(-1541565433);
    sourceInformation($composer_0, 'C(DisposableEffect$composable)P(1)275@11877L48:Effects.kt#9igjgp');
    var tmp$ret$4;
    // Inline function 'androidx.compose.runtime.remember$composable' call
    var tmp0_remember$composable = keys.slice();
    var tmp1_remember$composable = $composer_0;
    var $composer_1 = tmp1_remember$composable;
    $composer_1.ks(-1603429786);
    sourceInformation($composer_1, 'C(remember$composable)P(1):Composables.kt#9igjgp');
    var invalid = false;
    var indexedObject = tmp0_remember$composable;
    var inductionVariable = 0;
    var last = indexedObject.length;
    while (inductionVariable < last) {
      var key = indexedObject[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      invalid = !!(invalid | $composer_1.ps(key));
    }
    var tmp$ret$3;
    // Inline function 'androidx.compose.runtime.cache' call
    var tmp1_cache = $composer_1;
    var tmp2_cache = invalid;
    var tmp$ret$2;
    // Inline function 'kotlin.let' call
    var tmp0_let = tmp1_cache.ls();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
    var tmp;
    if (tmp2_cache ? true : tmp0_let === Companion_getInstance_8().ns_1) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.DisposableEffect$composable.<anonymous>' call
      tmp$ret$0 = new DisposableEffectImpl(effect);
      var value = tmp$ret$0;
      tmp1_cache.ms(value);
      tmp = value;
    } else {
      tmp = tmp0_let;
    }
    tmp$ret$1 = tmp;
    tmp$ret$2 = tmp$ret$1;
    var tmp_0 = tmp$ret$2;
    tmp$ret$3 = (tmp_0 == null ? true : isObject(tmp_0)) ? tmp_0 : THROW_CCE();
    var tmp0 = tmp$ret$3;
    $composer_1.os();
    tmp$ret$4 = tmp0;
    $composer_0.os();
  }
  function DisposableEffectImpl(effect) {
    this.v18_1 = effect;
    this.w18_1 = null;
  }
  DisposableEffectImpl.prototype.z16 = function () {
    this.w18_1 = this.v18_1(get_InternalDisposableEffectScope());
  };
  DisposableEffectImpl.prototype.y16 = function () {
    var tmp0_safe_receiver = this.w18_1;
    if (tmp0_safe_receiver == null)
      null;
    else {
      tmp0_safe_receiver.pi();
    }
    this.w18_1 = null;
  };
  DisposableEffectImpl.prototype.a17 = function () {
  };
  DisposableEffectImpl.$metadata$ = classMeta('DisposableEffectImpl', [RememberObserver]);
  function DisposableEffect$composable_1(key1, key2, effect, $composer, $changed) {
    init_properties_Effects_kt_ajl6oe();
    var $composer_0 = $composer;
    $composer_0.ks(235732070);
    sourceInformation($composer_0, 'C(DisposableEffect$composable)P(1,2)194@8057L53:Effects.kt#9igjgp');
    var tmp$ret$4;
    // Inline function 'androidx.compose.runtime.remember$composable' call
    var tmp0_remember$composable = $composer_0;
    var tmp1_remember$composable = 14 & $changed | 112 & $changed;
    var $composer_1 = tmp0_remember$composable;
    $composer_1.ks(-1124426577);
    sourceInformation($composer_1, 'C(remember$composable)P(1,2):Composables.kt#9igjgp');
    var tmp$ret$3;
    // Inline function 'androidx.compose.runtime.cache' call
    var tmp1_cache = $composer_1;
    var tmp2_cache = !!($composer_1.ps(key1) | $composer_1.ps(key2));
    var tmp$ret$2;
    // Inline function 'kotlin.let' call
    var tmp0_let = tmp1_cache.ls();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
    var tmp;
    if (tmp2_cache ? true : tmp0_let === Companion_getInstance_8().ns_1) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.DisposableEffect$composable.<anonymous>' call
      tmp$ret$0 = new DisposableEffectImpl(effect);
      var value = tmp$ret$0;
      tmp1_cache.ms(value);
      tmp = value;
    } else {
      tmp = tmp0_let;
    }
    tmp$ret$1 = tmp;
    tmp$ret$2 = tmp$ret$1;
    var tmp_0 = tmp$ret$2;
    tmp$ret$3 = (tmp_0 == null ? true : isObject(tmp_0)) ? tmp_0 : THROW_CCE();
    var tmp0 = tmp$ret$3;
    $composer_1.os();
    tmp$ret$4 = tmp0;
    $composer_0.os();
  }
  var properties_initialized_Effects_kt_cj8kem;
  function init_properties_Effects_kt_ajl6oe() {
    if (properties_initialized_Effects_kt_cj8kem) {
    } else {
      properties_initialized_Effects_kt_cj8kem = true;
      InternalDisposableEffectScope = new DisposableEffectScope();
    }
  }
  function hashCodeOf($this, value) {
    var tmp;
    if (value instanceof Enum) {
      tmp = value.o4_1;
    } else {
      var tmp0_safe_receiver = value;
      var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode_0(tmp0_safe_receiver);
      tmp = tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
    }
    return tmp;
  }
  function JoinedKey(left, right) {
    this.x18_1 = left;
    this.y18_1 = right;
  }
  JoinedKey.prototype.hashCode = function () {
    return imul(hashCodeOf(this, this.x18_1), 31) + hashCodeOf(this, this.y18_1) | 0;
  };
  JoinedKey.prototype.toString = function () {
    return 'JoinedKey(left=' + toString_1(this.x18_1) + ', right=' + toString_1(this.y18_1) + ')';
  };
  JoinedKey.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof JoinedKey))
      return false;
    var tmp0_other_with_cast = other instanceof JoinedKey ? other : THROW_CCE();
    if (!equals_0(this.x18_1, tmp0_other_with_cast.x18_1))
      return false;
    if (!equals_0(this.y18_1, tmp0_other_with_cast.y18_1))
      return false;
    return true;
  };
  JoinedKey.$metadata$ = classMeta('JoinedKey');
  function Key_5() {
    Key_instance_4 = this;
  }
  Key_5.$metadata$ = objectMeta('Key', [Key_0]);
  var Key_instance_4;
  function Key_getInstance_4() {
    if (Key_instance_4 == null)
      new Key_5();
    return Key_instance_4;
  }
  function MonotonicFrameClock() {
  }
  MonotonicFrameClock.$metadata$ = interfaceMeta('MonotonicFrameClock', [Element_0]);
  function get_monotonicFrameClock(_this__u8e3s4) {
    var tmp0_elvis_lhs = _this__u8e3s4.b4(Key_getInstance_4());
    var tmp;
    if (tmp0_elvis_lhs == null) {
      var tmp0_error = 'A MonotonicFrameClock is not available in this CoroutineContext. Callers should supply an appropriate MonotonicFrameClock using withContext.';
      throw IllegalStateException_init_$Create$_0(toString_2(tmp0_error));
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  }
  function get_movableContentKey() {
    return movableContentKey;
  }
  var movableContentKey;
  function OpaqueKey(key) {
    this.z18_1 = key;
  }
  OpaqueKey.prototype.toString = function () {
    return 'OpaqueKey(key=' + this.z18_1 + ')';
  };
  OpaqueKey.prototype.hashCode = function () {
    return getStringHashCode(this.z18_1);
  };
  OpaqueKey.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof OpaqueKey))
      return false;
    var tmp0_other_with_cast = other instanceof OpaqueKey ? other : THROW_CCE();
    if (!(this.z18_1 === tmp0_other_with_cast.z18_1))
      return false;
    return true;
  };
  OpaqueKey.$metadata$ = classMeta('OpaqueKey');
  function _set_rereading__pnqtpo($this, value) {
    if (value) {
      $this.ot_1 = $this.ot_1 | 32;
    } else {
      $this.ot_1 = $this.ot_1 & -33;
    }
  }
  function _get_rereading__g2iruw($this) {
    return !(($this.ot_1 & 32) === 0);
  }
  function _set_skipped__p8q2c5($this, value) {
    if (value) {
      $this.ot_1 = $this.ot_1 | 16;
    } else {
      $this.ot_1 = $this.ot_1 & -17;
    }
  }
  function RecomposeScopeImpl$end$lambda(this$0, $token, $tmp0_safe_receiver) {
    return function (composition) {
      var tmp;
      var tmp_0;
      if (this$0.st_1 === $token ? equals_0($tmp0_safe_receiver, this$0.tt_1) : false) {
        tmp_0 = composition instanceof CompositionImpl;
      } else {
        tmp_0 = false;
      }
      if (tmp_0) {
        // Inline function 'androidx.compose.runtime.collection.IdentityArrayIntMap.removeValueIf' call
        var destinationIndex = 0;
        var inductionVariable = 0;
        var last = $tmp0_safe_receiver.a19_1;
        if (inductionVariable < last)
          do {
            var i = inductionVariable;
            inductionVariable = inductionVariable + 1 | 0;
            var tmp_1 = $tmp0_safe_receiver.b19_1[i];
            var key = isObject(tmp_1) ? tmp_1 : THROW_CCE();
            var value = $tmp0_safe_receiver.c19_1[i];
            var tmp$ret$4;
            // Inline function 'androidx.compose.runtime.RecomposeScopeImpl.end.<anonymous>.<anonymous>.<anonymous>' call
            var tmp$ret$3;
            // Inline function 'kotlin.also' call
            var tmp0_also = !(value === $token);
            // Inline function 'kotlin.contracts.contract' call
            // Inline function 'androidx.compose.runtime.RecomposeScopeImpl.end.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
            if (tmp0_also) {
              composition.z17(key, this$0);
              var tmp0_safe_receiver = isInterface(key, DerivedState) ? key : null;
              if (tmp0_safe_receiver == null)
                null;
              else {
                var tmp$ret$2;
                // Inline function 'kotlin.let' call
                // Inline function 'kotlin.contracts.contract' call
                var tmp$ret$1;
                // Inline function 'androidx.compose.runtime.RecomposeScopeImpl.end.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
                composition.a18(tmp0_safe_receiver);
                var tmp0_safe_receiver_0 = this$0.ut_1;
                var tmp_2;
                if (tmp0_safe_receiver_0 == null) {
                  tmp_2 = null;
                } else {
                  var tmp$ret$0;
                  // Inline function 'kotlin.let' call
                  // Inline function 'kotlin.contracts.contract' call
                  tmp0_safe_receiver_0.d19(tmp0_safe_receiver);
                  var tmp_3;
                  if (tmp0_safe_receiver_0.i11_1 === 0) {
                    this$0.ut_1 = null;
                    tmp_3 = Unit_getInstance();
                  }
                  tmp$ret$0 = tmp_3;
                  tmp_2 = Unit_getInstance();
                }
                tmp$ret$1 = tmp_2;
                tmp$ret$2 = tmp$ret$1;
              }
            }
            tmp$ret$3 = tmp0_also;
            tmp$ret$4 = tmp$ret$3;
            if (!tmp$ret$4) {
              if (!(destinationIndex === i)) {
                $tmp0_safe_receiver.b19_1[destinationIndex] = key;
                $tmp0_safe_receiver.c19_1[destinationIndex] = value;
              }
              var tmp1 = destinationIndex;
              destinationIndex = tmp1 + 1 | 0;
            }
          }
           while (inductionVariable < last);
        var inductionVariable_0 = destinationIndex;
        var last_0 = $tmp0_safe_receiver.a19_1;
        if (inductionVariable_0 < last_0)
          do {
            var i_0 = inductionVariable_0;
            inductionVariable_0 = inductionVariable_0 + 1 | 0;
            $tmp0_safe_receiver.b19_1[i_0] = null;
          }
           while (inductionVariable_0 < last_0);
        $tmp0_safe_receiver.a19_1 = destinationIndex;
        var tmp_4;
        if ($tmp0_safe_receiver.a19_1 === 0) {
          this$0.tt_1 = null;
          tmp_4 = Unit_getInstance();
        }
        tmp = tmp_4;
      }
      return Unit_getInstance();
    };
  }
  function RecomposeScopeImpl(composition) {
    this.ot_1 = 0;
    this.pt_1 = composition;
    this.qt_1 = null;
    this.rt_1 = null;
    this.st_1 = 0;
    this.tt_1 = null;
    this.ut_1 = null;
  }
  RecomposeScopeImpl.prototype.s14 = function () {
    return this.qt_1;
  };
  RecomposeScopeImpl.prototype.s16 = function () {
    var tmp;
    if (!(this.pt_1 == null)) {
      var tmp0_safe_receiver = this.qt_1;
      var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.s16();
      tmp = tmp1_elvis_lhs == null ? false : tmp1_elvis_lhs;
    } else {
      tmp = false;
    }
    return tmp;
  };
  RecomposeScopeImpl.prototype.y17 = function () {
    return !(this.rt_1 == null);
  };
  RecomposeScopeImpl.prototype.l14 = function (value) {
    if (value) {
      this.ot_1 = this.ot_1 | 1;
    } else {
      this.ot_1 = this.ot_1 & -2;
    }
  };
  RecomposeScopeImpl.prototype.oz = function () {
    return !((this.ot_1 & 1) === 0);
  };
  RecomposeScopeImpl.prototype.h13 = function (value) {
    if (value) {
      this.ot_1 = this.ot_1 | 2;
    } else {
      this.ot_1 = this.ot_1 & -3;
    }
  };
  RecomposeScopeImpl.prototype.w17 = function () {
    return !((this.ot_1 & 2) === 0);
  };
  RecomposeScopeImpl.prototype.c14 = function (value) {
    if (value) {
      this.ot_1 = this.ot_1 | 4;
    } else {
      this.ot_1 = this.ot_1 & -5;
    }
  };
  RecomposeScopeImpl.prototype.i13 = function () {
    return !((this.ot_1 & 4) === 0);
  };
  RecomposeScopeImpl.prototype.n10 = function (value) {
    if (value) {
      this.ot_1 = this.ot_1 | 8;
    } else {
      this.ot_1 = this.ot_1 & -9;
    }
  };
  RecomposeScopeImpl.prototype.l13 = function () {
    return !((this.ot_1 & 8) === 0);
  };
  RecomposeScopeImpl.prototype.e10 = function (composer) {
    var tmp0_safe_receiver = this.rt_1;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver(composer, 1);
    if (tmp1_elvis_lhs == null) {
      // Inline function 'kotlin.error' call
      throw IllegalStateException_init_$Create$_0('Invalid restart scope');
    } else {
    }
  };
  RecomposeScopeImpl.prototype.e16 = function (value) {
    var tmp0_safe_receiver = this.pt_1;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.v17(this, value);
    return tmp1_elvis_lhs == null ? InvalidationResult_IGNORED_getInstance() : tmp1_elvis_lhs;
  };
  RecomposeScopeImpl.prototype.uj = function () {
    this.pt_1 = null;
    this.tt_1 = null;
    this.ut_1 = null;
  };
  RecomposeScopeImpl.prototype.r12 = function (composition) {
    this.pt_1 = composition;
  };
  RecomposeScopeImpl.prototype.u17 = function () {
    var tmp0_safe_receiver = this.pt_1;
    if (tmp0_safe_receiver == null)
      null;
    else
      tmp0_safe_receiver.v17(this, null);
  };
  RecomposeScopeImpl.prototype.b15 = function (block) {
    this.rt_1 = block;
  };
  RecomposeScopeImpl.prototype.d14 = function () {
    return !((this.ot_1 & 16) === 0);
  };
  RecomposeScopeImpl.prototype.o10 = function (token) {
    this.st_1 = token;
    _set_skipped__p8q2c5(this, false);
  };
  RecomposeScopeImpl.prototype.y13 = function () {
    _set_skipped__p8q2c5(this, true);
  };
  RecomposeScopeImpl.prototype.m17 = function (instance) {
    if (_get_rereading__g2iruw(this))
      return Unit_getInstance();
    var tmp0_elvis_lhs = this.tt_1;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      var tmp$ret$0;
      // Inline function 'kotlin.also' call
      var tmp0_also = new IdentityArrayIntMap();
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'androidx.compose.runtime.RecomposeScopeImpl.recordRead.<anonymous>' call
      this.tt_1 = tmp0_also;
      tmp$ret$0 = tmp0_also;
      tmp = tmp$ret$0;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    tmp.e19(instance, this.st_1);
    if (isInterface(instance, DerivedState)) {
      var tmp1_elvis_lhs = this.ut_1;
      var tmp_0;
      if (tmp1_elvis_lhs == null) {
        var tmp$ret$1;
        // Inline function 'kotlin.also' call
        var tmp1_also = IdentityArrayMap_init_$Create$(0, 1, null);
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'androidx.compose.runtime.RecomposeScopeImpl.recordRead.<anonymous>' call
        this.ut_1 = tmp1_also;
        tmp$ret$1 = tmp1_also;
        tmp_0 = tmp$ret$1;
      } else {
        tmp_0 = tmp1_elvis_lhs;
      }
      var tracked = tmp_0;
      tracked.w16(instance, instance.m18());
    }
  };
  RecomposeScopeImpl.prototype.k16 = function () {
    return !(this.ut_1 == null);
  };
  RecomposeScopeImpl.prototype.l15 = function (instances) {
    if (instances == null)
      return true;
    var tmp0_elvis_lhs = this.ut_1;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return true;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var trackedDependencies = tmp;
    var tmp_0;
    if (instances.w10()) {
      var tmp$ret$0;
      $l$block_0: {
        // Inline function 'kotlin.collections.all' call
        var tmp_1;
        if (!(instances == null) ? isInterface(instances, Collection) : false) {
          tmp_1 = instances.i();
        } else {
          tmp_1 = false;
        }
        if (tmp_1) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
        var tmp0_iterator = instances.d();
        while (tmp0_iterator.e()) {
          var element = tmp0_iterator.f();
          var tmp$ret$1;
          // Inline function 'androidx.compose.runtime.RecomposeScopeImpl.isInvalidFor.<anonymous>' call
          var tmp_2;
          if (isInterface(element, DerivedState)) {
            tmp_2 = equals_0(trackedDependencies.f18(element), element.m18());
          } else {
            tmp_2 = false;
          }
          tmp$ret$1 = tmp_2;
          if (!tmp$ret$1) {
            tmp$ret$0 = false;
            break $l$block_0;
          }
        }
        tmp$ret$0 = true;
      }
      tmp_0 = tmp$ret$0;
    } else {
      tmp_0 = false;
    }
    if (tmp_0)
      return false;
    return true;
  };
  RecomposeScopeImpl.prototype.d10 = function () {
    var tmp0_safe_receiver = this.pt_1;
    if (tmp0_safe_receiver == null)
      null;
    else {
      var tmp$ret$2;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.RecomposeScopeImpl.rereadTrackedInstances.<anonymous>' call
      var tmp0_safe_receiver_0 = this.tt_1;
      var tmp;
      if (tmp0_safe_receiver_0 == null) {
        tmp = null;
      } else {
        var tmp$ret$0;
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        _set_rereading__pnqtpo(this, true);
        var tmp_0;
        try {
          var inductionVariable = 0;
          var last = tmp0_safe_receiver_0.a19_1;
          var tmp_1;
          if (inductionVariable < last) {
            do {
              var i = inductionVariable;
              inductionVariable = inductionVariable + 1 | 0;
              // Inline function 'androidx.compose.runtime.RecomposeScopeImpl.rereadTrackedInstances.<anonymous>.<anonymous>.<anonymous>' call
              var tmp_2 = tmp0_safe_receiver_0.b19_1[i];
              var tmp0__anonymous__q1qw7t = isObject(tmp_2) ? tmp_2 : THROW_CCE();
              var tmp1__anonymous__uwfjfc = tmp0_safe_receiver_0.c19_1[i];
              tmp0_safe_receiver.j17(tmp0__anonymous__q1qw7t);
            }
             while (inductionVariable < last);
            tmp_1 = Unit_getInstance();
          }
          tmp_0 = tmp_1;
        }finally {
          _set_rereading__pnqtpo(this, false);
        }
        tmp$ret$0 = tmp_0;
        tmp = Unit_getInstance();
      }
      tmp$ret$1 = tmp;
      tmp$ret$2 = tmp$ret$1;
    }
  };
  RecomposeScopeImpl.prototype.b14 = function (token) {
    var tmp0_safe_receiver = this.tt_1;
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      var tmp$ret$3;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$2;
      // Inline function 'androidx.compose.runtime.RecomposeScopeImpl.end.<anonymous>' call
      var tmp_0;
      var tmp_1;
      if (!this.d14()) {
        var tmp$ret$1;
        $l$block: {
          // Inline function 'androidx.compose.runtime.collection.IdentityArrayIntMap.any' call
          var inductionVariable = 0;
          var last = tmp0_safe_receiver.a19_1;
          if (inductionVariable < last)
            do {
              var i = inductionVariable;
              inductionVariable = inductionVariable + 1 | 0;
              var tmp$ret$0;
              // Inline function 'androidx.compose.runtime.RecomposeScopeImpl.end.<anonymous>.<anonymous>' call
              var tmp_2 = tmp0_safe_receiver.b19_1[i];
              var tmp0__anonymous__q1qw7t = isObject(tmp_2) ? tmp_2 : THROW_CCE();
              var tmp1__anonymous__uwfjfc = tmp0_safe_receiver.c19_1[i];
              tmp$ret$0 = !(tmp1__anonymous__uwfjfc === token);
              if (tmp$ret$0) {
                tmp$ret$1 = true;
                break $l$block;
              }
            }
             while (inductionVariable < last);
          tmp$ret$1 = false;
        }
        tmp_1 = tmp$ret$1;
      } else {
        tmp_1 = false;
      }
      if (tmp_1) {
        tmp_0 = RecomposeScopeImpl$end$lambda(this, token, tmp0_safe_receiver);
      } else {
        tmp_0 = null;
      }
      tmp$ret$2 = tmp_0;
      tmp$ret$3 = tmp$ret$2;
      tmp = tmp$ret$3;
    }
    return tmp;
  };
  RecomposeScopeImpl.$metadata$ = classMeta('RecomposeScopeImpl', [ScopeUpdateScope, RecomposeScope]);
  function RecomposeScope() {
  }
  RecomposeScope.$metadata$ = interfaceMeta('RecomposeScope');
  var ProduceAnotherFrame;
  var FramePending;
  var State_ShutDown_instance;
  var State_ShuttingDown_instance;
  var State_Inactive_instance;
  var State_InactivePendingWork_instance;
  var State_Idle_instance;
  var State_PendingWork_instance;
  var State_entriesInitialized;
  function State_initEntries() {
    if (State_entriesInitialized)
      return Unit_getInstance();
    State_entriesInitialized = true;
    State_ShutDown_instance = new State('ShutDown', 0);
    State_ShuttingDown_instance = new State('ShuttingDown', 1);
    State_Inactive_instance = new State('Inactive', 2);
    State_InactivePendingWork_instance = new State('InactivePendingWork', 3);
    State_Idle_instance = new State('Idle', 4);
    State_PendingWork_instance = new State('PendingWork', 5);
  }
  function addRunning($this, info) {
    $l$loop: while (true) {
      var old = $this.f19_1.a2();
      var new_0 = old.b(info);
      if (old === new_0 ? true : $this.f19_1.qo(old, new_0))
        break $l$loop;
    }
  }
  function removeRunning($this, info) {
    $l$loop: while (true) {
      var old = $this.f19_1.a2();
      var new_0 = old.n6(info);
      if (old === new_0 ? true : $this.f19_1.qo(old, new_0))
        break $l$loop;
    }
  }
  function invoke$fillToInsert(toInsert, this$0) {
    toInsert.q6();
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = this$0.l19_1;
    var tmp$ret$0;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    // Inline function 'androidx.compose.runtime.snapshots.fastForEach' call
    var tmp0_fastForEach = this$0.s19_1;
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    var last = tmp0_fastForEach.g() - 1 | 0;
    if (inductionVariable <= last)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var item = tmp0_fastForEach.h(index);
        // Inline function 'androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$slambda.invoke.fillToInsert.<anonymous>.<anonymous>' call
        // Inline function 'kotlin.collections.plusAssign' call
        toInsert.b(item);
      }
       while (inductionVariable <= last);
    this$0.s19_1.q6();
    tmp$ret$0 = Unit_getInstance();
    tmp$ret$1 = tmp$ret$0;
  }
  function Recomposer$runRecomposeAndApplyChanges$slambda$lambda(this$0, $toRecompose, $toInsert, $toApply, $toLateApply, $toComplete) {
    return function (frameTime) {
      var tmp;
      if (this$0.i19_1.hs()) {
        var tmp$ret$0;
        $l$block: {
          // Inline function 'androidx.compose.runtime.trace' call
          var token = Trace_getInstance().z10('Recomposer:animation');
          try {
            this$0.i19_1.is(frameTime);
            Companion_getInstance_15().b1a();
            tmp$ret$0 = Unit_getInstance();
            break $l$block;
          }finally {
            Trace_getInstance().l11(token);
          }
        }
        tmp = tmp$ret$0;
      }
      var tmp$ret$16;
      $l$block_0: {
        // Inline function 'androidx.compose.runtime.trace' call
        var token_0 = Trace_getInstance().z10('Recomposer:recompose');
        try {
          var tmp$ret$15;
          // Inline function 'androidx.compose.runtime.Recomposer.runRecomposeAndApplyChanges.<anonymous>.<anonymous>.<anonymous>' call
          var tmp$ret$2;
          // Inline function 'androidx.compose.runtime.synchronized' call
          var tmp0_synchronized = this$0.l19_1;
          var tmp$ret$1;
          // Inline function 'kotlinx.atomicfu.locks.synchronized' call
          recordComposerModificationsLocked(this$0);
          // Inline function 'androidx.compose.runtime.snapshots.fastForEach' call
          var tmp0_fastForEach = this$0.q19_1;
          // Inline function 'kotlin.contracts.contract' call
          var inductionVariable = 0;
          var last = tmp0_fastForEach.g() - 1 | 0;
          if (inductionVariable <= last)
            do {
              var index = inductionVariable;
              inductionVariable = inductionVariable + 1 | 0;
              var item = tmp0_fastForEach.h(index);
              // Inline function 'androidx.compose.runtime.Recomposer.runRecomposeAndApplyChanges.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
              // Inline function 'kotlin.collections.plusAssign' call
              $toRecompose.b(item);
            }
             while (inductionVariable <= last);
          this$0.q19_1.q6();
          tmp$ret$1 = Unit_getInstance();
          tmp$ret$2 = tmp$ret$1;
          var modifiedValues = new IdentityArraySet();
          var alreadyComposed = new IdentityArraySet();
          $l$loop: while (true) {
            var tmp_0;
            var tmp$ret$3;
            // Inline function 'kotlin.collections.isNotEmpty' call
            tmp$ret$3 = !$toRecompose.i();
            if (tmp$ret$3) {
              tmp_0 = true;
            } else {
              var tmp$ret$4;
              // Inline function 'kotlin.collections.isNotEmpty' call
              tmp$ret$4 = !$toInsert.i();
              tmp_0 = tmp$ret$4;
            }
            if (!tmp_0) {
              break $l$loop;
            }
            try {
              // Inline function 'androidx.compose.runtime.snapshots.fastForEach' call
              // Inline function 'kotlin.contracts.contract' call
              var inductionVariable_0 = 0;
              var last_0 = $toRecompose.g() - 1 | 0;
              if (inductionVariable_0 <= last_0)
                do {
                  var index_0 = inductionVariable_0;
                  inductionVariable_0 = inductionVariable_0 + 1 | 0;
                  var item_0 = $toRecompose.h(index_0);
                  // Inline function 'androidx.compose.runtime.Recomposer.runRecomposeAndApplyChanges.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
                  alreadyComposed.p15(item_0);
                  var tmp0_safe_receiver = performRecompose(this$0, item_0, modifiedValues);
                  if (tmp0_safe_receiver == null)
                    null;
                  else {
                    var tmp$ret$5;
                    // Inline function 'kotlin.let' call
                    // Inline function 'kotlin.contracts.contract' call
                    $toApply.b(tmp0_safe_receiver);
                    tmp$ret$5 = Unit_getInstance();
                  }
                }
                 while (inductionVariable_0 <= last_0);
            }finally {
              $toRecompose.q6();
            }
            if (modifiedValues.w10()) {
              var tmp$ret$7;
              // Inline function 'androidx.compose.runtime.synchronized' call
              var tmp1_synchronized = this$0.l19_1;
              var tmp$ret$6;
              // Inline function 'kotlinx.atomicfu.locks.synchronized' call
              var tmp0_fastForEach_0 = this$0.o19_1;
              // Inline function 'kotlin.contracts.contract' call
              var inductionVariable_1 = 0;
              var last_1 = tmp0_fastForEach_0.g() - 1 | 0;
              var tmp_1;
              if (inductionVariable_1 <= last_1) {
                do {
                  var index_1 = inductionVariable_1;
                  inductionVariable_1 = inductionVariable_1 + 1 | 0;
                  var item_1 = tmp0_fastForEach_0.h(index_1);
                  // Inline function 'androidx.compose.runtime.Recomposer.runRecomposeAndApplyChanges.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
                  if (!alreadyComposed.v2(item_1) ? item_1.i17(modifiedValues) : false) {
                    // Inline function 'kotlin.collections.plusAssign' call
                    $toRecompose.b(item_1);
                  }
                }
                 while (inductionVariable_1 <= last_1);
                tmp_1 = Unit_getInstance();
              }
              tmp$ret$6 = tmp_1;
              tmp$ret$7 = tmp$ret$6;
            }
            if ($toRecompose.i()) {
              invoke$fillToInsert($toInsert, this$0);
              $l$loop_0: while (true) {
                var tmp$ret$8;
                // Inline function 'kotlin.collections.isNotEmpty' call
                tmp$ret$8 = !$toInsert.i();
                if (!tmp$ret$8) {
                  break $l$loop_0;
                }
                // Inline function 'kotlin.collections.plusAssign' call
                var tmp2_plusAssign = performInsertValues(this$0, $toInsert, modifiedValues);
                addAll($toLateApply, tmp2_plusAssign);
                invoke$fillToInsert($toInsert, this$0);
              }
            }
          }
          var tmp$ret$9;
          // Inline function 'kotlin.collections.isNotEmpty' call
          tmp$ret$9 = !$toApply.i();
          if (tmp$ret$9) {
            var tmp0_this = this$0;
            var tmp1 = tmp0_this.h19_1;
            tmp0_this.h19_1 = tmp1.bd();
            try {
              // Inline function 'kotlin.collections.plusAssign' call
              addAll($toComplete, $toApply);
              // Inline function 'androidx.compose.runtime.snapshots.fastForEach' call
              // Inline function 'kotlin.contracts.contract' call
              var inductionVariable_2 = 0;
              var last_2 = $toApply.g() - 1 | 0;
              if (inductionVariable_2 <= last_2)
                do {
                  var index_2 = inductionVariable_2;
                  inductionVariable_2 = inductionVariable_2 + 1 | 0;
                  var item_2 = $toApply.h(index_2);
                  // Inline function 'androidx.compose.runtime.Recomposer.runRecomposeAndApplyChanges.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
                  item_2.r17();
                }
                 while (inductionVariable_2 <= last_2);
            }finally {
              $toApply.q6();
            }
          }
          var tmp$ret$10;
          // Inline function 'kotlin.collections.isNotEmpty' call
          tmp$ret$10 = !$toLateApply.i();
          if (tmp$ret$10) {
            try {
              // Inline function 'kotlin.collections.plusAssign' call
              addAll($toComplete, $toLateApply);
              // Inline function 'kotlin.collections.forEach' call
              var tmp0_iterator = $toLateApply.d();
              while (tmp0_iterator.e()) {
                var element = tmp0_iterator.f();
                // Inline function 'androidx.compose.runtime.Recomposer.runRecomposeAndApplyChanges.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
                element.s17();
              }
            }finally {
              $toLateApply.q6();
            }
          }
          var tmp$ret$11;
          // Inline function 'kotlin.collections.isNotEmpty' call
          tmp$ret$11 = !$toComplete.i();
          if (tmp$ret$11) {
            try {
              // Inline function 'kotlin.collections.forEach' call
              var tmp0_iterator_0 = $toComplete.d();
              while (tmp0_iterator_0.e()) {
                var element_0 = tmp0_iterator_0.f();
                // Inline function 'androidx.compose.runtime.Recomposer.runRecomposeAndApplyChanges.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
                element_0.j13();
              }
            }finally {
              $toComplete.q6();
            }
          }
          discardUnusedValues(this$0);
          var tmp$ret$14;
          // Inline function 'androidx.compose.runtime.synchronized' call
          var tmp3_synchronized = this$0.l19_1;
          var tmp$ret$13;
          // Inline function 'kotlinx.atomicfu.locks.synchronized' call
          var tmp$ret$12;
          // Inline function 'androidx.compose.runtime.Recomposer.runRecomposeAndApplyChanges.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
          tmp$ret$12 = deriveStateLocked(this$0);
          tmp$ret$13 = tmp$ret$12;
          tmp$ret$14 = tmp$ret$13;
          tmp$ret$15 = tmp$ret$14;
          tmp$ret$16 = tmp$ret$15;
          break $l$block_0;
        }finally {
          Trace_getInstance().l11(token_0);
        }
      }
      return tmp$ret$16;
    };
  }
  function Recomposer$recompositionRunner$slambda$lambda(this$0) {
    return function (changed, _anonymous_parameter_1__qggqgd) {
      var tmp$ret$2;
      // Inline function 'androidx.compose.runtime.synchronized' call
      var tmp0_synchronized = this$0.l19_1;
      var tmp$ret$1;
      // Inline function 'kotlinx.atomicfu.locks.synchronized' call
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.Recomposer.recompositionRunner.<anonymous>.<anonymous>.<anonymous>' call
      var tmp;
      if (this$0.y19_1.a2().q4(State_Idle_getInstance()) >= 0) {
        var tmp0_this = this$0;
        // Inline function 'kotlin.collections.plusAssign' call
        var tmp0_plusAssign = tmp0_this.p19_1;
        tmp0_plusAssign.b(changed);
        tmp = deriveStateLocked(this$0);
      } else {
        tmp = null;
      }
      tmp$ret$0 = tmp;
      tmp$ret$1 = tmp$ret$0;
      tmp$ret$2 = tmp$ret$1;
      var tmp0_safe_receiver = tmp$ret$2;
      if (tmp0_safe_receiver == null)
        null;
      else {
        var tmp$ret$4;
        // Inline function 'kotlin.coroutines.resume' call
        var tmp$ret$3;
        // Inline function 'kotlin.Companion.success' call
        var tmp0_success = Companion_getInstance_4();
        tmp$ret$3 = _Result___init__impl__xyqfz8(Unit_getInstance());
        tmp0_safe_receiver.o3(tmp$ret$3);
        tmp$ret$4 = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  function Recomposer$recompositionRunner$slambda$slambda($block, $parentFrameClock, resultContinuation) {
    this.k1a_1 = $block;
    this.l1a_1 = $parentFrameClock;
    CoroutineImpl.call(this, resultContinuation);
  }
  Recomposer$recompositionRunner$slambda$slambda.prototype.n1a = function ($this$coroutineScope, $cont) {
    var tmp = this.o1a($this$coroutineScope, $cont);
    tmp.jd_1 = Unit_getInstance();
    tmp.kd_1 = null;
    return tmp.qd();
  };
  Recomposer$recompositionRunner$slambda$slambda.prototype.rd = function (p1, $cont) {
    return this.n1a((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $cont);
  };
  Recomposer$recompositionRunner$slambda$slambda.prototype.qd = function () {
    var suspendResult = this.jd_1;
    $sm: do
      try {
        var tmp = this.hd_1;
        switch (tmp) {
          case 0:
            this.id_1 = 2;
            this.hd_1 = 1;
            suspendResult = this.k1a_1(this.m1a_1, this.l1a_1, this);
            if (suspendResult === get_COROUTINE_SUSPENDED()) {
              return suspendResult;
            }

            continue $sm;
          case 1:
            return Unit_getInstance();
          case 2:
            throw this.kd_1;
        }
      } catch ($p) {
        if (this.id_1 === 2) {
          throw $p;
        } else {
          this.hd_1 = this.id_1;
          this.kd_1 = $p;
        }
      }
     while (true);
  };
  Recomposer$recompositionRunner$slambda$slambda.prototype.o1a = function ($this$coroutineScope, completion) {
    var i = new Recomposer$recompositionRunner$slambda$slambda(this.k1a_1, this.l1a_1, completion);
    i.m1a_1 = $this$coroutineScope;
    return i;
  };
  Recomposer$recompositionRunner$slambda$slambda.$metadata$ = classMeta('Recomposer$recompositionRunner$slambda$slambda', undefined, undefined, undefined, [1], CoroutineImpl.prototype);
  function Recomposer$recompositionRunner$slambda$slambda_0($block, $parentFrameClock, resultContinuation) {
    var i = new Recomposer$recompositionRunner$slambda$slambda($block, $parentFrameClock, resultContinuation);
    var l = function ($this$coroutineScope, $cont) {
      return i.n1a($this$coroutineScope, $cont);
    };
    l.$arity = 1;
    return l;
  }
  function State(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  State.$metadata$ = classMeta('State', undefined, undefined, undefined, undefined, Enum.prototype);
  function deriveStateLocked($this) {
    if ($this.y19_1.a2().q4(State_ShuttingDown_getInstance()) <= 0) {
      $this.o19_1.q6();
      $this.p19_1.q6();
      $this.q19_1.q6();
      $this.r19_1.q6();
      $this.s19_1.q6();
      var tmp0_safe_receiver = $this.v19_1;
      if (tmp0_safe_receiver == null)
        null;
      else {
        tmp0_safe_receiver.ph(null, 1, null);
      }
      $this.v19_1 = null;
      return null;
    }
    var tmp;
    if ($this.m19_1 == null) {
      $this.p19_1.q6();
      $this.q19_1.q6();
      tmp = $this.i19_1.hs() ? State_InactivePendingWork_getInstance() : State_Inactive_getInstance();
    } else {
      var tmp_0;
      var tmp_1;
      var tmp_2;
      var tmp_3;
      var tmp_4;
      var tmp$ret$0;
      // Inline function 'kotlin.collections.isNotEmpty' call
      var tmp0_isNotEmpty = $this.q19_1;
      tmp$ret$0 = !tmp0_isNotEmpty.i();
      if (tmp$ret$0) {
        tmp_4 = true;
      } else {
        var tmp$ret$1;
        // Inline function 'kotlin.collections.isNotEmpty' call
        var tmp1_isNotEmpty = $this.p19_1;
        tmp$ret$1 = !tmp1_isNotEmpty.i();
        tmp_4 = tmp$ret$1;
      }
      if (tmp_4) {
        tmp_3 = true;
      } else {
        var tmp$ret$2;
        // Inline function 'kotlin.collections.isNotEmpty' call
        var tmp2_isNotEmpty = $this.r19_1;
        tmp$ret$2 = !tmp2_isNotEmpty.i();
        tmp_3 = tmp$ret$2;
      }
      if (tmp_3) {
        tmp_2 = true;
      } else {
        var tmp$ret$3;
        // Inline function 'kotlin.collections.isNotEmpty' call
        var tmp3_isNotEmpty = $this.s19_1;
        tmp$ret$3 = !tmp3_isNotEmpty.i();
        tmp_2 = tmp$ret$3;
      }
      if (tmp_2) {
        tmp_1 = true;
      } else {
        tmp_1 = $this.w19_1 > 0;
      }
      if (tmp_1) {
        tmp_0 = true;
      } else {
        tmp_0 = $this.i19_1.hs();
      }
      if (tmp_0) {
        tmp = State_PendingWork_getInstance();
      } else {
        tmp = State_Idle_getInstance();
      }
    }
    var newState = tmp;
    $this.y19_1.po(newState);
    var tmp_5;
    if (newState.equals(State_PendingWork_getInstance())) {
      var tmp$ret$4;
      // Inline function 'kotlin.also' call
      var tmp4_also = $this.v19_1;
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'androidx.compose.runtime.Recomposer.deriveStateLocked.<anonymous>' call
      $this.v19_1 = null;
      tmp$ret$4 = tmp4_also;
      tmp_5 = tmp$ret$4;
    } else {
      tmp_5 = null;
    }
    return tmp_5;
  }
  function _get_shouldKeepRecomposing__5j79sd($this) {
    var tmp;
    var tmp$ret$2;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = $this.l19_1;
    var tmp$ret$1;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.Recomposer.<get-shouldKeepRecomposing>.<anonymous>' call
    tmp$ret$0 = !$this.x19_1;
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    if (tmp$ret$2) {
      tmp = true;
    } else {
      var tmp$ret$4;
      $l$block: {
        // Inline function 'kotlin.sequences.any' call
        var tmp1_any = $this.j19_1.oj();
        var tmp0_iterator = tmp1_any.d();
        while (tmp0_iterator.e()) {
          var element = tmp0_iterator.f();
          var tmp$ret$3;
          // Inline function 'androidx.compose.runtime.Recomposer.<get-shouldKeepRecomposing>.<anonymous>' call
          tmp$ret$3 = element.df();
          if (tmp$ret$3) {
            tmp$ret$4 = true;
            break $l$block;
          }
        }
        tmp$ret$4 = false;
      }
      tmp = tmp$ret$4;
    }
    return tmp;
  }
  function RecomposerInfoImpl($outer) {
    this.p1a_1 = $outer;
  }
  RecomposerInfoImpl.$metadata$ = classMeta('RecomposerInfoImpl', [RecomposerInfo]);
  function recordComposerModificationsLocked($this) {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.isNotEmpty' call
    var tmp0_isNotEmpty = $this.p19_1;
    tmp$ret$0 = !tmp0_isNotEmpty.i();
    if (tmp$ret$0) {
      // Inline function 'androidx.compose.runtime.snapshots.fastForEach' call
      var tmp1_fastForEach = $this.p19_1;
      // Inline function 'kotlin.contracts.contract' call
      var inductionVariable = 0;
      var last = tmp1_fastForEach.g() - 1 | 0;
      if (inductionVariable <= last)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var item = tmp1_fastForEach.h(index);
          // Inline function 'androidx.compose.runtime.Recomposer.recordComposerModificationsLocked.<anonymous>' call
          // Inline function 'androidx.compose.runtime.snapshots.fastForEach' call
          var tmp0_fastForEach = $this.o19_1;
          // Inline function 'kotlin.contracts.contract' call
          var inductionVariable_0 = 0;
          var last_0 = tmp0_fastForEach.g() - 1 | 0;
          if (inductionVariable_0 <= last_0)
            do {
              var index_0 = inductionVariable_0;
              inductionVariable_0 = inductionVariable_0 + 1 | 0;
              var item_0 = tmp0_fastForEach.h(index_0);
              // Inline function 'androidx.compose.runtime.Recomposer.recordComposerModificationsLocked.<anonymous>.<anonymous>' call
              item_0.g17(item);
            }
             while (inductionVariable_0 <= last_0);
        }
         while (inductionVariable <= last);
      $this.p19_1.q6();
      if (!(deriveStateLocked($this) == null)) {
        // Inline function 'kotlin.error' call
        throw IllegalStateException_init_$Create$_0('called outside of runRecomposeAndApplyChanges');
      }
    }
  }
  function registerRunnerJob($this, callingJob) {
    var tmp$ret$3;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = $this.l19_1;
    var tmp$ret$2;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.Recomposer.registerRunnerJob.<anonymous>' call
    var tmp0_safe_receiver = $this.n19_1;
    if (tmp0_safe_receiver == null)
      null;
    else {
      var tmp$ret$0;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      throw tmp0_safe_receiver;
    }
    if ($this.y19_1.a2().q4(State_ShuttingDown_getInstance()) <= 0) {
      // Inline function 'kotlin.error' call
      throw IllegalStateException_init_$Create$_0('Recomposer shut down');
    }
    if (!($this.m19_1 == null)) {
      // Inline function 'kotlin.error' call
      throw IllegalStateException_init_$Create$_0('Recomposer already running');
    }
    $this.m19_1 = callingJob;
    tmp$ret$1 = deriveStateLocked($this);
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
  }
  function _get_hasSchedulingWork__b617oy($this) {
    var tmp$ret$4;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = $this.l19_1;
    var tmp$ret$3;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    var tmp$ret$2;
    // Inline function 'androidx.compose.runtime.Recomposer.<get-hasSchedulingWork>.<anonymous>' call
    var tmp;
    var tmp_0;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.isNotEmpty' call
    var tmp0_isNotEmpty = $this.p19_1;
    tmp$ret$0 = !tmp0_isNotEmpty.i();
    if (tmp$ret$0) {
      tmp_0 = true;
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.collections.isNotEmpty' call
      var tmp1_isNotEmpty = $this.q19_1;
      tmp$ret$1 = !tmp1_isNotEmpty.i();
      tmp_0 = tmp$ret$1;
    }
    if (tmp_0) {
      tmp = true;
    } else {
      tmp = $this.i19_1.hs();
    }
    tmp$ret$2 = tmp;
    tmp$ret$3 = tmp$ret$2;
    tmp$ret$4 = tmp$ret$3;
    return tmp$ret$4;
  }
  function awaitWorkAvailable($this, $cont) {
    var tmp = new $awaitWorkAvailableCOROUTINE$1($this, $cont);
    tmp.jd_1 = Unit_getInstance();
    tmp.kd_1 = null;
    return tmp.qd();
  }
  function recompositionRunner($this, block, $cont) {
    var tmp$ret$0;
    // Inline function 'kotlin.js.getCoroutineContext' call
    tmp$ret$0 = $cont.q3();
    var parentFrameClock = get_monotonicFrameClock(tmp$ret$0);
    return withContext($this.i19_1, Recomposer$recompositionRunner$slambda_0($this, block, parentFrameClock, null), $cont);
  }
  function performInitialMovableContentInserts($this, composition) {
    var tmp$ret$3;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = $this.l19_1;
    var tmp$ret$2;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    var tmp;
    var tmp$ret$1;
    $l$block: {
      // Inline function 'androidx.compose.runtime.snapshots.fastAny' call
      var tmp0_fastAny = $this.s19_1;
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'androidx.compose.runtime.snapshots.fastForEach' call
      // Inline function 'kotlin.contracts.contract' call
      var inductionVariable = 0;
      var last = tmp0_fastAny.g() - 1 | 0;
      if (inductionVariable <= last)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var item = tmp0_fastAny.h(index);
          // Inline function 'androidx.compose.runtime.snapshots.fastAny.<anonymous>' call
          var tmp$ret$0;
          // Inline function 'androidx.compose.runtime.Recomposer.performInitialMovableContentInserts.<anonymous>.<anonymous>' call
          tmp$ret$0 = equals_0(item.g12_1, composition);
          if (tmp$ret$0) {
            tmp$ret$1 = true;
            break $l$block;
          }
        }
         while (inductionVariable <= last);
      tmp$ret$1 = false;
    }
    if (!tmp$ret$1) {
      return Unit_getInstance();
    }
    tmp$ret$2 = tmp;
    tmp$ret$3 = tmp$ret$2;
    var tmp$ret$4;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$4 = ArrayList_init_$Create$();
    var toInsert = tmp$ret$4;
    performInitialMovableContentInserts$fillToInsert(toInsert, $this, composition);
    $l$loop: while (true) {
      var tmp$ret$5;
      // Inline function 'kotlin.collections.isNotEmpty' call
      tmp$ret$5 = !toInsert.i();
      if (!tmp$ret$5) {
        break $l$loop;
      }
      performInsertValues($this, toInsert, null);
      performInitialMovableContentInserts$fillToInsert(toInsert, $this, composition);
    }
  }
  function performRecompose($this, composition, modifiedValues) {
    if (composition.v16() ? true : composition.f17())
      return null;
    var tmp;
    var tmp$ret$2;
    $l$block_0: {
      // Inline function 'androidx.compose.runtime.Recomposer.composing' call
      var snapshot = Companion_getInstance_15().c1b(readObserverOf($this, composition), writeObserverOf($this, composition, modifiedValues));
      try {
        var tmp$ret$1;
        $l$block: {
          // Inline function 'androidx.compose.runtime.snapshots.Snapshot.enter' call
          var previous = snapshot.d1b();
          try {
            var tmp$ret$0;
            // Inline function 'androidx.compose.runtime.Recomposer.performRecompose.<anonymous>' call
            var tmp0_safe_receiver = modifiedValues;
            if ((tmp0_safe_receiver == null ? null : tmp0_safe_receiver.w10()) === true) {
              composition.h14(Recomposer$performRecompose$lambda(modifiedValues, composition));
            }
            tmp$ret$0 = composition.o17();
            tmp$ret$1 = tmp$ret$0;
            break $l$block;
          }finally {
            snapshot.e1b(previous);
          }
        }
        tmp$ret$2 = tmp$ret$1;
        break $l$block_0;
      }finally {
        applyAndCheck($this, snapshot);
      }
    }
    if (tmp$ret$2) {
      tmp = composition;
    } else {
      tmp = null;
    }
    return tmp;
  }
  function performInsertValues($this, references, modifiedValues) {
    var tmp$ret$3;
    // Inline function 'androidx.compose.runtime.snapshots.fastGroupBy' call
    // Inline function 'kotlin.contracts.contract' call
    var destination = HashMap_init_$Create$_1(references.g());
    // Inline function 'androidx.compose.runtime.snapshots.fastForEach' call
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    var last = references.g() - 1 | 0;
    if (inductionVariable <= last)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var item = references.h(index);
        // Inline function 'androidx.compose.runtime.snapshots.fastGroupBy.<anonymous>' call
        var tmp$ret$0;
        // Inline function 'androidx.compose.runtime.Recomposer.performInsertValues.<anonymous>' call
        tmp$ret$0 = item.g12_1;
        var key = tmp$ret$0;
        var tmp$ret$2;
        // Inline function 'kotlin.collections.getOrPut' call
        var value = destination.l2(key);
        var tmp;
        if (value == null) {
          var tmp$ret$1;
          // Inline function 'androidx.compose.runtime.snapshots.fastGroupBy.<anonymous>.<anonymous>' call
          tmp$ret$1 = ArrayList_init_$Create$();
          var answer = tmp$ret$1;
          destination.a(key, answer);
          tmp = answer;
        } else {
          tmp = value;
        }
        tmp$ret$2 = tmp;
        var list = tmp$ret$2;
        list.b(item);
      }
       while (inductionVariable <= last);
    tmp$ret$3 = destination;
    var tasks = tmp$ret$3;
    var tmp$ret$4;
    // Inline function 'kotlin.collections.iterator' call
    tmp$ret$4 = tasks.t().d();
    var tmp0_iterator = tmp$ret$4;
    while (tmp0_iterator.e()) {
      var tmp1_loop_parameter = tmp0_iterator.f();
      var tmp$ret$5;
      // Inline function 'kotlin.collections.component1' call
      tmp$ret$5 = tmp1_loop_parameter.y1();
      var composition = tmp$ret$5;
      var tmp$ret$6;
      // Inline function 'kotlin.collections.component2' call
      tmp$ret$6 = tmp1_loop_parameter.a2();
      var refs = tmp$ret$6;
      runtimeCheck(!composition.v16());
      var tmp$ret$13;
      $l$block_0: {
        // Inline function 'androidx.compose.runtime.Recomposer.composing' call
        var snapshot = Companion_getInstance_15().c1b(readObserverOf($this, composition), writeObserverOf($this, composition, modifiedValues));
        try {
          var tmp$ret$12;
          $l$block: {
            // Inline function 'androidx.compose.runtime.snapshots.Snapshot.enter' call
            var previous = snapshot.d1b();
            try {
              var tmp$ret$11;
              // Inline function 'androidx.compose.runtime.synchronized' call
              var tmp0_synchronized = $this.l19_1;
              var tmp$ret$10;
              // Inline function 'kotlinx.atomicfu.locks.synchronized' call
              var tmp$ret$9;
              // Inline function 'androidx.compose.runtime.Recomposer.performInsertValues.<anonymous>.<anonymous>' call
              var tmp$ret$8;
              // Inline function 'androidx.compose.runtime.snapshots.fastMap' call
              // Inline function 'kotlin.contracts.contract' call
              var target = ArrayList_init_$Create$_0(refs.g());
              // Inline function 'androidx.compose.runtime.snapshots.fastForEach' call
              // Inline function 'kotlin.contracts.contract' call
              var inductionVariable_0 = 0;
              var last_0 = refs.g() - 1 | 0;
              if (inductionVariable_0 <= last_0)
                do {
                  var index_0 = inductionVariable_0;
                  inductionVariable_0 = inductionVariable_0 + 1 | 0;
                  var item_0 = refs.h(index_0);
                  // Inline function 'androidx.compose.runtime.snapshots.fastMap.<anonymous>' call
                  // Inline function 'kotlin.collections.plusAssign' call
                  var tmp$ret$7;
                  // Inline function 'androidx.compose.runtime.Recomposer.performInsertValues.<anonymous>.<anonymous>.<anonymous>' call
                  tmp$ret$7 = to(item_0, removeLastMultiValue($this.t19_1, item_0.e12_1));
                  var tmp0_plusAssign = tmp$ret$7;
                  target.b(tmp0_plusAssign);
                }
                 while (inductionVariable_0 <= last_0);
              tmp$ret$8 = target;
              tmp$ret$9 = tmp$ret$8;
              tmp$ret$10 = tmp$ret$9;
              tmp$ret$11 = tmp$ret$10;
              var pairs = tmp$ret$11;
              composition.p17(pairs);
              tmp$ret$12 = Unit_getInstance();
              break $l$block;
            }finally {
              snapshot.e1b(previous);
            }
          }
          tmp$ret$13 = tmp$ret$12;
          break $l$block_0;
        }finally {
          applyAndCheck($this, snapshot);
        }
      }
    }
    return toList_0(tasks.m2());
  }
  function discardUnusedValues($this) {
    var tmp$ret$5;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = $this.l19_1;
    var tmp$ret$4;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    var tmp$ret$3;
    // Inline function 'androidx.compose.runtime.Recomposer.discardUnusedValues.<anonymous>' call
    var tmp;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.isNotEmpty' call
    var tmp0_isNotEmpty = $this.t19_1;
    tmp$ret$0 = !tmp0_isNotEmpty.i();
    if (tmp$ret$0) {
      var references = flatten($this.t19_1.x7());
      $this.t19_1.q6();
      var tmp$ret$2;
      // Inline function 'androidx.compose.runtime.snapshots.fastMap' call
      // Inline function 'kotlin.contracts.contract' call
      var target = ArrayList_init_$Create$_0(references.g());
      // Inline function 'androidx.compose.runtime.snapshots.fastForEach' call
      // Inline function 'kotlin.contracts.contract' call
      var inductionVariable = 0;
      var last = references.g() - 1 | 0;
      if (inductionVariable <= last)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var item = references.h(index);
          // Inline function 'androidx.compose.runtime.snapshots.fastMap.<anonymous>' call
          // Inline function 'kotlin.collections.plusAssign' call
          var tmp$ret$1;
          // Inline function 'androidx.compose.runtime.Recomposer.discardUnusedValues.<anonymous>.<anonymous>' call
          tmp$ret$1 = to(item, $this.u19_1.l2(item));
          var tmp0_plusAssign = tmp$ret$1;
          target.b(tmp0_plusAssign);
        }
         while (inductionVariable <= last);
      tmp$ret$2 = target;
      var unusedValues = tmp$ret$2;
      $this.u19_1.q6();
      tmp = unusedValues;
    } else {
      tmp = emptyList();
    }
    tmp$ret$3 = tmp;
    tmp$ret$4 = tmp$ret$3;
    tmp$ret$5 = tmp$ret$4;
    var unusedValues_0 = tmp$ret$5;
    // Inline function 'androidx.compose.runtime.snapshots.fastForEach' call
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable_0 = 0;
    var last_0 = unusedValues_0.g() - 1 | 0;
    if (inductionVariable_0 <= last_0)
      do {
        var index_0 = inductionVariable_0;
        inductionVariable_0 = inductionVariable_0 + 1 | 0;
        var item_0 = unusedValues_0.h(index_0);
        // Inline function 'androidx.compose.runtime.Recomposer.discardUnusedValues.<anonymous>' call
        var reference = item_0.a3();
        var state = item_0.b3();
        if (!(state == null)) {
          reference.g12_1.q17(state);
        }
      }
       while (inductionVariable_0 <= last_0);
  }
  function readObserverOf($this, composition) {
    return Recomposer$readObserverOf$lambda(composition);
  }
  function writeObserverOf($this, composition, modifiedValues) {
    return Recomposer$writeObserverOf$lambda(composition, modifiedValues);
  }
  function applyAndCheck($this, snapshot) {
    try {
      var applyResult = snapshot.s1b();
      if (applyResult instanceof Failure_0) {
        // Inline function 'kotlin.error' call
        var tmp0_error = 'Unsupported concurrent change during composition. A state object was modified by composition as well as being modified outside composition.';
        throw IllegalStateException_init_$Create$_0(toString_2(tmp0_error));
      }
    }finally {
      snapshot.pi();
    }
  }
  function _get_hasFrameWorkLocked__1gtyf7($this) {
    var tmp;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.isNotEmpty' call
    var tmp0_isNotEmpty = $this.q19_1;
    tmp$ret$0 = !tmp0_isNotEmpty.i();
    if (tmp$ret$0) {
      tmp = true;
    } else {
      tmp = $this.i19_1.hs();
    }
    return tmp;
  }
  function Companion_9() {
    Companion_instance_9 = this;
    this.f19_1 = MutableStateFlow_0(persistentSetOf());
  }
  Companion_9.$metadata$ = objectMeta('Companion');
  var Companion_instance_9;
  function Companion_getInstance_9() {
    if (Companion_instance_9 == null)
      new Companion_9();
    return Companion_instance_9;
  }
  function performInitialMovableContentInserts$fillToInsert(toInsert, this$0, $composition) {
    toInsert.q6();
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = this$0.l19_1;
    var tmp$ret$0;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    var iterator = this$0.s19_1.d();
    while (iterator.e()) {
      var value = iterator.f();
      if (equals_0(value.g12_1, $composition)) {
        toInsert.b(value);
        iterator.g3();
      }
    }
    tmp$ret$0 = Unit_getInstance();
    tmp$ret$1 = tmp$ret$0;
  }
  function Recomposer$broadcastFrameClock$lambda(this$0) {
    return function () {
      var tmp$ret$3;
      // Inline function 'androidx.compose.runtime.synchronized' call
      var tmp0_synchronized = this$0.l19_1;
      var tmp$ret$2;
      // Inline function 'kotlinx.atomicfu.locks.synchronized' call
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.Recomposer.broadcastFrameClock.<anonymous>.<anonymous>' call
      var tmp$ret$0;
      // Inline function 'kotlin.also' call
      var tmp0_also = deriveStateLocked(this$0);
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'androidx.compose.runtime.Recomposer.broadcastFrameClock.<anonymous>.<anonymous>.<anonymous>' call
      if (this$0.y19_1.a2().q4(State_ShuttingDown_getInstance()) <= 0)
        throw CancellationException_init_$Create$_0('Recomposer shutdown; frame clock awaiter will never resume', this$0.n19_1);
      tmp$ret$0 = tmp0_also;
      tmp$ret$1 = tmp$ret$0;
      tmp$ret$2 = tmp$ret$1;
      tmp$ret$3 = tmp$ret$2;
      var tmp0_safe_receiver = tmp$ret$3;
      if (tmp0_safe_receiver == null)
        null;
      else {
        var tmp$ret$5;
        // Inline function 'kotlin.coroutines.resume' call
        var tmp$ret$4;
        // Inline function 'kotlin.Companion.success' call
        var tmp0_success = Companion_getInstance_4();
        tmp$ret$4 = _Result___init__impl__xyqfz8(Unit_getInstance());
        tmp0_safe_receiver.o3(tmp$ret$4);
        tmp$ret$5 = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  function Recomposer$effectJob$lambda$lambda(this$0, $throwable) {
    return function (runnerJobCause) {
      var tmp$ret$5;
      // Inline function 'androidx.compose.runtime.synchronized' call
      var tmp0_synchronized = this$0.l19_1;
      var tmp$ret$4;
      // Inline function 'kotlinx.atomicfu.locks.synchronized' call
      var tmp = this$0;
      var tmp0_safe_receiver = $throwable;
      var tmp_0;
      if (tmp0_safe_receiver == null) {
        tmp_0 = null;
      } else {
        var tmp$ret$3;
        // Inline function 'kotlin.apply' call
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'androidx.compose.runtime.Recomposer.effectJob.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
        var tmp0_safe_receiver_0 = runnerJobCause;
        var tmp_1;
        if (tmp0_safe_receiver_0 == null) {
          tmp_1 = null;
        } else {
          var tmp$ret$1;
          // Inline function 'kotlin.takeIf' call
          // Inline function 'kotlin.contracts.contract' call
          var tmp_2;
          var tmp$ret$0;
          // Inline function 'androidx.compose.runtime.Recomposer.effectJob.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
          tmp$ret$0 = !(tmp0_safe_receiver_0 instanceof CancellationException);
          if (tmp$ret$0) {
            tmp_2 = tmp0_safe_receiver_0;
          } else {
            tmp_2 = null;
          }
          tmp$ret$1 = tmp_2;
          tmp_1 = tmp$ret$1;
        }
        var tmp1_safe_receiver = tmp_1;
        if (tmp1_safe_receiver == null)
          null;
        else {
          var tmp$ret$2;
          // Inline function 'kotlin.let' call
          // Inline function 'kotlin.contracts.contract' call
          addSuppressed(tmp0_safe_receiver, tmp1_safe_receiver);
          tmp$ret$2 = Unit_getInstance();
        }
        tmp$ret$3 = tmp0_safe_receiver;
        tmp_0 = tmp$ret$3;
      }
      tmp.n19_1 = tmp_0;
      this$0.y19_1.po(State_ShutDown_getInstance());
      tmp$ret$4 = Unit_getInstance();
      tmp$ret$5 = tmp$ret$4;
      return Unit_getInstance();
    };
  }
  function Recomposer$effectJob$lambda(this$0) {
    return function (throwable) {
      var cancellation = CancellationException_init_$Create$_0('Recomposer effect job completed', throwable);
      var continuationToResume = null;
      var tmp$ret$2;
      // Inline function 'androidx.compose.runtime.synchronized' call
      var tmp0_synchronized = this$0.l19_1;
      var tmp$ret$1;
      // Inline function 'kotlinx.atomicfu.locks.synchronized' call
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.Recomposer.effectJob.<anonymous>.<anonymous>.<anonymous>' call
      var runnerJob = this$0.m19_1;
      var tmp;
      if (!(runnerJob == null)) {
        this$0.y19_1.po(State_ShuttingDown_getInstance());
        if (!this$0.x19_1) {
          runnerJob.ig(cancellation);
        } else if (!(this$0.v19_1 == null)) {
          continuationToResume = this$0.v19_1;
        }
        this$0.v19_1 = null;
        tmp = runnerJob.dg(Recomposer$effectJob$lambda$lambda(this$0, throwable));
      } else {
        this$0.n19_1 = cancellation;
        this$0.y19_1.po(State_ShutDown_getInstance());
        tmp = Unit_getInstance();
      }
      tmp$ret$0 = tmp;
      tmp$ret$1 = tmp$ret$0;
      tmp$ret$2 = tmp$ret$1;
      var tmp0_safe_receiver = continuationToResume;
      if (tmp0_safe_receiver == null)
        null;
      else {
        var tmp$ret$4;
        // Inline function 'kotlin.coroutines.resume' call
        var tmp$ret$3;
        // Inline function 'kotlin.Companion.success' call
        var tmp0_success = Companion_getInstance_4();
        tmp$ret$3 = _Result___init__impl__xyqfz8(Unit_getInstance());
        tmp0_safe_receiver.o3(tmp$ret$3);
        tmp$ret$4 = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  function Recomposer$runRecomposeAndApplyChanges$slambda(this$0, resultContinuation) {
    this.b1c_1 = this$0;
    CoroutineImpl.call(this, resultContinuation);
  }
  Recomposer$runRecomposeAndApplyChanges$slambda.prototype.k1c = function ($this$recompositionRunner, parentFrameClock, $cont) {
    var tmp = this.l1c($this$recompositionRunner, parentFrameClock, $cont);
    tmp.jd_1 = Unit_getInstance();
    tmp.kd_1 = null;
    return tmp.qd();
  };
  Recomposer$runRecomposeAndApplyChanges$slambda.prototype.oe = function (p1, p2, $cont) {
    var tmp = (!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE();
    return this.k1c(tmp, (!(p2 == null) ? isInterface(p2, MonotonicFrameClock) : false) ? p2 : THROW_CCE(), $cont);
  };
  Recomposer$runRecomposeAndApplyChanges$slambda.prototype.qd = function () {
    var suspendResult = this.jd_1;
    $sm: do
      try {
        var tmp = this.hd_1;
        switch (tmp) {
          case 0:
            this.id_1 = 6;
            var tmp_0 = this;
            tmp_0.e1c_1 = ArrayList_init_$Create$();
            var tmp_1 = this;
            tmp_1.f1c_1 = ArrayList_init_$Create$();
            var tmp_2 = this;
            tmp_2.g1c_1 = ArrayList_init_$Create$();
            var tmp_3 = this;
            tmp_3.h1c_1 = LinkedHashSet_init_$Create$();
            var tmp_4 = this;
            tmp_4.i1c_1 = LinkedHashSet_init_$Create$();
            this.hd_1 = 1;
            continue $sm;
          case 1:
            if (!_get_shouldKeepRecomposing__5j79sd(this.b1c_1)) {
              this.hd_1 = 5;
              continue $sm;
            }

            this.hd_1 = 2;
            suspendResult = awaitWorkAvailable(this.b1c_1, this);
            if (suspendResult === get_COROUTINE_SUSPENDED()) {
              return suspendResult;
            }

            continue $sm;
          case 2:
            var tmp_5 = this;
            tmp_5.j1c_1 = this.b1c_1.l19_1;
            var tmp_6;
            if (!_get_hasFrameWorkLocked__1gtyf7(this.b1c_1)) {
              recordComposerModificationsLocked(this.b1c_1);
              tmp_6 = !_get_hasFrameWorkLocked__1gtyf7(this.b1c_1);
            } else {
              tmp_6 = false;
            }

            if (tmp_6) {
              this.hd_1 = 1;
              continue $sm;
            } else {
              this.hd_1 = 3;
              continue $sm;
            }

            break;
          case 3:
            this.hd_1 = 4;
            suspendResult = this.d1c_1.js(Recomposer$runRecomposeAndApplyChanges$slambda$lambda(this.b1c_1, this.e1c_1, this.f1c_1, this.g1c_1, this.h1c_1, this.i1c_1), this);
            if (suspendResult === get_COROUTINE_SUSPENDED()) {
              return suspendResult;
            }

            continue $sm;
          case 4:
            ;
            this.hd_1 = 1;
            continue $sm;
          case 5:
            return Unit_getInstance();
          case 6:
            throw this.kd_1;
        }
      } catch ($p) {
        if (this.id_1 === 6) {
          throw $p;
        } else {
          this.hd_1 = this.id_1;
          this.kd_1 = $p;
        }
      }
     while (true);
  };
  Recomposer$runRecomposeAndApplyChanges$slambda.prototype.l1c = function ($this$recompositionRunner, parentFrameClock, completion) {
    var i = new Recomposer$runRecomposeAndApplyChanges$slambda(this.b1c_1, completion);
    i.c1c_1 = $this$recompositionRunner;
    i.d1c_1 = parentFrameClock;
    return i;
  };
  Recomposer$runRecomposeAndApplyChanges$slambda.$metadata$ = classMeta('Recomposer$runRecomposeAndApplyChanges$slambda', undefined, undefined, undefined, [2], CoroutineImpl.prototype);
  function Recomposer$runRecomposeAndApplyChanges$slambda_0(this$0, resultContinuation) {
    var i = new Recomposer$runRecomposeAndApplyChanges$slambda(this$0, resultContinuation);
    var l = function ($this$recompositionRunner, parentFrameClock, $cont) {
      return i.k1c($this$recompositionRunner, parentFrameClock, $cont);
    };
    l.$arity = 2;
    return l;
  }
  function Recomposer$recompositionRunner$slambda(this$0, $block, $parentFrameClock, resultContinuation) {
    this.u1c_1 = this$0;
    this.v1c_1 = $block;
    this.w1c_1 = $parentFrameClock;
    CoroutineImpl.call(this, resultContinuation);
  }
  Recomposer$recompositionRunner$slambda.prototype.n1a = function ($this$withContext, $cont) {
    var tmp = this.o1a($this$withContext, $cont);
    tmp.jd_1 = Unit_getInstance();
    tmp.kd_1 = null;
    return tmp.qd();
  };
  Recomposer$recompositionRunner$slambda.prototype.rd = function (p1, $cont) {
    return this.n1a((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $cont);
  };
  Recomposer$recompositionRunner$slambda.prototype.qd = function () {
    var suspendResult = this.jd_1;
    $sm: do
      try {
        var tmp = this.hd_1;
        switch (tmp) {
          case 0:
            this.id_1 = 5;
            this.y1c_1 = get_job(this.x1c_1.cf());
            registerRunnerJob(this.u1c_1, this.y1c_1);
            var tmp_0 = this;
            var tmp_1 = Companion_getInstance_15();
            tmp_0.z1c_1 = tmp_1.d1d(Recomposer$recompositionRunner$slambda$lambda(this.u1c_1));
            addRunning(Companion_getInstance_9(), this.u1c_1.z19_1);
            this.hd_1 = 1;
            continue $sm;
          case 1:
            this.id_1 = 4;
            var tmp_2 = this;
            tmp_2.b1d_1 = this.u1c_1.l19_1;
            var tmp_3 = this;
            tmp_3.c1d_1 = this.u1c_1.o19_1;
            var inductionVariable = 0;
            var last = this.c1d_1.g() - 1 | 0;
            if (inductionVariable <= last)
              do {
                var index = inductionVariable;
                inductionVariable = inductionVariable + 1 | 0;
                var item = this.c1d_1.h(index);
                item.t17();
              }
               while (inductionVariable <= last);
            this.hd_1 = 2;
            suspendResult = coroutineScope(Recomposer$recompositionRunner$slambda$slambda_0(this.v1c_1, this.w1c_1, null), this);
            if (suspendResult === get_COROUTINE_SUSPENDED()) {
              return suspendResult;
            }

            continue $sm;
          case 2:
            this.a1d_1 = suspendResult;
            this.id_1 = 5;
            this.hd_1 = 3;
            continue $sm;
          case 3:
            this.z1c_1.pi();
            var tmp1_synchronized = this.u1c_1.l19_1;
            if (this.u1c_1.m19_1 === this.y1c_1) {
              this.u1c_1.m19_1 = null;
            }

            deriveStateLocked(this.u1c_1);
            ;
            removeRunning(Companion_getInstance_9(), this.u1c_1.z19_1);
            ;
            return Unit_getInstance();
          case 4:
            this.id_1 = 5;
            var t = this.kd_1;
            this.z1c_1.pi();
            var tmp1_synchronized_0 = this.u1c_1.l19_1;
            if (this.u1c_1.m19_1 === this.y1c_1) {
              this.u1c_1.m19_1 = null;
            }

            deriveStateLocked(this.u1c_1);
            ;
            removeRunning(Companion_getInstance_9(), this.u1c_1.z19_1);
            ;
            throw t;
          case 5:
            throw this.kd_1;
        }
      } catch ($p) {
        if (this.id_1 === 5) {
          throw $p;
        } else {
          this.hd_1 = this.id_1;
          this.kd_1 = $p;
        }
      }
     while (true);
  };
  Recomposer$recompositionRunner$slambda.prototype.o1a = function ($this$withContext, completion) {
    var i = new Recomposer$recompositionRunner$slambda(this.u1c_1, this.v1c_1, this.w1c_1, completion);
    i.x1c_1 = $this$withContext;
    return i;
  };
  Recomposer$recompositionRunner$slambda.$metadata$ = classMeta('Recomposer$recompositionRunner$slambda', undefined, undefined, undefined, [1], CoroutineImpl.prototype);
  function Recomposer$recompositionRunner$slambda_0(this$0, $block, $parentFrameClock, resultContinuation) {
    var i = new Recomposer$recompositionRunner$slambda(this$0, $block, $parentFrameClock, resultContinuation);
    var l = function ($this$withContext, $cont) {
      return i.n1a($this$withContext, $cont);
    };
    l.$arity = 1;
    return l;
  }
  function Recomposer$performRecompose$lambda($modifiedValues, $composition) {
    return function () {
      var tmp0_iterator = $modifiedValues.d();
      while (tmp0_iterator.e()) {
        var element = tmp0_iterator.f();
        // Inline function 'androidx.compose.runtime.Recomposer.performRecompose.<anonymous>.<anonymous>.<anonymous>' call
        $composition.n17(element);
      }
      return Unit_getInstance();
    };
  }
  function Recomposer$readObserverOf$lambda($composition) {
    return function (value) {
      $composition.j17(value);
      return Unit_getInstance();
    };
  }
  function Recomposer$writeObserverOf$lambda($composition, $modifiedValues) {
    return function (value) {
      $composition.n17(value);
      var tmp0_safe_receiver = $modifiedValues;
      if (tmp0_safe_receiver == null)
        null;
      else
        tmp0_safe_receiver.p15(value);
      return Unit_getInstance();
    };
  }
  function State_ShutDown_getInstance() {
    State_initEntries();
    return State_ShutDown_instance;
  }
  function State_ShuttingDown_getInstance() {
    State_initEntries();
    return State_ShuttingDown_instance;
  }
  function State_Inactive_getInstance() {
    State_initEntries();
    return State_Inactive_instance;
  }
  function State_InactivePendingWork_getInstance() {
    State_initEntries();
    return State_InactivePendingWork_instance;
  }
  function State_Idle_getInstance() {
    State_initEntries();
    return State_Idle_instance;
  }
  function State_PendingWork_getInstance() {
    State_initEntries();
    return State_PendingWork_instance;
  }
  function $awaitWorkAvailableCOROUTINE$1(_this__u8e3s4, resultContinuation) {
    CoroutineImpl.call(this, resultContinuation);
    this.y1a_1 = _this__u8e3s4;
  }
  $awaitWorkAvailableCOROUTINE$1.prototype.qd = function () {
    var suspendResult = this.jd_1;
    $sm: do
      try {
        var tmp = this.hd_1;
        switch (tmp) {
          case 0:
            this.id_1 = 3;
            if (!_get_hasSchedulingWork__b617oy(this.y1a_1)) {
              this.hd_1 = 1;
              var tmp_0 = this;
              tmp_0.z1a_1 = this;
              this.a1b_1 = new CancellableContinuationImpl(intercepted(this.z1a_1), get_MODE_CANCELLABLE());
              this.a1b_1.oi();
              var tmp_1 = this;
              tmp_1.b1b_1 = this.y1a_1.l19_1;
              if (_get_hasSchedulingWork__b617oy(this.y1a_1)) {
                var tmp0_success = Companion_getInstance_4();
                this.a1b_1.o3(_Result___init__impl__xyqfz8(Unit_getInstance()));
              } else {
                this.y1a_1.v19_1 = this.a1b_1;
              }
              suspendResult = returnIfSuspended(this.a1b_1.ch(), this);
              if (suspendResult === get_COROUTINE_SUSPENDED()) {
                return suspendResult;
              }
              continue $sm;
            } else {
              this.hd_1 = 2;
              continue $sm;
            }

            break;
          case 1:
            this.hd_1 = 2;
            continue $sm;
          case 2:
            return Unit_getInstance();
          case 3:
            throw this.kd_1;
        }
      } catch ($p) {
        if (this.id_1 === 3) {
          throw $p;
        } else {
          this.hd_1 = this.id_1;
          this.kd_1 = $p;
        }
      }
     while (true);
  };
  $awaitWorkAvailableCOROUTINE$1.$metadata$ = classMeta('$awaitWorkAvailableCOROUTINE$1', undefined, undefined, undefined, undefined, CoroutineImpl.prototype);
  function Recomposer(effectCoroutineContext) {
    Companion_getInstance_9();
    CompositionContext.call(this);
    this.h19_1 = new Long(0, 0);
    var tmp = this;
    tmp.i19_1 = new BroadcastFrameClock(Recomposer$broadcastFrameClock$lambda(this));
    var tmp_0 = this;
    var tmp$ret$0;
    // Inline function 'kotlin.apply' call
    var tmp0_apply = Job_0(effectCoroutineContext.b4(Key_getInstance_2()));
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'androidx.compose.runtime.Recomposer.effectJob.<anonymous>' call
    tmp0_apply.dg(Recomposer$effectJob$lambda(this));
    tmp$ret$0 = tmp0_apply;
    tmp_0.j19_1 = tmp$ret$0;
    this.k19_1 = effectCoroutineContext.i4(this.i19_1).i4(this.j19_1);
    this.l19_1 = createSynchronizedObject();
    this.m19_1 = null;
    this.n19_1 = null;
    var tmp_1 = this;
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$1 = ArrayList_init_$Create$();
    tmp_1.o19_1 = tmp$ret$1;
    var tmp_2 = this;
    var tmp$ret$2;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$2 = ArrayList_init_$Create$();
    tmp_2.p19_1 = tmp$ret$2;
    var tmp_3 = this;
    var tmp$ret$3;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$3 = ArrayList_init_$Create$();
    tmp_3.q19_1 = tmp$ret$3;
    var tmp_4 = this;
    var tmp$ret$4;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$4 = ArrayList_init_$Create$();
    tmp_4.r19_1 = tmp$ret$4;
    var tmp_5 = this;
    var tmp$ret$5;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$5 = ArrayList_init_$Create$();
    tmp_5.s19_1 = tmp$ret$5;
    var tmp_6 = this;
    var tmp$ret$6;
    // Inline function 'kotlin.collections.mutableMapOf' call
    tmp$ret$6 = LinkedHashMap_init_$Create$();
    tmp_6.t19_1 = tmp$ret$6;
    var tmp_7 = this;
    var tmp$ret$7;
    // Inline function 'kotlin.collections.mutableMapOf' call
    tmp$ret$7 = LinkedHashMap_init_$Create$();
    tmp_7.u19_1 = tmp$ret$7;
    this.v19_1 = null;
    this.w19_1 = 0;
    this.x19_1 = false;
    this.y19_1 = MutableStateFlow_0(State_Inactive_getInstance());
    this.z19_1 = new RecomposerInfoImpl(this);
    this.a1a_1 = 8;
  }
  Recomposer.prototype.e1d = function () {
    return this.h19_1;
  };
  Recomposer.prototype.d13 = function () {
    return this.k19_1;
  };
  Recomposer.prototype.f1d = function ($cont) {
    return recompositionRunner(this, Recomposer$runRecomposeAndApplyChanges$slambda_0(this, null), $cont);
  };
  Recomposer.prototype.ix = function () {
    return 1000;
  };
  Recomposer.prototype.gx = function () {
    return false;
  };
  Recomposer.prototype.hx = function (table) {
  };
  Recomposer.prototype.x16 = function (composition) {
    var tmp$ret$2;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = this.l19_1;
    var tmp$ret$1;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.Recomposer.invalidate.<anonymous>' call
    var tmp;
    if (!this.q19_1.j(composition)) {
      var tmp0_this = this;
      // Inline function 'kotlin.collections.plusAssign' call
      var tmp0_plusAssign = tmp0_this.q19_1;
      tmp0_plusAssign.b(composition);
      tmp = deriveStateLocked(this);
    } else {
      tmp = null;
    }
    tmp$ret$0 = tmp;
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    var tmp0_safe_receiver = tmp$ret$2;
    if (tmp0_safe_receiver == null)
      null;
    else {
      var tmp$ret$4;
      // Inline function 'kotlin.coroutines.resume' call
      var tmp$ret$3;
      // Inline function 'kotlin.Companion.success' call
      var tmp0_success = Companion_getInstance_4();
      tmp$ret$3 = _Result___init__impl__xyqfz8(Unit_getInstance());
      tmp0_safe_receiver.o3(tmp$ret$3);
      tmp$ret$4 = Unit_getInstance();
    }
  };
  Recomposer.prototype.r10 = function (reference) {
    var tmp$ret$2;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = this.l19_1;
    var tmp$ret$1;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.Recomposer.insertMovableContent.<anonymous>' call
    var tmp0_this = this;
    // Inline function 'kotlin.collections.plusAssign' call
    var tmp0_plusAssign = tmp0_this.s19_1;
    tmp0_plusAssign.b(reference);
    tmp$ret$0 = deriveStateLocked(this);
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    var tmp0_safe_receiver = tmp$ret$2;
    if (tmp0_safe_receiver == null)
      null;
    else {
      var tmp$ret$4;
      // Inline function 'kotlin.coroutines.resume' call
      var tmp$ret$3;
      // Inline function 'kotlin.Companion.success' call
      var tmp0_success = Companion_getInstance_4();
      tmp$ret$3 = _Result___init__impl__xyqfz8(Unit_getInstance());
      tmp0_safe_receiver.o3(tmp$ret$3);
      tmp$ret$4 = Unit_getInstance();
    }
  };
  Recomposer.prototype.u11 = function (reference) {
    var tmp$ret$2;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = this.l19_1;
    var tmp$ret$1;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.Recomposer.deletedMovableContent.<anonymous>' call
    tmp$ret$0 = addMultiValue(this.t19_1, reference.e12_1, reference);
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
  };
  Recomposer.prototype.y12 = function (reference, data) {
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = this.l19_1;
    var tmp$ret$0;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    var tmp0_set = this.u19_1;
    tmp0_set.a(reference, data);
    tmp$ret$0 = Unit_getInstance();
    tmp$ret$1 = tmp$ret$0;
  };
  Recomposer.prototype.m12 = function (reference) {
    var tmp$ret$2;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = this.l19_1;
    var tmp$ret$1;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.Recomposer.movableContentStateResolve.<anonymous>' call
    tmp$ret$0 = this.u19_1.z2(reference);
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  };
  Recomposer.prototype.d18 = function (composition, content) {
    var composerWasComposing = composition.v16();
    var tmp$ret$1;
    $l$block_0: {
      // Inline function 'androidx.compose.runtime.Recomposer.composing' call
      var snapshot = Companion_getInstance_15().c1b(readObserverOf(this, composition), writeObserverOf(this, composition, null));
      try {
        var tmp$ret$0;
        $l$block: {
          // Inline function 'androidx.compose.runtime.snapshots.Snapshot.enter' call
          var previous = snapshot.d1b();
          try {
            composition.e18(content);
            tmp$ret$0 = Unit_getInstance();
            break $l$block;
          }finally {
            snapshot.e1b(previous);
          }
        }
        tmp$ret$1 = tmp$ret$0;
        break $l$block_0;
      }finally {
        applyAndCheck(this, snapshot);
      }
    }
    if (!composerWasComposing) {
      Companion_getInstance_15().g1d();
    }
    var tmp$ret$3;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = this.l19_1;
    var tmp$ret$2;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    var tmp;
    if (this.y19_1.a2().q4(State_ShuttingDown_getInstance()) > 0) {
      var tmp_0;
      if (!this.o19_1.j(composition)) {
        var tmp0_this = this;
        var tmp0_plusAssign = tmp0_this.o19_1;
        tmp0_plusAssign.b(composition);
        tmp_0 = Unit_getInstance();
      }
      tmp = tmp_0;
    }
    tmp$ret$2 = tmp;
    tmp$ret$3 = tmp$ret$2;
    performInitialMovableContentInserts(this, composition);
    composition.r17();
    composition.s17();
    if (!composerWasComposing) {
      Companion_getInstance_15().g1d();
    }
  };
  Recomposer.$metadata$ = classMeta('Recomposer', undefined, undefined, undefined, undefined, CompositionContext.prototype);
  function RecomposerInfo() {
  }
  RecomposerInfo.$metadata$ = interfaceMeta('RecomposerInfo');
  function removeLastMultiValue(_this__u8e3s4, key) {
    init_properties_Recomposer_kt_qypup3();
    var tmp0_safe_receiver = _this__u8e3s4.l2(key);
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      var tmp$ret$2;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.removeLastMultiValue.<anonymous>' call
      var tmp$ret$0;
      // Inline function 'kotlin.also' call
      var tmp0_also = removeFirst(tmp0_safe_receiver);
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'androidx.compose.runtime.removeLastMultiValue.<anonymous>.<anonymous>' call
      if (tmp0_safe_receiver.i()) {
        _this__u8e3s4.z2(key);
      }
      tmp$ret$0 = tmp0_also;
      tmp$ret$1 = tmp$ret$0;
      tmp$ret$2 = tmp$ret$1;
      tmp = tmp$ret$2;
    }
    return tmp;
  }
  function addMultiValue(_this__u8e3s4, key, value) {
    init_properties_Recomposer_kt_qypup3();
    var tmp$ret$2;
    // Inline function 'kotlin.collections.getOrPut' call
    var value_0 = _this__u8e3s4.l2(key);
    var tmp;
    if (value_0 == null) {
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.addMultiValue.<anonymous>' call
      var tmp$ret$0;
      // Inline function 'kotlin.collections.mutableListOf' call
      tmp$ret$0 = ArrayList_init_$Create$();
      tmp$ret$1 = tmp$ret$0;
      var answer = tmp$ret$1;
      _this__u8e3s4.a(key, answer);
      tmp = answer;
    } else {
      tmp = value_0;
    }
    tmp$ret$2 = tmp;
    return tmp$ret$2.b(value);
  }
  var properties_initialized_Recomposer_kt_k8q2ph;
  function init_properties_Recomposer_kt_qypup3() {
    if (properties_initialized_Recomposer_kt_k8q2ph) {
    } else {
      properties_initialized_Recomposer_kt_k8q2ph = true;
      ProduceAnotherFrame = new Object();
      FramePending = new Object();
    }
  }
  function RememberObserver() {
  }
  RememberObserver.$metadata$ = interfaceMeta('RememberObserver');
  function moveGroup($this, fromWriter, fromIndex, toWriter, updateFromCursor, updateToCursor) {
    var groupsToMove = fromWriter.qz(fromIndex);
    var sourceGroupsEnd = fromIndex + groupsToMove | 0;
    var sourceSlotsStart = dataIndex(fromWriter, fromIndex);
    var sourceSlotsEnd = dataIndex(fromWriter, sourceGroupsEnd);
    var slotsToMove = sourceSlotsEnd - sourceSlotsStart | 0;
    var hasMarks = containsAnyGroupMarks(fromWriter, fromIndex);
    insertGroups(toWriter, groupsToMove);
    insertSlots(toWriter, slotsToMove, toWriter.jt_1);
    if (fromWriter.ws_1 < sourceGroupsEnd) {
      moveGroupGapTo(fromWriter, sourceGroupsEnd);
    }
    if (fromWriter.bt_1 < sourceSlotsEnd) {
      moveSlotGapTo(fromWriter, sourceSlotsEnd, sourceGroupsEnd);
    }
    var groups = toWriter.ts_1;
    var currentGroup = toWriter.jt_1;
    var tmp$ret$4;
    // Inline function 'kotlin.collections.copyInto' call
    var tmp0_copyInto = fromWriter.ts_1;
    var tmp1_copyInto = imul(currentGroup, 5);
    var tmp2_copyInto = imul(fromIndex, 5);
    var tmp3_copyInto = imul(sourceGroupsEnd, 5);
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = tmp0_copyInto;
    tmp$ret$1 = tmp$ret$0;
    var tmp = tmp$ret$1;
    var tmp$ret$3;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$2;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$2 = groups;
    tmp$ret$3 = tmp$ret$2;
    arrayCopy(tmp, tmp$ret$3, tmp1_copyInto, tmp2_copyInto, tmp3_copyInto);
    tmp$ret$4 = groups;
    var slots = toWriter.us_1;
    var currentSlot = toWriter.zs_1;
    var tmp$ret$5;
    // Inline function 'kotlin.collections.copyInto' call
    var tmp4_copyInto = fromWriter.us_1;
    arrayCopy(tmp4_copyInto, slots, currentSlot, sourceSlotsStart, sourceSlotsEnd);
    tmp$ret$5 = slots;
    var parent = toWriter.kt_1;
    updateParentAnchor(groups, currentGroup, parent);
    var parentDelta = currentGroup - fromIndex | 0;
    var moveEnd = currentGroup + groupsToMove | 0;
    var tmp$ret$7;
    // Inline function 'kotlin.with' call
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$6;
    // Inline function 'androidx.compose.runtime.Companion.moveGroup.<anonymous>' call
    tmp$ret$6 = dataIndex_0(groups, toWriter, currentGroup);
    tmp$ret$7 = tmp$ret$6;
    var dataIndexDelta = currentSlot - tmp$ret$7 | 0;
    var slotsGapOwner = toWriter.dt_1;
    var slotsGapLen = toWriter.ct_1;
    var slotsCapacity = slots.length;
    var inductionVariable = currentGroup;
    if (inductionVariable < moveEnd)
      do {
        var groupAddress = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (!(groupAddress === currentGroup)) {
          var previousParent = parentAnchor(groups, groupAddress);
          updateParentAnchor(groups, groupAddress, previousParent + parentDelta | 0);
        }
        var tmp$ret$9;
        // Inline function 'kotlin.with' call
        // Inline function 'kotlin.contracts.contract' call
        var tmp$ret$8;
        // Inline function 'androidx.compose.runtime.Companion.moveGroup.<anonymous>' call
        tmp$ret$8 = dataIndex_0(groups, toWriter, groupAddress) + dataIndexDelta | 0;
        tmp$ret$9 = tmp$ret$8;
        var newDataIndex = tmp$ret$9;
        var tmp$ret$11;
        // Inline function 'kotlin.with' call
        // Inline function 'kotlin.contracts.contract' call
        var tmp$ret$10;
        // Inline function 'androidx.compose.runtime.Companion.moveGroup.<anonymous>' call
        tmp$ret$10 = dataIndexToDataAnchor(toWriter, newDataIndex, slotsGapOwner < groupAddress ? 0 : toWriter.bt_1, slotsGapLen, slotsCapacity);
        tmp$ret$11 = tmp$ret$10;
        var newDataAnchor = tmp$ret$11;
        updateDataAnchor(groups, groupAddress, newDataAnchor);
        if (groupAddress === slotsGapOwner) {
          var tmp1 = slotsGapOwner;
          slotsGapOwner = tmp1 + 1 | 0;
        }
      }
       while (inductionVariable < moveEnd);
    toWriter.dt_1 = slotsGapOwner;
    var startAnchors = locationOf(fromWriter.vs_1, fromIndex, fromWriter.g());
    var endAnchors = locationOf(fromWriter.vs_1, sourceGroupsEnd, fromWriter.g());
    var tmp_0;
    if (startAnchors < endAnchors) {
      var sourceAnchors = fromWriter.vs_1;
      var anchors = ArrayList_init_$Create$_0(endAnchors - startAnchors | 0);
      var anchorDelta = currentGroup - fromIndex | 0;
      var inductionVariable_0 = startAnchors;
      if (inductionVariable_0 < endAnchors)
        do {
          var anchorIndex = inductionVariable_0;
          inductionVariable_0 = inductionVariable_0 + 1 | 0;
          var sourceAnchor = sourceAnchors.h(anchorIndex);
          var tmp3_this = sourceAnchor;
          tmp3_this.j11_1 = tmp3_this.j11_1 + anchorDelta | 0;
          anchors.b(sourceAnchor);
        }
         while (inductionVariable_0 < endAnchors);
      var insertLocation = locationOf(toWriter.vs_1, toWriter.jt_1, toWriter.g());
      toWriter.vs_1.y7(insertLocation, anchors);
      sourceAnchors.f7(startAnchors, endAnchors).q6();
      tmp_0 = anchors;
    } else {
      tmp_0 = emptyList();
    }
    var anchors_0 = tmp_0;
    var parentGroup = fromWriter.by(fromIndex);
    var tmp_1;
    if (updateFromCursor) {
      var needsStartGroups = parentGroup >= 0;
      if (needsStartGroups) {
        fromWriter.jy();
        fromWriter.s12(parentGroup - fromWriter.jt_1 | 0);
        fromWriter.jy();
      }
      fromWriter.s12(fromIndex - fromWriter.jt_1 | 0);
      var anchorsRemoved = fromWriter.qu();
      if (needsStartGroups) {
        fromWriter.hy();
        fromWriter.xz();
        fromWriter.hy();
        fromWriter.xz();
      }
      tmp_1 = anchorsRemoved;
    } else {
      var anchorsRemoved_0 = removeGroups(fromWriter, fromIndex, groupsToMove);
      removeSlots(fromWriter, sourceSlotsStart, slotsToMove, fromIndex - 1 | 0);
      tmp_1 = anchorsRemoved_0;
    }
    var anchorsRemoved_1 = tmp_1;
    // Inline function 'androidx.compose.runtime.runtimeCheck' call
    var tmp5_runtimeCheck = !anchorsRemoved_1;
    if (!tmp5_runtimeCheck) {
      var tmp$ret$12;
      // Inline function 'androidx.compose.runtime.Companion.moveGroup.<anonymous>' call
      tmp$ret$12 = 'Unexpectedly removed anchors';
      var message = tmp$ret$12;
      composeRuntimeError(toString_2(message));
    }
    var tmp4_this = toWriter;
    tmp4_this.ft_1 = tmp4_this.ft_1 + (isNode(groups, currentGroup) ? 1 : nodeCount(groups, currentGroup)) | 0;
    if (updateToCursor) {
      toWriter.jt_1 = currentGroup + groupsToMove | 0;
      toWriter.zs_1 = currentSlot + slotsToMove | 0;
    }
    if (hasMarks) {
      updateContainsMark(toWriter, parent);
    }
    return anchors_0;
  }
  function startGroup_1($this, key, objectKey, isNode, aux) {
    var inserting = $this.et_1 > 0;
    $this.it_1.fx($this.ft_1);
    var tmp = $this;
    var tmp_0;
    if (inserting) {
      insertGroups($this, 1);
      var current = $this.jt_1;
      var currentAddress = groupIndexToAddress($this, current);
      var hasObjectKey = !(objectKey === Companion_getInstance_8().ns_1);
      var hasAux = !isNode ? !(aux === Companion_getInstance_8().ns_1) : false;
      initGroup($this.ts_1, currentAddress, key, isNode, hasObjectKey, hasAux, $this.kt_1, $this.zs_1);
      $this.at_1 = $this.zs_1;
      var dataSlotsNeeded = ((isNode ? 1 : 0) + (hasObjectKey ? 1 : 0) | 0) + (hasAux ? 1 : 0) | 0;
      if (dataSlotsNeeded > 0) {
        insertSlots($this, dataSlotsNeeded, current);
        var slots = $this.us_1;
        var currentSlot = $this.zs_1;
        if (isNode) {
          var tmp0 = currentSlot;
          currentSlot = tmp0 + 1 | 0;
          slots[tmp0] = aux;
        }
        if (hasObjectKey) {
          var tmp1 = currentSlot;
          currentSlot = tmp1 + 1 | 0;
          slots[tmp1] = objectKey;
        }
        if (hasAux) {
          var tmp2 = currentSlot;
          currentSlot = tmp2 + 1 | 0;
          slots[tmp2] = aux;
        }
        $this.zs_1 = currentSlot;
      }
      $this.ft_1 = 0;
      var newCurrent = current + 1 | 0;
      $this.kt_1 = current;
      $this.jt_1 = newCurrent;
      tmp_0 = newCurrent;
    } else {
      var previousParent = $this.kt_1;
      $this.gt_1.fx(previousParent);
      saveCurrentGroupEnd($this);
      var currentGroup = $this.jt_1;
      var currentGroupAddress = groupIndexToAddress($this, currentGroup);
      if (!equals_0(aux, Companion_getInstance_8().ns_1)) {
        if (isNode) {
          $this.h1d(aux);
        } else {
          $this.z11(aux);
        }
      }
      $this.zs_1 = slotIndex($this.ts_1, $this, currentGroupAddress);
      $this.at_1 = dataIndex_0($this.ts_1, $this, groupIndexToAddress($this, $this.jt_1 + 1 | 0));
      $this.ft_1 = nodeCount($this.ts_1, currentGroupAddress);
      $this.kt_1 = currentGroup;
      $this.jt_1 = currentGroup + 1 | 0;
      tmp_0 = currentGroup + groupSize($this.ts_1, currentGroupAddress) | 0;
    }
    tmp.ys_1 = tmp_0;
  }
  function Companion_10() {
    Companion_instance_10 = this;
  }
  Companion_10.$metadata$ = objectMeta('Companion');
  var Companion_instance_10;
  function Companion_getInstance_10() {
    if (Companion_instance_10 == null)
      new Companion_10();
    return Companion_instance_10;
  }
  function containsGroupMark($this, group) {
    return group >= 0 ? containsMark($this.ts_1, groupIndexToAddress($this, group)) : false;
  }
  function containsAnyGroupMarks($this, group) {
    return group >= 0 ? containsAnyMark($this.ts_1, groupIndexToAddress($this, group)) : false;
  }
  function recalculateMarks($this) {
    var tmp0_safe_receiver = $this.mt_1;
    if (tmp0_safe_receiver == null)
      null;
    else {
      var tmp$ret$0;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      while (tmp0_safe_receiver.w10()) {
        updateContainsMarkNow($this, tmp0_safe_receiver.j1d(), tmp0_safe_receiver);
      }
      tmp$ret$0 = Unit_getInstance();
    }
  }
  function updateContainsMark($this, group) {
    if (group >= 0) {
      var tmp0_elvis_lhs = $this.mt_1;
      var tmp;
      if (tmp0_elvis_lhs == null) {
        var tmp$ret$0;
        // Inline function 'kotlin.also' call
        var tmp0_also = PrioritySet_init_$Create$(null, 1, null);
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'androidx.compose.runtime.SlotWriter.updateContainsMark.<anonymous>' call
        $this.mt_1 = tmp0_also;
        tmp$ret$0 = tmp0_also;
        tmp = tmp$ret$0;
      } else {
        tmp = tmp0_elvis_lhs;
      }
      tmp.k1d(group);
    }
  }
  function updateContainsMarkNow($this, group, set) {
    var groupAddress = groupIndexToAddress($this, group);
    var containsAnyMarks = childContainsAnyMarks($this, group);
    var markChanges = !(containsMark($this.ts_1, groupAddress) === containsAnyMarks);
    if (markChanges) {
      updateContainsMark_0($this.ts_1, groupAddress, containsAnyMarks);
      var parent = $this.by(group);
      if (parent >= 0) {
        set.k1d(parent);
      }
    }
  }
  function childContainsAnyMarks($this, group) {
    var child = group + 1 | 0;
    var end = group + $this.qz(group) | 0;
    while (child < end) {
      if (containsAnyMark($this.ts_1, groupIndexToAddress($this, child)))
        return true;
      child = child + $this.qz(child) | 0;
    }
    return false;
  }
  function saveCurrentGroupEnd($this) {
    $this.ht_1.fx((_get_capacity__a9k9f3($this) - $this.xs_1 | 0) - $this.ys_1 | 0);
  }
  function restoreCurrentGroupEnd($this) {
    var newGroupEnd = (_get_capacity__a9k9f3($this) - $this.xs_1 | 0) - $this.ht_1.nz() | 0;
    $this.ys_1 = newGroupEnd;
    return newGroupEnd;
  }
  function fixParentAnchorsFor($this, parent, endGroup, firstChild) {
    var parentAnchor = parentIndexToAnchor($this, parent, $this.ws_1);
    var child = firstChild;
    while (child < endGroup) {
      updateParentAnchor($this.ts_1, groupIndexToAddress($this, child), parentAnchor);
      var childEnd = child + groupSize($this.ts_1, groupIndexToAddress($this, child)) | 0;
      fixParentAnchorsFor($this, child, childEnd, child + 1 | 0);
      child = childEnd;
    }
  }
  function moveGroupGapTo($this, index) {
    var gapLen = $this.xs_1;
    var gapStart = $this.ws_1;
    if (!(gapStart === index)) {
      var tmp$ret$0;
      // Inline function 'kotlin.collections.isNotEmpty' call
      var tmp0_isNotEmpty = $this.vs_1;
      tmp$ret$0 = !tmp0_isNotEmpty.i();
      if (tmp$ret$0) {
        updateAnchors($this, gapStart, index);
      }
      if (gapLen > 0) {
        var groups = $this.ts_1;
        var groupPhysicalAddress = imul(index, 5);
        var groupPhysicalGapLen = imul(gapLen, 5);
        var groupPhysicalGapStart = imul(gapStart, 5);
        if (index < gapStart) {
          var tmp$ret$5;
          // Inline function 'kotlin.collections.copyInto' call
          var tmp1_copyInto = groupPhysicalAddress + groupPhysicalGapLen | 0;
          var tmp$ret$2;
          // Inline function 'kotlin.js.unsafeCast' call
          var tmp$ret$1;
          // Inline function 'kotlin.js.asDynamic' call
          tmp$ret$1 = groups;
          tmp$ret$2 = tmp$ret$1;
          var tmp = tmp$ret$2;
          var tmp$ret$4;
          // Inline function 'kotlin.js.unsafeCast' call
          var tmp$ret$3;
          // Inline function 'kotlin.js.asDynamic' call
          tmp$ret$3 = groups;
          tmp$ret$4 = tmp$ret$3;
          arrayCopy(tmp, tmp$ret$4, tmp1_copyInto, groupPhysicalAddress, groupPhysicalGapStart);
          tmp$ret$5 = groups;
        } else {
          var tmp$ret$10;
          // Inline function 'kotlin.collections.copyInto' call
          var tmp2_copyInto = groupPhysicalGapStart + groupPhysicalGapLen | 0;
          var tmp3_copyInto = groupPhysicalAddress + groupPhysicalGapLen | 0;
          var tmp$ret$7;
          // Inline function 'kotlin.js.unsafeCast' call
          var tmp$ret$6;
          // Inline function 'kotlin.js.asDynamic' call
          tmp$ret$6 = groups;
          tmp$ret$7 = tmp$ret$6;
          var tmp_0 = tmp$ret$7;
          var tmp$ret$9;
          // Inline function 'kotlin.js.unsafeCast' call
          var tmp$ret$8;
          // Inline function 'kotlin.js.asDynamic' call
          tmp$ret$8 = groups;
          tmp$ret$9 = tmp$ret$8;
          arrayCopy(tmp_0, tmp$ret$9, groupPhysicalGapStart, tmp2_copyInto, tmp3_copyInto);
          tmp$ret$10 = groups;
        }
      }
      var groupAddress = index < gapStart ? index + gapLen | 0 : gapStart;
      var capacity = _get_capacity__a9k9f3($this);
      runtimeCheck(groupAddress < capacity);
      while (groupAddress < capacity) {
        var oldAnchor = parentAnchor($this.ts_1, groupAddress);
        var oldIndex = parentAnchorToIndex($this, oldAnchor);
        var newAnchor = parentIndexToAnchor($this, oldIndex, index);
        if (!(newAnchor === oldAnchor)) {
          updateParentAnchor($this.ts_1, groupAddress, newAnchor);
        }
        var tmp0 = groupAddress;
        groupAddress = tmp0 + 1 | 0;
        if (groupAddress === index)
          groupAddress = groupAddress + gapLen | 0;
      }
    }
    $this.ws_1 = index;
  }
  function moveSlotGapTo($this, index, group) {
    var gapLen = $this.ct_1;
    var gapStart = $this.bt_1;
    var slotsGapOwner = $this.dt_1;
    if (!(gapStart === index)) {
      var slots = $this.us_1;
      if (index < gapStart) {
        var tmp$ret$0;
        // Inline function 'kotlin.collections.copyInto' call
        var tmp0_copyInto = index + gapLen | 0;
        arrayCopy(slots, slots, tmp0_copyInto, index, gapStart);
        tmp$ret$0 = slots;
      } else {
        var tmp$ret$1;
        // Inline function 'kotlin.collections.copyInto' call
        var tmp1_copyInto = gapStart + gapLen | 0;
        var tmp2_copyInto = index + gapLen | 0;
        arrayCopy(slots, slots, gapStart, tmp1_copyInto, tmp2_copyInto);
        tmp$ret$1 = slots;
      }
      fill(slots, null, index, index + gapLen | 0);
    }
    var tmp$ret$2;
    // Inline function 'kotlin.math.min' call
    var tmp3_min = group + 1 | 0;
    var tmp4_min = $this.g();
    tmp$ret$2 = Math.min(tmp3_min, tmp4_min);
    var newSlotsGapOwner = tmp$ret$2;
    if (!(slotsGapOwner === newSlotsGapOwner)) {
      var slotsSize = $this.us_1.length - gapLen | 0;
      if (newSlotsGapOwner < slotsGapOwner) {
        var updateAddress = groupIndexToAddress($this, newSlotsGapOwner);
        var stopUpdateAddress = groupIndexToAddress($this, slotsGapOwner);
        var groupGapStart = $this.ws_1;
        while (updateAddress < stopUpdateAddress) {
          var anchor = dataAnchor($this.ts_1, updateAddress);
          // Inline function 'androidx.compose.runtime.runtimeCheck' call
          var tmp5_runtimeCheck = anchor >= 0;
          if (!tmp5_runtimeCheck) {
            var tmp$ret$3;
            // Inline function 'androidx.compose.runtime.SlotWriter.moveSlotGapTo.<anonymous>' call
            tmp$ret$3 = 'Unexpected anchor value, expected a positive anchor';
            var message = tmp$ret$3;
            composeRuntimeError(toString_2(message));
          }
          updateDataAnchor($this.ts_1, updateAddress, -((slotsSize - anchor | 0) + 1 | 0) | 0);
          var tmp0 = updateAddress;
          updateAddress = tmp0 + 1 | 0;
          if (updateAddress === groupGapStart)
            updateAddress = updateAddress + $this.xs_1 | 0;
        }
      } else {
        var updateAddress_0 = groupIndexToAddress($this, slotsGapOwner);
        var stopUpdateAddress_0 = groupIndexToAddress($this, newSlotsGapOwner);
        while (updateAddress_0 < stopUpdateAddress_0) {
          var anchor_0 = dataAnchor($this.ts_1, updateAddress_0);
          // Inline function 'androidx.compose.runtime.runtimeCheck' call
          var tmp6_runtimeCheck = anchor_0 < 0;
          if (!tmp6_runtimeCheck) {
            var tmp$ret$4;
            // Inline function 'androidx.compose.runtime.SlotWriter.moveSlotGapTo.<anonymous>' call
            tmp$ret$4 = 'Unexpected anchor value, expected a negative anchor';
            var message_0 = tmp$ret$4;
            composeRuntimeError(toString_2(message_0));
          }
          updateDataAnchor($this.ts_1, updateAddress_0, (slotsSize + anchor_0 | 0) + 1 | 0);
          var tmp1 = updateAddress_0;
          updateAddress_0 = tmp1 + 1 | 0;
          if (updateAddress_0 === $this.ws_1)
            updateAddress_0 = updateAddress_0 + $this.xs_1 | 0;
        }
      }
      $this.dt_1 = newSlotsGapOwner;
    }
    $this.bt_1 = index;
  }
  function insertGroups($this, size) {
    if (size > 0) {
      var currentGroup = $this.jt_1;
      moveGroupGapTo($this, currentGroup);
      var gapStart = $this.ws_1;
      var gapLen = $this.xs_1;
      var oldCapacity = $this.ts_1.length / 5 | 0;
      var oldSize = oldCapacity - gapLen | 0;
      if (gapLen < size) {
        var groups = $this.ts_1;
        var tmp$ret$1;
        // Inline function 'kotlin.math.max' call
        var tmp$ret$0;
        // Inline function 'kotlin.math.max' call
        var tmp0_max = imul(oldCapacity, 2);
        var tmp1_max = oldSize + size | 0;
        tmp$ret$0 = Math.max(tmp0_max, tmp1_max);
        var tmp2_max = tmp$ret$0;
        var tmp3_max = 32;
        tmp$ret$1 = Math.max(tmp2_max, tmp3_max);
        var newCapacity = tmp$ret$1;
        var newGroups = new Int32Array(imul(newCapacity, 5));
        var newGapLen = newCapacity - oldSize | 0;
        var oldGapEndAddress = gapStart + gapLen | 0;
        var newGapEndAddress = gapStart + newGapLen | 0;
        var tmp$ret$6;
        // Inline function 'kotlin.collections.copyInto' call
        var tmp4_copyInto = imul(gapStart, 5);
        var tmp$ret$3;
        // Inline function 'kotlin.js.unsafeCast' call
        var tmp$ret$2;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$2 = groups;
        tmp$ret$3 = tmp$ret$2;
        var tmp = tmp$ret$3;
        var tmp$ret$5;
        // Inline function 'kotlin.js.unsafeCast' call
        var tmp$ret$4;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$4 = newGroups;
        tmp$ret$5 = tmp$ret$4;
        arrayCopy(tmp, tmp$ret$5, 0, 0, tmp4_copyInto);
        tmp$ret$6 = newGroups;
        var tmp$ret$11;
        // Inline function 'kotlin.collections.copyInto' call
        var tmp5_copyInto = imul(newGapEndAddress, 5);
        var tmp6_copyInto = imul(oldGapEndAddress, 5);
        var tmp7_copyInto = imul(oldCapacity, 5);
        var tmp$ret$8;
        // Inline function 'kotlin.js.unsafeCast' call
        var tmp$ret$7;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$7 = groups;
        tmp$ret$8 = tmp$ret$7;
        var tmp_0 = tmp$ret$8;
        var tmp$ret$10;
        // Inline function 'kotlin.js.unsafeCast' call
        var tmp$ret$9;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$9 = newGroups;
        tmp$ret$10 = tmp$ret$9;
        arrayCopy(tmp_0, tmp$ret$10, tmp5_copyInto, tmp6_copyInto, tmp7_copyInto);
        tmp$ret$11 = newGroups;
        $this.ts_1 = newGroups;
        gapLen = newGapLen;
      }
      var currentEnd = $this.ys_1;
      if (currentEnd >= gapStart)
        $this.ys_1 = currentEnd + size | 0;
      $this.ws_1 = gapStart + size | 0;
      $this.xs_1 = gapLen - size | 0;
      var index = oldSize > 0 ? dataIndex($this, currentGroup + size | 0) : 0;
      var anchor = dataIndexToDataAnchor($this, index, $this.dt_1 < gapStart ? 0 : $this.bt_1, $this.ct_1, $this.us_1.length);
      var inductionVariable = gapStart;
      var last = gapStart + size | 0;
      if (inductionVariable < last)
        do {
          var groupAddress = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          updateDataAnchor($this.ts_1, groupAddress, anchor);
        }
         while (inductionVariable < last);
      var slotsGapOwner = $this.dt_1;
      if (slotsGapOwner >= gapStart) {
        $this.dt_1 = slotsGapOwner + size | 0;
      }
    }
  }
  function insertSlots($this, size, group) {
    if (size > 0) {
      moveSlotGapTo($this, $this.zs_1, group);
      var gapStart = $this.bt_1;
      var gapLen = $this.ct_1;
      if (gapLen < size) {
        var slots = $this.us_1;
        var oldCapacity = slots.length;
        var oldSize = oldCapacity - gapLen | 0;
        var tmp$ret$1;
        // Inline function 'kotlin.math.max' call
        var tmp$ret$0;
        // Inline function 'kotlin.math.max' call
        var tmp0_max = imul(oldCapacity, 2);
        var tmp1_max = oldSize + size | 0;
        tmp$ret$0 = Math.max(tmp0_max, tmp1_max);
        var tmp2_max = tmp$ret$0;
        var tmp3_max = 32;
        tmp$ret$1 = Math.max(tmp2_max, tmp3_max);
        var newCapacity = tmp$ret$1;
        var tmp = 0;
        var tmp_0 = newCapacity;
        var tmp$ret$2;
        // Inline function 'kotlin.arrayOfNulls' call
        tmp$ret$2 = fillArrayVal(Array(tmp_0), null);
        var tmp_1 = tmp$ret$2;
        while (tmp < tmp_0) {
          var tmp_2 = tmp;
          var tmp$ret$3;
          // Inline function 'androidx.compose.runtime.SlotWriter.insertSlots.<anonymous>' call
          tmp$ret$3 = null;
          tmp_1[tmp_2] = tmp$ret$3;
          tmp = tmp + 1 | 0;
        }
        var newData = tmp_1;
        var newGapLen = newCapacity - oldSize | 0;
        var oldGapEndAddress = gapStart + gapLen | 0;
        var newGapEndAddress = gapStart + newGapLen | 0;
        var tmp$ret$4;
        // Inline function 'kotlin.collections.copyInto' call
        arrayCopy(slots, newData, 0, 0, gapStart);
        tmp$ret$4 = newData;
        var tmp$ret$5;
        // Inline function 'kotlin.collections.copyInto' call
        arrayCopy(slots, newData, newGapEndAddress, oldGapEndAddress, oldCapacity);
        tmp$ret$5 = newData;
        $this.us_1 = newData;
        gapLen = newGapLen;
      }
      var currentDataEnd = $this.at_1;
      if (currentDataEnd >= gapStart)
        $this.at_1 = currentDataEnd + size | 0;
      $this.bt_1 = gapStart + size | 0;
      $this.ct_1 = gapLen - size | 0;
    }
  }
  function removeGroups($this, start, len) {
    var tmp;
    if (len > 0) {
      var anchorsRemoved = false;
      var anchors = $this.vs_1;
      moveGroupGapTo($this, start);
      var tmp$ret$0;
      // Inline function 'kotlin.collections.isNotEmpty' call
      tmp$ret$0 = !anchors.i();
      if (tmp$ret$0)
        anchorsRemoved = removeAnchors($this, start, len);
      $this.ws_1 = start;
      var previousGapLen = $this.xs_1;
      var newGapLen = previousGapLen + len | 0;
      $this.xs_1 = newGapLen;
      var slotsGapOwner = $this.dt_1;
      if (slotsGapOwner > start) {
        var tmp_0 = $this;
        var tmp$ret$1;
        // Inline function 'kotlin.math.max' call
        var tmp0_max = slotsGapOwner - len | 0;
        tmp$ret$1 = Math.max(start, tmp0_max);
        tmp_0.dt_1 = tmp$ret$1;
      }
      if ($this.ys_1 >= $this.ws_1) {
        var tmp0_this = $this;
        tmp0_this.ys_1 = tmp0_this.ys_1 - len | 0;
      }
      if (containsGroupMark($this, $this.kt_1)) {
        updateContainsMark($this, $this.kt_1);
      }
      tmp = anchorsRemoved;
    } else {
      tmp = false;
    }
    return tmp;
  }
  function removeSlots($this, start, len, group) {
    if (len > 0) {
      var gapLen = $this.ct_1;
      var removeEnd = start + len | 0;
      moveSlotGapTo($this, removeEnd, group);
      $this.bt_1 = start;
      $this.ct_1 = gapLen + len | 0;
      fill($this.us_1, null, start, start + len | 0);
      var currentDataEnd = $this.at_1;
      if (currentDataEnd >= start)
        $this.at_1 = currentDataEnd - len | 0;
    }
  }
  function updateNodeOfGroup($this, index, value) {
    var address = groupIndexToAddress($this, index);
    // Inline function 'androidx.compose.runtime.runtimeCheck' call
    var tmp0_runtimeCheck = address < $this.ts_1.length ? isNode($this.ts_1, address) : false;
    if (!tmp0_runtimeCheck) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.SlotWriter.updateNodeOfGroup.<anonymous>' call
      tmp$ret$0 = 'Updating the node of a group at ' + index + ' that was not created with as a node group';
      var message = tmp$ret$0;
      composeRuntimeError(toString_2(message));
    }
    $this.us_1[dataIndexToDataAddress($this, nodeIndex($this.ts_1, $this, address))] = value;
  }
  function updateAnchors($this, previousGapStart, newGapStart) {
    var gapLen = $this.xs_1;
    var size = _get_capacity__a9k9f3($this) - gapLen | 0;
    if (previousGapStart < newGapStart) {
      var index = locationOf($this.vs_1, previousGapStart, size);
      $l$loop_0: while (index < $this.vs_1.g()) {
        var anchor = $this.vs_1.h(index);
        var location = anchor.j11_1;
        if (location < 0) {
          var newLocation = size + location | 0;
          if (newLocation < newGapStart) {
            anchor.j11_1 = size + location | 0;
            var tmp0 = index;
            index = tmp0 + 1 | 0;
          } else
            break $l$loop_0;
        } else
          break $l$loop_0;
      }
    } else {
      var index_0 = locationOf($this.vs_1, newGapStart, size);
      $l$loop_1: while (index_0 < $this.vs_1.g()) {
        var anchor_0 = $this.vs_1.h(index_0);
        var location_0 = anchor_0.j11_1;
        if (location_0 >= 0) {
          anchor_0.j11_1 = -(size - location_0 | 0) | 0;
          var tmp1 = index_0;
          index_0 = tmp1 + 1 | 0;
        } else
          break $l$loop_1;
      }
    }
  }
  function removeAnchors($this, gapStart, size) {
    var gapLen = $this.xs_1;
    var removeEnd = gapStart + size | 0;
    var groupsSize = _get_capacity__a9k9f3($this) - gapLen | 0;
    var tmp$ret$1;
    // Inline function 'kotlin.let' call
    var tmp0_let = locationOf($this.vs_1, gapStart + size | 0, groupsSize);
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.SlotWriter.removeAnchors.<anonymous>' call
    tmp$ret$0 = tmp0_let >= $this.vs_1.g() ? tmp0_let - 1 | 0 : tmp0_let;
    tmp$ret$1 = tmp$ret$0;
    var index = tmp$ret$1;
    var removeAnchorEnd = 0;
    var removeAnchorStart = index + 1 | 0;
    $l$loop: while (index >= 0) {
      var anchor = $this.vs_1.h(index);
      var location = $this.p11(anchor);
      if (location >= gapStart) {
        if (location < removeEnd) {
          anchor.j11_1 = IntCompanionObject_getInstance().v_1;
          removeAnchorStart = index;
          if (removeAnchorEnd === 0)
            removeAnchorEnd = index + 1 | 0;
        }
        var tmp0 = index;
        index = tmp0 - 1 | 0;
      } else
        break $l$loop;
    }
    var tmp$ret$2;
    // Inline function 'kotlin.also' call
    var tmp1_also = removeAnchorStart < removeAnchorEnd;
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'androidx.compose.runtime.SlotWriter.removeAnchors.<anonymous>' call
    if (tmp1_also) {
      $this.vs_1.f7(removeAnchorStart, removeAnchorEnd).q6();
    }
    tmp$ret$2 = tmp1_also;
    return tmp$ret$2;
  }
  function moveAnchors($this, originalLocation, newLocation, size) {
    var end = originalLocation + size | 0;
    var groupsSize = $this.g();
    var index = locationOf($this.vs_1, originalLocation, groupsSize);
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$0 = ArrayList_init_$Create$();
    var removedAnchors = tmp$ret$0;
    if (index >= 0) {
      $l$loop: while (index < $this.vs_1.g()) {
        var anchor = $this.vs_1.h(index);
        var location = $this.p11(anchor);
        if (location >= originalLocation ? location < end : false) {
          removedAnchors.b(anchor);
          $this.vs_1.f3(index);
        } else
          break $l$loop;
      }
    }
    var moveDelta = newLocation - originalLocation | 0;
    // Inline function 'androidx.compose.runtime.snapshots.fastForEach' call
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    var last = removedAnchors.g() - 1 | 0;
    if (inductionVariable <= last)
      do {
        var index_0 = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var item = removedAnchors.h(index_0);
        // Inline function 'androidx.compose.runtime.SlotWriter.moveAnchors.<anonymous>' call
        var anchorIndex = $this.p11(item);
        var newAnchorIndex = anchorIndex + moveDelta | 0;
        if (newAnchorIndex >= $this.ws_1) {
          item.j11_1 = -(groupsSize - newAnchorIndex | 0) | 0;
        } else {
          item.j11_1 = newAnchorIndex;
        }
        var insertIndex = locationOf($this.vs_1, newAnchorIndex, groupsSize);
        $this.vs_1.d7(insertIndex, item);
      }
       while (inductionVariable <= last);
  }
  function _get_capacity__a9k9f3($this) {
    return $this.ts_1.length / 5 | 0;
  }
  function groupIndexToAddress($this, index) {
    return index < $this.ws_1 ? index : index + $this.xs_1 | 0;
  }
  function dataIndexToDataAddress($this, dataIndex) {
    return dataIndex < $this.bt_1 ? dataIndex : dataIndex + $this.ct_1 | 0;
  }
  function parent(_this__u8e3s4, $this, index) {
    return parentAnchorToIndex($this, parentAnchor(_this__u8e3s4, groupIndexToAddress($this, index)));
  }
  function dataIndex($this, index) {
    return dataIndex_0($this.ts_1, $this, groupIndexToAddress($this, index));
  }
  function dataIndex_0(_this__u8e3s4, $this, address) {
    return address >= _get_capacity__a9k9f3($this) ? $this.us_1.length - $this.ct_1 | 0 : dataAnchorToDataIndex($this, dataAnchor(_this__u8e3s4, address), $this.ct_1, $this.us_1.length);
  }
  function slotIndex(_this__u8e3s4, $this, address) {
    return address >= _get_capacity__a9k9f3($this) ? $this.us_1.length - $this.ct_1 | 0 : dataAnchorToDataIndex($this, slotAnchor(_this__u8e3s4, address), $this.ct_1, $this.us_1.length);
  }
  function updateDataIndex(_this__u8e3s4, $this, address, dataIndex) {
    updateDataAnchor(_this__u8e3s4, address, dataIndexToDataAnchor($this, dataIndex, $this.bt_1, $this.ct_1, $this.us_1.length));
  }
  function nodeIndex(_this__u8e3s4, $this, address) {
    return dataIndex_0(_this__u8e3s4, $this, address);
  }
  function auxIndex(_this__u8e3s4, $this, address) {
    return dataIndex_0(_this__u8e3s4, $this, address) + countOneBits_0(groupInfo(_this__u8e3s4, address) >> 29) | 0;
  }
  function dataIndexToDataAnchor($this, index, gapStart, gapLen, capacity) {
    return index > gapStart ? -(((capacity - gapLen | 0) - index | 0) + 1 | 0) | 0 : index;
  }
  function dataAnchorToDataIndex($this, anchor, gapLen, capacity) {
    return anchor < 0 ? ((capacity - gapLen | 0) + anchor | 0) + 1 | 0 : anchor;
  }
  function parentIndexToAnchor($this, index, gapStart) {
    return index < gapStart ? index : -(($this.g() - index | 0) - -2 | 0) | 0;
  }
  function parentAnchorToIndex($this, index) {
    return index > -2 ? index : ($this.g() + index | 0) - -2 | 0;
  }
  function SlotWriter$groupSlots$1($start, $end, this$0) {
    this.m1d_1 = $end;
    this.n1d_1 = this$0;
    this.l1d_1 = $start;
  }
  SlotWriter$groupSlots$1.prototype.e = function () {
    return this.l1d_1 < this.m1d_1;
  };
  SlotWriter$groupSlots$1.prototype.f = function () {
    var tmp;
    if (this.e()) {
      var tmp_0 = this.n1d_1.us_1;
      var tmp0_this = this;
      var tmp1 = tmp0_this.l1d_1;
      tmp0_this.l1d_1 = tmp1 + 1 | 0;
      tmp = tmp_0[dataIndexToDataAddress(this.n1d_1, tmp1)];
    } else {
      tmp = null;
    }
    return tmp;
  };
  SlotWriter$groupSlots$1.$metadata$ = classMeta(undefined, [Iterator]);
  function SlotWriter(table) {
    Companion_getInstance_10();
    this.ss_1 = table;
    this.ts_1 = this.ss_1.rw_1;
    this.us_1 = this.ss_1.tw_1;
    this.vs_1 = this.ss_1.yw_1;
    this.ws_1 = this.ss_1.sw_1;
    this.xs_1 = (this.ts_1.length / 5 | 0) - this.ss_1.sw_1 | 0;
    this.ys_1 = this.ss_1.sw_1;
    this.zs_1 = 0;
    this.at_1 = 0;
    this.bt_1 = this.ss_1.uw_1;
    this.ct_1 = this.us_1.length - this.ss_1.uw_1 | 0;
    this.dt_1 = this.ss_1.sw_1;
    this.et_1 = 0;
    this.ft_1 = 0;
    this.gt_1 = new IntStack();
    this.ht_1 = new IntStack();
    this.it_1 = new IntStack();
    this.jt_1 = 0;
    this.kt_1 = -1;
    this.lt_1 = false;
    this.mt_1 = null;
  }
  SlotWriter.prototype.o1d = function () {
    return this.jt_1;
  };
  SlotWriter.prototype.q11 = function () {
    return this.jt_1 < this.ys_1 ? isNode(this.ts_1, groupIndexToAddress(this, this.jt_1)) : false;
  };
  SlotWriter.prototype.i10 = function (index) {
    return isNode(this.ts_1, groupIndexToAddress(this, index));
  };
  SlotWriter.prototype.j10 = function (index) {
    return nodeCount(this.ts_1, groupIndexToAddress(this, index));
  };
  SlotWriter.prototype.ay = function (index) {
    return key(this.ts_1, groupIndexToAddress(this, index));
  };
  SlotWriter.prototype.zx = function (index) {
    var address = groupIndexToAddress(this, index);
    return hasObjectKey(this.ts_1, address) ? this.us_1[objectKeyIndex(this.ts_1, address)] : null;
  };
  SlotWriter.prototype.qz = function (index) {
    return groupSize(this.ts_1, groupIndexToAddress(this, index));
  };
  SlotWriter.prototype.yx = function (index) {
    var address = groupIndexToAddress(this, index);
    return hasAux(this.ts_1, address) ? this.us_1[auxIndex(this.ts_1, this, address)] : Companion_getInstance_8().ns_1;
  };
  SlotWriter.prototype.n11 = function (index) {
    return (index > this.kt_1 ? index < this.ys_1 : false) ? true : this.kt_1 === 0 ? index === 0 : false;
  };
  SlotWriter.prototype.r11 = function (index) {
    return this.o11(index, this.jt_1);
  };
  SlotWriter.prototype.o11 = function (index, group) {
    var tmp;
    if (group === this.kt_1) {
      tmp = this.ys_1;
    } else if (group > this.gt_1.y10(0)) {
      tmp = group + this.qz(group) | 0;
    } else {
      var openIndex = this.gt_1.p1d(group);
      tmp = openIndex < 0 ? group + this.qz(group) | 0 : (_get_capacity__a9k9f3(this) - this.xs_1 | 0) - this.ht_1.h10(openIndex) | 0;
    }
    var end = tmp;
    return index > group ? index < end : false;
  };
  SlotWriter.prototype.v10 = function (index) {
    var address = groupIndexToAddress(this, index);
    return isNode(this.ts_1, address) ? this.us_1[dataIndexToDataAddress(this, nodeIndex(this.ts_1, this, address))] : null;
  };
  SlotWriter.prototype.x11 = function (anchor) {
    return this.v10(anchor.q1d(this));
  };
  SlotWriter.prototype.r1d = function () {
    return this.kt_1;
  };
  SlotWriter.prototype.by = function (index) {
    return parent(this.ts_1, this, index);
  };
  SlotWriter.prototype.vx = function () {
    this.lt_1 = true;
    if (this.gt_1.i()) {
      moveGroupGapTo(this, this.g());
      moveSlotGapTo(this, this.us_1.length - this.ct_1 | 0, this.ws_1);
      recalculateMarks(this);
    }
    this.ss_1.s1d(this, this.ts_1, this.ws_1, this.us_1, this.bt_1, this.vs_1);
  };
  SlotWriter.prototype.a16 = function () {
    // Inline function 'androidx.compose.runtime.runtimeCheck' call
    var tmp0_runtimeCheck = this.et_1 === 0;
    if (!tmp0_runtimeCheck) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.SlotWriter.reset.<anonymous>' call
      tmp$ret$0 = 'Cannot reset when inserting';
      var message = tmp$ret$0;
      composeRuntimeError(toString_2(message));
    }
    recalculateMarks(this);
    this.jt_1 = 0;
    this.ys_1 = _get_capacity__a9k9f3(this) - this.xs_1 | 0;
    this.zs_1 = 0;
    this.at_1 = 0;
    this.ft_1 = 0;
  };
  SlotWriter.prototype.u13 = function (value) {
    var result = this.t1d();
    this.u1d(value);
    return result;
  };
  SlotWriter.prototype.z11 = function (value) {
    var address = groupIndexToAddress(this, this.jt_1);
    // Inline function 'androidx.compose.runtime.runtimeCheck' call
    var tmp0_runtimeCheck = hasAux(this.ts_1, address);
    if (!tmp0_runtimeCheck) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.SlotWriter.updateAux.<anonymous>' call
      tmp$ret$0 = 'Updating the data of a group that was not created with a data slot';
      var message = tmp$ret$0;
      composeRuntimeError(toString_2(message));
    }
    this.us_1[dataIndexToDataAddress(this, auxIndex(this.ts_1, this, address))] = value;
  };
  SlotWriter.prototype.g14 = function (value) {
    // Inline function 'androidx.compose.runtime.runtimeCheck' call
    var tmp0_runtimeCheck = this.et_1 >= 0;
    if (!tmp0_runtimeCheck) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.SlotWriter.insertAux.<anonymous>' call
      tmp$ret$0 = 'Cannot insert auxiliary data when not inserting';
      var message = tmp$ret$0;
      composeRuntimeError(toString_2(message));
    }
    var parent = this.kt_1;
    var parentGroupAddress = groupIndexToAddress(this, parent);
    // Inline function 'androidx.compose.runtime.runtimeCheck' call
    var tmp1_runtimeCheck = !hasAux(this.ts_1, parentGroupAddress);
    if (!tmp1_runtimeCheck) {
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.SlotWriter.insertAux.<anonymous>' call
      tmp$ret$1 = 'Group already has auxiliary data';
      var message_0 = tmp$ret$1;
      composeRuntimeError(toString_2(message_0));
    }
    insertSlots(this, 1, parent);
    var auxIndex_0 = auxIndex(this.ts_1, this, parentGroupAddress);
    var auxAddress = dataIndexToDataAddress(this, auxIndex_0);
    if (this.zs_1 > auxIndex_0) {
      var slotsToMove = this.zs_1 - auxIndex_0 | 0;
      // Inline function 'kotlin.check' call
      var tmp2_check = slotsToMove < 3;
      // Inline function 'kotlin.contracts.contract' call
      if (!tmp2_check) {
        var tmp$ret$2;
        // Inline function 'androidx.compose.runtime.SlotWriter.insertAux.<anonymous>' call
        tmp$ret$2 = 'Moving more than two slot not supported';
        var message_1 = tmp$ret$2;
        throw IllegalStateException_init_$Create$_0(toString_2(message_1));
      }
      if (slotsToMove > 1) {
        this.us_1[auxAddress + 2 | 0] = this.us_1[auxAddress + 1 | 0];
      }
      this.us_1[auxAddress + 1 | 0] = this.us_1[auxAddress];
    }
    addAux(this.ts_1, parentGroupAddress);
    this.us_1[auxAddress] = value;
    var tmp0_this = this;
    var tmp1 = tmp0_this.zs_1;
    tmp0_this.zs_1 = tmp1 + 1 | 0;
  };
  SlotWriter.prototype.h1d = function (value) {
    return updateNodeOfGroup(this, this.jt_1, value);
  };
  SlotWriter.prototype.w11 = function (anchor, value) {
    return updateNodeOfGroup(this, anchor.q1d(this), value);
  };
  SlotWriter.prototype.u1d = function (value) {
    // Inline function 'androidx.compose.runtime.runtimeCheck' call
    var tmp0_runtimeCheck = this.zs_1 <= this.at_1;
    if (!tmp0_runtimeCheck) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.SlotWriter.set.<anonymous>' call
      tmp$ret$0 = 'Writing to an invalid slot';
      var message = tmp$ret$0;
      composeRuntimeError(toString_2(message));
    }
    this.us_1[dataIndexToDataAddress(this, this.zs_1 - 1 | 0)] = value;
  };
  SlotWriter.prototype.y11 = function (index, value) {
    var address = groupIndexToAddress(this, this.jt_1);
    var slotsStart = slotIndex(this.ts_1, this, address);
    var slotsEnd = dataIndex_0(this.ts_1, this, groupIndexToAddress(this, this.jt_1 + 1 | 0));
    var slotsIndex = slotsStart + index | 0;
    // Inline function 'androidx.compose.runtime.runtimeCheck' call
    var tmp0_runtimeCheck = slotsIndex >= slotsStart ? slotsIndex < slotsEnd : false;
    if (!tmp0_runtimeCheck) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.SlotWriter.set.<anonymous>' call
      tmp$ret$0 = 'Write to an invalid slot index ' + index + ' for group ' + this.jt_1;
      var message = tmp$ret$0;
      composeRuntimeError(toString_2(message));
    }
    var slotAddress = dataIndexToDataAddress(this, slotsIndex);
    var result = this.us_1[slotAddress];
    this.us_1[slotAddress] = value;
    return result;
  };
  SlotWriter.prototype.t1d = function () {
    if (this.et_1 > 0) {
      insertSlots(this, 1, this.kt_1);
    }
    var tmp = this.us_1;
    var tmp0_this = this;
    var tmp1 = tmp0_this.zs_1;
    tmp0_this.zs_1 = tmp1 + 1 | 0;
    return tmp[dataIndexToDataAddress(this, tmp1)];
  };
  SlotWriter.prototype.q12 = function (anchor, index) {
    return this.v1d(this.p11(anchor), index);
  };
  SlotWriter.prototype.v1d = function (groupIndex, index) {
    var address = groupIndexToAddress(this, groupIndex);
    var slotsStart = slotIndex(this.ts_1, this, address);
    var slotsEnd = dataIndex_0(this.ts_1, this, groupIndexToAddress(this, groupIndex + 1 | 0));
    var slotsIndex = slotsStart + index | 0;
    if (!(slotsStart <= slotsIndex ? slotsIndex < slotsEnd : false)) {
      return Companion_getInstance_8().ns_1;
    }
    var slotAddress = dataIndexToDataAddress(this, slotsIndex);
    return this.us_1[slotAddress];
  };
  SlotWriter.prototype.s12 = function (amount) {
    // Inline function 'kotlin.require' call
    var tmp0_require = amount >= 0;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.SlotWriter.advanceBy.<anonymous>' call
      tmp$ret$0 = 'Cannot seek backwards';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString_2(message));
    }
    // Inline function 'kotlin.check' call
    var tmp1_check = this.et_1 <= 0;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp1_check) {
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.SlotWriter.advanceBy.<anonymous>' call
      tmp$ret$1 = 'Cannot call seek() while inserting';
      var message_0 = tmp$ret$1;
      throw IllegalStateException_init_$Create$_0(toString_2(message_0));
    }
    if (amount === 0)
      return Unit_getInstance();
    var index = this.jt_1 + amount | 0;
    // Inline function 'androidx.compose.runtime.runtimeCheck' call
    var tmp2_runtimeCheck = index >= this.kt_1 ? index <= this.ys_1 : false;
    if (!tmp2_runtimeCheck) {
      var tmp$ret$2;
      // Inline function 'androidx.compose.runtime.SlotWriter.advanceBy.<anonymous>' call
      tmp$ret$2 = 'Cannot seek outside the current group (' + this.kt_1 + '-' + this.ys_1 + ')';
      var message_1 = tmp$ret$2;
      composeRuntimeError(toString_2(message_1));
    }
    this.jt_1 = index;
    var newSlot = dataIndex_0(this.ts_1, this, groupIndexToAddress(this, index));
    this.zs_1 = newSlot;
    this.at_1 = newSlot;
  };
  SlotWriter.prototype.hy = function () {
    var newGroup = this.ys_1;
    this.jt_1 = newGroup;
    this.zs_1 = dataIndex_0(this.ts_1, this, groupIndexToAddress(this, newGroup));
  };
  SlotWriter.prototype.bz = function () {
    var tmp0_this = this;
    var tmp1 = tmp0_this.et_1;
    tmp0_this.et_1 = tmp1 + 1 | 0;
    if (tmp1 === 0) {
      saveCurrentGroupEnd(this);
    }
  };
  SlotWriter.prototype.yz = function () {
    // Inline function 'kotlin.check' call
    var tmp0_check = this.et_1 > 0;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_check) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.SlotWriter.endInsert.<anonymous>' call
      tmp$ret$0 = 'Unbalanced begin/end insert';
      var message = tmp$ret$0;
      throw IllegalStateException_init_$Create$_0(toString_2(message));
    }
    var tmp0_this = this;
    tmp0_this.et_1 = tmp0_this.et_1 - 1 | 0;
    if (tmp0_this.et_1 === 0) {
      // Inline function 'androidx.compose.runtime.runtimeCheck' call
      var tmp1_runtimeCheck = this.it_1.g() === this.gt_1.g();
      if (!tmp1_runtimeCheck) {
        var tmp$ret$1;
        // Inline function 'androidx.compose.runtime.SlotWriter.endInsert.<anonymous>' call
        tmp$ret$1 = 'startGroup/endGroup mismatch while inserting';
        var message_0 = tmp$ret$1;
        composeRuntimeError(toString_2(message_0));
      }
      restoreCurrentGroupEnd(this);
    }
  };
  SlotWriter.prototype.jy = function () {
    // Inline function 'kotlin.require' call
    var tmp0_require = this.et_1 === 0;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.SlotWriter.startGroup.<anonymous>' call
      tmp$ret$0 = 'Key must be supplied when inserting';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString_2(message));
    }
    startGroup_1(this, 0, Companion_getInstance_8().ns_1, false, Companion_getInstance_8().ns_1);
  };
  SlotWriter.prototype.my = function (key, dataKey) {
    return startGroup_1(this, key, dataKey, false, Companion_getInstance_8().ns_1);
  };
  SlotWriter.prototype.oy = function (key) {
    return startGroup_1(this, 125, key, true, Companion_getInstance_8().ns_1);
  };
  SlotWriter.prototype.ny = function (key, objectKey, aux) {
    return startGroup_1(this, key, objectKey, false, aux);
  };
  SlotWriter.prototype.xz = function () {
    var inserting = this.et_1 > 0;
    var currentGroup = this.jt_1;
    var currentGroupEnd = this.ys_1;
    var groupIndex = this.kt_1;
    var groupAddress = groupIndexToAddress(this, groupIndex);
    var newNodes = this.ft_1;
    var newGroupSize = currentGroup - groupIndex | 0;
    var isNode_0 = isNode(this.ts_1, groupAddress);
    if (inserting) {
      updateGroupSize(this.ts_1, groupAddress, newGroupSize);
      updateNodeCount_0(this.ts_1, groupAddress, newNodes);
      this.ft_1 = this.it_1.nz() + (isNode_0 ? 1 : newNodes) | 0;
      this.kt_1 = parent(this.ts_1, this, groupIndex);
    } else {
      // Inline function 'kotlin.require' call
      var tmp0_require = currentGroup === currentGroupEnd;
      // Inline function 'kotlin.contracts.contract' call
      if (!tmp0_require) {
        var tmp$ret$0;
        // Inline function 'androidx.compose.runtime.SlotWriter.endGroup.<anonymous>' call
        tmp$ret$0 = 'Expected to be at the end of a group';
        var message = tmp$ret$0;
        throw IllegalArgumentException_init_$Create$(toString_2(message));
      }
      var oldGroupSize = groupSize(this.ts_1, groupAddress);
      var oldNodes = nodeCount(this.ts_1, groupAddress);
      updateGroupSize(this.ts_1, groupAddress, newGroupSize);
      updateNodeCount_0(this.ts_1, groupAddress, newNodes);
      var newParent = this.gt_1.nz();
      restoreCurrentGroupEnd(this);
      this.kt_1 = newParent;
      var groupParent = parent(this.ts_1, this, groupIndex);
      this.ft_1 = this.it_1.nz();
      if (groupParent === newParent) {
        var tmp0_this = this;
        tmp0_this.ft_1 = tmp0_this.ft_1 + (isNode_0 ? 0 : newNodes - oldNodes | 0) | 0;
      } else {
        var groupSizeDelta = newGroupSize - oldGroupSize | 0;
        var nodesDelta = isNode_0 ? 0 : newNodes - oldNodes | 0;
        if (!(groupSizeDelta === 0) ? true : !(nodesDelta === 0)) {
          var current = groupParent;
          while ((!(current === 0) ? !(current === newParent) : false) ? !(nodesDelta === 0) ? true : !(groupSizeDelta === 0) : false) {
            var currentAddress = groupIndexToAddress(this, current);
            if (!(groupSizeDelta === 0)) {
              var newSize = groupSize(this.ts_1, currentAddress) + groupSizeDelta | 0;
              updateGroupSize(this.ts_1, currentAddress, newSize);
            }
            if (!(nodesDelta === 0)) {
              updateNodeCount_0(this.ts_1, currentAddress, nodeCount(this.ts_1, currentAddress) + nodesDelta | 0);
            }
            if (isNode(this.ts_1, currentAddress))
              nodesDelta = 0;
            current = parent(this.ts_1, this, current);
          }
        }
        var tmp1_this = this;
        tmp1_this.ft_1 = tmp1_this.ft_1 + nodesDelta | 0;
      }
    }
    return newNodes;
  };
  SlotWriter.prototype.z15 = function (index) {
    // Inline function 'kotlin.require' call
    var tmp0_require = this.et_1 <= 0;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.SlotWriter.ensureStarted.<anonymous>' call
      tmp$ret$0 = 'Cannot call ensureStarted() while inserting';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString_2(message));
    }
    var parent = this.kt_1;
    if (!(parent === index)) {
      // Inline function 'kotlin.require' call
      var tmp1_require = index >= parent ? index < this.ys_1 : false;
      // Inline function 'kotlin.contracts.contract' call
      if (!tmp1_require) {
        var tmp$ret$1;
        // Inline function 'androidx.compose.runtime.SlotWriter.ensureStarted.<anonymous>' call
        tmp$ret$1 = 'Started group at ' + index + ' must be a subgroup of the group at ' + parent;
        var message_0 = tmp$ret$1;
        throw IllegalArgumentException_init_$Create$(toString_2(message_0));
      }
      var oldCurrent = this.jt_1;
      var oldCurrentSlot = this.zs_1;
      var oldCurrentSlotEnd = this.at_1;
      this.jt_1 = index;
      this.jy();
      this.jt_1 = oldCurrent;
      this.zs_1 = oldCurrentSlot;
      this.at_1 = oldCurrentSlotEnd;
    }
  };
  SlotWriter.prototype.v12 = function (anchor) {
    return this.z15(anchor.q1d(this));
  };
  SlotWriter.prototype.xx = function () {
    var groupAddress = groupIndexToAddress(this, this.jt_1);
    var newGroup = this.jt_1 + groupSize(this.ts_1, groupAddress) | 0;
    this.jt_1 = newGroup;
    this.zs_1 = dataIndex_0(this.ts_1, this, groupIndexToAddress(this, newGroup));
    return isNode(this.ts_1, groupAddress) ? 1 : nodeCount(this.ts_1, groupAddress);
  };
  SlotWriter.prototype.qu = function () {
    // Inline function 'kotlin.require' call
    var tmp0_require = this.et_1 === 0;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.SlotWriter.removeGroup.<anonymous>' call
      tmp$ret$0 = 'Cannot remove group while inserting';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString_2(message));
    }
    var oldGroup = this.jt_1;
    var oldSlot = this.zs_1;
    var count = this.xx();
    var tmp0_safe_receiver = this.mt_1;
    if (tmp0_safe_receiver == null)
      null;
    else {
      var tmp$ret$1;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      while (tmp0_safe_receiver.w10() ? tmp0_safe_receiver.n13() >= oldGroup : false) {
        tmp0_safe_receiver.j1d();
      }
      tmp$ret$1 = Unit_getInstance();
    }
    var anchorsRemoved = removeGroups(this, oldGroup, this.jt_1 - oldGroup | 0);
    removeSlots(this, oldSlot, this.zs_1 - oldSlot | 0, oldGroup - 1 | 0);
    this.jt_1 = oldGroup;
    this.zs_1 = oldSlot;
    var tmp1_this = this;
    tmp1_this.ft_1 = tmp1_this.ft_1 - count | 0;
    return anchorsRemoved;
  };
  SlotWriter.prototype.nt = function () {
    var start = dataIndex_0(this.ts_1, this, groupIndexToAddress(this, this.jt_1));
    var end = dataIndex_0(this.ts_1, this, groupIndexToAddress(this, this.jt_1 + this.qz(this.jt_1) | 0));
    return new SlotWriter$groupSlots$1(start, end, this);
  };
  SlotWriter.prototype.a12 = function (offset) {
    // Inline function 'kotlin.require' call
    var tmp0_require = this.et_1 === 0;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.SlotWriter.moveGroup.<anonymous>' call
      tmp$ret$0 = 'Cannot move a group while inserting';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString_2(message));
    }
    // Inline function 'kotlin.require' call
    var tmp1_require = offset >= 0;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp1_require) {
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.SlotWriter.moveGroup.<anonymous>' call
      tmp$ret$1 = 'Parameter offset is out of bounds';
      var message_0 = tmp$ret$1;
      throw IllegalArgumentException_init_$Create$(toString_2(message_0));
    }
    if (offset === 0)
      return Unit_getInstance();
    var current = this.jt_1;
    var parent = this.kt_1;
    var parentEnd = this.ys_1;
    var count = offset;
    var groupToMove = current;
    while (count > 0) {
      groupToMove = groupToMove + groupSize(this.ts_1, groupIndexToAddress(this, groupToMove)) | 0;
      // Inline function 'kotlin.require' call
      var tmp2_require = groupToMove <= parentEnd;
      // Inline function 'kotlin.contracts.contract' call
      if (!tmp2_require) {
        var tmp$ret$2;
        // Inline function 'androidx.compose.runtime.SlotWriter.moveGroup.<anonymous>' call
        tmp$ret$2 = 'Parameter offset is out of bounds';
        var message_1 = tmp$ret$2;
        throw IllegalArgumentException_init_$Create$(toString_2(message_1));
      }
      var tmp0 = count;
      count = tmp0 - 1 | 0;
    }
    var moveLen = groupSize(this.ts_1, groupIndexToAddress(this, groupToMove));
    var currentSlot = this.zs_1;
    var dataStart = dataIndex_0(this.ts_1, this, groupIndexToAddress(this, groupToMove));
    var dataEnd = dataIndex_0(this.ts_1, this, groupIndexToAddress(this, groupToMove + moveLen | 0));
    var moveDataLen = dataEnd - dataStart | 0;
    var tmp$ret$3;
    // Inline function 'kotlin.math.max' call
    var tmp3_max = this.jt_1 - 1 | 0;
    tmp$ret$3 = Math.max(tmp3_max, 0);
    insertSlots(this, moveDataLen, tmp$ret$3);
    insertGroups(this, moveLen);
    var groups = this.ts_1;
    var moveLocationAddress = groupIndexToAddress(this, groupToMove + moveLen | 0);
    var moveLocationOffset = imul(moveLocationAddress, 5);
    var currentAddress = groupIndexToAddress(this, current);
    var tmp$ret$8;
    // Inline function 'kotlin.collections.copyInto' call
    var tmp4_copyInto = imul(currentAddress, 5);
    var tmp5_copyInto = moveLocationOffset + imul(moveLen, 5) | 0;
    var tmp$ret$5;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$4;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$4 = groups;
    tmp$ret$5 = tmp$ret$4;
    var tmp = tmp$ret$5;
    var tmp$ret$7;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$6;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$6 = groups;
    tmp$ret$7 = tmp$ret$6;
    arrayCopy(tmp, tmp$ret$7, tmp4_copyInto, moveLocationOffset, tmp5_copyInto);
    tmp$ret$8 = groups;
    if (moveDataLen > 0) {
      var slots = this.us_1;
      var tmp$ret$9;
      // Inline function 'kotlin.collections.copyInto' call
      var tmp6_copyInto = dataIndexToDataAddress(this, dataStart + moveDataLen | 0);
      var tmp7_copyInto = dataIndexToDataAddress(this, dataEnd + moveDataLen | 0);
      arrayCopy(slots, slots, currentSlot, tmp6_copyInto, tmp7_copyInto);
      tmp$ret$9 = slots;
    }
    var dataMoveDistance = (dataStart + moveDataLen | 0) - currentSlot | 0;
    var slotsGapStart = this.bt_1;
    var slotsGapLen = this.ct_1;
    var slotsCapacity = this.us_1.length;
    var slotsGapOwner = this.dt_1;
    var inductionVariable = current;
    var last = current + moveLen | 0;
    if (inductionVariable < last)
      do {
        var group = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var groupAddress = groupIndexToAddress(this, group);
        var oldIndex = dataIndex_0(groups, this, groupAddress);
        var newIndex = oldIndex - dataMoveDistance | 0;
        var newAnchor = dataIndexToDataAnchor(this, newIndex, slotsGapOwner < groupAddress ? 0 : slotsGapStart, slotsGapLen, slotsCapacity);
        updateDataIndex(groups, this, groupAddress, newAnchor);
      }
       while (inductionVariable < last);
    moveAnchors(this, groupToMove + moveLen | 0, current, moveLen);
    var anchorsRemoved = removeGroups(this, groupToMove + moveLen | 0, moveLen);
    // Inline function 'androidx.compose.runtime.runtimeCheck' call
    var tmp8_runtimeCheck = !anchorsRemoved;
    if (!tmp8_runtimeCheck) {
      var tmp$ret$10;
      // Inline function 'androidx.compose.runtime.SlotWriter.moveGroup.<anonymous>' call
      tmp$ret$10 = 'Unexpectedly removed anchors';
      var message_2 = tmp$ret$10;
      composeRuntimeError(toString_2(message_2));
    }
    fixParentAnchorsFor(this, parent, this.ys_1, current);
    if (moveDataLen > 0) {
      removeSlots(this, dataStart + moveDataLen | 0, moveDataLen, (groupToMove + moveLen | 0) - 1 | 0);
    }
  };
  SlotWriter.prototype.x12 = function (anchor, offset, writer) {
    // Inline function 'kotlin.require' call
    var tmp0_require = writer.et_1 > 0;
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'kotlin.require.<anonymous>' call
      tmp$ret$0 = 'Failed requirement.';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString_2(message));
    }
    // Inline function 'kotlin.require' call
    var tmp1_require = this.et_1 === 0;
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp1_require) {
      var tmp$ret$1;
      // Inline function 'kotlin.require.<anonymous>' call
      tmp$ret$1 = 'Failed requirement.';
      var message_0 = tmp$ret$1;
      throw IllegalArgumentException_init_$Create$(toString_2(message_0));
    }
    // Inline function 'kotlin.require' call
    var tmp2_require = anchor.s16();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp2_require) {
      var tmp$ret$2;
      // Inline function 'kotlin.require.<anonymous>' call
      tmp$ret$2 = 'Failed requirement.';
      var message_1 = tmp$ret$2;
      throw IllegalArgumentException_init_$Create$(toString_2(message_1));
    }
    var location = this.p11(anchor) + offset | 0;
    var currentGroup = this.jt_1;
    // Inline function 'kotlin.require' call
    var tmp3_require = currentGroup <= location ? location < this.ys_1 : false;
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp3_require) {
      var tmp$ret$3;
      // Inline function 'kotlin.require.<anonymous>' call
      tmp$ret$3 = 'Failed requirement.';
      var message_2 = tmp$ret$3;
      throw IllegalArgumentException_init_$Create$(toString_2(message_2));
    }
    var parent = this.by(location);
    var size = this.qz(location);
    var nodes = this.i10(location) ? 1 : this.j10(location);
    var result = moveGroup(Companion_getInstance_10(), this, location, writer, false, false);
    updateContainsMark(this, parent);
    var current = parent;
    var updatingNodes = nodes > 0;
    while (current >= currentGroup) {
      var currentAddress = groupIndexToAddress(this, current);
      updateGroupSize(this.ts_1, currentAddress, groupSize(this.ts_1, currentAddress) - size | 0);
      if (updatingNodes) {
        if (isNode(this.ts_1, currentAddress))
          updatingNodes = false;
        else {
          updateNodeCount_0(this.ts_1, currentAddress, nodeCount(this.ts_1, currentAddress) - nodes | 0);
        }
      }
      current = this.by(current);
    }
    if (updatingNodes) {
      runtimeCheck(this.ft_1 >= nodes);
      var tmp0_this = this;
      tmp0_this.ft_1 = tmp0_this.ft_1 - nodes | 0;
    }
    return result;
  };
  SlotWriter.prototype.u12 = function (table, index) {
    // Inline function 'kotlin.require' call
    var tmp0_require = this.et_1 > 0;
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'kotlin.require.<anonymous>' call
      tmp$ret$0 = 'Failed requirement.';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString_2(message));
    }
    if ((index === 0 ? this.jt_1 === 0 : false) ? this.ss_1.sw_1 === 0 : false) {
      var myGroups = this.ts_1;
      var mySlots = this.us_1;
      var myAnchors = this.vs_1;
      var groups = table.rw_1;
      var groupsSize = table.sw_1;
      var slots = table.tw_1;
      var slotsSize = table.uw_1;
      this.ts_1 = groups;
      this.us_1 = slots;
      this.vs_1 = table.yw_1;
      this.ws_1 = groupsSize;
      this.xs_1 = (groups.length / 5 | 0) - groupsSize | 0;
      this.bt_1 = slotsSize;
      this.ct_1 = slots.length - slotsSize | 0;
      this.dt_1 = groupsSize;
      table.w1d(myGroups, 0, mySlots, 0, myAnchors);
      return this.vs_1;
    }
    var tmp$ret$4;
    // Inline function 'androidx.compose.runtime.SlotTable.write' call
    var tmp$ret$3;
    // Inline function 'kotlin.let' call
    var tmp1_let = table.gy();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$2;
    // Inline function 'androidx.compose.runtime.SlotTable.write.<anonymous>' call
    var tmp;
    try {
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.SlotWriter.moveFrom.<anonymous>' call
      tmp$ret$1 = moveGroup(Companion_getInstance_10(), tmp1_let, index, this, true, true);
      tmp = tmp$ret$1;
    }finally {
      tmp1_let.vx();
    }
    tmp$ret$2 = tmp;
    tmp$ret$3 = tmp$ret$2;
    tmp$ret$4 = tmp$ret$3;
    return tmp$ret$4;
  };
  SlotWriter.prototype.p12 = function (offset, table, index) {
    runtimeCheck(this.et_1 <= 0 ? this.qz(this.jt_1 + offset | 0) === 1 : false);
    var previousCurrentGroup = this.jt_1;
    var previousCurrentSlot = this.zs_1;
    var previousCurrentSlotEnd = this.at_1;
    this.s12(offset);
    this.jy();
    this.bz();
    var tmp$ret$3;
    // Inline function 'androidx.compose.runtime.SlotTable.write' call
    var tmp$ret$2;
    // Inline function 'kotlin.let' call
    var tmp0_let = table.gy();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.SlotTable.write.<anonymous>' call
    var tmp;
    try {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.SlotWriter.moveIntoGroupFrom.<anonymous>' call
      tmp$ret$0 = moveGroup(Companion_getInstance_10(), tmp0_let, index, this, false, true);
      tmp = tmp$ret$0;
    }finally {
      tmp0_let.vx();
    }
    tmp$ret$1 = tmp;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    var anchors = tmp$ret$3;
    this.yz();
    this.xz();
    this.jt_1 = previousCurrentGroup;
    this.zs_1 = previousCurrentSlot;
    this.at_1 = previousCurrentSlotEnd;
    return anchors;
  };
  SlotWriter.prototype.cz = function (index) {
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.getOrAdd' call
    var tmp0_getOrAdd = this.vs_1;
    var tmp1_getOrAdd = this.g();
    var location = search$accessor$v4m42o(tmp0_getOrAdd, index, tmp1_getOrAdd);
    var tmp;
    if (location < 0) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.SlotWriter.anchor.<anonymous>' call
      tmp$ret$0 = new Anchor(index <= this.ws_1 ? index : -(this.g() - index | 0) | 0);
      var anchor = tmp$ret$0;
      tmp0_getOrAdd.d7(-(location + 1 | 0) | 0, anchor);
      tmp = anchor;
    } else {
      tmp = tmp0_getOrAdd.h(location);
    }
    tmp$ret$1 = tmp;
    return tmp$ret$1;
  };
  SlotWriter.prototype.x1d = function (group) {
    var groupAddress = groupIndexToAddress(this, group);
    if (!hasMark(this.ts_1, groupAddress)) {
      updateMark(this.ts_1, groupAddress, true);
      if (!containsMark(this.ts_1, groupAddress)) {
        updateContainsMark(this, this.by(group));
      }
    }
  };
  SlotWriter.prototype.q10 = function (group, $mask0, $handler) {
    if (!(($mask0 & 1) === 0))
      group = this.kt_1;
    return this.x1d(group);
  };
  SlotWriter.prototype.p11 = function (anchor) {
    var tmp$ret$1;
    // Inline function 'kotlin.let' call
    var tmp0_let = anchor.j11_1;
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.SlotWriter.anchorIndex.<anonymous>' call
    tmp$ret$0 = tmp0_let < 0 ? this.g() + tmp0_let | 0 : tmp0_let;
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  };
  SlotWriter.prototype.toString = function () {
    return 'SlotWriter(current = ' + this.jt_1 + ' end=' + this.ys_1 + ' size = ' + this.g() + ' ' + ('gap=' + this.ws_1 + '-' + (this.ws_1 + this.xs_1 | 0) + ')');
  };
  SlotWriter.prototype.g = function () {
    return _get_capacity__a9k9f3(this) - this.xs_1 | 0;
  };
  SlotWriter.$metadata$ = classMeta('SlotWriter');
  function SlotTable() {
    this.rw_1 = new Int32Array(0);
    this.sw_1 = 0;
    var tmp = this;
    var tmp_0 = 0;
    var tmp_1 = 0;
    var tmp$ret$0;
    // Inline function 'kotlin.arrayOfNulls' call
    tmp$ret$0 = fillArrayVal(Array(tmp_1), null);
    var tmp_2 = tmp$ret$0;
    while (tmp_0 < tmp_1) {
      var tmp_3 = tmp_0;
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.SlotTable.slots.<anonymous>' call
      tmp$ret$1 = null;
      tmp_2[tmp_3] = tmp$ret$1;
      tmp_0 = tmp_0 + 1 | 0;
    }
    tmp.tw_1 = tmp_2;
    this.uw_1 = 0;
    this.vw_1 = 0;
    this.ww_1 = false;
    this.xw_1 = 0;
    var tmp_4 = this;
    var tmp$ret$2;
    // Inline function 'kotlin.collections.arrayListOf' call
    tmp$ret$2 = ArrayList_init_$Create$();
    tmp_4.yw_1 = tmp$ret$2;
  }
  SlotTable.prototype.y1d = function () {
    return this.yw_1;
  };
  SlotTable.prototype.jk = function () {
    return this.sw_1 === 0;
  };
  SlotTable.prototype.z1d = function (block) {
    var tmp$ret$1;
    // Inline function 'kotlin.let' call
    var tmp0_let = this.zw();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.SlotTable.read.<anonymous>' call
    var tmp;
    try {
      tmp = block(tmp0_let);
    }finally {
      tmp0_let.vx();
    }
    tmp$ret$0 = tmp;
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  };
  SlotTable.prototype.a1e = function (block) {
    var tmp$ret$1;
    // Inline function 'kotlin.let' call
    var tmp0_let = this.gy();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.SlotTable.write.<anonymous>' call
    var tmp;
    try {
      tmp = block(tmp0_let);
    }finally {
      tmp0_let.vx();
    }
    tmp$ret$0 = tmp;
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  };
  SlotTable.prototype.zw = function () {
    if (this.ww_1) {
      // Inline function 'kotlin.error' call
      throw IllegalStateException_init_$Create$_0('Cannot read while a writer is pending');
    }
    var tmp0_this = this;
    var tmp1 = tmp0_this.vw_1;
    tmp0_this.vw_1 = tmp1 + 1 | 0;
    return new SlotReader(this);
  };
  SlotTable.prototype.gy = function () {
    // Inline function 'androidx.compose.runtime.runtimeCheck' call
    var tmp0_runtimeCheck = !this.ww_1;
    if (!tmp0_runtimeCheck) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.SlotTable.openWriter.<anonymous>' call
      tmp$ret$0 = 'Cannot start a writer when another writer is pending';
      var message = tmp$ret$0;
      composeRuntimeError(toString_2(message));
    }
    // Inline function 'androidx.compose.runtime.runtimeCheck' call
    var tmp1_runtimeCheck = this.vw_1 <= 0;
    if (!tmp1_runtimeCheck) {
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.SlotTable.openWriter.<anonymous>' call
      tmp$ret$1 = 'Cannot start a writer when a reader is pending';
      var message_0 = tmp$ret$1;
      composeRuntimeError(toString_2(message_0));
    }
    this.ww_1 = true;
    var tmp0_this = this;
    var tmp1 = tmp0_this.xw_1;
    tmp0_this.xw_1 = tmp1 + 1 | 0;
    return new SlotWriter(this);
  };
  SlotTable.prototype.p11 = function (anchor) {
    // Inline function 'androidx.compose.runtime.runtimeCheck' call
    var tmp0_runtimeCheck = !this.ww_1;
    if (!tmp0_runtimeCheck) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.SlotTable.anchorIndex.<anonymous>' call
      tmp$ret$0 = 'Use active SlotWriter to determine anchor location instead';
      var message = tmp$ret$0;
      composeRuntimeError(toString_2(message));
    }
    // Inline function 'kotlin.require' call
    var tmp1_require = anchor.s16();
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp1_require) {
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.SlotTable.anchorIndex.<anonymous>' call
      tmp$ret$1 = 'Anchor refers to a group that was removed';
      var message_0 = tmp$ret$1;
      throw IllegalArgumentException_init_$Create$(toString_2(message_0));
    }
    return anchor.j11_1;
  };
  SlotTable.prototype.x17 = function (anchor) {
    var tmp;
    if (anchor.s16()) {
      var tmp$ret$1;
      // Inline function 'kotlin.let' call
      var tmp0_let = search$accessor$v4m42o(this.yw_1, anchor.j11_1, this.sw_1);
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.SlotTable.ownsAnchor.<anonymous>' call
      tmp$ret$0 = tmp0_let >= 0 ? equals_0(this.yw_1.h(tmp0_let), anchor) : false;
      tmp$ret$1 = tmp$ret$0;
      tmp = tmp$ret$1;
    } else {
      tmp = false;
    }
    return tmp;
  };
  SlotTable.prototype.u16 = function (groupIndex, anchor) {
    // Inline function 'androidx.compose.runtime.runtimeCheck' call
    var tmp0_runtimeCheck = !this.ww_1;
    if (!tmp0_runtimeCheck) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.SlotTable.groupContainsAnchor.<anonymous>' call
      tmp$ret$0 = 'Writer is active';
      var message = tmp$ret$0;
      composeRuntimeError(toString_2(message));
    }
    // Inline function 'androidx.compose.runtime.runtimeCheck' call
    var tmp1_runtimeCheck = 0 <= groupIndex ? groupIndex < this.sw_1 : false;
    if (!tmp1_runtimeCheck) {
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.SlotTable.groupContainsAnchor.<anonymous>' call
      tmp$ret$1 = 'Invalid group index';
      var message_0 = tmp$ret$1;
      composeRuntimeError(toString_2(message_0));
    }
    var tmp;
    if (this.x17(anchor)) {
      var containsUpper = groupIndex + groupSize(this.rw_1, groupIndex) | 0;
      var containsArg = anchor.j11_1;
      tmp = groupIndex <= containsArg ? containsArg < containsUpper : false;
    } else {
      tmp = false;
    }
    return tmp;
  };
  SlotTable.prototype.b1e = function (reader) {
    // Inline function 'kotlin.require' call
    var tmp0_require = reader.kx_1 === this ? this.vw_1 > 0 : false;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.SlotTable.close.<anonymous>' call
      tmp$ret$0 = 'Unexpected reader close()';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString_2(message));
    }
    var tmp0_this = this;
    var tmp1 = tmp0_this.vw_1;
    tmp0_this.vw_1 = tmp1 - 1 | 0;
  };
  SlotTable.prototype.s1d = function (writer, groups, groupsSize, slots, slotsSize, anchors) {
    // Inline function 'kotlin.require' call
    var tmp0_require = writer.ss_1 === this ? this.ww_1 : false;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.SlotTable.close.<anonymous>' call
      tmp$ret$0 = 'Unexpected writer close()';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString_2(message));
    }
    this.ww_1 = false;
    this.w1d(groups, groupsSize, slots, slotsSize, anchors);
  };
  SlotTable.prototype.w1d = function (groups, groupsSize, slots, slotsSize, anchors) {
    this.rw_1 = groups;
    this.sw_1 = groupsSize;
    this.tw_1 = slots;
    this.uw_1 = slotsSize;
    this.yw_1 = anchors;
  };
  SlotTable.prototype.d = function () {
    return new GroupIterator(this, 0, this.sw_1);
  };
  SlotTable.$metadata$ = classMeta('SlotTable', [CompositionData, Iterable_0]);
  function Anchor(loc) {
    this.j11_1 = loc;
  }
  Anchor.prototype.c1e = function (_set____db54di) {
    this.j11_1 = _set____db54di;
  };
  Anchor.prototype.j15 = function () {
    return this.j11_1;
  };
  Anchor.prototype.s16 = function () {
    return !(this.j11_1 === IntCompanionObject_getInstance().v_1);
  };
  Anchor.prototype.t12 = function (slots) {
    return slots.p11(this);
  };
  Anchor.prototype.q1d = function (writer) {
    return writer.p11(this);
  };
  Anchor.$metadata$ = classMeta('Anchor');
  function isNode(_this__u8e3s4, address) {
    return !((_this__u8e3s4[imul(address, 5) + 1 | 0] & 1073741824) === 0);
  }
  function nodeCount(_this__u8e3s4, address) {
    return _this__u8e3s4[imul(address, 5) + 1 | 0] & 67108863;
  }
  function key(_this__u8e3s4, address) {
    return _this__u8e3s4[imul(address, 5)];
  }
  function hasObjectKey(_this__u8e3s4, address) {
    return !((_this__u8e3s4[imul(address, 5) + 1 | 0] & 536870912) === 0);
  }
  function objectKeyIndex(_this__u8e3s4, address) {
    var tmp$ret$1;
    // Inline function 'kotlin.let' call
    var tmp0_let = imul(address, 5);
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.objectKeyIndex.<anonymous>' call
    tmp$ret$0 = _this__u8e3s4[tmp0_let + 4 | 0] + countOneBits_0(_this__u8e3s4[tmp0_let + 1 | 0] >> 30) | 0;
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  }
  function groupSize(_this__u8e3s4, address) {
    return _this__u8e3s4[imul(address, 5) + 3 | 0];
  }
  function hasAux(_this__u8e3s4, address) {
    return !((_this__u8e3s4[imul(address, 5) + 1 | 0] & 268435456) === 0);
  }
  function addAux(_this__u8e3s4, address) {
    var arrayIndex = imul(address, 5) + 1 | 0;
    _this__u8e3s4[arrayIndex] = _this__u8e3s4[arrayIndex] | 268435456;
  }
  function initGroup(_this__u8e3s4, address, key, isNode, hasDataKey, hasData, parentAnchor, dataAnchor) {
    var nodeBit = isNode ? 1073741824 : 0;
    var dataKeyBit = hasDataKey ? 536870912 : 0;
    var dataBit = hasData ? 268435456 : 0;
    var arrayIndex = imul(address, 5);
    _this__u8e3s4[arrayIndex + 0 | 0] = key;
    _this__u8e3s4[arrayIndex + 1 | 0] = nodeBit | dataKeyBit | dataBit;
    _this__u8e3s4[arrayIndex + 2 | 0] = parentAnchor;
    _this__u8e3s4[arrayIndex + 3 | 0] = 0;
    _this__u8e3s4[arrayIndex + 4 | 0] = dataAnchor;
  }
  function updateGroupSize(_this__u8e3s4, address, value) {
    // Inline function 'kotlin.require' call
    var tmp0_require = value >= 0;
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'kotlin.require.<anonymous>' call
      tmp$ret$0 = 'Failed requirement.';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString_2(message));
    }
    _this__u8e3s4[imul(address, 5) + 3 | 0] = value;
  }
  function updateNodeCount_0(_this__u8e3s4, address, value) {
    // Inline function 'kotlin.require' call
    var tmp0_require = value >= 0 ? value < 67108863 : false;
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'kotlin.require.<anonymous>' call
      tmp$ret$0 = 'Failed requirement.';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString_2(message));
    }
    _this__u8e3s4[imul(address, 5) + 1 | 0] = _this__u8e3s4[imul(address, 5) + 1 | 0] & -67108864 | value;
  }
  function PrioritySet_init_$Init$(list, $mask0, $marker, $this) {
    if (!(($mask0 & 1) === 0)) {
      var tmp$ret$0;
      var tmp$ret$0_0;
      // Inline function 'kotlin.collections.mutableListOf' call
      tmp$ret$0 = ArrayList_init_$Create$();
      tmp$ret$0_0 = Unit_getInstance();
      list = tmp$ret$0;
    }
    PrioritySet.call($this, list);
    return $this;
  }
  function PrioritySet_init_$Create$(list, $mask0, $marker) {
    return PrioritySet_init_$Init$(list, $mask0, $marker, Object.create(PrioritySet.prototype));
  }
  function PrioritySet(list) {
    this.i1d_1 = list;
  }
  PrioritySet.prototype.k1d = function (value) {
    var tmp;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.isNotEmpty' call
    var tmp0_isNotEmpty = this.i1d_1;
    tmp$ret$0 = !tmp0_isNotEmpty.i();
    if (tmp$ret$0) {
      tmp = this.i1d_1.h(0) === value ? true : this.i1d_1.h(this.i1d_1.g() - 1 | 0) === value;
    } else {
      tmp = false;
    }
    if (tmp)
      return Unit_getInstance();
    var index = this.i1d_1.g();
    this.i1d_1.b(value);
    $l$loop: while (index > 0) {
      var parent = ((index + 1 | 0) >>> 1 | 0) - 1 | 0;
      var parentValue = this.i1d_1.h(parent);
      if (value > parentValue) {
        this.i1d_1.m6(index, parentValue);
      } else
        break $l$loop;
      index = parent;
    }
    this.i1d_1.m6(index, value);
  };
  PrioritySet.prototype.w10 = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.isNotEmpty' call
    var tmp0_isNotEmpty = this.i1d_1;
    tmp$ret$0 = !tmp0_isNotEmpty.i();
    return tmp$ret$0;
  };
  PrioritySet.prototype.n13 = function () {
    return first(this.i1d_1);
  };
  PrioritySet.prototype.j1d = function () {
    // Inline function 'androidx.compose.runtime.runtimeCheck' call
    var tmp0_runtimeCheck = this.i1d_1.g() > 0;
    if (!tmp0_runtimeCheck) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.PrioritySet.takeMax.<anonymous>' call
      tmp$ret$0 = 'Set is empty';
      var message = tmp$ret$0;
      composeRuntimeError(toString_2(message));
    }
    var value = this.i1d_1.h(0);
    $l$loop: while (true) {
      var tmp;
      var tmp$ret$1;
      // Inline function 'kotlin.collections.isNotEmpty' call
      var tmp1_isNotEmpty = this.i1d_1;
      tmp$ret$1 = !tmp1_isNotEmpty.i();
      if (tmp$ret$1) {
        tmp = this.i1d_1.h(0) === value;
      } else {
        tmp = false;
      }
      if (!tmp) {
        break $l$loop;
      }
      this.i1d_1.m6(0, last(this.i1d_1));
      this.i1d_1.f3(this.i1d_1.g() - 1 | 0);
      var index = 0;
      var size = this.i1d_1.g();
      var max = this.i1d_1.g() >>> 1 | 0;
      $l$loop_2: while (index < max) {
        var indexValue = this.i1d_1.h(index);
        var left = imul(index + 1 | 0, 2) - 1 | 0;
        var leftValue = this.i1d_1.h(left);
        var right = imul(index + 1 | 0, 2);
        if (right < size) {
          var rightValue = this.i1d_1.h(right);
          if (rightValue > leftValue) {
            if (rightValue > indexValue) {
              this.i1d_1.m6(index, rightValue);
              this.i1d_1.m6(right, indexValue);
              index = right;
              continue $l$loop_2;
            } else
              break $l$loop_2;
          }
        }
        if (leftValue > indexValue) {
          this.i1d_1.m6(index, leftValue);
          this.i1d_1.m6(left, indexValue);
          index = left;
        } else
          break $l$loop_2;
      }
    }
    return value;
  };
  PrioritySet.$metadata$ = classMeta('PrioritySet');
  function updateParentAnchor(_this__u8e3s4, address, value) {
    _this__u8e3s4[imul(address, 5) + 2 | 0] = value;
  }
  function parentAnchor(_this__u8e3s4, address) {
    return _this__u8e3s4[imul(address, 5) + 2 | 0];
  }
  function updateDataAnchor(_this__u8e3s4, address, anchor) {
    _this__u8e3s4[imul(address, 5) + 4 | 0] = anchor;
  }
  function locationOf(_this__u8e3s4, index, effectiveSize) {
    var tmp$ret$1;
    // Inline function 'kotlin.let' call
    var tmp0_let = search$accessor$v4m42o(_this__u8e3s4, index, effectiveSize);
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.locationOf.<anonymous>' call
    tmp$ret$0 = tmp0_let >= 0 ? tmp0_let : -(tmp0_let + 1 | 0) | 0;
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  }
  function dataAnchor(_this__u8e3s4, address) {
    return _this__u8e3s4[imul(address, 5) + 4 | 0];
  }
  function getOrAdd(_this__u8e3s4, index, effectiveSize, block) {
    var location = search$accessor$v4m42o(_this__u8e3s4, index, effectiveSize);
    var tmp;
    if (location < 0) {
      var anchor = block();
      _this__u8e3s4.d7(-(location + 1 | 0) | 0, anchor);
      tmp = anchor;
    } else {
      tmp = _this__u8e3s4.h(location);
    }
    return tmp;
  }
  function hasMark(_this__u8e3s4, address) {
    return !((_this__u8e3s4[imul(address, 5) + 1 | 0] & 134217728) === 0);
  }
  function updateMark(_this__u8e3s4, address, value) {
    var arrayIndex = imul(address, 5) + 1 | 0;
    if (value) {
      _this__u8e3s4[arrayIndex] = _this__u8e3s4[arrayIndex] | 134217728;
    } else {
      _this__u8e3s4[arrayIndex] = _this__u8e3s4[arrayIndex] & -134217729;
    }
  }
  function containsMark(_this__u8e3s4, address) {
    return !((_this__u8e3s4[imul(address, 5) + 1 | 0] & 67108864) === 0);
  }
  function containsAnyMark(_this__u8e3s4, address) {
    return !((_this__u8e3s4[imul(address, 5) + 1 | 0] & 201326592) === 0);
  }
  function updateContainsMark_0(_this__u8e3s4, address, value) {
    var arrayIndex = imul(address, 5) + 1 | 0;
    if (value) {
      _this__u8e3s4[arrayIndex] = _this__u8e3s4[arrayIndex] | 67108864;
    } else {
      _this__u8e3s4[arrayIndex] = _this__u8e3s4[arrayIndex] & -67108865;
    }
  }
  function slotAnchor(_this__u8e3s4, address) {
    var tmp$ret$1;
    // Inline function 'kotlin.let' call
    var tmp0_let = imul(address, 5);
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.slotAnchor.<anonymous>' call
    tmp$ret$0 = _this__u8e3s4[tmp0_let + 4 | 0] + countOneBits_0(_this__u8e3s4[tmp0_let + 1 | 0] >> 28) | 0;
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  }
  function countOneBits_0(value) {
    var tmp0_subject = value;
    switch (tmp0_subject) {
      case 0:
        return 0;
      case 1:
        return 1;
      case 2:
        return 1;
      case 3:
        return 2;
      case 4:
        return 1;
      case 5:
        return 2;
      case 6:
        return 2;
      default:
        return 3;
    }
  }
  function get_Aux_Shift() {
    return Aux_Shift;
  }
  var Aux_Shift;
  function groupInfo(_this__u8e3s4, address) {
    return _this__u8e3s4[imul(address, 5) + 1 | 0];
  }
  function node(_this__u8e3s4, $this, index) {
    var tmp;
    if (isNode(_this__u8e3s4, index)) {
      tmp = $this.nx_1[nodeIndex_0(_this__u8e3s4, index)];
    } else {
      tmp = Companion_getInstance_8().ns_1;
    }
    return tmp;
  }
  function aux(_this__u8e3s4, $this, index) {
    var tmp;
    if (hasAux(_this__u8e3s4, index)) {
      tmp = $this.nx_1[auxIndex_0(_this__u8e3s4, index)];
    } else {
      tmp = Companion_getInstance_8().ns_1;
    }
    return tmp;
  }
  function objectKey(_this__u8e3s4, $this, index) {
    var tmp;
    if (hasObjectKey(_this__u8e3s4, index)) {
      tmp = $this.nx_1[objectKeyIndex(_this__u8e3s4, index)];
    } else {
      tmp = null;
    }
    return tmp;
  }
  function SlotReader(table) {
    this.kx_1 = table;
    this.lx_1 = this.kx_1.rw_1;
    this.mx_1 = this.kx_1.sw_1;
    this.nx_1 = this.kx_1.tw_1;
    this.ox_1 = this.kx_1.uw_1;
    this.px_1 = 0;
    this.qx_1 = this.mx_1;
    this.rx_1 = -1;
    this.sx_1 = 0;
    this.tx_1 = 0;
    this.ux_1 = 0;
  }
  SlotReader.prototype.o1d = function () {
    return this.px_1;
  };
  SlotReader.prototype.g = function () {
    return this.mx_1;
  };
  SlotReader.prototype.by = function (index) {
    return parentAnchor(this.lx_1, index);
  };
  SlotReader.prototype.q11 = function () {
    return isNode(this.lx_1, this.px_1);
  };
  SlotReader.prototype.i10 = function (index) {
    return isNode(this.lx_1, index);
  };
  SlotReader.prototype.j10 = function (index) {
    return nodeCount(this.lx_1, index);
  };
  SlotReader.prototype.v10 = function (index) {
    return isNode(this.lx_1, index) ? node(this.lx_1, this, index) : null;
  };
  SlotReader.prototype.uz = function () {
    return this.zz() ? true : this.px_1 === this.qx_1;
  };
  SlotReader.prototype.zz = function () {
    return this.sx_1 > 0;
  };
  SlotReader.prototype.x10 = function () {
    return groupSize(this.lx_1, this.px_1);
  };
  SlotReader.prototype.qz = function (index) {
    return groupSize(this.lx_1, index);
  };
  SlotReader.prototype.tz = function () {
    return this.qx_1;
  };
  SlotReader.prototype.xy = function () {
    var tmp;
    if (this.px_1 < this.qx_1) {
      tmp = key(this.lx_1, this.px_1);
    } else {
      tmp = 0;
    }
    return tmp;
  };
  SlotReader.prototype.ay = function (index) {
    return key(this.lx_1, index);
  };
  SlotReader.prototype.t13 = function () {
    return this.tx_1 - slotAnchor(this.lx_1, this.rx_1) | 0;
  };
  SlotReader.prototype.k10 = function (index) {
    return hasObjectKey(this.lx_1, index);
  };
  SlotReader.prototype.zy = function () {
    return this.px_1 < this.qx_1 ? objectKey(this.lx_1, this, this.px_1) : null;
  };
  SlotReader.prototype.zx = function (index) {
    return objectKey(this.lx_1, this, index);
  };
  SlotReader.prototype.iy = function () {
    return this.px_1 < this.qx_1 ? aux(this.lx_1, this, this.px_1) : 0;
  };
  SlotReader.prototype.yx = function (index) {
    return aux(this.lx_1, this, index);
  };
  SlotReader.prototype.v11 = function (index) {
    return hasMark(this.lx_1, index);
  };
  SlotReader.prototype.s11 = function (index) {
    return containsMark(this.lx_1, index);
  };
  SlotReader.prototype.l10 = function () {
    return this.rx_1 >= 0 ? nodeCount(this.lx_1, this.rx_1) : 0;
  };
  SlotReader.prototype.w13 = function (index) {
    return this.t11(this.px_1, index);
  };
  SlotReader.prototype.t11 = function (group, index) {
    var start = slotAnchor(this.lx_1, group);
    var next = group + 1 | 0;
    var end = next < this.mx_1 ? dataAnchor(this.lx_1, next) : this.ox_1;
    var address = start + index | 0;
    return address < end ? this.nx_1[address] : Companion_getInstance_8().ns_1;
  };
  SlotReader.prototype.f = function () {
    if (this.sx_1 > 0 ? true : this.tx_1 >= this.ux_1)
      return Companion_getInstance_8().ns_1;
    var tmp0_this = this;
    var tmp1 = tmp0_this.tx_1;
    tmp0_this.tx_1 = tmp1 + 1 | 0;
    return this.nx_1[tmp1];
  };
  SlotReader.prototype.ly = function () {
    var tmp0_this = this;
    var tmp1 = tmp0_this.sx_1;
    tmp0_this.sx_1 = tmp1 + 1 | 0;
  };
  SlotReader.prototype.wz = function () {
    // Inline function 'kotlin.require' call
    var tmp0_require = this.sx_1 > 0;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.SlotReader.endEmpty.<anonymous>' call
      tmp$ret$0 = 'Unbalanced begin/end empty';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString_2(message));
    }
    var tmp0_this = this;
    var tmp1 = tmp0_this.sx_1;
    tmp0_this.sx_1 = tmp1 - 1 | 0;
  };
  SlotReader.prototype.vx = function () {
    return this.kx_1.b1e(this);
  };
  SlotReader.prototype.jy = function () {
    if (this.sx_1 <= 0) {
      // Inline function 'kotlin.require' call
      var tmp0_require = parentAnchor(this.lx_1, this.px_1) === this.rx_1;
      // Inline function 'kotlin.contracts.contract' call
      if (!tmp0_require) {
        var tmp$ret$0;
        // Inline function 'androidx.compose.runtime.SlotReader.startGroup.<anonymous>' call
        tmp$ret$0 = 'Invalid slot table detected';
        var message = tmp$ret$0;
        throw IllegalArgumentException_init_$Create$(toString_2(message));
      }
      this.rx_1 = this.px_1;
      this.qx_1 = this.px_1 + groupSize(this.lx_1, this.px_1) | 0;
      var tmp0_this = this;
      var tmp1 = tmp0_this.px_1;
      tmp0_this.px_1 = tmp1 + 1 | 0;
      var current = tmp1;
      this.tx_1 = slotAnchor(this.lx_1, current);
      this.ux_1 = current >= (this.mx_1 - 1 | 0) ? this.ox_1 : dataAnchor(this.lx_1, current + 1 | 0);
    }
  };
  SlotReader.prototype.ky = function () {
    if (this.sx_1 <= 0) {
      // Inline function 'kotlin.require' call
      var tmp0_require = isNode(this.lx_1, this.px_1);
      // Inline function 'kotlin.contracts.contract' call
      if (!tmp0_require) {
        var tmp$ret$0;
        // Inline function 'androidx.compose.runtime.SlotReader.startNode.<anonymous>' call
        tmp$ret$0 = 'Expected a node group';
        var message = tmp$ret$0;
        throw IllegalArgumentException_init_$Create$(toString_2(message));
      }
      this.jy();
    }
  };
  SlotReader.prototype.xx = function () {
    // Inline function 'kotlin.require' call
    var tmp0_require = this.sx_1 === 0;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.SlotReader.skipGroup.<anonymous>' call
      tmp$ret$0 = 'Cannot skip while in an empty region';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString_2(message));
    }
    var count = isNode(this.lx_1, this.px_1) ? 1 : nodeCount(this.lx_1, this.px_1);
    var tmp0_this = this;
    tmp0_this.px_1 = tmp0_this.px_1 + groupSize(this.lx_1, this.px_1) | 0;
    return count;
  };
  SlotReader.prototype.hy = function () {
    // Inline function 'kotlin.require' call
    var tmp0_require = this.sx_1 === 0;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.SlotReader.skipToGroupEnd.<anonymous>' call
      tmp$ret$0 = 'Cannot skip the enclosing group while in an empty region';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString_2(message));
    }
    this.px_1 = this.qx_1;
  };
  SlotReader.prototype.lz = function (index) {
    // Inline function 'kotlin.require' call
    var tmp0_require = this.sx_1 === 0;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.SlotReader.reposition.<anonymous>' call
      tmp$ret$0 = 'Cannot reposition while in an empty region';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString_2(message));
    }
    this.px_1 = index;
    var parent = index < this.mx_1 ? parentAnchor(this.lx_1, index) : -1;
    this.rx_1 = parent;
    if (parent < 0)
      this.qx_1 = this.mx_1;
    else
      this.qx_1 = parent + groupSize(this.lx_1, parent) | 0;
    this.tx_1 = 0;
    this.ux_1 = 0;
  };
  SlotReader.prototype.f10 = function (index) {
    var newCurrentEnd = index + groupSize(this.lx_1, index) | 0;
    var current = this.px_1;
    // Inline function 'kotlin.require' call
    var tmp0_require = current >= index ? current <= newCurrentEnd : false;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.SlotReader.restoreParent.<anonymous>' call
      tmp$ret$0 = 'Index ' + index + ' is not a parent of ' + current;
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString_2(message));
    }
    this.rx_1 = index;
    this.qx_1 = newCurrentEnd;
    this.tx_1 = 0;
    this.ux_1 = 0;
  };
  SlotReader.prototype.vz = function () {
    if (this.sx_1 === 0) {
      // Inline function 'kotlin.require' call
      var tmp0_require = this.px_1 === this.qx_1;
      // Inline function 'kotlin.contracts.contract' call
      if (!tmp0_require) {
        var tmp$ret$0;
        // Inline function 'androidx.compose.runtime.SlotReader.endGroup.<anonymous>' call
        tmp$ret$0 = 'endGroup() not called at the end of a group';
        var message = tmp$ret$0;
        throw IllegalArgumentException_init_$Create$(toString_2(message));
      }
      var parent = parentAnchor(this.lx_1, this.rx_1);
      this.rx_1 = parent;
      this.qx_1 = parent < 0 ? this.mx_1 : parent + groupSize(this.lx_1, parent) | 0;
    }
  };
  SlotReader.prototype.yy = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$0 = ArrayList_init_$Create$();
    var result = tmp$ret$0;
    if (this.sx_1 > 0)
      return result;
    var index = 0;
    var childIndex = this.px_1;
    while (childIndex < this.qx_1) {
      var tmp = key(this.lx_1, childIndex);
      var tmp_0 = objectKey(this.lx_1, this, childIndex);
      var tmp_1 = childIndex;
      var tmp_2 = isNode(this.lx_1, childIndex) ? 1 : nodeCount(this.lx_1, childIndex);
      var tmp0 = index;
      index = tmp0 + 1 | 0;
      result.b(new KeyInfo(tmp, tmp_0, tmp_1, tmp_2, tmp0));
      childIndex = childIndex + groupSize(this.lx_1, childIndex) | 0;
    }
    return result;
  };
  SlotReader.prototype.toString = function () {
    return 'SlotReader(current=' + this.px_1 + ', key=' + this.xy() + ', ' + ('parent=' + this.rx_1 + ', end=' + this.qx_1 + ')');
  };
  SlotReader.prototype.cz = function (index) {
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.getOrAdd' call
    var tmp0_getOrAdd = this.kx_1.yw_1;
    var tmp1_getOrAdd = this.mx_1;
    var location = search$accessor$v4m42o(tmp0_getOrAdd, index, tmp1_getOrAdd);
    var tmp;
    if (location < 0) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.SlotReader.anchor.<anonymous>' call
      tmp$ret$0 = new Anchor(index);
      var anchor = tmp$ret$0;
      tmp0_getOrAdd.d7(-(location + 1 | 0) | 0, anchor);
      tmp = anchor;
    } else {
      tmp = tmp0_getOrAdd.h(location);
    }
    tmp$ret$1 = tmp;
    return tmp$ret$1;
  };
  SlotReader.$metadata$ = classMeta('SlotReader');
  function search(_this__u8e3s4, location, effectiveSize) {
    var low = 0;
    var high = _this__u8e3s4.g() - 1 | 0;
    while (low <= high) {
      var mid = (low + high | 0) >>> 1 | 0;
      var tmp$ret$1;
      // Inline function 'kotlin.let' call
      var tmp0_let = _this__u8e3s4.h(mid).j11_1;
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.search.<anonymous>' call
      tmp$ret$0 = tmp0_let < 0 ? effectiveSize + tmp0_let | 0 : tmp0_let;
      tmp$ret$1 = tmp$ret$0;
      var midVal = tmp$ret$1;
      var cmp = compareTo_0(midVal, location);
      if (cmp < 0)
        low = mid + 1 | 0;
      else if (cmp > 0)
        high = mid - 1 | 0;
      else
        return mid;
    }
    return -(low + 1 | 0) | 0;
  }
  function nodeIndex_0(_this__u8e3s4, address) {
    return _this__u8e3s4[imul(address, 5) + 4 | 0];
  }
  function auxIndex_0(_this__u8e3s4, address) {
    var tmp$ret$1;
    // Inline function 'kotlin.let' call
    var tmp0_let = imul(address, 5);
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.auxIndex.<anonymous>' call
    tmp$ret$0 = tmp0_let >= _this__u8e3s4.length ? _this__u8e3s4.length : _this__u8e3s4[tmp0_let + 4 | 0] + countOneBits_0(_this__u8e3s4[tmp0_let + 1 | 0] >> 29) | 0;
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  }
  function validateRead($this) {
    if (!($this.d1e_1.xw_1 === $this.g1e_1)) {
      throw ConcurrentModificationException_init_$Create$();
    }
  }
  function GroupIterator$next$1(this$0, $group) {
    this.h1e_1 = this$0;
    this.i1e_1 = $group;
  }
  GroupIterator$next$1.prototype.d = function () {
    validateRead(this.h1e_1);
    return new GroupIterator(this.h1e_1.d1e_1, this.i1e_1 + 1 | 0, this.i1e_1 + groupSize(this.h1e_1.d1e_1.rw_1, this.i1e_1) | 0);
  };
  GroupIterator$next$1.$metadata$ = classMeta(undefined, [CompositionGroup, Iterable_0]);
  function GroupIterator(table, start, end) {
    this.d1e_1 = table;
    this.e1e_1 = end;
    this.f1e_1 = start;
    this.g1e_1 = this.d1e_1.xw_1;
    if (this.d1e_1.ww_1)
      throw ConcurrentModificationException_init_$Create$();
  }
  GroupIterator.prototype.e = function () {
    return this.f1e_1 < this.e1e_1;
  };
  GroupIterator.prototype.f = function () {
    validateRead(this);
    var group = this.f1e_1;
    var tmp0_this = this;
    tmp0_this.f1e_1 = tmp0_this.f1e_1 + groupSize(this.d1e_1.rw_1, group) | 0;
    return new GroupIterator$next$1(this, group);
  };
  GroupIterator.$metadata$ = classMeta('GroupIterator', [Iterator]);
  function get_GroupInfo_Offset() {
    return GroupInfo_Offset;
  }
  var GroupInfo_Offset;
  function get_ObjectKey_Shift() {
    return ObjectKey_Shift;
  }
  var ObjectKey_Shift;
  function get_DataAnchor_Offset() {
    return DataAnchor_Offset;
  }
  var DataAnchor_Offset;
  function get_Slots_Shift() {
    return Slots_Shift;
  }
  var Slots_Shift;
  function KeyInfo(key, objectKey, location, nodes, index) {
    this.dz_1 = key;
    this.ez_1 = objectKey;
    this.fz_1 = location;
    this.gz_1 = nodes;
    this.hz_1 = index;
  }
  KeyInfo.prototype.j15 = function () {
    return this.fz_1;
  };
  KeyInfo.prototype.j1e = function () {
    return this.gz_1;
  };
  KeyInfo.$metadata$ = classMeta('KeyInfo');
  function search$accessor$v4m42o(_this__u8e3s4, location, effectiveSize) {
    return search(_this__u8e3s4, location, effectiveSize);
  }
  function SnapshotMutationPolicy() {
  }
  SnapshotMutationPolicy.$metadata$ = interfaceMeta('SnapshotMutationPolicy');
  function structuralEqualityPolicy() {
    var tmp = StructuralEqualityPolicy_getInstance();
    return isInterface(tmp, SnapshotMutationPolicy) ? tmp : THROW_CCE();
  }
  function StructuralEqualityPolicy() {
    StructuralEqualityPolicy_instance = this;
  }
  StructuralEqualityPolicy.prototype.m1e = function (a, b) {
    return equals_0(a, b);
  };
  StructuralEqualityPolicy.prototype.k1e = function (a, b) {
    var tmp = (a == null ? true : isObject(a)) ? a : THROW_CCE();
    return this.m1e(tmp, (b == null ? true : isObject(b)) ? b : THROW_CCE());
  };
  StructuralEqualityPolicy.prototype.toString = function () {
    return 'StructuralEqualityPolicy';
  };
  StructuralEqualityPolicy.$metadata$ = objectMeta('StructuralEqualityPolicy', [SnapshotMutationPolicy]);
  var StructuralEqualityPolicy_instance;
  function StructuralEqualityPolicy_getInstance() {
    if (StructuralEqualityPolicy_instance == null)
      new StructuralEqualityPolicy();
    return StructuralEqualityPolicy_instance;
  }
  function State_0() {
  }
  State_0.$metadata$ = interfaceMeta('State');
  function MutableState() {
  }
  MutableState.$metadata$ = interfaceMeta('MutableState', [State_0]);
  function getValue_1(_this__u8e3s4, thisObj, property) {
    return _this__u8e3s4.a2();
  }
  function mutableStateOf(value, policy) {
    return createSnapshotMutableState(value, policy);
  }
  function mutableStateOf$default(value, policy, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      policy = structuralEqualityPolicy();
    return mutableStateOf(value, policy);
  }
  function StateStateRecord(myValue) {
    StateRecord.call(this);
    this.q1e_1 = myValue;
  }
  StateStateRecord.prototype.r1e = function (value) {
    var tmp = this;
    tmp.q1e_1 = (value instanceof StateStateRecord ? value : THROW_CCE()).q1e_1;
  };
  StateStateRecord.prototype.s1e = function () {
    return new StateStateRecord(this.q1e_1);
  };
  StateStateRecord.prototype.po = function (_set____db54di) {
    this.q1e_1 = _set____db54di;
  };
  StateStateRecord.prototype.a2 = function () {
    return this.q1e_1;
  };
  StateStateRecord.$metadata$ = classMeta('StateStateRecord', undefined, undefined, undefined, undefined, StateRecord.prototype);
  function SnapshotMutableStateImpl(value, policy) {
    this.y1e_1 = policy;
    this.z1e_1 = new StateStateRecord(value);
  }
  SnapshotMutableStateImpl.prototype.a1f = function () {
    return this.y1e_1;
  };
  SnapshotMutableStateImpl.prototype.po = function (value) {
    var tmp$ret$6;
    // Inline function 'androidx.compose.runtime.snapshots.withCurrent' call
    var tmp0_withCurrent = this.z1e_1;
    var tmp1__anonymous__uwfjfc = current(tmp0_withCurrent, Companion_getInstance_15().fr());
    var tmp;
    if (!this.a1f().k1e(tmp1__anonymous__uwfjfc.q1e_1, value)) {
      var tmp$ret$5;
      // Inline function 'androidx.compose.runtime.snapshots.overwritable' call
      var tmp2_overwritable = this.z1e_1;
      var snapshot = get_snapshotInitializer();
      var tmp$ret$4;
      // Inline function 'kotlin.also' call
      var tmp$ret$3;
      // Inline function 'androidx.compose.runtime.snapshots.sync' call
      var tmp$ret$2;
      // Inline function 'androidx.compose.runtime.synchronized' call
      var tmp0_synchronized = get_lock();
      var tmp$ret$1;
      // Inline function 'kotlinx.atomicfu.locks.synchronized' call
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.snapshots.overwritable.<anonymous>' call
      snapshot = Companion_getInstance_15().fr();
      var tmp3__anonymous__ufb84q = overwritableRecord(tmp2_overwritable, this, snapshot, tmp1__anonymous__uwfjfc);
      tmp3__anonymous__ufb84q.q1e_1 = value;
      tmp$ret$0 = Unit_getInstance();
      tmp$ret$1 = tmp$ret$0;
      tmp$ret$2 = tmp$ret$1;
      tmp$ret$3 = tmp$ret$2;
      var tmp1_also = tmp$ret$3;
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'androidx.compose.runtime.snapshots.overwritable.<anonymous>' call
      notifyWrite(snapshot, this);
      tmp$ret$4 = tmp1_also;
      tmp$ret$5 = tmp$ret$4;
      tmp = tmp$ret$5;
    }
    tmp$ret$6 = tmp;
    return tmp$ret$6;
  };
  SnapshotMutableStateImpl.prototype.a2 = function () {
    return readable_0(this.z1e_1, this).q1e_1;
  };
  SnapshotMutableStateImpl.prototype.b1f = function () {
    return this.z1e_1;
  };
  SnapshotMutableStateImpl.prototype.c1f = function (value) {
    var tmp = this;
    tmp.z1e_1 = value instanceof StateStateRecord ? value : THROW_CCE();
  };
  SnapshotMutableStateImpl.prototype.d1f = function (previous, current, applied) {
    var previousRecord = previous instanceof StateStateRecord ? previous : THROW_CCE();
    var currentRecord = current instanceof StateStateRecord ? current : THROW_CCE();
    var appliedRecord = applied instanceof StateStateRecord ? applied : THROW_CCE();
    var tmp;
    if (this.a1f().k1e(currentRecord.q1e_1, appliedRecord.q1e_1)) {
      tmp = current;
    } else {
      var merged = this.a1f().l1e(previousRecord.q1e_1, currentRecord.q1e_1, appliedRecord.q1e_1);
      var tmp_0;
      if (!(merged == null)) {
        var tmp$ret$0;
        // Inline function 'kotlin.also' call
        var tmp0_also = appliedRecord.s1e();
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'androidx.compose.runtime.SnapshotMutableStateImpl.mergeRecords.<anonymous>' call
        (tmp0_also instanceof StateStateRecord ? tmp0_also : THROW_CCE()).q1e_1 = merged;
        tmp$ret$0 = tmp0_also;
        tmp_0 = tmp$ret$0;
      } else {
        tmp_0 = null;
      }
      tmp = tmp_0;
    }
    return tmp;
  };
  SnapshotMutableStateImpl.prototype.toString = function () {
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.snapshots.withCurrent' call
    var tmp0_withCurrent = this.z1e_1;
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.SnapshotMutableStateImpl.toString.<anonymous>' call
    var tmp1__anonymous__uwfjfc = current(tmp0_withCurrent, Companion_getInstance_15().fr());
    tmp$ret$0 = 'MutableState(value=' + tmp1__anonymous__uwfjfc.q1e_1 + ')@' + hashCode_0(this);
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  };
  SnapshotMutableStateImpl.$metadata$ = classMeta('SnapshotMutableStateImpl', [StateObject, SnapshotMutableState]);
  function mutableStateListOf() {
    return new SnapshotStateList();
  }
  function IntStack() {
    this.dx_1 = new Int32Array(10);
    this.ex_1 = 0;
  }
  IntStack.prototype.g = function () {
    return this.ex_1;
  };
  IntStack.prototype.fx = function (value) {
    if (this.ex_1 >= this.dx_1.length) {
      this.dx_1 = copyOf(this.dx_1, imul(this.dx_1.length, 2));
    }
    var tmp = this.dx_1;
    var tmp0_this = this;
    var tmp1 = tmp0_this.ex_1;
    tmp0_this.ex_1 = tmp1 + 1 | 0;
    tmp[tmp1] = value;
  };
  IntStack.prototype.nz = function () {
    var tmp = this.dx_1;
    var tmp0_this = this;
    tmp0_this.ex_1 = tmp0_this.ex_1 - 1 | 0;
    return tmp[tmp0_this.ex_1];
  };
  IntStack.prototype.y10 = function (default_0) {
    return this.ex_1 > 0 ? this.n13() : default_0;
  };
  IntStack.prototype.n13 = function () {
    return this.dx_1[this.ex_1 - 1 | 0];
  };
  IntStack.prototype.h10 = function (index) {
    return this.dx_1[index];
  };
  IntStack.prototype.i = function () {
    return this.ex_1 === 0;
  };
  IntStack.prototype.q6 = function () {
    this.ex_1 = 0;
  };
  IntStack.prototype.p1d = function (value) {
    var inductionVariable = 0;
    var last = this.ex_1;
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (this.dx_1[i] === value)
          return i;
      }
       while (inductionVariable < last);
    return -1;
  };
  IntStack.$metadata$ = classMeta('IntStack');
  function Stack() {
    this.wx_1 = ArrayList_init_$Create$();
  }
  Stack.prototype.g = function () {
    return this.wx_1.g();
  };
  Stack.prototype.mz = function (value) {
    return this.wx_1.b(value);
  };
  Stack.prototype.nz = function () {
    return this.wx_1.f3(this.g() - 1 | 0);
  };
  Stack.prototype.n13 = function () {
    return this.wx_1.h(this.g() - 1 | 0);
  };
  Stack.prototype.h10 = function (index) {
    return this.wx_1.h(index);
  };
  Stack.prototype.i = function () {
    return this.wx_1.i();
  };
  Stack.prototype.w10 = function () {
    return !this.i();
  };
  Stack.prototype.q6 = function () {
    return this.wx_1.q6();
  };
  Stack.prototype.z7 = function () {
    var tmp = 0;
    var tmp_0 = this.wx_1.g();
    var tmp$ret$0;
    // Inline function 'kotlin.arrayOfNulls' call
    tmp$ret$0 = fillArrayVal(Array(tmp_0), null);
    var tmp_1 = tmp$ret$0;
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.Stack.toArray.<anonymous>' call
      tmp$ret$1 = this.wx_1.h(tmp_2);
      tmp_1[tmp_2] = tmp$ret$1;
      tmp = tmp + 1 | 0;
    }
    var tmp_3 = tmp_1;
    return isArray(tmp_3) ? tmp_3 : THROW_CCE();
  };
  Stack.$metadata$ = classMeta('Stack');
  function SynchronizedObject() {
  }
  SynchronizedObject.$metadata$ = classMeta('SynchronizedObject');
  function createSynchronizedObject() {
    return new SynchronizedObject();
  }
  function synchronized_1(lock, block) {
    var tmp$ret$0;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    tmp$ret$0 = block();
    return tmp$ret$0;
  }
  function trace(sectionName, block) {
    var token = Trace_getInstance().z10(sectionName);
    try {
      return block();
    }finally {
      Trace_getInstance().l11(token);
    }
  }
  function _get_current__qcrdxk($this) {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = current$factory();
    tmp$ret$0 = $this.fy_1.a2();
    return tmp$ret$0;
  }
  function LazyValueHolder(valueProducer) {
    this.fy_1 = lazy(valueProducer);
  }
  LazyValueHolder.prototype.a2 = function () {
    return _get_current__qcrdxk(this);
  };
  LazyValueHolder.$metadata$ = classMeta('LazyValueHolder', [State_0]);
  function StaticValueHolder(value) {
    this.e1f_1 = value;
  }
  StaticValueHolder.prototype.a2 = function () {
    return this.e1f_1;
  };
  StaticValueHolder.prototype.toString = function () {
    return 'StaticValueHolder(value=' + this.e1f_1 + ')';
  };
  StaticValueHolder.prototype.hashCode = function () {
    return this.e1f_1 == null ? 0 : hashCode_0(this.e1f_1);
  };
  StaticValueHolder.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof StaticValueHolder))
      return false;
    var tmp0_other_with_cast = other instanceof StaticValueHolder ? other : THROW_CCE();
    if (!equals_0(this.e1f_1, tmp0_other_with_cast.e1f_1))
      return false;
    return true;
  };
  StaticValueHolder.$metadata$ = classMeta('StaticValueHolder', [State_0]);
  function current$factory() {
    return getPropertyCallableRef('current', 1, KProperty1, function (receiver) {
      return _get_current__qcrdxk(receiver);
    }, null);
  }
  function find($this, key) {
    var low = 0;
    var high = $this.a19_1 - 1 | 0;
    var valueIdentity = identityHashCode_0(key);
    while (low <= high) {
      var mid = (low + high | 0) >>> 1 | 0;
      var midVal = $this.b19_1[mid];
      var midIdentity = identityHashCode_0(midVal);
      if (midIdentity < valueIdentity)
        low = mid + 1 | 0;
      else if (midIdentity > valueIdentity)
        high = mid - 1 | 0;
      else if (midVal === key)
        return mid;
      else
        return findExactIndex($this, mid, key, valueIdentity);
    }
    return -(low + 1 | 0) | 0;
  }
  function findExactIndex($this, midIndex, value, valueHash) {
    var inductionVariable = midIndex - 1 | 0;
    if (0 <= inductionVariable)
      $l$loop: do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + -1 | 0;
        var v = $this.b19_1[i];
        if (v === value) {
          return i;
        }
        if (!(identityHashCode_0(v) === valueHash)) {
          break $l$loop;
        }
      }
       while (0 <= inductionVariable);
    var inductionVariable_0 = midIndex + 1 | 0;
    var last = $this.a19_1;
    if (inductionVariable_0 < last)
      do {
        var i_0 = inductionVariable_0;
        inductionVariable_0 = inductionVariable_0 + 1 | 0;
        var v_0 = $this.b19_1[i_0];
        if (v_0 === value) {
          return i_0;
        }
        if (!(identityHashCode_0(v_0) === valueHash)) {
          return -(i_0 + 1 | 0) | 0;
        }
      }
       while (inductionVariable_0 < last);
    return -($this.a19_1 + 1 | 0) | 0;
  }
  function IdentityArrayIntMap() {
    this.a19_1 = 0;
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.arrayOfNulls' call
    tmp$ret$0 = fillArrayVal(Array(4), null);
    tmp.b19_1 = tmp$ret$0;
    this.c19_1 = new Int32Array(4);
  }
  IdentityArrayIntMap.prototype.f1f = function (_set____db54di) {
    this.a19_1 = _set____db54di;
  };
  IdentityArrayIntMap.prototype.g = function () {
    return this.a19_1;
  };
  IdentityArrayIntMap.prototype.m2 = function () {
    return this.b19_1;
  };
  IdentityArrayIntMap.prototype.x7 = function () {
    return this.c19_1;
  };
  IdentityArrayIntMap.prototype.e19 = function (key, value) {
    var index;
    if (this.a19_1 > 0) {
      index = find(this, key);
      if (index >= 0) {
        this.c19_1[index] = value;
        return Unit_getInstance();
      }
    } else {
      index = -1;
    }
    var insertIndex = -(index + 1 | 0) | 0;
    if (this.a19_1 === this.b19_1.length) {
      var tmp$ret$0;
      // Inline function 'kotlin.arrayOfNulls' call
      var tmp0_arrayOfNulls = imul(this.b19_1.length, 2);
      tmp$ret$0 = fillArrayVal(Array(tmp0_arrayOfNulls), null);
      var newKeys = tmp$ret$0;
      var newValues = new Int32Array(imul(this.b19_1.length, 2));
      var tmp$ret$1;
      // Inline function 'kotlin.collections.copyInto' call
      var tmp1_copyInto = this.b19_1;
      var tmp2_copyInto = insertIndex + 1 | 0;
      var tmp3_copyInto = this.a19_1;
      arrayCopy(tmp1_copyInto, newKeys, tmp2_copyInto, insertIndex, tmp3_copyInto);
      tmp$ret$1 = newKeys;
      var tmp$ret$6;
      // Inline function 'kotlin.collections.copyInto' call
      var tmp4_copyInto = this.c19_1;
      var tmp5_copyInto = insertIndex + 1 | 0;
      var tmp6_copyInto = this.a19_1;
      var tmp$ret$3;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$2;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$2 = tmp4_copyInto;
      tmp$ret$3 = tmp$ret$2;
      var tmp = tmp$ret$3;
      var tmp$ret$5;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$4;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$4 = newValues;
      tmp$ret$5 = tmp$ret$4;
      arrayCopy(tmp, tmp$ret$5, tmp5_copyInto, insertIndex, tmp6_copyInto);
      tmp$ret$6 = newValues;
      var tmp$ret$7;
      // Inline function 'kotlin.collections.copyInto' call
      var tmp7_copyInto = this.b19_1;
      arrayCopy(tmp7_copyInto, newKeys, 0, 0, insertIndex);
      tmp$ret$7 = newKeys;
      var tmp$ret$12;
      // Inline function 'kotlin.collections.copyInto' call
      var tmp8_copyInto = this.c19_1;
      var tmp$ret$9;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$8;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$8 = tmp8_copyInto;
      tmp$ret$9 = tmp$ret$8;
      var tmp_0 = tmp$ret$9;
      var tmp$ret$11;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$10;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$10 = newValues;
      tmp$ret$11 = tmp$ret$10;
      arrayCopy(tmp_0, tmp$ret$11, 0, 0, insertIndex);
      tmp$ret$12 = newValues;
      this.b19_1 = newKeys;
      this.c19_1 = newValues;
    } else {
      var tmp$ret$13;
      // Inline function 'kotlin.collections.copyInto' call
      var tmp9_copyInto = this.b19_1;
      var tmp10_copyInto = this.b19_1;
      var tmp11_copyInto = insertIndex + 1 | 0;
      var tmp12_copyInto = this.a19_1;
      arrayCopy(tmp9_copyInto, tmp10_copyInto, tmp11_copyInto, insertIndex, tmp12_copyInto);
      tmp$ret$13 = tmp10_copyInto;
      var tmp$ret$18;
      // Inline function 'kotlin.collections.copyInto' call
      var tmp13_copyInto = this.c19_1;
      var tmp14_copyInto = this.c19_1;
      var tmp15_copyInto = insertIndex + 1 | 0;
      var tmp16_copyInto = this.a19_1;
      var tmp$ret$15;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$14;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$14 = tmp13_copyInto;
      tmp$ret$15 = tmp$ret$14;
      var tmp_1 = tmp$ret$15;
      var tmp$ret$17;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$16;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$16 = tmp14_copyInto;
      tmp$ret$17 = tmp$ret$16;
      arrayCopy(tmp_1, tmp$ret$17, tmp15_copyInto, insertIndex, tmp16_copyInto);
      tmp$ret$18 = tmp14_copyInto;
    }
    this.b19_1[insertIndex] = key;
    this.c19_1[insertIndex] = value;
    var tmp0_this = this;
    var tmp1 = tmp0_this.a19_1;
    tmp0_this.a19_1 = tmp1 + 1 | 0;
  };
  IdentityArrayIntMap.prototype.g1f = function (predicate) {
    var destinationIndex = 0;
    var inductionVariable = 0;
    var last = this.a19_1;
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp = this.b19_1[i];
        var key = isObject(tmp) ? tmp : THROW_CCE();
        var value = this.c19_1[i];
        if (!predicate(key, value)) {
          if (!(destinationIndex === i)) {
            this.b19_1[destinationIndex] = key;
            this.c19_1[destinationIndex] = value;
          }
          var tmp1 = destinationIndex;
          destinationIndex = tmp1 + 1 | 0;
        }
      }
       while (inductionVariable < last);
    var inductionVariable_0 = destinationIndex;
    var last_0 = this.a19_1;
    if (inductionVariable_0 < last_0)
      do {
        var i_0 = inductionVariable_0;
        inductionVariable_0 = inductionVariable_0 + 1 | 0;
        this.b19_1[i_0] = null;
      }
       while (inductionVariable_0 < last_0);
    this.a19_1 = destinationIndex;
  };
  IdentityArrayIntMap.prototype.h1f = function (predicate) {
    var inductionVariable = 0;
    var last = this.a19_1;
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp = this.b19_1[i];
        if (predicate(isObject(tmp) ? tmp : THROW_CCE(), this.c19_1[i]))
          return true;
      }
       while (inductionVariable < last);
    return false;
  };
  IdentityArrayIntMap.prototype.i1f = function (block) {
    var inductionVariable = 0;
    var last = this.a19_1;
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp = this.b19_1[i];
        block(isObject(tmp) ? tmp : THROW_CCE(), this.c19_1[i]);
      }
       while (inductionVariable < last);
  };
  IdentityArrayIntMap.$metadata$ = classMeta('IdentityArrayIntMap');
  function IdentityArrayMap_init_$Init$(capacity, $mask0, $marker, $this) {
    if (!(($mask0 & 1) === 0))
      capacity = 16;
    IdentityArrayMap.call($this, capacity);
    return $this;
  }
  function IdentityArrayMap_init_$Create$(capacity, $mask0, $marker) {
    return IdentityArrayMap_init_$Init$(capacity, $mask0, $marker, Object.create(IdentityArrayMap.prototype));
  }
  function find_0($this, key) {
    var keyIdentity = identityHashCode_0(key);
    var low = 0;
    var high = $this.i11_1 - 1 | 0;
    while (low <= high) {
      var mid = (low + high | 0) >>> 1 | 0;
      var midKey = $this.g11_1[mid];
      var midKeyHash = identityHashCode_0(midKey);
      if (midKeyHash < keyIdentity)
        low = mid + 1 | 0;
      else if (midKeyHash > keyIdentity)
        high = mid - 1 | 0;
      else if (key === midKey)
        return mid;
      else
        return findExactIndex_0($this, mid, key, keyIdentity);
    }
    return -(low + 1 | 0) | 0;
  }
  function findExactIndex_0($this, midIndex, key, keyHash) {
    var inductionVariable = midIndex - 1 | 0;
    if (0 <= inductionVariable)
      $l$loop: do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + -1 | 0;
        var k = $this.g11_1[i];
        if (k === key) {
          return i;
        }
        if (!(identityHashCode_0(k) === keyHash)) {
          break $l$loop;
        }
      }
       while (0 <= inductionVariable);
    var inductionVariable_0 = midIndex + 1 | 0;
    var last = $this.i11_1;
    if (inductionVariable_0 < last)
      do {
        var i_0 = inductionVariable_0;
        inductionVariable_0 = inductionVariable_0 + 1 | 0;
        var k_0 = $this.g11_1[i_0];
        if (k_0 === key) {
          return i_0;
        }
        if (!(identityHashCode_0(k_0) === keyHash)) {
          return -(i_0 + 1 | 0) | 0;
        }
      }
       while (inductionVariable_0 < last);
    return -($this.i11_1 + 1 | 0) | 0;
  }
  function IdentityArrayMap(capacity) {
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.arrayOfNulls' call
    tmp$ret$0 = fillArrayVal(Array(capacity), null);
    tmp.g11_1 = tmp$ret$0;
    var tmp_0 = this;
    var tmp$ret$1;
    // Inline function 'kotlin.arrayOfNulls' call
    tmp$ret$1 = fillArrayVal(Array(capacity), null);
    tmp_0.h11_1 = tmp$ret$1;
    this.i11_1 = 0;
  }
  IdentityArrayMap.prototype.g = function () {
    return this.i11_1;
  };
  IdentityArrayMap.prototype.w10 = function () {
    return this.i11_1 > 0;
  };
  IdentityArrayMap.prototype.g18 = function (key) {
    return find_0(this, key) >= 0;
  };
  IdentityArrayMap.prototype.f18 = function (key) {
    var index = find_0(this, key);
    var tmp;
    if (index >= 0) {
      var tmp_0 = this.h11_1[index];
      tmp = (tmp_0 == null ? true : isObject(tmp_0)) ? tmp_0 : THROW_CCE();
    } else {
      tmp = null;
    }
    return tmp;
  };
  IdentityArrayMap.prototype.w16 = function (key, value) {
    var index = find_0(this, key);
    if (index >= 0) {
      this.h11_1[index] = value;
    } else {
      var insertIndex = -(index + 1 | 0) | 0;
      var resize = this.i11_1 === this.g11_1.length;
      var tmp;
      if (resize) {
        var tmp$ret$0;
        // Inline function 'kotlin.arrayOfNulls' call
        var tmp0_arrayOfNulls = imul(this.i11_1, 2);
        tmp$ret$0 = fillArrayVal(Array(tmp0_arrayOfNulls), null);
        tmp = tmp$ret$0;
      } else {
        tmp = this.g11_1;
      }
      var destKeys = tmp;
      var tmp$ret$1;
      // Inline function 'kotlin.collections.copyInto' call
      var tmp1_copyInto = this.g11_1;
      var tmp2_copyInto = insertIndex + 1 | 0;
      var tmp3_copyInto = this.i11_1;
      arrayCopy(tmp1_copyInto, destKeys, tmp2_copyInto, insertIndex, tmp3_copyInto);
      tmp$ret$1 = destKeys;
      if (resize) {
        var tmp$ret$2;
        // Inline function 'kotlin.collections.copyInto' call
        var tmp4_copyInto = this.g11_1;
        arrayCopy(tmp4_copyInto, destKeys, 0, 0, insertIndex);
        tmp$ret$2 = destKeys;
      }
      destKeys[insertIndex] = key;
      this.g11_1 = destKeys;
      var tmp_0;
      if (resize) {
        var tmp$ret$3;
        // Inline function 'kotlin.arrayOfNulls' call
        var tmp5_arrayOfNulls = imul(this.i11_1, 2);
        tmp$ret$3 = fillArrayVal(Array(tmp5_arrayOfNulls), null);
        tmp_0 = tmp$ret$3;
      } else {
        tmp_0 = this.h11_1;
      }
      var destValues = tmp_0;
      var tmp$ret$4;
      // Inline function 'kotlin.collections.copyInto' call
      var tmp6_copyInto = this.h11_1;
      var tmp7_copyInto = insertIndex + 1 | 0;
      var tmp8_copyInto = this.i11_1;
      arrayCopy(tmp6_copyInto, destValues, tmp7_copyInto, insertIndex, tmp8_copyInto);
      tmp$ret$4 = destValues;
      if (resize) {
        var tmp$ret$5;
        // Inline function 'kotlin.collections.copyInto' call
        var tmp9_copyInto = this.h11_1;
        arrayCopy(tmp9_copyInto, destValues, 0, 0, insertIndex);
        tmp$ret$5 = destValues;
      }
      destValues[insertIndex] = value;
      this.h11_1 = destValues;
      var tmp0_this = this;
      var tmp1 = tmp0_this.i11_1;
      tmp0_this.i11_1 = tmp1 + 1 | 0;
    }
  };
  IdentityArrayMap.prototype.d19 = function (key) {
    var index = find_0(this, key);
    if (index >= 0) {
      var size = this.i11_1;
      var keys = this.g11_1;
      var values = this.h11_1;
      var tmp$ret$0;
      // Inline function 'kotlin.collections.copyInto' call
      var tmp0_copyInto = index + 1 | 0;
      arrayCopy(keys, keys, index, tmp0_copyInto, size);
      tmp$ret$0 = keys;
      var tmp$ret$1;
      // Inline function 'kotlin.collections.copyInto' call
      var tmp1_copyInto = index + 1 | 0;
      arrayCopy(values, values, index, tmp1_copyInto, size);
      tmp$ret$1 = values;
      var newSize = size - 1 | 0;
      keys[newSize] = null;
      values[newSize] = null;
      this.i11_1 = newSize;
      return true;
    }
    return false;
  };
  IdentityArrayMap.prototype.j1f = function (block) {
    var inductionVariable = 0;
    var last = this.i11_1;
    if (inductionVariable < last)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp = this.g11_1[index];
        var tmp_0 = isObject(tmp) ? tmp : THROW_CCE();
        var tmp_1 = this.h11_1[index];
        block(tmp_0, (tmp_1 == null ? true : isObject(tmp_1)) ? tmp_1 : THROW_CCE());
      }
       while (inductionVariable < last);
  };
  IdentityArrayMap.$metadata$ = classMeta('IdentityArrayMap');
  function find_1($this, value) {
    var low = 0;
    var high = $this.n15_1 - 1 | 0;
    var valueIdentity = identityHashCode_0(value);
    while (low <= high) {
      var mid = (low + high | 0) >>> 1 | 0;
      var midVal = $this.h(mid);
      var midIdentity = identityHashCode_0(midVal);
      if (midIdentity < valueIdentity)
        low = mid + 1 | 0;
      else if (midIdentity > valueIdentity)
        high = mid - 1 | 0;
      else if (midVal === value)
        return mid;
      else
        return findExactIndex_1($this, mid, value, valueIdentity);
    }
    return -(low + 1 | 0) | 0;
  }
  function findExactIndex_1($this, midIndex, value, valueHash) {
    var inductionVariable = midIndex - 1 | 0;
    if (0 <= inductionVariable)
      $l$loop: do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + -1 | 0;
        var v = $this.o15_1[i];
        if (v === value) {
          return i;
        }
        if (!(identityHashCode_0(v) === valueHash)) {
          break $l$loop;
        }
      }
       while (0 <= inductionVariable);
    var inductionVariable_0 = midIndex + 1 | 0;
    var last = $this.n15_1;
    if (inductionVariable_0 < last)
      do {
        var i_0 = inductionVariable_0;
        inductionVariable_0 = inductionVariable_0 + 1 | 0;
        var v_0 = $this.o15_1[i_0];
        if (v_0 === value) {
          return i_0;
        }
        if (!(identityHashCode_0(v_0) === valueHash)) {
          return -(i_0 + 1 | 0) | 0;
        }
      }
       while (inductionVariable_0 < last);
    return -($this.n15_1 + 1 | 0) | 0;
  }
  function IdentityArraySet$iterator$1(this$0) {
    this.l1f_1 = this$0;
    this.k1f_1 = 0;
  }
  IdentityArraySet$iterator$1.prototype.e = function () {
    return this.k1f_1 < this.l1f_1.n15_1;
  };
  IdentityArraySet$iterator$1.prototype.f = function () {
    var tmp = this.l1f_1.o15_1;
    var tmp0_this = this;
    var tmp1 = tmp0_this.k1f_1;
    tmp0_this.k1f_1 = tmp1 + 1 | 0;
    var tmp_0 = tmp[tmp1];
    return isObject(tmp_0) ? tmp_0 : THROW_CCE();
  };
  IdentityArraySet$iterator$1.$metadata$ = classMeta(undefined, [Iterator]);
  function IdentityArraySet() {
    this.n15_1 = 0;
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.arrayOfNulls' call
    tmp$ret$0 = fillArrayVal(Array(16), null);
    tmp.o15_1 = tmp$ret$0;
  }
  IdentityArraySet.prototype.f1f = function (_set____db54di) {
    this.n15_1 = _set____db54di;
  };
  IdentityArraySet.prototype.g = function () {
    return this.n15_1;
  };
  IdentityArraySet.prototype.x7 = function () {
    return this.o15_1;
  };
  IdentityArraySet.prototype.v2 = function (element) {
    return find_1(this, element) >= 0;
  };
  IdentityArraySet.prototype.j = function (element) {
    if (!isObject(element))
      return false;
    return this.v2(isObject(element) ? element : THROW_CCE());
  };
  IdentityArraySet.prototype.h = function (index) {
    var tmp = this.o15_1[index];
    return isObject(tmp) ? tmp : THROW_CCE();
  };
  IdentityArraySet.prototype.p15 = function (value) {
    var index;
    if (this.n15_1 > 0) {
      index = find_1(this, value);
      if (index >= 0) {
        return false;
      }
    } else {
      index = -1;
    }
    var insertIndex = -(index + 1 | 0) | 0;
    if (this.n15_1 === this.o15_1.length) {
      var tmp$ret$0;
      // Inline function 'kotlin.arrayOfNulls' call
      var tmp0_arrayOfNulls = imul(this.o15_1.length, 2);
      tmp$ret$0 = fillArrayVal(Array(tmp0_arrayOfNulls), null);
      var newSorted = tmp$ret$0;
      var tmp$ret$1;
      // Inline function 'kotlin.collections.copyInto' call
      var tmp1_copyInto = this.o15_1;
      var tmp2_copyInto = insertIndex + 1 | 0;
      var tmp3_copyInto = this.n15_1;
      arrayCopy(tmp1_copyInto, newSorted, tmp2_copyInto, insertIndex, tmp3_copyInto);
      tmp$ret$1 = newSorted;
      var tmp$ret$2;
      // Inline function 'kotlin.collections.copyInto' call
      var tmp4_copyInto = this.o15_1;
      arrayCopy(tmp4_copyInto, newSorted, 0, 0, insertIndex);
      tmp$ret$2 = newSorted;
      this.o15_1 = newSorted;
    } else {
      var tmp$ret$3;
      // Inline function 'kotlin.collections.copyInto' call
      var tmp5_copyInto = this.o15_1;
      var tmp6_copyInto = this.o15_1;
      var tmp7_copyInto = insertIndex + 1 | 0;
      var tmp8_copyInto = this.n15_1;
      arrayCopy(tmp5_copyInto, tmp6_copyInto, tmp7_copyInto, insertIndex, tmp8_copyInto);
      tmp$ret$3 = tmp6_copyInto;
    }
    this.o15_1[insertIndex] = value;
    var tmp0_this = this;
    var tmp1 = tmp0_this.n15_1;
    tmp0_this.n15_1 = tmp1 + 1 | 0;
    return true;
  };
  IdentityArraySet.prototype.i = function () {
    return this.n15_1 === 0;
  };
  IdentityArraySet.prototype.w10 = function () {
    return this.n15_1 > 0;
  };
  IdentityArraySet.prototype.m1f = function (value) {
    var index = find_1(this, value);
    if (index >= 0) {
      if (index < (this.n15_1 - 1 | 0)) {
        var tmp$ret$0;
        // Inline function 'kotlin.collections.copyInto' call
        var tmp0_copyInto = this.o15_1;
        var tmp1_copyInto = this.o15_1;
        var tmp2_copyInto = index + 1 | 0;
        var tmp3_copyInto = this.n15_1;
        arrayCopy(tmp0_copyInto, tmp1_copyInto, index, tmp2_copyInto, tmp3_copyInto);
        tmp$ret$0 = tmp1_copyInto;
      }
      var tmp0_this = this;
      var tmp1 = tmp0_this.n15_1;
      tmp0_this.n15_1 = tmp1 - 1 | 0;
      this.o15_1[this.n15_1] = null;
      return true;
    }
    return false;
  };
  IdentityArraySet.prototype.n1f = function (predicate) {
    var destinationIndex = 0;
    var inductionVariable = 0;
    var last = this.n15_1;
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp = this.o15_1[i];
        var item = isObject(tmp) ? tmp : THROW_CCE();
        if (!predicate(item)) {
          if (!(destinationIndex === i)) {
            this.o15_1[destinationIndex] = item;
          }
          var tmp1 = destinationIndex;
          destinationIndex = tmp1 + 1 | 0;
        }
      }
       while (inductionVariable < last);
    var inductionVariable_0 = destinationIndex;
    var last_0 = this.n15_1;
    if (inductionVariable_0 < last_0)
      do {
        var i_0 = inductionVariable_0;
        inductionVariable_0 = inductionVariable_0 + 1 | 0;
        this.o15_1[i_0] = null;
      }
       while (inductionVariable_0 < last_0);
    this.n15_1 = destinationIndex;
  };
  IdentityArraySet.prototype.w2 = function (elements) {
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.all' call
      var tmp;
      if (isInterface(elements, Collection)) {
        tmp = elements.i();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = true;
        break $l$block_0;
      }
      var tmp0_iterator = elements.d();
      while (tmp0_iterator.e()) {
        var element = tmp0_iterator.f();
        var tmp$ret$1;
        // Inline function 'androidx.compose.runtime.collection.IdentityArraySet.containsAll.<anonymous>' call
        tmp$ret$1 = this.v2(element);
        if (!tmp$ret$1) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
      }
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  };
  IdentityArraySet.prototype.l1 = function (elements) {
    return this.w2(elements);
  };
  IdentityArraySet.prototype.d = function () {
    return new IdentityArraySet$iterator$1(this);
  };
  IdentityArraySet.$metadata$ = classMeta('IdentityArraySet', [Set]);
  function scopeSetAt($this, index) {
    return ensureNotNull($this.h16_1[$this.f16_1[index]]);
  }
  function getOrCreateIdentitySet($this, value) {
    var index;
    if ($this.i16_1 > 0) {
      index = find_2($this, value);
      if (index >= 0) {
        return scopeSetAt($this, index);
      }
    } else {
      index = -1;
    }
    var insertIndex = -(index + 1 | 0) | 0;
    if ($this.i16_1 < $this.f16_1.length) {
      var valueIndex = $this.f16_1[$this.i16_1];
      $this.g16_1[valueIndex] = value;
      var tmp0_elvis_lhs = $this.h16_1[valueIndex];
      var tmp;
      if (tmp0_elvis_lhs == null) {
        var tmp$ret$0;
        // Inline function 'kotlin.also' call
        var tmp0_also = new IdentityArraySet();
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'androidx.compose.runtime.collection.IdentityScopeMap.getOrCreateIdentitySet.<anonymous>' call
        $this.h16_1[valueIndex] = tmp0_also;
        tmp$ret$0 = tmp0_also;
        tmp = tmp$ret$0;
      } else {
        tmp = tmp0_elvis_lhs;
      }
      var scopeSet = tmp;
      if (insertIndex < $this.i16_1) {
        var tmp$ret$5;
        // Inline function 'kotlin.collections.copyInto' call
        var tmp1_copyInto = $this.f16_1;
        var tmp2_copyInto = $this.f16_1;
        var tmp3_copyInto = insertIndex + 1 | 0;
        var tmp4_copyInto = $this.i16_1;
        var tmp$ret$2;
        // Inline function 'kotlin.js.unsafeCast' call
        var tmp$ret$1;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$1 = tmp1_copyInto;
        tmp$ret$2 = tmp$ret$1;
        var tmp_0 = tmp$ret$2;
        var tmp$ret$4;
        // Inline function 'kotlin.js.unsafeCast' call
        var tmp$ret$3;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$3 = tmp2_copyInto;
        tmp$ret$4 = tmp$ret$3;
        arrayCopy(tmp_0, tmp$ret$4, tmp3_copyInto, insertIndex, tmp4_copyInto);
        tmp$ret$5 = tmp2_copyInto;
      }
      $this.f16_1[insertIndex] = valueIndex;
      var tmp1_this = $this;
      var tmp2 = tmp1_this.i16_1;
      tmp1_this.i16_1 = tmp2 + 1 | 0;
      return scopeSet;
    }
    var newSize = imul($this.f16_1.length, 2);
    var valueIndex_0 = $this.i16_1;
    $this.h16_1 = copyOf_0($this.h16_1, newSize);
    var scopeSet_0 = new IdentityArraySet();
    $this.h16_1[valueIndex_0] = scopeSet_0;
    $this.g16_1 = copyOf_0($this.g16_1, newSize);
    $this.g16_1[valueIndex_0] = value;
    var newKeyOrder = new Int32Array(newSize);
    var inductionVariable = $this.i16_1 + 1 | 0;
    if (inductionVariable < newSize)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        newKeyOrder[i] = i;
      }
       while (inductionVariable < newSize);
    if (insertIndex < $this.i16_1) {
      var tmp$ret$10;
      // Inline function 'kotlin.collections.copyInto' call
      var tmp5_copyInto = $this.f16_1;
      var tmp6_copyInto = insertIndex + 1 | 0;
      var tmp7_copyInto = $this.i16_1;
      var tmp$ret$7;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$6;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$6 = tmp5_copyInto;
      tmp$ret$7 = tmp$ret$6;
      var tmp_1 = tmp$ret$7;
      var tmp$ret$9;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$8;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$8 = newKeyOrder;
      tmp$ret$9 = tmp$ret$8;
      arrayCopy(tmp_1, tmp$ret$9, tmp6_copyInto, insertIndex, tmp7_copyInto);
      tmp$ret$10 = newKeyOrder;
    }
    newKeyOrder[insertIndex] = valueIndex_0;
    if (insertIndex > 0) {
      var tmp$ret$15;
      // Inline function 'kotlin.collections.copyInto' call
      var tmp8_copyInto = $this.f16_1;
      var tmp$ret$12;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$11;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$11 = tmp8_copyInto;
      tmp$ret$12 = tmp$ret$11;
      var tmp_2 = tmp$ret$12;
      var tmp$ret$14;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$13;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$13 = newKeyOrder;
      tmp$ret$14 = tmp$ret$13;
      arrayCopy(tmp_2, tmp$ret$14, 0, 0, insertIndex);
      tmp$ret$15 = newKeyOrder;
    }
    $this.f16_1 = newKeyOrder;
    var tmp4_this = $this;
    var tmp5 = tmp4_this.i16_1;
    tmp4_this.i16_1 = tmp5 + 1 | 0;
    return scopeSet_0;
  }
  function find_2($this, value) {
    var valueIdentity = identityHashCode_0(value);
    var low = 0;
    var high = $this.i16_1 - 1 | 0;
    while (low <= high) {
      var mid = (low + high | 0) >>> 1 | 0;
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.collection.IdentityScopeMap.valueAt' call
      tmp$ret$0 = ensureNotNull($this.g16_1[$this.f16_1[mid]]);
      var midValue = tmp$ret$0;
      var midValHash = identityHashCode_0(midValue);
      if (midValHash < valueIdentity)
        low = mid + 1 | 0;
      else if (midValHash > valueIdentity)
        high = mid - 1 | 0;
      else if (value === midValue)
        return mid;
      else
        return findExactIndex_2($this, mid, value, valueIdentity);
    }
    return -(low + 1 | 0) | 0;
  }
  function findExactIndex_2($this, midIndex, value, valueHash) {
    var inductionVariable = midIndex - 1 | 0;
    if (0 <= inductionVariable)
      $l$loop: do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + -1 | 0;
        var tmp$ret$0;
        // Inline function 'androidx.compose.runtime.collection.IdentityScopeMap.valueAt' call
        tmp$ret$0 = ensureNotNull($this.g16_1[$this.f16_1[i]]);
        var v = tmp$ret$0;
        if (v === value) {
          return i;
        }
        if (!(identityHashCode_0(v) === valueHash)) {
          break $l$loop;
        }
      }
       while (0 <= inductionVariable);
    var inductionVariable_0 = midIndex + 1 | 0;
    var last = $this.i16_1;
    if (inductionVariable_0 < last)
      do {
        var i_0 = inductionVariable_0;
        inductionVariable_0 = inductionVariable_0 + 1 | 0;
        var tmp$ret$1;
        // Inline function 'androidx.compose.runtime.collection.IdentityScopeMap.valueAt' call
        tmp$ret$1 = ensureNotNull($this.g16_1[$this.f16_1[i_0]]);
        var v_0 = tmp$ret$1;
        if (v_0 === value) {
          return i_0;
        }
        if (!(identityHashCode_0(v_0) === valueHash)) {
          return -(i_0 + 1 | 0) | 0;
        }
      }
       while (inductionVariable_0 < last);
    return -($this.i16_1 + 1 | 0) | 0;
  }
  function IdentityScopeMap() {
    var tmp = this;
    var tmp_0 = 0;
    var tmp_1 = 50;
    var tmp_2 = new Int32Array(tmp_1);
    while (tmp_0 < tmp_1) {
      var tmp_3 = tmp_0;
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.collection.IdentityScopeMap.valueOrder.<anonymous>' call
      tmp$ret$0 = tmp_3;
      tmp_2[tmp_3] = tmp$ret$0;
      tmp_0 = tmp_0 + 1 | 0;
    }
    tmp.f16_1 = tmp_2;
    var tmp_4 = this;
    var tmp$ret$1;
    // Inline function 'kotlin.arrayOfNulls' call
    tmp$ret$1 = fillArrayVal(Array(50), null);
    tmp_4.g16_1 = tmp$ret$1;
    var tmp_5 = this;
    var tmp$ret$2;
    // Inline function 'kotlin.arrayOfNulls' call
    tmp$ret$2 = fillArrayVal(Array(50), null);
    tmp_5.h16_1 = tmp$ret$2;
    this.i16_1 = 0;
  }
  IdentityScopeMap.prototype.o1f = function () {
    return this.f16_1;
  };
  IdentityScopeMap.prototype.x7 = function () {
    return this.g16_1;
  };
  IdentityScopeMap.prototype.p1f = function () {
    return this.h16_1;
  };
  IdentityScopeMap.prototype.f1f = function (_set____db54di) {
    this.i16_1 = _set____db54di;
  };
  IdentityScopeMap.prototype.g = function () {
    return this.i16_1;
  };
  IdentityScopeMap.prototype.l16 = function (value, scope) {
    var valueSet = getOrCreateIdentitySet(this, value);
    return valueSet.p15(scope);
  };
  IdentityScopeMap.prototype.j16 = function (element) {
    return find_2(this, element) >= 0;
  };
  IdentityScopeMap.prototype.q1f = function (value, block) {
    var index = find_2(this, value);
    if (index >= 0) {
      // Inline function 'kotlin.collections.forEach' call
      var tmp0_forEach = scopeSetAt(this, index);
      var tmp0_iterator = tmp0_forEach.d();
      while (tmp0_iterator.e()) {
        var element = tmp0_iterator.f();
        block(element);
      }
    }
  };
  IdentityScopeMap.prototype.b17 = function (value, scope) {
    var index = find_2(this, value);
    if (index >= 0) {
      var valueOrderIndex = this.f16_1[index];
      var tmp0_elvis_lhs = this.h16_1[valueOrderIndex];
      var tmp;
      if (tmp0_elvis_lhs == null) {
        return false;
      } else {
        tmp = tmp0_elvis_lhs;
      }
      var set = tmp;
      var removed = set.m1f(scope);
      if (set.n15_1 === 0) {
        var startIndex = index + 1 | 0;
        var endIndex = this.i16_1;
        if (startIndex < endIndex) {
          var tmp$ret$4;
          // Inline function 'kotlin.collections.copyInto' call
          var tmp0_copyInto = this.f16_1;
          var tmp1_copyInto = this.f16_1;
          var tmp$ret$1;
          // Inline function 'kotlin.js.unsafeCast' call
          var tmp$ret$0;
          // Inline function 'kotlin.js.asDynamic' call
          tmp$ret$0 = tmp0_copyInto;
          tmp$ret$1 = tmp$ret$0;
          var tmp_0 = tmp$ret$1;
          var tmp$ret$3;
          // Inline function 'kotlin.js.unsafeCast' call
          var tmp$ret$2;
          // Inline function 'kotlin.js.asDynamic' call
          tmp$ret$2 = tmp1_copyInto;
          tmp$ret$3 = tmp$ret$2;
          arrayCopy(tmp_0, tmp$ret$3, index, startIndex, endIndex);
          tmp$ret$4 = tmp1_copyInto;
        }
        this.f16_1[this.i16_1 - 1 | 0] = valueOrderIndex;
        this.g16_1[valueOrderIndex] = null;
        var tmp1_this = this;
        var tmp2 = tmp1_this.i16_1;
        tmp1_this.i16_1 = tmp2 - 1 | 0;
      }
      return removed;
    }
    return false;
  };
  IdentityScopeMap.prototype.n1f = function (predicate) {
    // Inline function 'androidx.compose.runtime.collection.IdentityScopeMap.removingScopes' call
    var destinationIndex = 0;
    var inductionVariable = 0;
    var last = this.i16_1;
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var valueIndex = this.f16_1[i];
        var set = ensureNotNull(this.h16_1[valueIndex]);
        // Inline function 'androidx.compose.runtime.collection.IdentityScopeMap.removeValueIf.<anonymous>' call
        // Inline function 'androidx.compose.runtime.collection.IdentityArraySet.removeValueIf' call
        var destinationIndex_0 = 0;
        var inductionVariable_0 = 0;
        var last_0 = set.n15_1;
        if (inductionVariable_0 < last_0)
          do {
            var i_0 = inductionVariable_0;
            inductionVariable_0 = inductionVariable_0 + 1 | 0;
            var tmp = set.o15_1[i_0];
            var item = isObject(tmp) ? tmp : THROW_CCE();
            if (!predicate(item)) {
              if (!(destinationIndex_0 === i_0)) {
                set.o15_1[destinationIndex_0] = item;
              }
              var tmp1 = destinationIndex_0;
              destinationIndex_0 = tmp1 + 1 | 0;
            }
          }
           while (inductionVariable_0 < last_0);
        var inductionVariable_1 = destinationIndex_0;
        var last_1 = set.n15_1;
        if (inductionVariable_1 < last_1)
          do {
            var i_1 = inductionVariable_1;
            inductionVariable_1 = inductionVariable_1 + 1 | 0;
            set.o15_1[i_1] = null;
          }
           while (inductionVariable_1 < last_1);
        set.n15_1 = destinationIndex_0;
        if (set.n15_1 > 0) {
          if (!(destinationIndex === i)) {
            var destinationKeyOrder = this.f16_1[destinationIndex];
            this.f16_1[destinationIndex] = valueIndex;
            this.f16_1[i] = destinationKeyOrder;
          }
          var tmp1_0 = destinationIndex;
          destinationIndex = tmp1_0 + 1 | 0;
        }
      }
       while (inductionVariable < last);
    var inductionVariable_2 = destinationIndex;
    var last_2 = this.i16_1;
    if (inductionVariable_2 < last_2)
      do {
        var i_2 = inductionVariable_2;
        inductionVariable_2 = inductionVariable_2 + 1 | 0;
        this.g16_1[this.f16_1[i_2]] = null;
      }
       while (inductionVariable_2 < last_2);
    this.i16_1 = destinationIndex;
  };
  IdentityScopeMap.prototype.k17 = function (scope) {
    // Inline function 'androidx.compose.runtime.collection.IdentityScopeMap.removingScopes' call
    var destinationIndex = 0;
    var inductionVariable = 0;
    var last = this.i16_1;
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var valueIndex = this.f16_1[i];
        var set = ensureNotNull(this.h16_1[valueIndex]);
        // Inline function 'androidx.compose.runtime.collection.IdentityScopeMap.removeScope.<anonymous>' call
        set.m1f(scope);
        if (set.n15_1 > 0) {
          if (!(destinationIndex === i)) {
            var destinationKeyOrder = this.f16_1[destinationIndex];
            this.f16_1[destinationIndex] = valueIndex;
            this.f16_1[i] = destinationKeyOrder;
          }
          var tmp1 = destinationIndex;
          destinationIndex = tmp1 + 1 | 0;
        }
      }
       while (inductionVariable < last);
    var inductionVariable_0 = destinationIndex;
    var last_0 = this.i16_1;
    if (inductionVariable_0 < last_0)
      do {
        var i_0 = inductionVariable_0;
        inductionVariable_0 = inductionVariable_0 + 1 | 0;
        this.g16_1[this.f16_1[i_0]] = null;
      }
       while (inductionVariable_0 < last_0);
    this.i16_1 = destinationIndex;
  };
  IdentityScopeMap.$metadata$ = classMeta('IdentityScopeMap');
  function Builder() {
  }
  Builder.$metadata$ = interfaceMeta('Builder', [MutableCollection]);
  function PersistentCollection() {
  }
  PersistentCollection.$metadata$ = interfaceMeta('PersistentCollection', [ImmutableCollection]);
  function ImmutableCollection() {
  }
  ImmutableCollection.$metadata$ = interfaceMeta('ImmutableCollection', [Collection]);
  function Builder_0() {
  }
  Builder_0.$metadata$ = interfaceMeta('Builder', [MutableList, Builder]);
  function PersistentList() {
  }
  PersistentList.$metadata$ = interfaceMeta('PersistentList', [ImmutableList, PersistentCollection]);
  function ImmutableList() {
  }
  ImmutableList.$metadata$ = interfaceMeta('ImmutableList', [List, ImmutableCollection]);
  function Builder_1() {
  }
  Builder_1.$metadata$ = interfaceMeta('Builder', [MutableMap]);
  function PersistentMap() {
  }
  PersistentMap.$metadata$ = interfaceMeta('PersistentMap', [ImmutableMap]);
  function ImmutableMap() {
  }
  ImmutableMap.$metadata$ = interfaceMeta('ImmutableMap', [Map]);
  function PersistentSet() {
  }
  PersistentSet.$metadata$ = interfaceMeta('PersistentSet', [ImmutableSet, PersistentCollection]);
  function ImmutableSet() {
  }
  ImmutableSet.$metadata$ = interfaceMeta('ImmutableSet', [Set, ImmutableCollection]);
  function persistentHashMapOf() {
    return Companion_getInstance_12().t1f();
  }
  function persistentSetOf() {
    return Companion_getInstance_14().v1f();
  }
  function persistentListOf() {
    return persistentVectorOf();
  }
  function mutate_0(_this__u8e3s4, mutator) {
    var tmp$ret$0;
    // Inline function 'kotlin.apply' call
    var tmp0_apply = _this__u8e3s4.cy();
    // Inline function 'kotlin.contracts.contract' call
    mutator(tmp0_apply);
    tmp$ret$0 = tmp0_apply;
    return tmp$ret$0.dy();
  }
  function AbstractListIterator(index, size) {
    this.w1f_1 = index;
    this.x1f_1 = size;
  }
  AbstractListIterator.prototype.e = function () {
    return this.w1f_1 < this.x1f_1;
  };
  AbstractListIterator.prototype.o = function () {
    return this.w1f_1 > 0;
  };
  AbstractListIterator.prototype.p = function () {
    return this.w1f_1;
  };
  AbstractListIterator.prototype.y1f = function () {
    if (!this.e())
      throw NoSuchElementException_init_$Create$();
  };
  AbstractListIterator.prototype.z1f = function () {
    if (!this.o())
      throw NoSuchElementException_init_$Create$();
  };
  AbstractListIterator.$metadata$ = classMeta('AbstractListIterator', [ListIterator]);
  function AbstractPersistentList() {
    AbstractList.call(this);
  }
  AbstractPersistentList.prototype.h1 = function (elements) {
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.external.kotlinx.collections.immutable.mutate' call
    var tmp$ret$0;
    // Inline function 'kotlin.apply' call
    var tmp0_apply = this.cy();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableList.AbstractPersistentList.addAll.<anonymous>' call
    tmp0_apply.h1(elements);
    tmp$ret$0 = tmp0_apply;
    tmp$ret$1 = tmp$ret$0.dy();
    return tmp$ret$1;
  };
  AbstractPersistentList.prototype.n6 = function (element) {
    var index = this.m(element);
    if (!(index === -1)) {
      return this.f3(index);
    }
    return this;
  };
  AbstractPersistentList.prototype.j = function (element) {
    return !(this.m(element) === -1);
  };
  AbstractPersistentList.prototype.l1 = function (elements) {
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.all' call
      var tmp;
      if (isInterface(elements, Collection)) {
        tmp = elements.i();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = true;
        break $l$block_0;
      }
      var tmp0_iterator = elements.d();
      while (tmp0_iterator.e()) {
        var element = tmp0_iterator.f();
        var tmp$ret$1;
        // Inline function 'androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableList.AbstractPersistentList.containsAll.<anonymous>' call
        tmp$ret$1 = this.j(element);
        if (!tmp$ret$1) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
      }
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  };
  AbstractPersistentList.prototype.d = function () {
    return this.a1g();
  };
  AbstractPersistentList.prototype.a1g = function () {
    return this.n(0);
  };
  AbstractPersistentList.$metadata$ = classMeta('AbstractPersistentList', [PersistentList], undefined, undefined, undefined, AbstractList.prototype);
  function BufferIterator(buffer, index, size) {
    AbstractListIterator.call(this, index, size);
    this.d1g_1 = buffer;
  }
  BufferIterator.prototype.f = function () {
    if (!this.e()) {
      throw NoSuchElementException_init_$Create$();
    }
    var tmp0_this = this;
    var tmp1 = tmp0_this.w1f_1;
    tmp0_this.w1f_1 = tmp1 + 1 | 0;
    return this.d1g_1[tmp1];
  };
  BufferIterator.prototype.q = function () {
    if (!this.o()) {
      throw NoSuchElementException_init_$Create$();
    }
    var tmp0_this = this;
    tmp0_this.w1f_1 = tmp0_this.w1f_1 - 1 | 0;
    return this.d1g_1[tmp0_this.w1f_1];
  };
  BufferIterator.$metadata$ = classMeta('BufferIterator', undefined, undefined, undefined, undefined, AbstractListIterator.prototype);
  function rootSize($this) {
    return rootSize_1($this.g1g_1);
  }
  function pushFilledTail($this, root, filledTail, newTail) {
    if ($this.g1g_1 >> get_LOG_MAX_BUFFER_SIZE() > 1 << $this.h1g_1) {
      var newRoot = presizedBufferWith(root);
      var newRootShift = $this.h1g_1 + get_LOG_MAX_BUFFER_SIZE() | 0;
      newRoot = pushTail($this, newRoot, newRootShift, filledTail);
      return new PersistentVector(newRoot, newTail, $this.g1g_1 + 1 | 0, newRootShift);
    }
    var newRoot_0 = pushTail($this, root, $this.h1g_1, filledTail);
    return new PersistentVector(newRoot_0, newTail, $this.g1g_1 + 1 | 0, $this.h1g_1);
  }
  function pushTail($this, root, shift, tail) {
    var bufferIndex = indexSegment($this.g1g_1 - 1 | 0, shift);
    var tmp0_safe_receiver = root;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : copyOf_0(tmp0_safe_receiver, get_MAX_BUFFER_SIZE());
    var tmp;
    if (tmp1_elvis_lhs == null) {
      var tmp$ret$0;
      // Inline function 'kotlin.arrayOfNulls' call
      var tmp0_arrayOfNulls = get_MAX_BUFFER_SIZE();
      tmp$ret$0 = fillArrayVal(Array(tmp0_arrayOfNulls), null);
      tmp = tmp$ret$0;
    } else {
      tmp = tmp1_elvis_lhs;
    }
    var newRootNode = tmp;
    if (shift === get_LOG_MAX_BUFFER_SIZE()) {
      newRootNode[bufferIndex] = tail;
    } else {
      var tmp_0 = newRootNode[bufferIndex];
      newRootNode[bufferIndex] = pushTail($this, (tmp_0 == null ? true : isArray(tmp_0)) ? tmp_0 : THROW_CCE(), shift - get_LOG_MAX_BUFFER_SIZE() | 0, tail);
    }
    return newRootNode;
  }
  function insertIntoTail($this, root, tailIndex, element) {
    var tailSize = $this.g1g_1 - rootSize($this) | 0;
    var newTail = copyOf_0($this.f1g_1, get_MAX_BUFFER_SIZE());
    if (tailSize < get_MAX_BUFFER_SIZE()) {
      var tmp$ret$0;
      // Inline function 'kotlin.collections.copyInto' call
      var tmp0_copyInto = $this.f1g_1;
      var tmp1_copyInto = tailIndex + 1 | 0;
      arrayCopy(tmp0_copyInto, newTail, tmp1_copyInto, tailIndex, tailSize);
      tmp$ret$0 = newTail;
      newTail[tailIndex] = element;
      return new PersistentVector(root, newTail, $this.g1g_1 + 1 | 0, $this.h1g_1);
    }
    var lastElement = $this.f1g_1[get_MAX_BUFFER_SIZE_MINUS_ONE()];
    var tmp$ret$1;
    // Inline function 'kotlin.collections.copyInto' call
    var tmp2_copyInto = $this.f1g_1;
    var tmp3_copyInto = tailIndex + 1 | 0;
    var tmp4_copyInto = tailSize - 1 | 0;
    arrayCopy(tmp2_copyInto, newTail, tmp3_copyInto, tailIndex, tmp4_copyInto);
    tmp$ret$1 = newTail;
    newTail[tailIndex] = element;
    return pushFilledTail($this, root, newTail, presizedBufferWith(lastElement));
  }
  function insertIntoRoot($this, root, shift, index, element, elementCarry) {
    var bufferIndex = indexSegment(index, shift);
    if (shift === 0) {
      var tmp;
      if (bufferIndex === 0) {
        var tmp$ret$0;
        // Inline function 'kotlin.arrayOfNulls' call
        var tmp0_arrayOfNulls = get_MAX_BUFFER_SIZE();
        tmp$ret$0 = fillArrayVal(Array(tmp0_arrayOfNulls), null);
        tmp = tmp$ret$0;
      } else {
        tmp = copyOf_0(root, get_MAX_BUFFER_SIZE());
      }
      var newRoot = tmp;
      var tmp$ret$1;
      // Inline function 'kotlin.collections.copyInto' call
      var tmp1_copyInto = bufferIndex + 1 | 0;
      var tmp2_copyInto = get_MAX_BUFFER_SIZE_MINUS_ONE();
      arrayCopy(root, newRoot, tmp1_copyInto, bufferIndex, tmp2_copyInto);
      tmp$ret$1 = newRoot;
      elementCarry.i1g_1 = root[get_MAX_BUFFER_SIZE_MINUS_ONE()];
      newRoot[bufferIndex] = element;
      return newRoot;
    }
    var newRoot_0 = copyOf_0(root, get_MAX_BUFFER_SIZE());
    var lowerLevelShift = shift - get_LOG_MAX_BUFFER_SIZE() | 0;
    var tmp_0 = root[bufferIndex];
    newRoot_0[bufferIndex] = insertIntoRoot($this, (!(tmp_0 == null) ? isArray(tmp_0) : false) ? tmp_0 : THROW_CCE(), lowerLevelShift, index, element, elementCarry);
    var inductionVariable = bufferIndex + 1 | 0;
    var last = get_MAX_BUFFER_SIZE();
    if (inductionVariable < last)
      $l$loop: do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (newRoot_0[i] == null)
          break $l$loop;
        var tmp_1 = root[i];
        newRoot_0[i] = insertIntoRoot($this, (!(tmp_1 == null) ? isArray(tmp_1) : false) ? tmp_1 : THROW_CCE(), lowerLevelShift, 0, elementCarry.i1g_1, elementCarry);
      }
       while (inductionVariable < last);
    return newRoot_0;
  }
  function removeFromTailAt($this, root, rootSize, shift, index) {
    var tailSize = $this.g1g_1 - rootSize | 0;
    assert_0(index < tailSize);
    if (tailSize === 1) {
      return pullLastBufferFromRoot($this, root, rootSize, shift);
    }
    var newTail = copyOf_0($this.f1g_1, get_MAX_BUFFER_SIZE());
    if (index < (tailSize - 1 | 0)) {
      var tmp$ret$0;
      // Inline function 'kotlin.collections.copyInto' call
      var tmp0_copyInto = $this.f1g_1;
      var tmp1_copyInto = index + 1 | 0;
      arrayCopy(tmp0_copyInto, newTail, index, tmp1_copyInto, tailSize);
      tmp$ret$0 = newTail;
    }
    newTail[tailSize - 1 | 0] = null;
    return new PersistentVector(root, newTail, (rootSize + tailSize | 0) - 1 | 0, shift);
  }
  function pullLastBufferFromRoot($this, root, rootSize, shift) {
    if (shift === 0) {
      var buffer = root.length === get_MUTABLE_BUFFER_SIZE() ? copyOf_0(root, get_MAX_BUFFER_SIZE()) : root;
      return new SmallPersistentVector(buffer);
    }
    var tailCarry = new ObjectRef(null);
    var newRoot = ensureNotNull(pullLastBuffer($this, root, shift, rootSize - 1 | 0, tailCarry));
    var tmp = tailCarry.i1g_1;
    var newTail = (!(tmp == null) ? isArray(tmp) : false) ? tmp : THROW_CCE();
    if (newRoot[1] == null) {
      var tmp_0 = newRoot[0];
      var lowerLevelRoot = (!(tmp_0 == null) ? isArray(tmp_0) : false) ? tmp_0 : THROW_CCE();
      return new PersistentVector(lowerLevelRoot, newTail, rootSize, shift - get_LOG_MAX_BUFFER_SIZE() | 0);
    }
    return new PersistentVector(newRoot, newTail, rootSize, shift);
  }
  function pullLastBuffer($this, root, shift, index, tailCarry) {
    var bufferIndex = indexSegment(index, shift);
    var tmp;
    if (shift === get_LOG_MAX_BUFFER_SIZE()) {
      tailCarry.i1g_1 = root[bufferIndex];
      tmp = null;
    } else {
      var tmp_0 = root[bufferIndex];
      tmp = pullLastBuffer($this, (!(tmp_0 == null) ? isArray(tmp_0) : false) ? tmp_0 : THROW_CCE(), shift - get_LOG_MAX_BUFFER_SIZE() | 0, index, tailCarry);
    }
    var newBufferAtIndex = tmp;
    if (newBufferAtIndex == null ? bufferIndex === 0 : false) {
      return null;
    }
    var newRoot = copyOf_0(root, get_MAX_BUFFER_SIZE());
    newRoot[bufferIndex] = newBufferAtIndex;
    return newRoot;
  }
  function removeFromRootAt($this, root, shift, index, tailCarry) {
    var bufferIndex = indexSegment(index, shift);
    if (shift === 0) {
      var tmp;
      if (bufferIndex === 0) {
        var tmp$ret$0;
        // Inline function 'kotlin.arrayOfNulls' call
        var tmp0_arrayOfNulls = get_MAX_BUFFER_SIZE();
        tmp$ret$0 = fillArrayVal(Array(tmp0_arrayOfNulls), null);
        tmp = tmp$ret$0;
      } else {
        tmp = copyOf_0(root, get_MAX_BUFFER_SIZE());
      }
      var newRoot = tmp;
      var tmp$ret$1;
      // Inline function 'kotlin.collections.copyInto' call
      var tmp1_copyInto = bufferIndex + 1 | 0;
      var tmp2_copyInto = get_MAX_BUFFER_SIZE();
      arrayCopy(root, newRoot, bufferIndex, tmp1_copyInto, tmp2_copyInto);
      tmp$ret$1 = newRoot;
      newRoot[get_MAX_BUFFER_SIZE() - 1 | 0] = tailCarry.i1g_1;
      tailCarry.i1g_1 = root[bufferIndex];
      return newRoot;
    }
    var bufferLastIndex = get_MAX_BUFFER_SIZE_MINUS_ONE();
    if (root[bufferLastIndex] == null) {
      bufferLastIndex = indexSegment(rootSize($this) - 1 | 0, shift);
    }
    var newRoot_0 = copyOf_0(root, get_MAX_BUFFER_SIZE());
    var lowerLevelShift = shift - get_LOG_MAX_BUFFER_SIZE() | 0;
    var inductionVariable = bufferLastIndex;
    var last = bufferIndex + 1 | 0;
    if (last <= inductionVariable)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + -1 | 0;
        var tmp_0 = newRoot_0[i];
        newRoot_0[i] = removeFromRootAt($this, (!(tmp_0 == null) ? isArray(tmp_0) : false) ? tmp_0 : THROW_CCE(), lowerLevelShift, 0, tailCarry);
      }
       while (!(i === last));
    var tmp_1 = newRoot_0[bufferIndex];
    newRoot_0[bufferIndex] = removeFromRootAt($this, (!(tmp_1 == null) ? isArray(tmp_1) : false) ? tmp_1 : THROW_CCE(), lowerLevelShift, index, tailCarry);
    return newRoot_0;
  }
  function bufferFor($this, index) {
    if (rootSize($this) <= index) {
      return $this.f1g_1;
    }
    var buffer = $this.e1g_1;
    var shift = $this.h1g_1;
    while (shift > 0) {
      var tmp = buffer[indexSegment(index, shift)];
      buffer = (!(tmp == null) ? isArray(tmp) : false) ? tmp : THROW_CCE();
      shift = shift - get_LOG_MAX_BUFFER_SIZE() | 0;
    }
    return buffer;
  }
  function setInRoot($this, root, shift, index, e) {
    var bufferIndex = indexSegment(index, shift);
    var newRoot = copyOf_0(root, get_MAX_BUFFER_SIZE());
    if (shift === 0) {
      newRoot[bufferIndex] = e;
    } else {
      var tmp = newRoot[bufferIndex];
      newRoot[bufferIndex] = setInRoot($this, (!(tmp == null) ? isArray(tmp) : false) ? tmp : THROW_CCE(), shift - get_LOG_MAX_BUFFER_SIZE() | 0, index, e);
    }
    return newRoot;
  }
  function PersistentVector(root, tail, size, rootShift) {
    AbstractPersistentList.call(this);
    this.e1g_1 = root;
    this.f1g_1 = tail;
    this.g1g_1 = size;
    this.h1g_1 = rootShift;
    // Inline function 'kotlin.require' call
    var tmp0_require = this.g1g_1 > get_MAX_BUFFER_SIZE();
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableList.PersistentVector.<anonymous>' call
      tmp$ret$0 = 'Trie-based persistent vector should have at least ' + (get_MAX_BUFFER_SIZE() + 1 | 0) + ' elements, got ' + this.g1g_1;
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString_2(message));
    }
    assert_0((this.g1g_1 - rootSize_1(this.g1g_1) | 0) <= coerceAtMost(this.f1g_1.length, get_MAX_BUFFER_SIZE()));
  }
  PersistentVector.prototype.g = function () {
    return this.g1g_1;
  };
  PersistentVector.prototype.b = function (element) {
    var tailSize = this.g1g_1 - rootSize(this) | 0;
    if (tailSize < get_MAX_BUFFER_SIZE()) {
      var newTail = copyOf_0(this.f1g_1, get_MAX_BUFFER_SIZE());
      newTail[tailSize] = element;
      return new PersistentVector(this.e1g_1, newTail, this.g1g_1 + 1 | 0, this.h1g_1);
    }
    var newTail_0 = presizedBufferWith(element);
    return pushFilledTail(this, this.e1g_1, this.f1g_1, newTail_0);
  };
  PersistentVector.prototype.r1f = function (index, element) {
    ListImplementation_getInstance().r1(index, this.g1g_1);
    if (index === this.g1g_1) {
      return this.b(element);
    }
    var rootSize_0 = rootSize(this);
    if (index >= rootSize_0) {
      return insertIntoTail(this, this.e1g_1, index - rootSize_0 | 0, element);
    }
    var elementCarry = new ObjectRef(null);
    var newRoot = insertIntoRoot(this, this.e1g_1, this.h1g_1, index, element, elementCarry);
    return insertIntoTail(this, newRoot, 0, elementCarry.i1g_1);
  };
  PersistentVector.prototype.f3 = function (index) {
    ListImplementation_getInstance().s1(index, this.g1g_1);
    var rootSize_0 = rootSize(this);
    if (index >= rootSize_0) {
      return removeFromTailAt(this, this.e1g_1, rootSize_0, this.h1g_1, index - rootSize_0 | 0);
    }
    var newRoot = removeFromRootAt(this, this.e1g_1, this.h1g_1, index, new ObjectRef(this.f1g_1[0]));
    return removeFromTailAt(this, newRoot, rootSize_0, this.h1g_1, 0);
  };
  PersistentVector.prototype.cy = function () {
    return new PersistentVectorBuilder(this, this.e1g_1, this.f1g_1, this.h1g_1);
  };
  PersistentVector.prototype.n = function (index) {
    ListImplementation_getInstance().r1(index, this.g1g_1);
    var tmp = this.f1g_1;
    return new PersistentVectorIterator(this.e1g_1, isArray(tmp) ? tmp : THROW_CCE(), index, this.g1g_1, (this.h1g_1 / get_LOG_MAX_BUFFER_SIZE() | 0) + 1 | 0);
  };
  PersistentVector.prototype.h = function (index) {
    ListImplementation_getInstance().s1(index, this.g1g_1);
    var buffer = bufferFor(this, index);
    var tmp = buffer[index & get_MAX_BUFFER_SIZE_MINUS_ONE()];
    return (tmp == null ? true : isObject(tmp)) ? tmp : THROW_CCE();
  };
  PersistentVector.prototype.m6 = function (index, element) {
    ListImplementation_getInstance().s1(index, this.g1g_1);
    if (rootSize(this) <= index) {
      var newTail = copyOf_0(this.f1g_1, get_MAX_BUFFER_SIZE());
      newTail[index & get_MAX_BUFFER_SIZE_MINUS_ONE()] = element;
      return new PersistentVector(this.e1g_1, newTail, this.g1g_1, this.h1g_1);
    }
    var newRoot = setInRoot(this, this.e1g_1, this.h1g_1, index, element);
    return new PersistentVector(newRoot, this.f1g_1, this.g1g_1, this.h1g_1);
  };
  PersistentVector.$metadata$ = classMeta('PersistentVector', [PersistentList], undefined, undefined, undefined, AbstractPersistentList.prototype);
  function rootSize_0($this) {
    if ($this.r1g_1 <= get_MAX_BUFFER_SIZE()) {
      return 0;
    }
    return rootSize_1($this.r1g_1);
  }
  function tailSize($this, size) {
    if (size <= get_MAX_BUFFER_SIZE()) {
      return size;
    }
    return size - rootSize_1(size) | 0;
  }
  function tailSize_0($this) {
    return tailSize($this, $this.r1g_1);
  }
  function isMutable($this, buffer) {
    return buffer.length === get_MUTABLE_BUFFER_SIZE() ? buffer[get_MUTABLE_BUFFER_SIZE() - 1 | 0] === $this.o1g_1 : false;
  }
  function makeMutable($this, buffer) {
    if (buffer == null) {
      return mutableBuffer($this);
    }
    if (isMutable($this, buffer)) {
      return buffer;
    }
    var tmp$ret$0;
    // Inline function 'kotlin.collections.copyInto' call
    var tmp0_copyInto = mutableBuffer($this);
    var tmp1_copyInto = coerceAtMost(buffer.length, get_MAX_BUFFER_SIZE());
    arrayCopy(buffer, tmp0_copyInto, 0, 0, tmp1_copyInto);
    tmp$ret$0 = tmp0_copyInto;
    return tmp$ret$0;
  }
  function mutableBufferWith($this, element) {
    var tmp$ret$0;
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp0_arrayOfNulls = get_MUTABLE_BUFFER_SIZE();
    tmp$ret$0 = fillArrayVal(Array(tmp0_arrayOfNulls), null);
    var buffer = tmp$ret$0;
    buffer[0] = element;
    buffer[get_MUTABLE_BUFFER_SIZE() - 1 | 0] = $this.o1g_1;
    return buffer;
  }
  function mutableBuffer($this) {
    var tmp$ret$0;
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp0_arrayOfNulls = get_MUTABLE_BUFFER_SIZE();
    tmp$ret$0 = fillArrayVal(Array(tmp0_arrayOfNulls), null);
    var buffer = tmp$ret$0;
    buffer[get_MUTABLE_BUFFER_SIZE() - 1 | 0] = $this.o1g_1;
    return buffer;
  }
  function pushFilledTail_0($this, root, filledTail, newTail) {
    var tmp;
    if ($this.r1g_1 >> get_LOG_MAX_BUFFER_SIZE() > 1 << $this.n1g_1) {
      $this.p1g_1 = pushTail_0($this, mutableBufferWith($this, root), filledTail, $this.n1g_1 + get_LOG_MAX_BUFFER_SIZE() | 0);
      $this.q1g_1 = newTail;
      var tmp0_this = $this;
      tmp0_this.n1g_1 = tmp0_this.n1g_1 + get_LOG_MAX_BUFFER_SIZE() | 0;
      var tmp1_this = $this;
      tmp1_this.r1g_1 = tmp1_this.r1g_1 + 1 | 0;
      tmp = Unit_getInstance();
    } else if (root == null) {
      $this.p1g_1 = filledTail;
      $this.q1g_1 = newTail;
      var tmp2_this = $this;
      tmp2_this.r1g_1 = tmp2_this.r1g_1 + 1 | 0;
      tmp = Unit_getInstance();
    } else {
      $this.p1g_1 = pushTail_0($this, root, filledTail, $this.n1g_1);
      $this.q1g_1 = newTail;
      var tmp3_this = $this;
      tmp3_this.r1g_1 = tmp3_this.r1g_1 + 1 | 0;
      tmp = Unit_getInstance();
    }
    return tmp;
  }
  function pushTail_0($this, root, tail, shift) {
    var index = indexSegment($this.r1g_1 - 1 | 0, shift);
    var mutableRoot = makeMutable($this, root);
    if (shift === get_LOG_MAX_BUFFER_SIZE()) {
      mutableRoot[index] = tail;
    } else {
      var tmp = mutableRoot[index];
      mutableRoot[index] = pushTail_0($this, (tmp == null ? true : isArray(tmp)) ? tmp : THROW_CCE(), tail, shift - get_LOG_MAX_BUFFER_SIZE() | 0);
    }
    return mutableRoot;
  }
  function copyToBuffer($this, buffer, bufferIndex, sourceIterator) {
    var index = bufferIndex;
    while (index < get_MAX_BUFFER_SIZE() ? sourceIterator.e() : false) {
      var tmp0 = index;
      index = tmp0 + 1 | 0;
      buffer[tmp0] = sourceIterator.f();
    }
    return buffer;
  }
  function pushBuffersIncreasingHeightIfNeeded($this, root, rootSize, buffers) {
    var buffersIterator = arrayIterator(buffers);
    var mutableRoot = rootSize >> get_LOG_MAX_BUFFER_SIZE() < 1 << $this.n1g_1 ? pushBuffers($this, root, rootSize, $this.n1g_1, buffersIterator) : makeMutable($this, root);
    while (buffersIterator.e()) {
      var tmp0_this = $this;
      tmp0_this.n1g_1 = tmp0_this.n1g_1 + get_LOG_MAX_BUFFER_SIZE() | 0;
      mutableRoot = mutableBufferWith($this, mutableRoot);
      pushBuffers($this, mutableRoot, 1 << $this.n1g_1, $this.n1g_1, buffersIterator);
    }
    return mutableRoot;
  }
  function pushBuffers($this, root, rootSize, shift, buffersIterator) {
    // Inline function 'kotlin.check' call
    var tmp0_check = buffersIterator.e();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.check' call
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_check) {
      var tmp$ret$0;
      // Inline function 'kotlin.check.<anonymous>' call
      tmp$ret$0 = 'Check failed.';
      var message = tmp$ret$0;
      throw IllegalStateException_init_$Create$_0(toString_2(message));
    }
    // Inline function 'kotlin.check' call
    var tmp1_check = shift >= 0;
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.check' call
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp1_check) {
      var tmp$ret$1;
      // Inline function 'kotlin.check.<anonymous>' call
      tmp$ret$1 = 'Check failed.';
      var message_0 = tmp$ret$1;
      throw IllegalStateException_init_$Create$_0(toString_2(message_0));
    }
    if (shift === 0) {
      return buffersIterator.f();
    }
    var mutableRoot = makeMutable($this, root);
    var index = indexSegment(rootSize, shift);
    var tmp = index;
    var tmp_0 = mutableRoot[index];
    mutableRoot[tmp] = pushBuffers($this, (tmp_0 == null ? true : isArray(tmp_0)) ? tmp_0 : THROW_CCE(), rootSize, shift - get_LOG_MAX_BUFFER_SIZE() | 0, buffersIterator);
    $l$loop: while (true) {
      var tmp_1;
      index = index + 1 | 0;
      if (index < get_MAX_BUFFER_SIZE()) {
        tmp_1 = buffersIterator.e();
      } else {
        tmp_1 = false;
      }
      if (!tmp_1) {
        break $l$loop;
      }
      var tmp_2 = index;
      var tmp_3 = mutableRoot[index];
      mutableRoot[tmp_2] = pushBuffers($this, (tmp_3 == null ? true : isArray(tmp_3)) ? tmp_3 : THROW_CCE(), 0, shift - get_LOG_MAX_BUFFER_SIZE() | 0, buffersIterator);
    }
    return mutableRoot;
  }
  function insertIntoTail_0($this, root, index, element) {
    var tailSize = tailSize_0($this);
    var mutableTail = makeMutable($this, $this.q1g_1);
    if (tailSize < get_MAX_BUFFER_SIZE()) {
      var tmp$ret$0;
      // Inline function 'kotlin.collections.copyInto' call
      var tmp0_copyInto = $this.q1g_1;
      var tmp1_copyInto = index + 1 | 0;
      arrayCopy(tmp0_copyInto, mutableTail, tmp1_copyInto, index, tailSize);
      tmp$ret$0 = mutableTail;
      mutableTail[index] = element;
      $this.p1g_1 = root;
      $this.q1g_1 = mutableTail;
      var tmp0_this = $this;
      tmp0_this.r1g_1 = tmp0_this.r1g_1 + 1 | 0;
    } else {
      var lastElement = $this.q1g_1[get_MAX_BUFFER_SIZE_MINUS_ONE()];
      var tmp$ret$1;
      // Inline function 'kotlin.collections.copyInto' call
      var tmp2_copyInto = $this.q1g_1;
      var tmp3_copyInto = index + 1 | 0;
      var tmp4_copyInto = get_MAX_BUFFER_SIZE_MINUS_ONE();
      arrayCopy(tmp2_copyInto, mutableTail, tmp3_copyInto, index, tmp4_copyInto);
      tmp$ret$1 = mutableTail;
      mutableTail[index] = element;
      pushFilledTail_0($this, root, mutableTail, mutableBufferWith($this, lastElement));
    }
  }
  function insertIntoRoot_0($this, root, shift, index, element, elementCarry) {
    var bufferIndex = indexSegment(index, shift);
    if (shift === 0) {
      elementCarry.i1g_1 = root[get_MAX_BUFFER_SIZE_MINUS_ONE()];
      var tmp$ret$0;
      // Inline function 'kotlin.collections.copyInto' call
      var tmp0_copyInto = makeMutable($this, root);
      var tmp1_copyInto = bufferIndex + 1 | 0;
      var tmp2_copyInto = get_MAX_BUFFER_SIZE_MINUS_ONE();
      arrayCopy(root, tmp0_copyInto, tmp1_copyInto, bufferIndex, tmp2_copyInto);
      tmp$ret$0 = tmp0_copyInto;
      var mutableRoot = tmp$ret$0;
      mutableRoot[bufferIndex] = element;
      return mutableRoot;
    }
    var mutableRoot_0 = makeMutable($this, root);
    var lowerLevelShift = shift - get_LOG_MAX_BUFFER_SIZE() | 0;
    var tmp = mutableRoot_0[bufferIndex];
    mutableRoot_0[bufferIndex] = insertIntoRoot_0($this, (!(tmp == null) ? isArray(tmp) : false) ? tmp : THROW_CCE(), lowerLevelShift, index, element, elementCarry);
    var inductionVariable = bufferIndex + 1 | 0;
    var last = get_MAX_BUFFER_SIZE();
    if (inductionVariable < last)
      $l$loop: do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (mutableRoot_0[i] == null)
          break $l$loop;
        var tmp_0 = mutableRoot_0[i];
        mutableRoot_0[i] = insertIntoRoot_0($this, (!(tmp_0 == null) ? isArray(tmp_0) : false) ? tmp_0 : THROW_CCE(), lowerLevelShift, 0, elementCarry.i1g_1, elementCarry);
      }
       while (inductionVariable < last);
    return mutableRoot_0;
  }
  function bufferFor_0($this, index) {
    if (rootSize_0($this) <= index) {
      return $this.q1g_1;
    }
    var buffer = ensureNotNull($this.p1g_1);
    var shift = $this.n1g_1;
    while (shift > 0) {
      var tmp = buffer[indexSegment(index, shift)];
      buffer = (!(tmp == null) ? isArray(tmp) : false) ? tmp : THROW_CCE();
      shift = shift - get_LOG_MAX_BUFFER_SIZE() | 0;
    }
    return buffer;
  }
  function removeFromTailAt_0($this, root, rootSize, shift, index) {
    var tailSize = $this.r1g_1 - rootSize | 0;
    assert_0(index < tailSize);
    var removedElement;
    if (tailSize === 1) {
      removedElement = $this.q1g_1[0];
      pullLastBufferFromRoot_0($this, root, rootSize, shift);
    } else {
      removedElement = $this.q1g_1[index];
      var tmp$ret$0;
      // Inline function 'kotlin.collections.copyInto' call
      var tmp0_copyInto = $this.q1g_1;
      var tmp1_copyInto = makeMutable($this, $this.q1g_1);
      var tmp2_copyInto = index + 1 | 0;
      arrayCopy(tmp0_copyInto, tmp1_copyInto, index, tmp2_copyInto, tailSize);
      tmp$ret$0 = tmp1_copyInto;
      var mutableTail = tmp$ret$0;
      mutableTail[tailSize - 1 | 0] = null;
      $this.p1g_1 = root;
      $this.q1g_1 = mutableTail;
      $this.r1g_1 = (rootSize + tailSize | 0) - 1 | 0;
      $this.n1g_1 = shift;
    }
    return removedElement;
  }
  function removeFromRootAt_0($this, root, shift, index, tailCarry) {
    var bufferIndex = indexSegment(index, shift);
    if (shift === 0) {
      var removedElement = root[bufferIndex];
      var tmp$ret$0;
      // Inline function 'kotlin.collections.copyInto' call
      var tmp0_copyInto = makeMutable($this, root);
      var tmp1_copyInto = bufferIndex + 1 | 0;
      var tmp2_copyInto = get_MAX_BUFFER_SIZE();
      arrayCopy(root, tmp0_copyInto, bufferIndex, tmp1_copyInto, tmp2_copyInto);
      tmp$ret$0 = tmp0_copyInto;
      var mutableRoot = tmp$ret$0;
      mutableRoot[get_MAX_BUFFER_SIZE() - 1 | 0] = tailCarry.i1g_1;
      tailCarry.i1g_1 = removedElement;
      return mutableRoot;
    }
    var bufferLastIndex = get_MAX_BUFFER_SIZE_MINUS_ONE();
    if (root[bufferLastIndex] == null) {
      bufferLastIndex = indexSegment(rootSize_0($this) - 1 | 0, shift);
    }
    var mutableRoot_0 = makeMutable($this, root);
    var lowerLevelShift = shift - get_LOG_MAX_BUFFER_SIZE() | 0;
    var inductionVariable = bufferLastIndex;
    var last = bufferIndex + 1 | 0;
    if (last <= inductionVariable)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + -1 | 0;
        var tmp = mutableRoot_0[i];
        mutableRoot_0[i] = removeFromRootAt_0($this, (!(tmp == null) ? isArray(tmp) : false) ? tmp : THROW_CCE(), lowerLevelShift, 0, tailCarry);
      }
       while (!(i === last));
    var tmp_0 = mutableRoot_0[bufferIndex];
    mutableRoot_0[bufferIndex] = removeFromRootAt_0($this, (!(tmp_0 == null) ? isArray(tmp_0) : false) ? tmp_0 : THROW_CCE(), lowerLevelShift, index, tailCarry);
    return mutableRoot_0;
  }
  function pullLastBufferFromRoot_0($this, root, rootSize, shift) {
    if (shift === 0) {
      $this.p1g_1 = null;
      var tmp = $this;
      var tmp0_elvis_lhs = root;
      var tmp_0;
      if (tmp0_elvis_lhs == null) {
        var tmp$ret$0;
        // Inline function 'kotlin.emptyArray' call
        tmp$ret$0 = [];
        tmp_0 = tmp$ret$0;
      } else {
        tmp_0 = tmp0_elvis_lhs;
      }
      tmp.q1g_1 = tmp_0;
      $this.r1g_1 = rootSize;
      $this.n1g_1 = shift;
      return Unit_getInstance();
    }
    var tailCarry = new ObjectRef(null);
    var newRoot = ensureNotNull(pullLastBuffer_0($this, ensureNotNull(root), shift, rootSize, tailCarry));
    var tmp_1 = $this;
    var tmp_2 = tailCarry.i1g_1;
    tmp_1.q1g_1 = (!(tmp_2 == null) ? isArray(tmp_2) : false) ? tmp_2 : THROW_CCE();
    $this.r1g_1 = rootSize;
    if (newRoot[1] == null) {
      var tmp_3 = $this;
      var tmp_4 = newRoot[0];
      tmp_3.p1g_1 = (tmp_4 == null ? true : isArray(tmp_4)) ? tmp_4 : THROW_CCE();
      $this.n1g_1 = shift - get_LOG_MAX_BUFFER_SIZE() | 0;
    } else {
      $this.p1g_1 = newRoot;
      $this.n1g_1 = shift;
    }
  }
  function pullLastBuffer_0($this, root, shift, rootSize, tailCarry) {
    var bufferIndex = indexSegment(rootSize - 1 | 0, shift);
    var tmp;
    if (shift === get_LOG_MAX_BUFFER_SIZE()) {
      tailCarry.i1g_1 = root[bufferIndex];
      tmp = null;
    } else {
      var tmp_0 = root[bufferIndex];
      tmp = pullLastBuffer_0($this, (!(tmp_0 == null) ? isArray(tmp_0) : false) ? tmp_0 : THROW_CCE(), shift - get_LOG_MAX_BUFFER_SIZE() | 0, rootSize, tailCarry);
    }
    var newBufferAtIndex = tmp;
    if (newBufferAtIndex == null ? bufferIndex === 0 : false) {
      return null;
    }
    var mutableRoot = makeMutable($this, root);
    mutableRoot[bufferIndex] = newBufferAtIndex;
    return mutableRoot;
  }
  function setInRoot_0($this, root, shift, index, e, oldElementCarry) {
    var bufferIndex = indexSegment(index, shift);
    var mutableRoot = makeMutable($this, root);
    if (shift === 0) {
      if (!(mutableRoot === root)) {
        var tmp0_this = $this;
        var tmp1 = tmp0_this.u6_1;
        tmp0_this.u6_1 = tmp1 + 1 | 0;
      }
      oldElementCarry.i1g_1 = mutableRoot[bufferIndex];
      mutableRoot[bufferIndex] = e;
      return mutableRoot;
    }
    var tmp = mutableRoot[bufferIndex];
    mutableRoot[bufferIndex] = setInRoot_0($this, (!(tmp == null) ? isArray(tmp) : false) ? tmp : THROW_CCE(), shift - get_LOG_MAX_BUFFER_SIZE() | 0, index, e, oldElementCarry);
    return mutableRoot;
  }
  function PersistentVectorBuilder(vector, vectorRoot, vectorTail, rootShift) {
    AbstractMutableList.call(this);
    this.k1g_1 = vector;
    this.l1g_1 = vectorRoot;
    this.m1g_1 = vectorTail;
    this.n1g_1 = rootShift;
    this.o1g_1 = new MutabilityOwnership();
    this.p1g_1 = this.l1g_1;
    this.q1g_1 = this.m1g_1;
    this.r1g_1 = this.k1g_1.g();
  }
  PersistentVectorBuilder.prototype.g = function () {
    return this.r1g_1;
  };
  PersistentVectorBuilder.prototype.s1g = function () {
    return this.u6_1;
  };
  PersistentVectorBuilder.prototype.dy = function () {
    var tmp = this;
    var tmp_0;
    if (this.p1g_1 === this.l1g_1 ? this.q1g_1 === this.m1g_1 : false) {
      tmp_0 = this.k1g_1;
    } else {
      this.o1g_1 = new MutabilityOwnership();
      this.l1g_1 = this.p1g_1;
      this.m1g_1 = this.q1g_1;
      var tmp_1;
      if (this.p1g_1 == null) {
        var tmp_2;
        var tmp$ret$0;
        // Inline function 'kotlin.collections.isEmpty' call
        var tmp0_isEmpty = this.q1g_1;
        tmp$ret$0 = tmp0_isEmpty.length === 0;
        if (tmp$ret$0) {
          tmp_2 = persistentVectorOf();
        } else {
          tmp_2 = new SmallPersistentVector(copyOf_0(this.q1g_1, this.r1g_1));
        }
        tmp_1 = tmp_2;
      } else {
        tmp_1 = new PersistentVector(ensureNotNull(this.p1g_1), this.q1g_1, this.r1g_1, this.n1g_1);
      }
      tmp_0 = tmp_1;
    }
    tmp.k1g_1 = tmp_0;
    return this.k1g_1;
  };
  PersistentVectorBuilder.prototype.b = function (element) {
    var tmp0_this = this;
    tmp0_this.u6_1 = tmp0_this.u6_1 + 1 | 0;
    var tailSize = tailSize_0(this);
    if (tailSize < get_MAX_BUFFER_SIZE()) {
      var mutableTail = makeMutable(this, this.q1g_1);
      mutableTail[tailSize] = element;
      this.q1g_1 = mutableTail;
      var tmp1_this = this;
      tmp1_this.r1g_1 = tmp1_this.r1g_1 + 1 | 0;
    } else {
      var newTail = mutableBufferWith(this, element);
      pushFilledTail_0(this, this.p1g_1, this.q1g_1, newTail);
    }
    return true;
  };
  PersistentVectorBuilder.prototype.h1 = function (elements) {
    if (elements.i()) {
      return false;
    }
    var tmp0_this = this;
    var tmp1 = tmp0_this.u6_1;
    tmp0_this.u6_1 = tmp1 + 1 | 0;
    var tailSize = tailSize_0(this);
    var elementsIterator = elements.d();
    if ((get_MAX_BUFFER_SIZE() - tailSize | 0) >= elements.g()) {
      this.q1g_1 = copyToBuffer(this, makeMutable(this, this.q1g_1), tailSize, elementsIterator);
      var tmp2_this = this;
      tmp2_this.r1g_1 = tmp2_this.r1g_1 + elements.g() | 0;
    } else {
      var buffersSize = ((elements.g() + tailSize | 0) - 1 | 0) / get_MAX_BUFFER_SIZE() | 0;
      var tmp$ret$0;
      // Inline function 'kotlin.arrayOfNulls' call
      tmp$ret$0 = fillArrayVal(Array(buffersSize), null);
      var buffers = tmp$ret$0;
      buffers[0] = copyToBuffer(this, makeMutable(this, this.q1g_1), tailSize, elementsIterator);
      var inductionVariable = 1;
      if (inductionVariable < buffersSize)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          buffers[index] = copyToBuffer(this, mutableBuffer(this), 0, elementsIterator);
        }
         while (inductionVariable < buffersSize);
      var tmp = this;
      var tmp_0 = this.p1g_1;
      var tmp_1 = rootSize_0(this);
      tmp.p1g_1 = pushBuffersIncreasingHeightIfNeeded(this, tmp_0, tmp_1, isArray(buffers) ? buffers : THROW_CCE());
      this.q1g_1 = copyToBuffer(this, mutableBuffer(this), 0, elementsIterator);
      var tmp4_this = this;
      tmp4_this.r1g_1 = tmp4_this.r1g_1 + elements.g() | 0;
    }
    return true;
  };
  PersistentVectorBuilder.prototype.d7 = function (index, element) {
    ListImplementation_getInstance().r1(index, this.r1g_1);
    if (index === this.r1g_1) {
      this.b(element);
      return Unit_getInstance();
    }
    var tmp0_this = this;
    tmp0_this.u6_1 = tmp0_this.u6_1 + 1 | 0;
    var rootSize = rootSize_0(this);
    if (index >= rootSize) {
      insertIntoTail_0(this, this.p1g_1, index - rootSize | 0, element);
      return Unit_getInstance();
    }
    var elementCarry = new ObjectRef(null);
    var newRest = insertIntoRoot_0(this, ensureNotNull(this.p1g_1), this.n1g_1, index, element, elementCarry);
    var tmp = elementCarry.i1g_1;
    insertIntoTail_0(this, newRest, 0, (tmp == null ? true : isObject(tmp)) ? tmp : THROW_CCE());
  };
  PersistentVectorBuilder.prototype.h = function (index) {
    ListImplementation_getInstance().s1(index, this.r1g_1);
    var buffer = bufferFor_0(this, index);
    var tmp = buffer[index & get_MAX_BUFFER_SIZE_MINUS_ONE()];
    return (tmp == null ? true : isObject(tmp)) ? tmp : THROW_CCE();
  };
  PersistentVectorBuilder.prototype.f3 = function (index) {
    ListImplementation_getInstance().s1(index, this.r1g_1);
    var tmp0_this = this;
    tmp0_this.u6_1 = tmp0_this.u6_1 + 1 | 0;
    var rootSize = rootSize_0(this);
    if (index >= rootSize) {
      var tmp = removeFromTailAt_0(this, this.p1g_1, rootSize, this.n1g_1, index - rootSize | 0);
      return (tmp == null ? true : isObject(tmp)) ? tmp : THROW_CCE();
    }
    var elementCarry = new ObjectRef(this.q1g_1[0]);
    var newRoot = removeFromRootAt_0(this, ensureNotNull(this.p1g_1), this.n1g_1, index, elementCarry);
    removeFromTailAt_0(this, newRoot, rootSize, this.n1g_1, 0);
    var tmp_0 = elementCarry.i1g_1;
    return (tmp_0 == null ? true : isObject(tmp_0)) ? tmp_0 : THROW_CCE();
  };
  PersistentVectorBuilder.prototype.m6 = function (index, element) {
    ListImplementation_getInstance().s1(index, this.r1g_1);
    if (rootSize_0(this) <= index) {
      var mutableTail = makeMutable(this, this.q1g_1);
      if (!(mutableTail === this.q1g_1)) {
        var tmp0_this = this;
        var tmp1 = tmp0_this.u6_1;
        tmp0_this.u6_1 = tmp1 + 1 | 0;
      }
      var tailIndex = index & get_MAX_BUFFER_SIZE_MINUS_ONE();
      var oldElement = mutableTail[tailIndex];
      mutableTail[tailIndex] = element;
      this.q1g_1 = mutableTail;
      return (oldElement == null ? true : isObject(oldElement)) ? oldElement : THROW_CCE();
    }
    var oldElementCarry = new ObjectRef(null);
    this.p1g_1 = setInRoot_0(this, ensureNotNull(this.p1g_1), this.n1g_1, index, element, oldElementCarry);
    var tmp = oldElementCarry.i1g_1;
    return (tmp == null ? true : isObject(tmp)) ? tmp : THROW_CCE();
  };
  PersistentVectorBuilder.prototype.d = function () {
    return this.a1g();
  };
  PersistentVectorBuilder.prototype.a1g = function () {
    return this.n(0);
  };
  PersistentVectorBuilder.prototype.n = function (index) {
    ListImplementation_getInstance().r1(index, this.r1g_1);
    return new PersistentVectorMutableIterator(this, index);
  };
  PersistentVectorBuilder.$metadata$ = classMeta('PersistentVectorBuilder', [Builder_0], undefined, undefined, undefined, AbstractMutableList.prototype);
  function PersistentVectorIterator(root, tail, index, size, trieHeight) {
    AbstractListIterator.call(this, index, size);
    this.v1g_1 = tail;
    var trieSize = rootSize_1(size);
    var trieIndex = coerceAtMost(index, trieSize);
    this.w1g_1 = new TrieIterator(root, trieIndex, trieSize, trieHeight);
  }
  PersistentVectorIterator.prototype.f = function () {
    this.y1f();
    if (this.w1g_1.e()) {
      var tmp0_this = this;
      var tmp1 = tmp0_this.w1f_1;
      tmp0_this.w1f_1 = tmp1 + 1 | 0;
      return this.w1g_1.f();
    }
    var tmp2_this = this;
    var tmp3 = tmp2_this.w1f_1;
    tmp2_this.w1f_1 = tmp3 + 1 | 0;
    return this.v1g_1[tmp3 - this.w1g_1.x1f_1 | 0];
  };
  PersistentVectorIterator.prototype.q = function () {
    this.z1f();
    if (this.w1f_1 > this.w1g_1.x1f_1) {
      var tmp0_this = this;
      tmp0_this.w1f_1 = tmp0_this.w1f_1 - 1 | 0;
      return this.v1g_1[tmp0_this.w1f_1 - this.w1g_1.x1f_1 | 0];
    }
    var tmp1_this = this;
    var tmp2 = tmp1_this.w1f_1;
    tmp1_this.w1f_1 = tmp2 - 1 | 0;
    return this.w1g_1.q();
  };
  PersistentVectorIterator.$metadata$ = classMeta('PersistentVectorIterator', undefined, undefined, undefined, undefined, AbstractListIterator.prototype);
  function reset($this) {
    $this.x1f_1 = $this.e1h_1.r1g_1;
    $this.f1h_1 = $this.e1h_1.s1g();
    $this.h1h_1 = -1;
    setupTrieIterator($this);
  }
  function setupTrieIterator($this) {
    var root = $this.e1h_1.p1g_1;
    if (root == null) {
      $this.g1h_1 = null;
      return Unit_getInstance();
    }
    var trieSize = rootSize_1($this.e1h_1.r1g_1);
    var trieIndex = coerceAtMost($this.w1f_1, trieSize);
    var trieHeight = ($this.e1h_1.n1g_1 / get_LOG_MAX_BUFFER_SIZE() | 0) + 1 | 0;
    if ($this.g1h_1 == null) {
      $this.g1h_1 = new TrieIterator(root, trieIndex, trieSize, trieHeight);
    } else {
      ensureNotNull($this.g1h_1).i1h(root, trieIndex, trieSize, trieHeight);
    }
  }
  function checkForComodification($this) {
    if (!($this.f1h_1 === $this.e1h_1.s1g()))
      throw ConcurrentModificationException_init_$Create$();
  }
  function checkHasIterated($this) {
    if ($this.h1h_1 === -1)
      throw IllegalStateException_init_$Create$();
  }
  function PersistentVectorMutableIterator(builder, index) {
    AbstractListIterator.call(this, index, builder.r1g_1);
    this.e1h_1 = builder;
    this.f1h_1 = this.e1h_1.s1g();
    this.g1h_1 = null;
    this.h1h_1 = -1;
    setupTrieIterator(this);
  }
  PersistentVectorMutableIterator.prototype.q = function () {
    checkForComodification(this);
    this.z1f();
    this.h1h_1 = this.w1f_1 - 1 | 0;
    var tmp1_elvis_lhs = this.g1h_1;
    var tmp;
    if (tmp1_elvis_lhs == null) {
      var tmp_0 = this.e1h_1.q1g_1;
      var tmp0_this = this;
      tmp0_this.w1f_1 = tmp0_this.w1f_1 - 1 | 0;
      var tmp_1 = tmp_0[tmp0_this.w1f_1];
      return (tmp_1 == null ? true : isObject(tmp_1)) ? tmp_1 : THROW_CCE();
    } else {
      tmp = tmp1_elvis_lhs;
    }
    var trieIterator = tmp;
    if (this.w1f_1 > trieIterator.x1f_1) {
      var tmp_2 = this.e1h_1.q1g_1;
      var tmp2_this = this;
      tmp2_this.w1f_1 = tmp2_this.w1f_1 - 1 | 0;
      var tmp_3 = tmp_2[tmp2_this.w1f_1 - trieIterator.x1f_1 | 0];
      return (tmp_3 == null ? true : isObject(tmp_3)) ? tmp_3 : THROW_CCE();
    }
    var tmp3_this = this;
    var tmp4 = tmp3_this.w1f_1;
    tmp3_this.w1f_1 = tmp4 - 1 | 0;
    return trieIterator.q();
  };
  PersistentVectorMutableIterator.prototype.f = function () {
    checkForComodification(this);
    this.y1f();
    this.h1h_1 = this.w1f_1;
    var tmp2_elvis_lhs = this.g1h_1;
    var tmp;
    if (tmp2_elvis_lhs == null) {
      var tmp_0 = this.e1h_1.q1g_1;
      var tmp0_this = this;
      var tmp1 = tmp0_this.w1f_1;
      tmp0_this.w1f_1 = tmp1 + 1 | 0;
      var tmp_1 = tmp_0[tmp1];
      return (tmp_1 == null ? true : isObject(tmp_1)) ? tmp_1 : THROW_CCE();
    } else {
      tmp = tmp2_elvis_lhs;
    }
    var trieIterator = tmp;
    if (trieIterator.e()) {
      var tmp3_this = this;
      var tmp4 = tmp3_this.w1f_1;
      tmp3_this.w1f_1 = tmp4 + 1 | 0;
      return trieIterator.f();
    }
    var tmp_2 = this.e1h_1.q1g_1;
    var tmp5_this = this;
    var tmp6 = tmp5_this.w1f_1;
    tmp5_this.w1f_1 = tmp6 + 1 | 0;
    var tmp_3 = tmp_2[tmp6 - trieIterator.x1f_1 | 0];
    return (tmp_3 == null ? true : isObject(tmp_3)) ? tmp_3 : THROW_CCE();
  };
  PersistentVectorMutableIterator.prototype.g3 = function () {
    checkForComodification(this);
    checkHasIterated(this);
    this.e1h_1.f3(this.h1h_1);
    if (this.h1h_1 < this.w1f_1)
      this.w1f_1 = this.h1h_1;
    reset(this);
  };
  PersistentVectorMutableIterator.$metadata$ = classMeta('PersistentVectorMutableIterator', [MutableListIterator], undefined, undefined, undefined, AbstractListIterator.prototype);
  function bufferOfSize($this, size) {
    var tmp$ret$0;
    // Inline function 'kotlin.arrayOfNulls' call
    tmp$ret$0 = fillArrayVal(Array(size), null);
    return tmp$ret$0;
  }
  function Companion_11() {
    Companion_instance_11 = this;
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.emptyArray' call
    tmp$ret$0 = [];
    tmp.j1h_1 = new SmallPersistentVector(tmp$ret$0);
  }
  Companion_11.$metadata$ = objectMeta('Companion');
  var Companion_instance_11;
  function Companion_getInstance_11() {
    if (Companion_instance_11 == null)
      new Companion_11();
    return Companion_instance_11;
  }
  function SmallPersistentVector(buffer) {
    Companion_getInstance_11();
    AbstractPersistentList.call(this);
    this.k1h_1 = buffer;
    assert_0(this.k1h_1.length <= get_MAX_BUFFER_SIZE());
  }
  SmallPersistentVector.prototype.g = function () {
    return this.k1h_1.length;
  };
  SmallPersistentVector.prototype.b = function (element) {
    if (this.g() < get_MAX_BUFFER_SIZE()) {
      var newBuffer = copyOf_0(this.k1h_1, this.g() + 1 | 0);
      newBuffer[this.g()] = element;
      return new SmallPersistentVector(newBuffer);
    }
    var tail = presizedBufferWith(element);
    return new PersistentVector(this.k1h_1, tail, this.g() + 1 | 0, 0);
  };
  SmallPersistentVector.prototype.h1 = function (elements) {
    if ((this.g() + elements.g() | 0) <= get_MAX_BUFFER_SIZE()) {
      var newBuffer = copyOf_0(this.k1h_1, this.g() + elements.g() | 0);
      var index = this.g();
      var tmp0_iterator = elements.d();
      while (tmp0_iterator.e()) {
        var element = tmp0_iterator.f();
        var tmp1 = index;
        index = tmp1 + 1 | 0;
        newBuffer[tmp1] = element;
      }
      return new SmallPersistentVector(newBuffer);
    }
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.external.kotlinx.collections.immutable.mutate' call
    var tmp$ret$0;
    // Inline function 'kotlin.apply' call
    var tmp0_apply = this.cy();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableList.SmallPersistentVector.addAll.<anonymous>' call
    tmp0_apply.h1(elements);
    tmp$ret$0 = tmp0_apply;
    tmp$ret$1 = tmp$ret$0.dy();
    return tmp$ret$1;
  };
  SmallPersistentVector.prototype.r1f = function (index, element) {
    ListImplementation_getInstance().r1(index, this.g());
    if (index === this.g()) {
      return this.b(element);
    }
    if (this.g() < get_MAX_BUFFER_SIZE()) {
      var newBuffer = bufferOfSize(this, this.g() + 1 | 0);
      var tmp$ret$0;
      // Inline function 'kotlin.collections.copyInto' call
      var tmp0_copyInto = this.k1h_1;
      arrayCopy(tmp0_copyInto, newBuffer, 0, 0, index);
      tmp$ret$0 = newBuffer;
      var tmp$ret$1;
      // Inline function 'kotlin.collections.copyInto' call
      var tmp1_copyInto = this.k1h_1;
      var tmp2_copyInto = index + 1 | 0;
      var tmp3_copyInto = this.g();
      arrayCopy(tmp1_copyInto, newBuffer, tmp2_copyInto, index, tmp3_copyInto);
      tmp$ret$1 = newBuffer;
      newBuffer[index] = element;
      return new SmallPersistentVector(newBuffer);
    }
    var tmp$ret$3;
    // Inline function 'kotlin.collections.copyOf' call
    var tmp4_copyOf = this.k1h_1;
    var tmp$ret$2;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$2 = tmp4_copyOf;
    tmp$ret$3 = tmp$ret$2.slice();
    var root = tmp$ret$3;
    var tmp$ret$4;
    // Inline function 'kotlin.collections.copyInto' call
    var tmp5_copyInto = this.k1h_1;
    var tmp6_copyInto = index + 1 | 0;
    var tmp7_copyInto = this.g() - 1 | 0;
    arrayCopy(tmp5_copyInto, root, tmp6_copyInto, index, tmp7_copyInto);
    tmp$ret$4 = root;
    root[index] = element;
    var tail = presizedBufferWith(this.k1h_1[get_MAX_BUFFER_SIZE_MINUS_ONE()]);
    return new PersistentVector(root, tail, this.g() + 1 | 0, 0);
  };
  SmallPersistentVector.prototype.f3 = function (index) {
    ListImplementation_getInstance().s1(index, this.g());
    if (this.g() === 1) {
      return Companion_getInstance_11().j1h_1;
    }
    var newBuffer = copyOf_0(this.k1h_1, this.g() - 1 | 0);
    var tmp$ret$0;
    // Inline function 'kotlin.collections.copyInto' call
    var tmp0_copyInto = this.k1h_1;
    var tmp1_copyInto = index + 1 | 0;
    var tmp2_copyInto = this.g();
    arrayCopy(tmp0_copyInto, newBuffer, index, tmp1_copyInto, tmp2_copyInto);
    tmp$ret$0 = newBuffer;
    return new SmallPersistentVector(newBuffer);
  };
  SmallPersistentVector.prototype.cy = function () {
    return new PersistentVectorBuilder(this, null, this.k1h_1, 0);
  };
  SmallPersistentVector.prototype.m = function (element) {
    return indexOf(this.k1h_1, element);
  };
  SmallPersistentVector.prototype.w1 = function (element) {
    return lastIndexOf(this.k1h_1, element);
  };
  SmallPersistentVector.prototype.n = function (index) {
    ListImplementation_getInstance().r1(index, this.g());
    var tmp = this.k1h_1;
    return new BufferIterator(isArray(tmp) ? tmp : THROW_CCE(), index, this.g());
  };
  SmallPersistentVector.prototype.h = function (index) {
    ListImplementation_getInstance().s1(index, this.g());
    var tmp = this.k1h_1[index];
    return (tmp == null ? true : isObject(tmp)) ? tmp : THROW_CCE();
  };
  SmallPersistentVector.prototype.m6 = function (index, element) {
    ListImplementation_getInstance().s1(index, this.g());
    var tmp$ret$1;
    // Inline function 'kotlin.collections.copyOf' call
    var tmp0_copyOf = this.k1h_1;
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = tmp0_copyOf;
    tmp$ret$1 = tmp$ret$0.slice();
    var newBuffer = tmp$ret$1;
    newBuffer[index] = element;
    return new SmallPersistentVector(newBuffer);
  };
  SmallPersistentVector.$metadata$ = classMeta('SmallPersistentVector', [ImmutableList], undefined, undefined, undefined, AbstractPersistentList.prototype);
  function fillPath($this, index, startLevel) {
    var shift = imul($this.z1g_1 - startLevel | 0, get_LOG_MAX_BUFFER_SIZE());
    var i = startLevel;
    while (i < $this.z1g_1) {
      var tmp = $this.a1h_1;
      var tmp_0 = i;
      var tmp_1 = $this.a1h_1[i - 1 | 0];
      tmp[tmp_0] = ((!(tmp_1 == null) ? isArray(tmp_1) : false) ? tmp_1 : THROW_CCE())[indexSegment(index, shift)];
      shift = shift - get_LOG_MAX_BUFFER_SIZE() | 0;
      i = i + 1 | 0;
    }
  }
  function fillPathIfNeeded($this, indexPredicate) {
    var shift = 0;
    while (indexSegment($this.w1f_1, shift) === indexPredicate) {
      shift = shift + get_LOG_MAX_BUFFER_SIZE() | 0;
    }
    if (shift > 0) {
      var level = ($this.z1g_1 - 1 | 0) - (shift / get_LOG_MAX_BUFFER_SIZE() | 0) | 0;
      fillPath($this, $this.w1f_1, level + 1 | 0);
    }
  }
  function elementAtCurrentIndex($this) {
    var leafBufferIndex = $this.w1f_1 & get_MAX_BUFFER_SIZE_MINUS_ONE();
    var tmp = $this.a1h_1[$this.z1g_1 - 1 | 0];
    return ((!(tmp == null) ? isArray(tmp) : false) ? tmp : THROW_CCE())[leafBufferIndex];
  }
  function TrieIterator(root, index, size, height) {
    AbstractListIterator.call(this, index, size);
    this.z1g_1 = height;
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp0_arrayOfNulls = this.z1g_1;
    tmp$ret$0 = fillArrayVal(Array(tmp0_arrayOfNulls), null);
    tmp.a1h_1 = tmp$ret$0;
    this.b1h_1 = index === size;
    this.a1h_1[0] = root;
    fillPath(this, index - (this.b1h_1 ? 1 : 0) | 0, 1);
  }
  TrieIterator.prototype.i1h = function (root, index, size, height) {
    this.w1f_1 = index;
    this.x1f_1 = size;
    this.z1g_1 = height;
    if (this.a1h_1.length < height) {
      var tmp = this;
      var tmp$ret$0;
      // Inline function 'kotlin.arrayOfNulls' call
      tmp$ret$0 = fillArrayVal(Array(height), null);
      tmp.a1h_1 = tmp$ret$0;
    }
    this.a1h_1[0] = root;
    this.b1h_1 = index === size;
    fillPath(this, index - (this.b1h_1 ? 1 : 0) | 0, 1);
  };
  TrieIterator.prototype.f = function () {
    if (!this.e()) {
      throw NoSuchElementException_init_$Create$();
    }
    var result = elementAtCurrentIndex(this);
    var tmp0_this = this;
    tmp0_this.w1f_1 = tmp0_this.w1f_1 + 1 | 0;
    if (this.w1f_1 === this.x1f_1) {
      this.b1h_1 = true;
      return result;
    }
    fillPathIfNeeded(this, 0);
    return result;
  };
  TrieIterator.prototype.q = function () {
    if (!this.o()) {
      throw NoSuchElementException_init_$Create$();
    }
    var tmp0_this = this;
    tmp0_this.w1f_1 = tmp0_this.w1f_1 - 1 | 0;
    if (this.b1h_1) {
      this.b1h_1 = false;
      return elementAtCurrentIndex(this);
    }
    fillPathIfNeeded(this, get_MAX_BUFFER_SIZE_MINUS_ONE());
    return elementAtCurrentIndex(this);
  };
  TrieIterator.$metadata$ = classMeta('TrieIterator', undefined, undefined, undefined, undefined, AbstractListIterator.prototype);
  function persistentVectorOf() {
    return Companion_getInstance_11().j1h_1;
  }
  function get_MAX_BUFFER_SIZE() {
    return MAX_BUFFER_SIZE;
  }
  var MAX_BUFFER_SIZE;
  function presizedBufferWith(element) {
    var tmp$ret$0;
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp0_arrayOfNulls = 32;
    tmp$ret$0 = fillArrayVal(Array(tmp0_arrayOfNulls), null);
    var buffer = tmp$ret$0;
    buffer[0] = element;
    return buffer;
  }
  function get_MAX_BUFFER_SIZE_MINUS_ONE() {
    return MAX_BUFFER_SIZE_MINUS_ONE;
  }
  var MAX_BUFFER_SIZE_MINUS_ONE;
  function rootSize_1(vectorSize) {
    return (vectorSize - 1 | 0) & -32;
  }
  function get_LOG_MAX_BUFFER_SIZE() {
    return LOG_MAX_BUFFER_SIZE;
  }
  var LOG_MAX_BUFFER_SIZE;
  function indexSegment(index, shift) {
    return index >> shift & 31;
  }
  function ObjectRef(value) {
    this.i1g_1 = value;
  }
  ObjectRef.$metadata$ = classMeta('ObjectRef');
  function get_MUTABLE_BUFFER_SIZE() {
    return MUTABLE_BUFFER_SIZE;
  }
  var MUTABLE_BUFFER_SIZE;
  function createEntries($this) {
    return new PersistentHashMapEntries($this);
  }
  function Companion_12() {
    Companion_instance_12 = this;
    this.s1f_1 = new PersistentHashMap(Companion_getInstance_13().l1h_1, 0);
  }
  Companion_12.prototype.t1f = function () {
    var tmp = this.s1f_1;
    return tmp instanceof PersistentHashMap ? tmp : THROW_CCE();
  };
  Companion_12.$metadata$ = objectMeta('Companion');
  var Companion_instance_12;
  function Companion_getInstance_12() {
    if (Companion_instance_12 == null)
      new Companion_12();
    return Companion_instance_12;
  }
  function PersistentHashMap(node, size) {
    Companion_getInstance_12();
    AbstractMap.call(this);
    this.o1h_1 = node;
    this.p1h_1 = size;
  }
  PersistentHashMap.prototype.g = function () {
    return this.p1h_1;
  };
  PersistentHashMap.prototype.m2 = function () {
    return new PersistentHashMapKeys(this);
  };
  PersistentHashMap.prototype.t = function () {
    return createEntries(this);
  };
  PersistentHashMap.prototype.h2 = function (key) {
    var tmp$ret$0;
    // Inline function 'kotlin.hashCode' call
    var tmp0_safe_receiver = key;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode_0(tmp0_safe_receiver);
    tmp$ret$0 = tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
    return this.o1h_1.u1h(tmp$ret$0, key, 0);
  };
  PersistentHashMap.prototype.l2 = function (key) {
    var tmp$ret$0;
    // Inline function 'kotlin.hashCode' call
    var tmp0_safe_receiver = key;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode_0(tmp0_safe_receiver);
    tmp$ret$0 = tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
    return this.o1h_1.v1h(tmp$ret$0, key, 0);
  };
  PersistentHashMap.prototype.a = function (key, value) {
    var tmp$ret$0;
    // Inline function 'kotlin.hashCode' call
    var tmp0_safe_receiver = key;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode_0(tmp0_safe_receiver);
    tmp$ret$0 = tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
    var tmp0_elvis_lhs = this.o1h_1.w1h(tmp$ret$0, key, value, 0);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return this;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var newNodeResult = tmp;
    return new PersistentHashMap(newNodeResult.x1h_1, this.p1h_1 + newNodeResult.y1h_1 | 0);
  };
  PersistentHashMap.prototype.z2 = function (key) {
    var tmp$ret$0;
    // Inline function 'kotlin.hashCode' call
    var tmp0_safe_receiver = key;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode_0(tmp0_safe_receiver);
    tmp$ret$0 = tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
    var newNode = this.o1h_1.z1h(tmp$ret$0, key, 0);
    if (this.o1h_1 === newNode) {
      return this;
    }
    if (newNode == null) {
      return Companion_getInstance_12().t1f();
    }
    return new PersistentHashMap(newNode, this.p1h_1 - 1 | 0);
  };
  PersistentHashMap.prototype.cy = function () {
    return new PersistentHashMapBuilder(this);
  };
  PersistentHashMap.$metadata$ = classMeta('PersistentHashMap', [PersistentMap], undefined, undefined, undefined, AbstractMap.prototype);
  function PersistentHashMapBuilder(map) {
    AbstractMutableMap.call(this);
    this.e1i_1 = map;
    this.f1i_1 = new MutabilityOwnership();
    this.g1i_1 = this.e1i_1.o1h_1;
    this.h1i_1 = null;
    this.i1i_1 = 0;
    this.j1i_1 = this.e1i_1.p1h_1;
  }
  PersistentHashMapBuilder.prototype.f1f = function (value) {
    this.j1i_1 = value;
    var tmp0_this = this;
    var tmp1 = tmp0_this.i1i_1;
    tmp0_this.i1i_1 = tmp1 + 1 | 0;
  };
  PersistentHashMapBuilder.prototype.g = function () {
    return this.j1i_1;
  };
  PersistentHashMapBuilder.prototype.dy = function () {
    var tmp = this;
    var tmp_0;
    if (this.g1i_1 === this.e1i_1.o1h_1) {
      tmp_0 = this.e1i_1;
    } else {
      this.f1i_1 = new MutabilityOwnership();
      tmp_0 = new PersistentHashMap(this.g1i_1, this.j1i_1);
    }
    tmp.e1i_1 = tmp_0;
    return this.e1i_1;
  };
  PersistentHashMapBuilder.prototype.t = function () {
    return new PersistentHashMapBuilderEntries(this);
  };
  PersistentHashMapBuilder.prototype.m2 = function () {
    return new PersistentHashMapBuilderKeys(this);
  };
  PersistentHashMapBuilder.prototype.x7 = function () {
    return new PersistentHashMapBuilderValues(this);
  };
  PersistentHashMapBuilder.prototype.h2 = function (key) {
    var tmp = this.g1i_1;
    var tmp$ret$0;
    // Inline function 'kotlin.hashCode' call
    var tmp0_safe_receiver = key;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode_0(tmp0_safe_receiver);
    tmp$ret$0 = tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
    return tmp.u1h(tmp$ret$0, key, 0);
  };
  PersistentHashMapBuilder.prototype.l2 = function (key) {
    var tmp = this.g1i_1;
    var tmp$ret$0;
    // Inline function 'kotlin.hashCode' call
    var tmp0_safe_receiver = key;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode_0(tmp0_safe_receiver);
    tmp$ret$0 = tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
    return tmp.v1h(tmp$ret$0, key, 0);
  };
  PersistentHashMapBuilder.prototype.a = function (key, value) {
    this.h1i_1 = null;
    var tmp = this;
    var tmp_0 = this.g1i_1;
    var tmp$ret$0;
    // Inline function 'kotlin.hashCode' call
    var tmp0_safe_receiver = key;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode_0(tmp0_safe_receiver);
    tmp$ret$0 = tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
    tmp.g1i_1 = tmp_0.k1i(tmp$ret$0, key, value, 0, this);
    return this.h1i_1;
  };
  PersistentHashMapBuilder.prototype.w7 = function (from) {
    var tmp1_elvis_lhs = from instanceof PersistentHashMap ? from : null;
    var tmp;
    if (tmp1_elvis_lhs == null) {
      var tmp0_safe_receiver = from instanceof PersistentHashMapBuilder ? from : null;
      tmp = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.dy();
    } else {
      tmp = tmp1_elvis_lhs;
    }
    var map = tmp;
    if (!(map == null)) {
      var intersectionCounter = DeltaCounter_init_$Create$(0, 1, null);
      var oldSize = this.j1i_1;
      var tmp_0 = this;
      var tmp_1 = this.g1i_1;
      var tmp_2 = map.o1h_1;
      tmp_0.g1i_1 = tmp_1.l1i(tmp_2 instanceof TrieNode ? tmp_2 : THROW_CCE(), 0, intersectionCounter, this);
      var newSize = (oldSize + map.p1h_1 | 0) - intersectionCounter.m1i_1 | 0;
      if (!(oldSize === newSize)) {
        this.f1f(newSize);
      }
    } else {
      AbstractMutableMap.prototype.w7.call(this, from);
    }
  };
  PersistentHashMapBuilder.prototype.z2 = function (key) {
    this.h1i_1 = null;
    var tmp = this;
    var tmp_0 = this.g1i_1;
    var tmp$ret$0;
    // Inline function 'kotlin.hashCode' call
    var tmp0_safe_receiver = key;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode_0(tmp0_safe_receiver);
    tmp$ret$0 = tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
    var tmp0_elvis_lhs = tmp_0.n1i(tmp$ret$0, key, 0, this);
    var tmp_1;
    if (tmp0_elvis_lhs == null) {
      var tmp_2 = Companion_getInstance_13().l1h_1;
      tmp_1 = tmp_2 instanceof TrieNode ? tmp_2 : THROW_CCE();
    } else {
      tmp_1 = tmp0_elvis_lhs;
    }
    tmp.g1i_1 = tmp_1;
    return this.h1i_1;
  };
  PersistentHashMapBuilder.prototype.o1i = function (key, value) {
    var oldSize = this.j1i_1;
    var tmp = this;
    var tmp_0 = this.g1i_1;
    var tmp$ret$0;
    // Inline function 'kotlin.hashCode' call
    var tmp0_safe_receiver = key;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode_0(tmp0_safe_receiver);
    tmp$ret$0 = tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
    var tmp0_elvis_lhs = tmp_0.p1i(tmp$ret$0, key, value, 0, this);
    var tmp_1;
    if (tmp0_elvis_lhs == null) {
      var tmp_2 = Companion_getInstance_13().l1h_1;
      tmp_1 = tmp_2 instanceof TrieNode ? tmp_2 : THROW_CCE();
    } else {
      tmp_1 = tmp0_elvis_lhs;
    }
    tmp.g1i_1 = tmp_1;
    return !(oldSize === this.j1i_1);
  };
  PersistentHashMapBuilder.prototype.q6 = function () {
    var tmp = this;
    var tmp_0 = Companion_getInstance_13().l1h_1;
    tmp.g1i_1 = tmp_0 instanceof TrieNode ? tmp_0 : THROW_CCE();
    this.f1f(0);
  };
  PersistentHashMapBuilder.$metadata$ = classMeta('PersistentHashMapBuilder', [Builder_1], undefined, undefined, undefined, AbstractMutableMap.prototype);
  function PersistentHashMapBuilderEntriesIterator(builder) {
    var tmp = this;
    var tmp_0 = 0;
    var tmp_1 = get_TRIE_MAX_HEIGHT() + 1 | 0;
    var tmp$ret$0;
    // Inline function 'kotlin.arrayOfNulls' call
    tmp$ret$0 = fillArrayVal(Array(tmp_1), null);
    var tmp_2 = tmp$ret$0;
    while (tmp_0 < tmp_1) {
      var tmp_3 = tmp_0;
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilderEntriesIterator.base.<anonymous>' call
      tmp$ret$1 = new TrieNodeMutableEntriesIterator(this);
      tmp_2[tmp_3] = tmp$ret$1;
      tmp_0 = tmp_0 + 1 | 0;
    }
    tmp.q1i_1 = new PersistentHashMapBuilderBaseIterator(builder, tmp_2);
  }
  PersistentHashMapBuilderEntriesIterator.prototype.e = function () {
    return this.q1i_1.e();
  };
  PersistentHashMapBuilderEntriesIterator.prototype.f = function () {
    return this.q1i_1.f();
  };
  PersistentHashMapBuilderEntriesIterator.prototype.g3 = function () {
    return this.q1i_1.g3();
  };
  PersistentHashMapBuilderEntriesIterator.prototype.b1j = function (key, newValue) {
    return this.q1i_1.b1j(key, newValue);
  };
  PersistentHashMapBuilderEntriesIterator.$metadata$ = classMeta('PersistentHashMapBuilderEntriesIterator', [MutableIterator]);
  function PersistentHashMapBuilderKeysIterator(builder) {
    var tmp = 0;
    var tmp_0 = get_TRIE_MAX_HEIGHT() + 1 | 0;
    var tmp$ret$0;
    // Inline function 'kotlin.arrayOfNulls' call
    tmp$ret$0 = fillArrayVal(Array(tmp_0), null);
    var tmp_1 = tmp$ret$0;
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilderKeysIterator.<init>.<anonymous>' call
      tmp$ret$1 = new TrieNodeKeysIterator();
      tmp_1[tmp_2] = tmp$ret$1;
      tmp = tmp + 1 | 0;
    }
    PersistentHashMapBuilderBaseIterator.call(this, builder, tmp_1);
  }
  PersistentHashMapBuilderKeysIterator.$metadata$ = classMeta('PersistentHashMapBuilderKeysIterator', undefined, undefined, undefined, undefined, PersistentHashMapBuilderBaseIterator.prototype);
  function PersistentHashMapBuilderValuesIterator(builder) {
    var tmp = 0;
    var tmp_0 = get_TRIE_MAX_HEIGHT() + 1 | 0;
    var tmp$ret$0;
    // Inline function 'kotlin.arrayOfNulls' call
    tmp$ret$0 = fillArrayVal(Array(tmp_0), null);
    var tmp_1 = tmp$ret$0;
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilderValuesIterator.<init>.<anonymous>' call
      tmp$ret$1 = new TrieNodeValuesIterator();
      tmp_1[tmp_2] = tmp$ret$1;
      tmp = tmp + 1 | 0;
    }
    PersistentHashMapBuilderBaseIterator.call(this, builder, tmp_1);
  }
  PersistentHashMapBuilderValuesIterator.$metadata$ = classMeta('PersistentHashMapBuilderValuesIterator', undefined, undefined, undefined, undefined, PersistentHashMapBuilderBaseIterator.prototype);
  function resetPath($this, keyHash, node, key, pathIndex) {
    var shift = imul(pathIndex, get_LOG_MAX_BRANCHING_FACTOR());
    if (shift > get_MAX_SHIFT()) {
      $this.r1i_1[pathIndex].g1j(node.t1h_1, node.t1h_1.length, 0);
      while (!equals_0($this.r1i_1[pathIndex].c1j(), key)) {
        $this.r1i_1[pathIndex].h1j();
      }
      $this.s1i_1 = pathIndex;
      return Unit_getInstance();
    }
    var keyPositionMask = 1 << indexSegment_0(keyHash, shift);
    if (node.k1j(keyPositionMask)) {
      var keyIndex = node.i1j(keyPositionMask);
      $this.r1i_1[pathIndex].g1j(node.t1h_1, imul(get_ENTRY_SIZE(), node.j1j()), keyIndex);
      $this.s1i_1 = pathIndex;
      return Unit_getInstance();
    }
    var nodeIndex = node.l1j(keyPositionMask);
    var targetNode = node.m1j(nodeIndex);
    $this.r1i_1[pathIndex].g1j(node.t1h_1, imul(get_ENTRY_SIZE(), node.j1j()), nodeIndex);
    resetPath($this, keyHash, targetNode, key, pathIndex + 1 | 0);
  }
  function checkNextWasInvoked($this) {
    if (!$this.z1i_1)
      throw IllegalStateException_init_$Create$();
  }
  function checkForComodification_0($this) {
    if (!($this.x1i_1.i1i_1 === $this.a1j_1))
      throw ConcurrentModificationException_init_$Create$();
  }
  function PersistentHashMapBuilderBaseIterator(builder, path) {
    PersistentHashMapBaseIterator.call(this, builder.g1i_1, path);
    this.x1i_1 = builder;
    this.y1i_1 = null;
    this.z1i_1 = false;
    this.a1j_1 = this.x1i_1.i1i_1;
  }
  PersistentHashMapBuilderBaseIterator.prototype.f = function () {
    checkForComodification_0(this);
    this.y1i_1 = this.c1j();
    this.z1i_1 = true;
    return PersistentHashMapBaseIterator.prototype.f.call(this);
  };
  PersistentHashMapBuilderBaseIterator.prototype.g3 = function () {
    checkNextWasInvoked(this);
    if (this.e()) {
      var currentKey = this.c1j();
      var tmp$ret$0;
      // Inline function 'kotlin.collections.remove' call
      var tmp0_remove = this.x1i_1;
      var tmp1_remove = this.y1i_1;
      tmp$ret$0 = (isInterface(tmp0_remove, MutableMap) ? tmp0_remove : THROW_CCE()).z2(tmp1_remove);
      var tmp$ret$1;
      // Inline function 'kotlin.hashCode' call
      var tmp0_safe_receiver = currentKey;
      var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode_0(tmp0_safe_receiver);
      tmp$ret$1 = tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
      resetPath(this, tmp$ret$1, this.x1i_1.g1i_1, currentKey, 0);
    } else {
      var tmp$ret$2;
      // Inline function 'kotlin.collections.remove' call
      var tmp2_remove = this.x1i_1;
      var tmp3_remove = this.y1i_1;
      tmp$ret$2 = (isInterface(tmp2_remove, MutableMap) ? tmp2_remove : THROW_CCE()).z2(tmp3_remove);
    }
    this.y1i_1 = null;
    this.z1i_1 = false;
    this.a1j_1 = this.x1i_1.i1i_1;
  };
  PersistentHashMapBuilderBaseIterator.prototype.b1j = function (key, newValue) {
    if (!this.x1i_1.h2(key))
      return Unit_getInstance();
    if (this.e()) {
      var currentKey = this.c1j();
      // Inline function 'kotlin.collections.set' call
      var tmp0_set = this.x1i_1;
      tmp0_set.a(key, newValue);
      var tmp$ret$0;
      // Inline function 'kotlin.hashCode' call
      var tmp0_safe_receiver = currentKey;
      var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode_0(tmp0_safe_receiver);
      tmp$ret$0 = tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
      resetPath(this, tmp$ret$0, this.x1i_1.g1i_1, currentKey, 0);
    } else {
      // Inline function 'kotlin.collections.set' call
      var tmp1_set = this.x1i_1;
      tmp1_set.a(key, newValue);
    }
    this.a1j_1 = this.x1i_1.i1i_1;
  };
  PersistentHashMapBuilderBaseIterator.$metadata$ = classMeta('PersistentHashMapBuilderBaseIterator', [MutableIterator], undefined, undefined, undefined, PersistentHashMapBaseIterator.prototype);
  function TrieNodeMutableEntriesIterator(parentIterator) {
    TrieNodeBaseIterator.call(this);
    this.q1j_1 = parentIterator;
  }
  TrieNodeMutableEntriesIterator.prototype.f = function () {
    assert_0(this.r1j());
    var tmp0_this = this;
    tmp0_this.f1j_1 = tmp0_this.f1j_1 + 2 | 0;
    var tmp = this.d1j_1[this.f1j_1 - 2 | 0];
    var tmp_0 = (tmp == null ? true : isObject(tmp)) ? tmp : THROW_CCE();
    var tmp_1 = this.d1j_1[this.f1j_1 - 1 | 0];
    return new MutableMapEntry(this.q1j_1, tmp_0, (tmp_1 == null ? true : isObject(tmp_1)) ? tmp_1 : THROW_CCE());
  };
  TrieNodeMutableEntriesIterator.$metadata$ = classMeta('TrieNodeMutableEntriesIterator', undefined, undefined, undefined, undefined, TrieNodeBaseIterator.prototype);
  function MutableMapEntry(parentIterator, key, value) {
    MapEntry.call(this, key, value);
    this.y1j_1 = parentIterator;
    this.z1j_1 = value;
  }
  MutableMapEntry.prototype.a2 = function () {
    return this.z1j_1;
  };
  MutableMapEntry.prototype.k7 = function (newValue) {
    var result = this.z1j_1;
    this.z1j_1 = newValue;
    this.y1j_1.b1j(this.y1(), newValue);
    return result;
  };
  MutableMapEntry.$metadata$ = classMeta('MutableMapEntry', [MutableEntry], undefined, undefined, undefined, MapEntry.prototype);
  function PersistentHashMapBuilderEntries(builder) {
    AbstractMapBuilderEntries.call(this);
    this.c1k_1 = builder;
  }
  PersistentHashMapBuilderEntries.prototype.d8 = function (element) {
    throw UnsupportedOperationException_init_$Create$();
  };
  PersistentHashMapBuilderEntries.prototype.b = function (element) {
    return this.d8((!(element == null) ? isInterface(element, MutableEntry) : false) ? element : THROW_CCE());
  };
  PersistentHashMapBuilderEntries.prototype.q6 = function () {
    this.c1k_1.q6();
  };
  PersistentHashMapBuilderEntries.prototype.d = function () {
    return new PersistentHashMapBuilderEntriesIterator(this.c1k_1);
  };
  PersistentHashMapBuilderEntries.prototype.m7 = function (element) {
    return this.c1k_1.o1i(element.y1(), element.a2());
  };
  PersistentHashMapBuilderEntries.prototype.g = function () {
    return this.c1k_1.j1i_1;
  };
  PersistentHashMapBuilderEntries.prototype.l7 = function (element) {
    var tmp0_safe_receiver = this.c1k_1.l2(element.y1());
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilderEntries.containsEntry.<anonymous>' call
      tmp$ret$0 = equals_0(tmp0_safe_receiver, element.a2());
      tmp$ret$1 = tmp$ret$0;
      tmp = tmp$ret$1;
    }
    var tmp1_elvis_lhs = tmp;
    return tmp1_elvis_lhs == null ? element.a2() == null ? this.c1k_1.h2(element.y1()) : false : tmp1_elvis_lhs;
  };
  PersistentHashMapBuilderEntries.$metadata$ = classMeta('PersistentHashMapBuilderEntries', undefined, undefined, undefined, undefined, AbstractMapBuilderEntries.prototype);
  function PersistentHashMapBuilderKeys(builder) {
    AbstractMutableSet.call(this);
    this.d1k_1 = builder;
  }
  PersistentHashMapBuilderKeys.prototype.o7 = function (element) {
    throw UnsupportedOperationException_init_$Create$();
  };
  PersistentHashMapBuilderKeys.prototype.b = function (element) {
    return this.o7((element == null ? true : isObject(element)) ? element : THROW_CCE());
  };
  PersistentHashMapBuilderKeys.prototype.q6 = function () {
    this.d1k_1.q6();
  };
  PersistentHashMapBuilderKeys.prototype.d = function () {
    return new PersistentHashMapBuilderKeysIterator(this.d1k_1);
  };
  PersistentHashMapBuilderKeys.prototype.z2 = function (element) {
    if (this.d1k_1.h2(element)) {
      this.d1k_1.z2(element);
      return true;
    }
    return false;
  };
  PersistentHashMapBuilderKeys.prototype.n6 = function (element) {
    if (!(element == null ? true : isObject(element)))
      return false;
    return this.z2((element == null ? true : isObject(element)) ? element : THROW_CCE());
  };
  PersistentHashMapBuilderKeys.prototype.g = function () {
    return this.d1k_1.j1i_1;
  };
  PersistentHashMapBuilderKeys.prototype.e2 = function (element) {
    return this.d1k_1.h2(element);
  };
  PersistentHashMapBuilderKeys.prototype.j = function (element) {
    if (!(element == null ? true : isObject(element)))
      return false;
    return this.e2((element == null ? true : isObject(element)) ? element : THROW_CCE());
  };
  PersistentHashMapBuilderKeys.$metadata$ = classMeta('PersistentHashMapBuilderKeys', [MutableSet], undefined, undefined, undefined, AbstractMutableSet.prototype);
  function PersistentHashMapBuilderValues(builder) {
    AbstractMutableCollection.call(this);
    this.e1k_1 = builder;
  }
  PersistentHashMapBuilderValues.prototype.g = function () {
    return this.e1k_1.j1i_1;
  };
  PersistentHashMapBuilderValues.prototype.v7 = function (element) {
    return this.e1k_1.j2(element);
  };
  PersistentHashMapBuilderValues.prototype.j = function (element) {
    if (!(element == null ? true : isObject(element)))
      return false;
    return this.v7((element == null ? true : isObject(element)) ? element : THROW_CCE());
  };
  PersistentHashMapBuilderValues.prototype.u7 = function (element) {
    throw UnsupportedOperationException_init_$Create$();
  };
  PersistentHashMapBuilderValues.prototype.b = function (element) {
    return this.u7((element == null ? true : isObject(element)) ? element : THROW_CCE());
  };
  PersistentHashMapBuilderValues.prototype.d = function () {
    return new PersistentHashMapBuilderValuesIterator(this.e1k_1);
  };
  PersistentHashMapBuilderValues.$metadata$ = classMeta('PersistentHashMapBuilderValues', [MutableCollection], undefined, undefined, undefined, AbstractMutableCollection.prototype);
  function AbstractMapBuilderEntries() {
    AbstractMutableSet.call(this);
  }
  AbstractMapBuilderEntries.prototype.j = function (element) {
    var tmp = isObject(element) ? element : null;
    if (!(!(tmp == null) ? isInterface(tmp, Entry) : false))
      return false;
    return this.l7(element);
  };
  AbstractMapBuilderEntries.prototype.n6 = function (element) {
    var tmp = isObject(element) ? element : null;
    if (!(!(tmp == null) ? isInterface(tmp, Entry) : false))
      return false;
    return this.m7(element);
  };
  AbstractMapBuilderEntries.$metadata$ = classMeta('AbstractMapBuilderEntries', undefined, undefined, undefined, undefined, AbstractMutableSet.prototype);
  function PersistentHashMapKeysIterator(node) {
    var tmp = 0;
    var tmp_0 = 8;
    var tmp$ret$0;
    // Inline function 'kotlin.arrayOfNulls' call
    tmp$ret$0 = fillArrayVal(Array(tmp_0), null);
    var tmp_1 = tmp$ret$0;
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapKeysIterator.<init>.<anonymous>' call
      tmp$ret$1 = new TrieNodeKeysIterator();
      tmp_1[tmp_2] = tmp$ret$1;
      tmp = tmp + 1 | 0;
    }
    PersistentHashMapBaseIterator.call(this, node, tmp_1);
  }
  PersistentHashMapKeysIterator.$metadata$ = classMeta('PersistentHashMapKeysIterator', undefined, undefined, undefined, undefined, PersistentHashMapBaseIterator.prototype);
  function PersistentHashMapEntriesIterator(node) {
    var tmp = 0;
    var tmp_0 = 8;
    var tmp$ret$0;
    // Inline function 'kotlin.arrayOfNulls' call
    tmp$ret$0 = fillArrayVal(Array(tmp_0), null);
    var tmp_1 = tmp$ret$0;
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapEntriesIterator.<init>.<anonymous>' call
      tmp$ret$1 = new TrieNodeEntriesIterator();
      tmp_1[tmp_2] = tmp$ret$1;
      tmp = tmp + 1 | 0;
    }
    PersistentHashMapBaseIterator.call(this, node, tmp_1);
  }
  PersistentHashMapEntriesIterator.$metadata$ = classMeta('PersistentHashMapEntriesIterator', undefined, undefined, undefined, undefined, PersistentHashMapBaseIterator.prototype);
  function TrieNodeBaseIterator() {
    this.d1j_1 = Companion_getInstance_13().l1h_1.t1h_1;
    this.e1j_1 = 0;
    this.f1j_1 = 0;
  }
  TrieNodeBaseIterator.prototype.g1j = function (buffer, dataSize, index) {
    this.d1j_1 = buffer;
    this.e1j_1 = dataSize;
    this.f1j_1 = index;
  };
  TrieNodeBaseIterator.prototype.s1j = function (buffer, dataSize) {
    this.g1j(buffer, dataSize, 0);
  };
  TrieNodeBaseIterator.prototype.r1j = function () {
    return this.f1j_1 < this.e1j_1;
  };
  TrieNodeBaseIterator.prototype.c1j = function () {
    assert_0(this.r1j());
    var tmp = this.d1j_1[this.f1j_1];
    return (tmp == null ? true : isObject(tmp)) ? tmp : THROW_CCE();
  };
  TrieNodeBaseIterator.prototype.h1j = function () {
    assert_0(this.r1j());
    var tmp0_this = this;
    tmp0_this.f1j_1 = tmp0_this.f1j_1 + 2 | 0;
  };
  TrieNodeBaseIterator.prototype.t1j = function () {
    assert_0(this.f1j_1 >= this.e1j_1);
    return this.f1j_1 < this.d1j_1.length;
  };
  TrieNodeBaseIterator.prototype.u1j = function () {
    assert_0(this.t1j());
    var tmp = this.d1j_1[this.f1j_1];
    return tmp instanceof TrieNode ? tmp : THROW_CCE();
  };
  TrieNodeBaseIterator.prototype.v1j = function () {
    assert_0(this.t1j());
    var tmp0_this = this;
    var tmp1 = tmp0_this.f1j_1;
    tmp0_this.f1j_1 = tmp1 + 1 | 0;
  };
  TrieNodeBaseIterator.prototype.e = function () {
    return this.r1j();
  };
  TrieNodeBaseIterator.$metadata$ = classMeta('TrieNodeBaseIterator', [Iterator]);
  function get_TRIE_MAX_HEIGHT() {
    return TRIE_MAX_HEIGHT;
  }
  var TRIE_MAX_HEIGHT;
  function TrieNodeKeysIterator() {
    TrieNodeBaseIterator.call(this);
  }
  TrieNodeKeysIterator.prototype.f = function () {
    assert_0(this.r1j());
    var tmp0_this = this;
    tmp0_this.f1j_1 = tmp0_this.f1j_1 + 2 | 0;
    var tmp = this.d1j_1[this.f1j_1 - 2 | 0];
    return (tmp == null ? true : isObject(tmp)) ? tmp : THROW_CCE();
  };
  TrieNodeKeysIterator.$metadata$ = classMeta('TrieNodeKeysIterator', undefined, undefined, undefined, undefined, TrieNodeBaseIterator.prototype);
  function TrieNodeValuesIterator() {
    TrieNodeBaseIterator.call(this);
  }
  TrieNodeValuesIterator.prototype.f = function () {
    assert_0(this.r1j());
    var tmp0_this = this;
    tmp0_this.f1j_1 = tmp0_this.f1j_1 + 2 | 0;
    var tmp = this.d1j_1[this.f1j_1 - 1 | 0];
    return (tmp == null ? true : isObject(tmp)) ? tmp : THROW_CCE();
  };
  TrieNodeValuesIterator.$metadata$ = classMeta('TrieNodeValuesIterator', undefined, undefined, undefined, undefined, TrieNodeBaseIterator.prototype);
  function moveToNextNodeWithData($this, pathIndex) {
    if ($this.r1i_1[pathIndex].r1j()) {
      return pathIndex;
    }
    if ($this.r1i_1[pathIndex].t1j()) {
      var node = $this.r1i_1[pathIndex].u1j();
      if (pathIndex === 6) {
        $this.r1i_1[pathIndex + 1 | 0].s1j(node.t1h_1, node.t1h_1.length);
      } else {
        $this.r1i_1[pathIndex + 1 | 0].s1j(node.t1h_1, imul(get_ENTRY_SIZE(), node.j1j()));
      }
      return moveToNextNodeWithData($this, pathIndex + 1 | 0);
    }
    return -1;
  }
  function ensureNextEntryIsReady($this) {
    if ($this.r1i_1[$this.s1i_1].r1j()) {
      return Unit_getInstance();
    }
    var inductionVariable = $this.s1i_1;
    if (0 <= inductionVariable)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + -1 | 0;
        var result = moveToNextNodeWithData($this, i);
        if (result === -1 ? $this.r1i_1[i].t1j() : false) {
          $this.r1i_1[i].v1j();
          result = moveToNextNodeWithData($this, i);
        }
        if (!(result === -1)) {
          $this.s1i_1 = result;
          return Unit_getInstance();
        }
        if (i > 0) {
          $this.r1i_1[i - 1 | 0].v1j();
        }
        $this.r1i_1[i].s1j(Companion_getInstance_13().l1h_1.t1h_1, 0);
      }
       while (0 <= inductionVariable);
    $this.t1i_1 = false;
  }
  function checkHasNext($this) {
    if (!$this.e())
      throw NoSuchElementException_init_$Create$();
  }
  function PersistentHashMapBaseIterator(node, path) {
    this.r1i_1 = path;
    this.s1i_1 = 0;
    this.t1i_1 = true;
    this.r1i_1[0].s1j(node.t1h_1, imul(get_ENTRY_SIZE(), node.j1j()));
    this.s1i_1 = 0;
    ensureNextEntryIsReady(this);
  }
  PersistentHashMapBaseIterator.prototype.c1j = function () {
    checkHasNext(this);
    return this.r1i_1[this.s1i_1].c1j();
  };
  PersistentHashMapBaseIterator.prototype.e = function () {
    return this.t1i_1;
  };
  PersistentHashMapBaseIterator.prototype.f = function () {
    checkHasNext(this);
    var result = this.r1i_1[this.s1i_1].f();
    ensureNextEntryIsReady(this);
    return result;
  };
  PersistentHashMapBaseIterator.$metadata$ = classMeta('PersistentHashMapBaseIterator', [Iterator]);
  function MapEntry(key, value) {
    this.a1k_1 = key;
    this.b1k_1 = value;
  }
  MapEntry.prototype.y1 = function () {
    return this.a1k_1;
  };
  MapEntry.prototype.a2 = function () {
    return this.b1k_1;
  };
  MapEntry.prototype.hashCode = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.hashCode' call
    var tmp0_hashCode = this.y1();
    var tmp0_safe_receiver = tmp0_hashCode;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode_0(tmp0_safe_receiver);
    tmp$ret$0 = tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
    var tmp = tmp$ret$0;
    var tmp$ret$1;
    // Inline function 'kotlin.hashCode' call
    var tmp1_hashCode = this.a2();
    var tmp0_safe_receiver_0 = tmp1_hashCode;
    var tmp1_elvis_lhs_0 = tmp0_safe_receiver_0 == null ? null : hashCode_0(tmp0_safe_receiver_0);
    tmp$ret$1 = tmp1_elvis_lhs_0 == null ? 0 : tmp1_elvis_lhs_0;
    return tmp ^ tmp$ret$1;
  };
  MapEntry.prototype.equals = function (other) {
    var tmp0_safe_receiver = (!(other == null) ? isInterface(other, Entry) : false) ? other : null;
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.MapEntry.equals.<anonymous>' call
      tmp$ret$0 = equals_0(tmp0_safe_receiver.y1(), this.y1()) ? equals_0(tmp0_safe_receiver.a2(), this.a2()) : false;
      tmp$ret$1 = tmp$ret$0;
      tmp = tmp$ret$1;
    }
    var tmp1_elvis_lhs = tmp;
    return tmp1_elvis_lhs == null ? false : tmp1_elvis_lhs;
  };
  MapEntry.prototype.toString = function () {
    return toString_1(this.y1()) + '=' + toString_1(this.a2());
  };
  MapEntry.$metadata$ = classMeta('MapEntry', [Entry]);
  function TrieNodeEntriesIterator() {
    TrieNodeBaseIterator.call(this);
  }
  TrieNodeEntriesIterator.prototype.f = function () {
    assert_0(this.r1j());
    var tmp0_this = this;
    tmp0_this.f1j_1 = tmp0_this.f1j_1 + 2 | 0;
    var tmp = this.d1j_1[this.f1j_1 - 2 | 0];
    var tmp_0 = (tmp == null ? true : isObject(tmp)) ? tmp : THROW_CCE();
    var tmp_1 = this.d1j_1[this.f1j_1 - 1 | 0];
    return new MapEntry(tmp_0, (tmp_1 == null ? true : isObject(tmp_1)) ? tmp_1 : THROW_CCE());
  };
  TrieNodeEntriesIterator.$metadata$ = classMeta('TrieNodeEntriesIterator', undefined, undefined, undefined, undefined, TrieNodeBaseIterator.prototype);
  function PersistentHashMapKeys(map) {
    AbstractSet.call(this);
    this.o1k_1 = map;
  }
  PersistentHashMapKeys.prototype.g = function () {
    return this.o1k_1.p1h_1;
  };
  PersistentHashMapKeys.prototype.e2 = function (element) {
    return this.o1k_1.h2(element);
  };
  PersistentHashMapKeys.prototype.j = function (element) {
    if (!(element == null ? true : isObject(element)))
      return false;
    return this.e2((element == null ? true : isObject(element)) ? element : THROW_CCE());
  };
  PersistentHashMapKeys.prototype.d = function () {
    return new PersistentHashMapKeysIterator(this.o1k_1.o1h_1);
  };
  PersistentHashMapKeys.$metadata$ = classMeta('PersistentHashMapKeys', [ImmutableSet], undefined, undefined, undefined, AbstractSet.prototype);
  function PersistentHashMapEntries(map) {
    AbstractSet.call(this);
    this.p1k_1 = map;
  }
  PersistentHashMapEntries.prototype.g = function () {
    return this.p1k_1.p1h_1;
  };
  PersistentHashMapEntries.prototype.q1k = function (element) {
    var tmp = isObject(element) ? element : THROW_CCE();
    if (!(!(tmp == null) ? isInterface(tmp, Entry) : false))
      return false;
    var tmp0_safe_receiver = this.p1k_1.l2(element.y1());
    var tmp_0;
    if (tmp0_safe_receiver == null) {
      tmp_0 = null;
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapEntries.contains.<anonymous>' call
      tmp$ret$0 = equals_0(tmp0_safe_receiver, element.a2());
      tmp$ret$1 = tmp$ret$0;
      tmp_0 = tmp$ret$1;
    }
    var tmp1_elvis_lhs = tmp_0;
    return tmp1_elvis_lhs == null ? element.a2() == null ? this.p1k_1.h2(element.y1()) : false : tmp1_elvis_lhs;
  };
  PersistentHashMapEntries.prototype.j = function (element) {
    if (!(!(element == null) ? isInterface(element, Entry) : false))
      return false;
    return this.q1k((!(element == null) ? isInterface(element, Entry) : false) ? element : THROW_CCE());
  };
  PersistentHashMapEntries.prototype.d = function () {
    return new PersistentHashMapEntriesIterator(this.p1k_1.o1h_1);
  };
  PersistentHashMapEntries.$metadata$ = classMeta('PersistentHashMapEntries', [ImmutableSet], undefined, undefined, undefined, AbstractSet.prototype);
  function TrieNode_init_$Init$(dataMap, nodeMap, buffer, $this) {
    TrieNode.call($this, dataMap, nodeMap, buffer, null);
    return $this;
  }
  function TrieNode_init_$Create$(dataMap, nodeMap, buffer) {
    return TrieNode_init_$Init$(dataMap, nodeMap, buffer, Object.create(TrieNode.prototype));
  }
  function ModificationResult(node, sizeDelta) {
    this.x1h_1 = node;
    this.y1h_1 = sizeDelta;
  }
  ModificationResult.prototype.r1k = function (_set____db54di) {
    this.x1h_1 = _set____db54di;
  };
  ModificationResult.prototype.s1k = function () {
    return this.x1h_1;
  };
  ModificationResult.prototype.t1k = function (operation) {
    var tmp$ret$0;
    // Inline function 'kotlin.apply' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.ModificationResult.replaceNode.<anonymous>' call
    this.x1h_1 = operation(this.x1h_1);
    tmp$ret$0 = this;
    return tmp$ret$0;
  };
  ModificationResult.$metadata$ = classMeta('ModificationResult');
  function asInsertResult($this) {
    return new ModificationResult($this, 1);
  }
  function asUpdateResult($this) {
    return new ModificationResult($this, 0);
  }
  function hasNodeAt($this, positionMask) {
    return !(($this.r1h_1 & positionMask) === 0);
  }
  function keyAtIndex($this, keyIndex) {
    var tmp = $this.t1h_1[keyIndex];
    return (tmp == null ? true : isObject(tmp)) ? tmp : THROW_CCE();
  }
  function valueAtKeyIndex($this, keyIndex) {
    var tmp = $this.t1h_1[keyIndex + 1 | 0];
    return (tmp == null ? true : isObject(tmp)) ? tmp : THROW_CCE();
  }
  function insertEntryAt($this, positionMask, key, value) {
    var keyIndex = $this.i1j(positionMask);
    var newBuffer = insertEntryAtIndex($this.t1h_1, keyIndex, key, value);
    return TrieNode_init_$Create$($this.q1h_1 | positionMask, $this.r1h_1, newBuffer);
  }
  function mutableInsertEntryAt($this, positionMask, key, value, owner) {
    var keyIndex = $this.i1j(positionMask);
    if ($this.s1h_1 === owner) {
      $this.t1h_1 = insertEntryAtIndex($this.t1h_1, keyIndex, key, value);
      $this.q1h_1 = $this.q1h_1 | positionMask;
      return $this;
    }
    var newBuffer = insertEntryAtIndex($this.t1h_1, keyIndex, key, value);
    return new TrieNode($this.q1h_1 | positionMask, $this.r1h_1, newBuffer, owner);
  }
  function updateValueAtIndex($this, keyIndex, value) {
    var tmp$ret$1;
    // Inline function 'kotlin.collections.copyOf' call
    var tmp0_copyOf = $this.t1h_1;
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = tmp0_copyOf;
    tmp$ret$1 = tmp$ret$0.slice();
    var newBuffer = tmp$ret$1;
    newBuffer[keyIndex + 1 | 0] = value;
    return TrieNode_init_$Create$($this.q1h_1, $this.r1h_1, newBuffer);
  }
  function mutableUpdateValueAtIndex($this, keyIndex, value, mutator) {
    if ($this.s1h_1 === mutator.f1i_1) {
      $this.t1h_1[keyIndex + 1 | 0] = value;
      return $this;
    }
    var tmp0_this = mutator;
    var tmp1 = tmp0_this.i1i_1;
    tmp0_this.i1i_1 = tmp1 + 1 | 0;
    var tmp$ret$1;
    // Inline function 'kotlin.collections.copyOf' call
    var tmp0_copyOf = $this.t1h_1;
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = tmp0_copyOf;
    tmp$ret$1 = tmp$ret$0.slice();
    var newBuffer = tmp$ret$1;
    newBuffer[keyIndex + 1 | 0] = value;
    return new TrieNode($this.q1h_1, $this.r1h_1, newBuffer, mutator.f1i_1);
  }
  function updateNodeAtIndex($this, nodeIndex, positionMask, newNode) {
    var newNodeBuffer = newNode.t1h_1;
    if (newNodeBuffer.length === 2 ? newNode.r1h_1 === 0 : false) {
      if ($this.t1h_1.length === 1) {
        newNode.q1h_1 = $this.r1h_1;
        return newNode;
      }
      var keyIndex = $this.i1j(positionMask);
      var newBuffer = replaceNodeWithEntry($this.t1h_1, nodeIndex, keyIndex, newNodeBuffer[0], newNodeBuffer[1]);
      return TrieNode_init_$Create$($this.q1h_1 ^ positionMask, $this.r1h_1 ^ positionMask, newBuffer);
    }
    var newBuffer_0 = copyOf_0($this.t1h_1, $this.t1h_1.length);
    newBuffer_0[nodeIndex] = newNode;
    return TrieNode_init_$Create$($this.q1h_1, $this.r1h_1, newBuffer_0);
  }
  function mutableUpdateNodeAtIndex($this, nodeIndex, newNode, owner) {
    if (($this.t1h_1.length === 1 ? newNode.t1h_1.length === 2 : false) ? newNode.r1h_1 === 0 : false) {
      newNode.q1h_1 = $this.r1h_1;
      return newNode;
    }
    if ($this.s1h_1 === owner) {
      $this.t1h_1[nodeIndex] = newNode;
      return $this;
    }
    var tmp$ret$1;
    // Inline function 'kotlin.collections.copyOf' call
    var tmp0_copyOf = $this.t1h_1;
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = tmp0_copyOf;
    tmp$ret$1 = tmp$ret$0.slice();
    var newBuffer = tmp$ret$1;
    newBuffer[nodeIndex] = newNode;
    return new TrieNode($this.q1h_1, $this.r1h_1, newBuffer, owner);
  }
  function removeNodeAtIndex($this, nodeIndex, positionMask) {
    if ($this.t1h_1.length === 1)
      return null;
    var newBuffer = removeNodeAtIndex_0($this.t1h_1, nodeIndex);
    return TrieNode_init_$Create$($this.q1h_1, $this.r1h_1 ^ positionMask, newBuffer);
  }
  function mutableRemoveNodeAtIndex($this, nodeIndex, positionMask, owner) {
    if ($this.t1h_1.length === 1)
      return null;
    if ($this.s1h_1 === owner) {
      $this.t1h_1 = removeNodeAtIndex_0($this.t1h_1, nodeIndex);
      $this.r1h_1 = $this.r1h_1 ^ positionMask;
      return $this;
    }
    var newBuffer = removeNodeAtIndex_0($this.t1h_1, nodeIndex);
    return new TrieNode($this.q1h_1, $this.r1h_1 ^ positionMask, newBuffer, owner);
  }
  function bufferMoveEntryToNode($this, keyIndex, positionMask, newKeyHash, newKey, newValue, shift, owner) {
    var storedKey = keyAtIndex($this, keyIndex);
    var tmp$ret$0;
    // Inline function 'kotlin.hashCode' call
    var tmp0_safe_receiver = storedKey;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode_0(tmp0_safe_receiver);
    tmp$ret$0 = tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
    var storedKeyHash = tmp$ret$0;
    var storedValue = valueAtKeyIndex($this, keyIndex);
    var newNode = makeNode_0($this, storedKeyHash, storedKey, storedValue, newKeyHash, newKey, newValue, shift + 5 | 0, owner);
    var nodeIndex = $this.l1j(positionMask) + 1 | 0;
    return replaceEntryWithNode($this.t1h_1, keyIndex, nodeIndex, newNode);
  }
  function moveEntryToNode($this, keyIndex, positionMask, newKeyHash, newKey, newValue, shift) {
    var newBuffer = bufferMoveEntryToNode($this, keyIndex, positionMask, newKeyHash, newKey, newValue, shift, null);
    return TrieNode_init_$Create$($this.q1h_1 ^ positionMask, $this.r1h_1 | positionMask, newBuffer);
  }
  function mutableMoveEntryToNode($this, keyIndex, positionMask, newKeyHash, newKey, newValue, shift, owner) {
    if ($this.s1h_1 === owner) {
      $this.t1h_1 = bufferMoveEntryToNode($this, keyIndex, positionMask, newKeyHash, newKey, newValue, shift, owner);
      $this.q1h_1 = $this.q1h_1 ^ positionMask;
      $this.r1h_1 = $this.r1h_1 | positionMask;
      return $this;
    }
    var newBuffer = bufferMoveEntryToNode($this, keyIndex, positionMask, newKeyHash, newKey, newValue, shift, owner);
    return new TrieNode($this.q1h_1 ^ positionMask, $this.r1h_1 | positionMask, newBuffer, owner);
  }
  function makeNode_0($this, keyHash1, key1, value1, keyHash2, key2, value2, shift, owner) {
    if (shift > 30) {
      var tmp$ret$2;
      // Inline function 'kotlin.arrayOf' call
      var tmp$ret$1;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = [key1, value1, key2, value2];
      tmp$ret$1 = tmp$ret$0;
      tmp$ret$2 = tmp$ret$1;
      return new TrieNode(0, 0, tmp$ret$2, owner);
    }
    var setBit1 = indexSegment_0(keyHash1, shift);
    var setBit2 = indexSegment_0(keyHash2, shift);
    if (!(setBit1 === setBit2)) {
      var tmp;
      if (setBit1 < setBit2) {
        var tmp$ret$5;
        // Inline function 'kotlin.arrayOf' call
        var tmp$ret$4;
        // Inline function 'kotlin.js.unsafeCast' call
        var tmp$ret$3;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$3 = [key1, value1, key2, value2];
        tmp$ret$4 = tmp$ret$3;
        tmp$ret$5 = tmp$ret$4;
        tmp = tmp$ret$5;
      } else {
        var tmp$ret$8;
        // Inline function 'kotlin.arrayOf' call
        var tmp$ret$7;
        // Inline function 'kotlin.js.unsafeCast' call
        var tmp$ret$6;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$6 = [key2, value2, key1, value1];
        tmp$ret$7 = tmp$ret$6;
        tmp$ret$8 = tmp$ret$7;
        tmp = tmp$ret$8;
      }
      var nodeBuffer = tmp;
      return new TrieNode(1 << setBit1 | 1 << setBit2, 0, nodeBuffer, owner);
    }
    var node = makeNode_0($this, keyHash1, key1, value1, keyHash2, key2, value2, shift + 5 | 0, owner);
    var tmp_0 = 1 << setBit1;
    var tmp$ret$11;
    // Inline function 'kotlin.arrayOf' call
    var tmp$ret$10;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$9;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$9 = [node];
    tmp$ret$10 = tmp$ret$9;
    tmp$ret$11 = tmp$ret$10;
    return new TrieNode(0, tmp_0, tmp$ret$11, owner);
  }
  function removeEntryAtIndex($this, keyIndex, positionMask) {
    if ($this.t1h_1.length === 2)
      return null;
    var newBuffer = removeEntryAtIndex_0($this.t1h_1, keyIndex);
    return TrieNode_init_$Create$($this.q1h_1 ^ positionMask, $this.r1h_1, newBuffer);
  }
  function mutableRemoveEntryAtIndex($this, keyIndex, positionMask, mutator) {
    var tmp0_this = mutator;
    var tmp1 = tmp0_this.j1i_1;
    tmp0_this.f1f(tmp1 - 1 | 0);
    mutator.h1i_1 = valueAtKeyIndex($this, keyIndex);
    if ($this.t1h_1.length === 2)
      return null;
    if ($this.s1h_1 === mutator.f1i_1) {
      $this.t1h_1 = removeEntryAtIndex_0($this.t1h_1, keyIndex);
      $this.q1h_1 = $this.q1h_1 ^ positionMask;
      return $this;
    }
    var newBuffer = removeEntryAtIndex_0($this.t1h_1, keyIndex);
    return new TrieNode($this.q1h_1 ^ positionMask, $this.r1h_1, newBuffer, mutator.f1i_1);
  }
  function collisionRemoveEntryAtIndex($this, i) {
    if ($this.t1h_1.length === 2)
      return null;
    var newBuffer = removeEntryAtIndex_0($this.t1h_1, i);
    return TrieNode_init_$Create$(0, 0, newBuffer);
  }
  function mutableCollisionRemoveEntryAtIndex($this, i, mutator) {
    var tmp0_this = mutator;
    var tmp1 = tmp0_this.j1i_1;
    tmp0_this.f1f(tmp1 - 1 | 0);
    mutator.h1i_1 = valueAtKeyIndex($this, i);
    if ($this.t1h_1.length === 2)
      return null;
    if ($this.s1h_1 === mutator.f1i_1) {
      $this.t1h_1 = removeEntryAtIndex_0($this.t1h_1, i);
      return $this;
    }
    var newBuffer = removeEntryAtIndex_0($this.t1h_1, i);
    return new TrieNode(0, 0, newBuffer, mutator.f1i_1);
  }
  function collisionContainsKey($this, key) {
    var progression = step(until(0, $this.t1h_1.length), 2);
    var inductionVariable = progression.d1_1;
    var last = progression.e1_1;
    var step_0 = progression.f1_1;
    if ((step_0 > 0 ? inductionVariable <= last : false) ? true : step_0 < 0 ? last <= inductionVariable : false)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + step_0 | 0;
        if (equals_0(key, $this.t1h_1[i]))
          return true;
      }
       while (!(i === last));
    return false;
  }
  function collisionGet($this, key) {
    var progression = step(until(0, $this.t1h_1.length), 2);
    var inductionVariable = progression.d1_1;
    var last = progression.e1_1;
    var step_0 = progression.f1_1;
    if ((step_0 > 0 ? inductionVariable <= last : false) ? true : step_0 < 0 ? last <= inductionVariable : false)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + step_0 | 0;
        if (equals_0(key, keyAtIndex($this, i))) {
          return valueAtKeyIndex($this, i);
        }
      }
       while (!(i === last));
    return null;
  }
  function collisionPut($this, key, value) {
    var progression = step(until(0, $this.t1h_1.length), 2);
    var inductionVariable = progression.d1_1;
    var last = progression.e1_1;
    var step_0 = progression.f1_1;
    if ((step_0 > 0 ? inductionVariable <= last : false) ? true : step_0 < 0 ? last <= inductionVariable : false)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + step_0 | 0;
        if (equals_0(key, keyAtIndex($this, i))) {
          if (value === valueAtKeyIndex($this, i)) {
            return null;
          }
          var tmp$ret$1;
          // Inline function 'kotlin.collections.copyOf' call
          var tmp0_copyOf = $this.t1h_1;
          var tmp$ret$0;
          // Inline function 'kotlin.js.asDynamic' call
          tmp$ret$0 = tmp0_copyOf;
          tmp$ret$1 = tmp$ret$0.slice();
          var newBuffer = tmp$ret$1;
          newBuffer[i + 1 | 0] = value;
          return asUpdateResult(TrieNode_init_$Create$(0, 0, newBuffer));
        }
      }
       while (!(i === last));
    var newBuffer_0 = insertEntryAtIndex($this.t1h_1, 0, key, value);
    return asInsertResult(TrieNode_init_$Create$(0, 0, newBuffer_0));
  }
  function mutableCollisionPut($this, key, value, mutator) {
    var progression = step(until(0, $this.t1h_1.length), 2);
    var inductionVariable = progression.d1_1;
    var last = progression.e1_1;
    var step_0 = progression.f1_1;
    if ((step_0 > 0 ? inductionVariable <= last : false) ? true : step_0 < 0 ? last <= inductionVariable : false)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + step_0 | 0;
        if (equals_0(key, keyAtIndex($this, i))) {
          mutator.h1i_1 = valueAtKeyIndex($this, i);
          if ($this.s1h_1 === mutator.f1i_1) {
            $this.t1h_1[i + 1 | 0] = value;
            return $this;
          }
          var tmp1_this = mutator;
          var tmp2 = tmp1_this.i1i_1;
          tmp1_this.i1i_1 = tmp2 + 1 | 0;
          var tmp$ret$1;
          // Inline function 'kotlin.collections.copyOf' call
          var tmp0_copyOf = $this.t1h_1;
          var tmp$ret$0;
          // Inline function 'kotlin.js.asDynamic' call
          tmp$ret$0 = tmp0_copyOf;
          tmp$ret$1 = tmp$ret$0.slice();
          var newBuffer = tmp$ret$1;
          newBuffer[i + 1 | 0] = value;
          return new TrieNode(0, 0, newBuffer, mutator.f1i_1);
        }
      }
       while (!(i === last));
    var tmp3_this = mutator;
    var tmp4 = tmp3_this.j1i_1;
    tmp3_this.f1f(tmp4 + 1 | 0);
    var newBuffer_0 = insertEntryAtIndex($this.t1h_1, 0, key, value);
    return new TrieNode(0, 0, newBuffer_0, mutator.f1i_1);
  }
  function collisionRemove($this, key) {
    var progression = step(until(0, $this.t1h_1.length), 2);
    var inductionVariable = progression.d1_1;
    var last = progression.e1_1;
    var step_0 = progression.f1_1;
    if ((step_0 > 0 ? inductionVariable <= last : false) ? true : step_0 < 0 ? last <= inductionVariable : false)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + step_0 | 0;
        if (equals_0(key, keyAtIndex($this, i))) {
          return collisionRemoveEntryAtIndex($this, i);
        }
      }
       while (!(i === last));
    return $this;
  }
  function mutableCollisionRemove($this, key, mutator) {
    var progression = step(until(0, $this.t1h_1.length), 2);
    var inductionVariable = progression.d1_1;
    var last = progression.e1_1;
    var step_0 = progression.f1_1;
    if ((step_0 > 0 ? inductionVariable <= last : false) ? true : step_0 < 0 ? last <= inductionVariable : false)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + step_0 | 0;
        if (equals_0(key, keyAtIndex($this, i))) {
          return mutableCollisionRemoveEntryAtIndex($this, i, mutator);
        }
      }
       while (!(i === last));
    return $this;
  }
  function mutableCollisionRemove_0($this, key, value, mutator) {
    var progression = step(until(0, $this.t1h_1.length), 2);
    var inductionVariable = progression.d1_1;
    var last = progression.e1_1;
    var step_0 = progression.f1_1;
    if ((step_0 > 0 ? inductionVariable <= last : false) ? true : step_0 < 0 ? last <= inductionVariable : false)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + step_0 | 0;
        if (equals_0(key, keyAtIndex($this, i)) ? equals_0(value, valueAtKeyIndex($this, i)) : false) {
          return mutableCollisionRemoveEntryAtIndex($this, i, mutator);
        }
      }
       while (!(i === last));
    return $this;
  }
  function mutableCollisionPutAll($this, otherNode, intersectionCounter, owner) {
    assert_0($this.r1h_1 === 0);
    assert_0($this.q1h_1 === 0);
    assert_0(otherNode.r1h_1 === 0);
    assert_0(otherNode.q1h_1 === 0);
    var tempBuffer = copyOf_0($this.t1h_1, $this.t1h_1.length + otherNode.t1h_1.length | 0);
    var i = $this.t1h_1.length;
    var progression = step(until(0, otherNode.t1h_1.length), 2);
    var inductionVariable = progression.d1_1;
    var last = progression.e1_1;
    var step_0 = progression.f1_1;
    if ((step_0 > 0 ? inductionVariable <= last : false) ? true : step_0 < 0 ? last <= inductionVariable : false)
      do {
        var j = inductionVariable;
        inductionVariable = inductionVariable + step_0 | 0;
        var tmp = otherNode.t1h_1[j];
        if (!collisionContainsKey($this, (tmp == null ? true : isObject(tmp)) ? tmp : THROW_CCE())) {
          tempBuffer[i] = otherNode.t1h_1[j];
          tempBuffer[i + 1 | 0] = otherNode.t1h_1[j + 1 | 0];
          i = i + 2 | 0;
        } else {
          var tmp1_this = intersectionCounter;
          var tmp2 = tmp1_this.m1i_1;
          tmp1_this.m1i_1 = tmp2 + 1 | 0;
        }
      }
       while (!(j === last));
    var newSize = i;
    return newSize === $this.t1h_1.length ? $this : newSize === otherNode.t1h_1.length ? otherNode : newSize === tempBuffer.length ? new TrieNode(0, 0, tempBuffer, owner) : new TrieNode(0, 0, copyOf_0(tempBuffer, newSize), owner);
  }
  function mutablePutAllFromOtherNodeCell($this, otherNode, positionMask, shift, intersectionCounter, mutator) {
    var tmp;
    if (hasNodeAt($this, positionMask)) {
      var targetNode = $this.m1j($this.l1j(positionMask));
      var tmp_0;
      if (hasNodeAt(otherNode, positionMask)) {
        var otherTargetNode = otherNode.m1j(otherNode.l1j(positionMask));
        tmp_0 = targetNode.l1i(otherTargetNode, shift + 5 | 0, intersectionCounter, mutator);
      } else if (otherNode.k1j(positionMask)) {
        var keyIndex = otherNode.i1j(positionMask);
        var key = keyAtIndex(otherNode, keyIndex);
        var value = valueAtKeyIndex(otherNode, keyIndex);
        var oldSize = mutator.j1i_1;
        var tmp$ret$1;
        // Inline function 'kotlin.also' call
        var tmp$ret$0;
        // Inline function 'kotlin.hashCode' call
        var tmp0_safe_receiver = key;
        var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode_0(tmp0_safe_receiver);
        tmp$ret$0 = tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
        var tmp0_also = targetNode.k1i(tmp$ret$0, key, value, shift + 5 | 0, mutator);
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode.mutablePutAllFromOtherNodeCell.<anonymous>' call
        if (mutator.j1i_1 === oldSize) {
          var tmp0_this = intersectionCounter;
          var tmp1 = tmp0_this.m1i_1;
          tmp0_this.m1i_1 = tmp1 + 1 | 0;
        }
        tmp$ret$1 = tmp0_also;
        tmp_0 = tmp$ret$1;
      } else {
        tmp_0 = targetNode;
      }
      tmp = tmp_0;
    } else if (hasNodeAt(otherNode, positionMask)) {
      var otherTargetNode_0 = otherNode.m1j(otherNode.l1j(positionMask));
      var tmp_1;
      if ($this.k1j(positionMask)) {
        var keyIndex_0 = $this.i1j(positionMask);
        var key_0 = keyAtIndex($this, keyIndex_0);
        var tmp_2;
        var tmp$ret$2;
        // Inline function 'kotlin.hashCode' call
        var tmp0_safe_receiver_0 = key_0;
        var tmp1_elvis_lhs_0 = tmp0_safe_receiver_0 == null ? null : hashCode_0(tmp0_safe_receiver_0);
        tmp$ret$2 = tmp1_elvis_lhs_0 == null ? 0 : tmp1_elvis_lhs_0;
        if (otherTargetNode_0.u1h(tmp$ret$2, key_0, shift + 5 | 0)) {
          var tmp0_this_0 = intersectionCounter;
          var tmp1_0 = tmp0_this_0.m1i_1;
          tmp0_this_0.m1i_1 = tmp1_0 + 1 | 0;
          tmp_2 = otherTargetNode_0;
        } else {
          var value_0 = valueAtKeyIndex($this, keyIndex_0);
          var tmp$ret$3;
          // Inline function 'kotlin.hashCode' call
          var tmp0_safe_receiver_1 = key_0;
          var tmp1_elvis_lhs_1 = tmp0_safe_receiver_1 == null ? null : hashCode_0(tmp0_safe_receiver_1);
          tmp$ret$3 = tmp1_elvis_lhs_1 == null ? 0 : tmp1_elvis_lhs_1;
          tmp_2 = otherTargetNode_0.k1i(tmp$ret$3, key_0, value_0, shift + 5 | 0, mutator);
        }
        tmp_1 = tmp_2;
      } else {
        tmp_1 = otherTargetNode_0;
      }
      tmp = tmp_1;
    } else {
      var thisKeyIndex = $this.i1j(positionMask);
      var thisKey = keyAtIndex($this, thisKeyIndex);
      var thisValue = valueAtKeyIndex($this, thisKeyIndex);
      var otherKeyIndex = otherNode.i1j(positionMask);
      var otherKey = keyAtIndex(otherNode, otherKeyIndex);
      var otherValue = valueAtKeyIndex(otherNode, otherKeyIndex);
      var tmp$ret$4;
      // Inline function 'kotlin.hashCode' call
      var tmp0_safe_receiver_2 = thisKey;
      var tmp1_elvis_lhs_2 = tmp0_safe_receiver_2 == null ? null : hashCode_0(tmp0_safe_receiver_2);
      tmp$ret$4 = tmp1_elvis_lhs_2 == null ? 0 : tmp1_elvis_lhs_2;
      var tmp_3 = tmp$ret$4;
      var tmp$ret$5;
      // Inline function 'kotlin.hashCode' call
      var tmp0_safe_receiver_3 = otherKey;
      var tmp1_elvis_lhs_3 = tmp0_safe_receiver_3 == null ? null : hashCode_0(tmp0_safe_receiver_3);
      tmp$ret$5 = tmp1_elvis_lhs_3 == null ? 0 : tmp1_elvis_lhs_3;
      tmp = makeNode_0($this, tmp_3, thisKey, thisValue, tmp$ret$5, otherKey, otherValue, shift + 5 | 0, mutator.f1i_1);
    }
    return tmp;
  }
  function calculateSize($this) {
    if ($this.r1h_1 === 0)
      return $this.t1h_1.length / 2 | 0;
    var numValues = countOneBits($this.q1h_1);
    var result = numValues;
    var inductionVariable = imul(numValues, 2);
    var last = $this.t1h_1.length;
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        result = result + calculateSize($this.m1j(i)) | 0;
      }
       while (inductionVariable < last);
    return result;
  }
  function elementsIdentityEquals($this, otherNode) {
    if ($this === otherNode)
      return true;
    if (!($this.r1h_1 === otherNode.r1h_1))
      return false;
    if (!($this.q1h_1 === otherNode.q1h_1))
      return false;
    var inductionVariable = 0;
    var last = $this.t1h_1.length;
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (!($this.t1h_1[i] === otherNode.t1h_1[i]))
          return false;
      }
       while (inductionVariable < last);
    return true;
  }
  function replaceNode($this, targetNode, newNode, nodeIndex, positionMask) {
    return newNode == null ? removeNodeAtIndex($this, nodeIndex, positionMask) : !(targetNode === newNode) ? updateNodeAtIndex($this, nodeIndex, positionMask, newNode) : $this;
  }
  function mutableReplaceNode($this, targetNode, newNode, nodeIndex, positionMask, owner) {
    return newNode == null ? mutableRemoveNodeAtIndex($this, nodeIndex, positionMask, owner) : ($this.s1h_1 === owner ? true : !(targetNode === newNode)) ? mutableUpdateNodeAtIndex($this, nodeIndex, newNode, owner) : $this;
  }
  function Companion_13() {
    Companion_instance_13 = this;
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.emptyArray' call
    tmp$ret$0 = [];
    tmp.l1h_1 = TrieNode_init_$Create$(0, 0, tmp$ret$0);
  }
  Companion_13.$metadata$ = objectMeta('Companion');
  var Companion_instance_13;
  function Companion_getInstance_13() {
    if (Companion_instance_13 == null)
      new Companion_13();
    return Companion_instance_13;
  }
  function TrieNode(dataMap, nodeMap, buffer, ownedBy) {
    Companion_getInstance_13();
    this.q1h_1 = dataMap;
    this.r1h_1 = nodeMap;
    this.s1h_1 = ownedBy;
    this.t1h_1 = buffer;
  }
  TrieNode.prototype.u1k = function () {
    return this.t1h_1;
  };
  TrieNode.prototype.j1j = function () {
    return countOneBits(this.q1h_1);
  };
  TrieNode.prototype.k1j = function (positionMask) {
    return !((this.q1h_1 & positionMask) === 0);
  };
  TrieNode.prototype.i1j = function (positionMask) {
    return imul(2, countOneBits(this.q1h_1 & (positionMask - 1 | 0)));
  };
  TrieNode.prototype.l1j = function (positionMask) {
    return (this.t1h_1.length - 1 | 0) - countOneBits(this.r1h_1 & (positionMask - 1 | 0)) | 0;
  };
  TrieNode.prototype.m1j = function (nodeIndex) {
    var tmp = this.t1h_1[nodeIndex];
    return tmp instanceof TrieNode ? tmp : THROW_CCE();
  };
  TrieNode.prototype.u1h = function (keyHash, key, shift) {
    var keyPositionMask = 1 << indexSegment_0(keyHash, shift);
    if (this.k1j(keyPositionMask)) {
      return equals_0(key, keyAtIndex(this, this.i1j(keyPositionMask)));
    }
    if (hasNodeAt(this, keyPositionMask)) {
      var targetNode = this.m1j(this.l1j(keyPositionMask));
      if (shift === 30) {
        return collisionContainsKey(targetNode, key);
      }
      return targetNode.u1h(keyHash, key, shift + 5 | 0);
    }
    return false;
  };
  TrieNode.prototype.v1h = function (keyHash, key, shift) {
    var keyPositionMask = 1 << indexSegment_0(keyHash, shift);
    if (this.k1j(keyPositionMask)) {
      var keyIndex = this.i1j(keyPositionMask);
      if (equals_0(key, keyAtIndex(this, keyIndex))) {
        return valueAtKeyIndex(this, keyIndex);
      }
      return null;
    }
    if (hasNodeAt(this, keyPositionMask)) {
      var targetNode = this.m1j(this.l1j(keyPositionMask));
      if (shift === 30) {
        return collisionGet(targetNode, key);
      }
      return targetNode.v1h(keyHash, key, shift + 5 | 0);
    }
    return null;
  };
  TrieNode.prototype.l1i = function (otherNode, shift, intersectionCounter, mutator) {
    if (this === otherNode) {
      intersectionCounter.v1k(calculateSize(this));
      return this;
    }
    if (shift > 30) {
      return mutableCollisionPutAll(this, otherNode, intersectionCounter, mutator.f1i_1);
    }
    var newNodeMap = this.r1h_1 | otherNode.r1h_1;
    var newDataMap = (this.q1h_1 ^ otherNode.q1h_1) & ~newNodeMap;
    // Inline function 'androidx.compose.runtime.external.kotlinx.collections.immutable.internal.forEachOneBit' call
    var tmp0_forEachOneBit = this.q1h_1 & otherNode.q1h_1;
    var mask = tmp0_forEachOneBit;
    var index = 0;
    while (!(mask === 0)) {
      var bit = takeLowestOneBit(mask);
      // Inline function 'androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode.mutablePutAll.<anonymous>' call
      var tmp1__anonymous__uwfjfc = index;
      var leftKey = keyAtIndex(this, this.i1j(bit));
      var rightKey = keyAtIndex(otherNode, otherNode.i1j(bit));
      if (equals_0(leftKey, rightKey))
        newDataMap = newDataMap | bit;
      else
        newNodeMap = newNodeMap | bit;
      var tmp0 = index;
      index = tmp0 + 1 | 0;
      mask = mask ^ bit;
    }
    // Inline function 'kotlin.check' call
    var tmp2_check = (newNodeMap & newDataMap) === 0;
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.check' call
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp2_check) {
      var tmp$ret$0;
      // Inline function 'kotlin.check.<anonymous>' call
      tmp$ret$0 = 'Check failed.';
      var message = tmp$ret$0;
      throw IllegalStateException_init_$Create$_0(toString_2(message));
    }
    var tmp;
    if ((equals_0(this.s1h_1, mutator.f1i_1) ? this.q1h_1 === newDataMap : false) ? this.r1h_1 === newNodeMap : false) {
      tmp = this;
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.arrayOfNulls' call
      var tmp3_arrayOfNulls = imul(countOneBits(newDataMap), 2) + countOneBits(newNodeMap) | 0;
      tmp$ret$1 = fillArrayVal(Array(tmp3_arrayOfNulls), null);
      var newBuffer = tmp$ret$1;
      tmp = TrieNode_init_$Create$(newDataMap, newNodeMap, newBuffer);
    }
    var mutableNode = tmp;
    // Inline function 'androidx.compose.runtime.external.kotlinx.collections.immutable.internal.forEachOneBit' call
    var tmp4_forEachOneBit = newNodeMap;
    var mask_0 = tmp4_forEachOneBit;
    var index_0 = 0;
    while (!(mask_0 === 0)) {
      var bit_0 = takeLowestOneBit(mask_0);
      // Inline function 'androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode.mutablePutAll.<anonymous>' call
      var tmp5__anonymous__kpxxpo = index_0;
      var newNodeIndex = (mutableNode.t1h_1.length - 1 | 0) - tmp5__anonymous__kpxxpo | 0;
      mutableNode.t1h_1[newNodeIndex] = mutablePutAllFromOtherNodeCell(this, otherNode, bit_0, shift, intersectionCounter, mutator);
      var tmp0_0 = index_0;
      index_0 = tmp0_0 + 1 | 0;
      mask_0 = mask_0 ^ bit_0;
    }
    // Inline function 'androidx.compose.runtime.external.kotlinx.collections.immutable.internal.forEachOneBit' call
    var tmp6_forEachOneBit = newDataMap;
    var mask_1 = tmp6_forEachOneBit;
    var index_1 = 0;
    while (!(mask_1 === 0)) {
      var bit_1 = takeLowestOneBit(mask_1);
      // Inline function 'androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode.mutablePutAll.<anonymous>' call
      var tmp7__anonymous__b0knam = index_1;
      var newKeyIndex = imul(tmp7__anonymous__b0knam, 2);
      if (!otherNode.k1j(bit_1)) {
        var oldKeyIndex = this.i1j(bit_1);
        mutableNode.t1h_1[newKeyIndex] = keyAtIndex(this, oldKeyIndex);
        mutableNode.t1h_1[newKeyIndex + 1 | 0] = valueAtKeyIndex(this, oldKeyIndex);
      } else {
        var oldKeyIndex_0 = otherNode.i1j(bit_1);
        mutableNode.t1h_1[newKeyIndex] = keyAtIndex(otherNode, oldKeyIndex_0);
        mutableNode.t1h_1[newKeyIndex + 1 | 0] = valueAtKeyIndex(otherNode, oldKeyIndex_0);
        if (this.k1j(bit_1)) {
          var tmp0_this = intersectionCounter;
          var tmp1 = tmp0_this.m1i_1;
          tmp0_this.m1i_1 = tmp1 + 1 | 0;
        }
      }
      var tmp0_1 = index_1;
      index_1 = tmp0_1 + 1 | 0;
      mask_1 = mask_1 ^ bit_1;
    }
    return elementsIdentityEquals(this, mutableNode) ? this : elementsIdentityEquals(otherNode, mutableNode) ? otherNode : mutableNode;
  };
  TrieNode.prototype.w1h = function (keyHash, key, value, shift) {
    var keyPositionMask = 1 << indexSegment_0(keyHash, shift);
    if (this.k1j(keyPositionMask)) {
      var keyIndex = this.i1j(keyPositionMask);
      if (equals_0(key, keyAtIndex(this, keyIndex))) {
        if (valueAtKeyIndex(this, keyIndex) === value)
          return null;
        return asUpdateResult(updateValueAtIndex(this, keyIndex, value));
      }
      return asInsertResult(moveEntryToNode(this, keyIndex, keyPositionMask, keyHash, key, value, shift));
    }
    if (hasNodeAt(this, keyPositionMask)) {
      var nodeIndex = this.l1j(keyPositionMask);
      var targetNode = this.m1j(nodeIndex);
      var tmp;
      if (shift === 30) {
        var tmp0_elvis_lhs = collisionPut(targetNode, key, value);
        var tmp_0;
        if (tmp0_elvis_lhs == null) {
          return null;
        } else {
          tmp_0 = tmp0_elvis_lhs;
        }
        tmp = tmp_0;
      } else {
        var tmp1_elvis_lhs = targetNode.w1h(keyHash, key, value, shift + 5 | 0);
        var tmp_1;
        if (tmp1_elvis_lhs == null) {
          return null;
        } else {
          tmp_1 = tmp1_elvis_lhs;
        }
        tmp = tmp_1;
      }
      var putResult = tmp;
      var tmp$ret$2;
      // Inline function 'androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.ModificationResult.replaceNode' call
      var tmp$ret$1;
      // Inline function 'kotlin.apply' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.ModificationResult.replaceNode.<anonymous>' call
      var tmp_2 = putResult;
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode.put.<anonymous>' call
      var tmp0__anonymous__q1qw7t = putResult.x1h_1;
      tmp$ret$0 = updateNodeAtIndex(this, nodeIndex, keyPositionMask, tmp0__anonymous__q1qw7t);
      tmp_2.x1h_1 = tmp$ret$0;
      tmp$ret$1 = putResult;
      tmp$ret$2 = tmp$ret$1;
      return tmp$ret$2;
    }
    return asInsertResult(insertEntryAt(this, keyPositionMask, key, value));
  };
  TrieNode.prototype.k1i = function (keyHash, key, value, shift, mutator) {
    var keyPositionMask = 1 << indexSegment_0(keyHash, shift);
    if (this.k1j(keyPositionMask)) {
      var keyIndex = this.i1j(keyPositionMask);
      if (equals_0(key, keyAtIndex(this, keyIndex))) {
        mutator.h1i_1 = valueAtKeyIndex(this, keyIndex);
        if (valueAtKeyIndex(this, keyIndex) === value) {
          return this;
        }
        return mutableUpdateValueAtIndex(this, keyIndex, value, mutator);
      }
      var tmp0_this = mutator;
      var tmp1 = tmp0_this.j1i_1;
      tmp0_this.f1f(tmp1 + 1 | 0);
      return mutableMoveEntryToNode(this, keyIndex, keyPositionMask, keyHash, key, value, shift, mutator.f1i_1);
    }
    if (hasNodeAt(this, keyPositionMask)) {
      var nodeIndex = this.l1j(keyPositionMask);
      var targetNode = this.m1j(nodeIndex);
      var tmp;
      if (shift === 30) {
        tmp = mutableCollisionPut(targetNode, key, value, mutator);
      } else {
        tmp = targetNode.k1i(keyHash, key, value, shift + 5 | 0, mutator);
      }
      var newNode = tmp;
      if (targetNode === newNode) {
        return this;
      }
      return mutableUpdateNodeAtIndex(this, nodeIndex, newNode, mutator.f1i_1);
    }
    var tmp2_this = mutator;
    var tmp3 = tmp2_this.j1i_1;
    tmp2_this.f1f(tmp3 + 1 | 0);
    return mutableInsertEntryAt(this, keyPositionMask, key, value, mutator.f1i_1);
  };
  TrieNode.prototype.z1h = function (keyHash, key, shift) {
    var keyPositionMask = 1 << indexSegment_0(keyHash, shift);
    if (this.k1j(keyPositionMask)) {
      var keyIndex = this.i1j(keyPositionMask);
      if (equals_0(key, keyAtIndex(this, keyIndex))) {
        return removeEntryAtIndex(this, keyIndex, keyPositionMask);
      }
      return this;
    }
    if (hasNodeAt(this, keyPositionMask)) {
      var nodeIndex = this.l1j(keyPositionMask);
      var targetNode = this.m1j(nodeIndex);
      var tmp;
      if (shift === 30) {
        tmp = collisionRemove(targetNode, key);
      } else {
        tmp = targetNode.z1h(keyHash, key, shift + 5 | 0);
      }
      var newNode = tmp;
      return replaceNode(this, targetNode, newNode, nodeIndex, keyPositionMask);
    }
    return this;
  };
  TrieNode.prototype.n1i = function (keyHash, key, shift, mutator) {
    var keyPositionMask = 1 << indexSegment_0(keyHash, shift);
    if (this.k1j(keyPositionMask)) {
      var keyIndex = this.i1j(keyPositionMask);
      if (equals_0(key, keyAtIndex(this, keyIndex))) {
        return mutableRemoveEntryAtIndex(this, keyIndex, keyPositionMask, mutator);
      }
      return this;
    }
    if (hasNodeAt(this, keyPositionMask)) {
      var nodeIndex = this.l1j(keyPositionMask);
      var targetNode = this.m1j(nodeIndex);
      var tmp;
      if (shift === 30) {
        tmp = mutableCollisionRemove(targetNode, key, mutator);
      } else {
        tmp = targetNode.n1i(keyHash, key, shift + 5 | 0, mutator);
      }
      var newNode = tmp;
      return mutableReplaceNode(this, targetNode, newNode, nodeIndex, keyPositionMask, mutator.f1i_1);
    }
    return this;
  };
  TrieNode.prototype.p1i = function (keyHash, key, value, shift, mutator) {
    var keyPositionMask = 1 << indexSegment_0(keyHash, shift);
    if (this.k1j(keyPositionMask)) {
      var keyIndex = this.i1j(keyPositionMask);
      if (equals_0(key, keyAtIndex(this, keyIndex)) ? equals_0(value, valueAtKeyIndex(this, keyIndex)) : false) {
        return mutableRemoveEntryAtIndex(this, keyIndex, keyPositionMask, mutator);
      }
      return this;
    }
    if (hasNodeAt(this, keyPositionMask)) {
      var nodeIndex = this.l1j(keyPositionMask);
      var targetNode = this.m1j(nodeIndex);
      var tmp;
      if (shift === 30) {
        tmp = mutableCollisionRemove_0(targetNode, key, value, mutator);
      } else {
        tmp = targetNode.p1i(keyHash, key, value, shift + 5 | 0, mutator);
      }
      var newNode = tmp;
      return mutableReplaceNode(this, targetNode, newNode, nodeIndex, keyPositionMask, mutator.f1i_1);
    }
    return this;
  };
  TrieNode.$metadata$ = classMeta('TrieNode');
  function get_ENTRY_SIZE() {
    return ENTRY_SIZE;
  }
  var ENTRY_SIZE;
  function insertEntryAtIndex(_this__u8e3s4, keyIndex, key, value) {
    var tmp$ret$0;
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp0_arrayOfNulls = _this__u8e3s4.length + 2 | 0;
    tmp$ret$0 = fillArrayVal(Array(tmp0_arrayOfNulls), null);
    var newBuffer = tmp$ret$0;
    var tmp$ret$1;
    // Inline function 'kotlin.collections.copyInto' call
    arrayCopy(_this__u8e3s4, newBuffer, 0, 0, keyIndex);
    tmp$ret$1 = newBuffer;
    var tmp$ret$2;
    // Inline function 'kotlin.collections.copyInto' call
    var tmp1_copyInto = keyIndex + 2 | 0;
    var tmp2_copyInto = _this__u8e3s4.length;
    arrayCopy(_this__u8e3s4, newBuffer, tmp1_copyInto, keyIndex, tmp2_copyInto);
    tmp$ret$2 = newBuffer;
    newBuffer[keyIndex] = key;
    newBuffer[keyIndex + 1 | 0] = value;
    return newBuffer;
  }
  function replaceNodeWithEntry(_this__u8e3s4, nodeIndex, keyIndex, key, value) {
    var newBuffer = copyOf_0(_this__u8e3s4, _this__u8e3s4.length + 1 | 0);
    var tmp$ret$0;
    // Inline function 'kotlin.collections.copyInto' call
    var tmp0_copyInto = nodeIndex + 2 | 0;
    var tmp1_copyInto = nodeIndex + 1 | 0;
    var tmp2_copyInto = _this__u8e3s4.length;
    arrayCopy(newBuffer, newBuffer, tmp0_copyInto, tmp1_copyInto, tmp2_copyInto);
    tmp$ret$0 = newBuffer;
    var tmp$ret$1;
    // Inline function 'kotlin.collections.copyInto' call
    var tmp3_copyInto = keyIndex + 2 | 0;
    arrayCopy(newBuffer, newBuffer, tmp3_copyInto, keyIndex, nodeIndex);
    tmp$ret$1 = newBuffer;
    newBuffer[keyIndex] = key;
    newBuffer[keyIndex + 1 | 0] = value;
    return newBuffer;
  }
  function removeNodeAtIndex_0(_this__u8e3s4, nodeIndex) {
    var tmp$ret$0;
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp0_arrayOfNulls = _this__u8e3s4.length - 1 | 0;
    tmp$ret$0 = fillArrayVal(Array(tmp0_arrayOfNulls), null);
    var newBuffer = tmp$ret$0;
    var tmp$ret$1;
    // Inline function 'kotlin.collections.copyInto' call
    arrayCopy(_this__u8e3s4, newBuffer, 0, 0, nodeIndex);
    tmp$ret$1 = newBuffer;
    var tmp$ret$2;
    // Inline function 'kotlin.collections.copyInto' call
    var tmp1_copyInto = nodeIndex + 1 | 0;
    var tmp2_copyInto = _this__u8e3s4.length;
    arrayCopy(_this__u8e3s4, newBuffer, nodeIndex, tmp1_copyInto, tmp2_copyInto);
    tmp$ret$2 = newBuffer;
    return newBuffer;
  }
  function get_LOG_MAX_BRANCHING_FACTOR() {
    return LOG_MAX_BRANCHING_FACTOR;
  }
  var LOG_MAX_BRANCHING_FACTOR;
  function replaceEntryWithNode(_this__u8e3s4, keyIndex, nodeIndex, newNode) {
    var newNodeIndex = nodeIndex - 2 | 0;
    var tmp$ret$0;
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp0_arrayOfNulls = (_this__u8e3s4.length - 2 | 0) + 1 | 0;
    tmp$ret$0 = fillArrayVal(Array(tmp0_arrayOfNulls), null);
    var newBuffer = tmp$ret$0;
    var tmp$ret$1;
    // Inline function 'kotlin.collections.copyInto' call
    arrayCopy(_this__u8e3s4, newBuffer, 0, 0, keyIndex);
    tmp$ret$1 = newBuffer;
    var tmp$ret$2;
    // Inline function 'kotlin.collections.copyInto' call
    var tmp1_copyInto = keyIndex + 2 | 0;
    arrayCopy(_this__u8e3s4, newBuffer, keyIndex, tmp1_copyInto, nodeIndex);
    tmp$ret$2 = newBuffer;
    newBuffer[newNodeIndex] = newNode;
    var tmp$ret$3;
    // Inline function 'kotlin.collections.copyInto' call
    var tmp2_copyInto = newNodeIndex + 1 | 0;
    var tmp3_copyInto = _this__u8e3s4.length;
    arrayCopy(_this__u8e3s4, newBuffer, tmp2_copyInto, nodeIndex, tmp3_copyInto);
    tmp$ret$3 = newBuffer;
    return newBuffer;
  }
  function get_MAX_SHIFT() {
    return MAX_SHIFT;
  }
  var MAX_SHIFT;
  function indexSegment_0(index, shift) {
    return index >> shift & 31;
  }
  function removeEntryAtIndex_0(_this__u8e3s4, keyIndex) {
    var tmp$ret$0;
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp0_arrayOfNulls = _this__u8e3s4.length - 2 | 0;
    tmp$ret$0 = fillArrayVal(Array(tmp0_arrayOfNulls), null);
    var newBuffer = tmp$ret$0;
    var tmp$ret$1;
    // Inline function 'kotlin.collections.copyInto' call
    arrayCopy(_this__u8e3s4, newBuffer, 0, 0, keyIndex);
    tmp$ret$1 = newBuffer;
    var tmp$ret$2;
    // Inline function 'kotlin.collections.copyInto' call
    var tmp1_copyInto = keyIndex + 2 | 0;
    var tmp2_copyInto = _this__u8e3s4.length;
    arrayCopy(_this__u8e3s4, newBuffer, keyIndex, tmp1_copyInto, tmp2_copyInto);
    tmp$ret$2 = newBuffer;
    return newBuffer;
  }
  function Companion_14() {
    Companion_instance_14 = this;
    this.u1f_1 = new PersistentOrderedSet(EndOfChain_getInstance(), EndOfChain_getInstance(), Companion_getInstance_12().t1f());
  }
  Companion_14.prototype.v1f = function () {
    return this.u1f_1;
  };
  Companion_14.$metadata$ = objectMeta('Companion');
  var Companion_instance_14;
  function Companion_getInstance_14() {
    if (Companion_instance_14 == null)
      new Companion_14();
    return Companion_instance_14;
  }
  function PersistentOrderedSet(firstElement, lastElement, hashMap) {
    Companion_getInstance_14();
    AbstractSet.call(this);
    this.w1k_1 = firstElement;
    this.x1k_1 = lastElement;
    this.y1k_1 = hashMap;
  }
  PersistentOrderedSet.prototype.g = function () {
    return this.y1k_1.p1h_1;
  };
  PersistentOrderedSet.prototype.j = function (element) {
    return this.y1k_1.h2(element);
  };
  PersistentOrderedSet.prototype.b = function (element) {
    if (this.y1k_1.h2(element)) {
      return this;
    }
    if (this.i()) {
      var newMap = this.y1k_1.a(element, Links_init_$Create$());
      return new PersistentOrderedSet(element, element, newMap);
    }
    var tmp = this.x1k_1;
    var lastElement = (tmp == null ? true : isObject(tmp)) ? tmp : THROW_CCE();
    var lastLinks = ensureNotNull(this.y1k_1.l2(lastElement));
    var newMap_0 = this.y1k_1.a(lastElement, lastLinks.b1l(element)).a(element, Links_init_$Create$_0(lastElement));
    return new PersistentOrderedSet(this.w1k_1, element, newMap_0);
  };
  PersistentOrderedSet.prototype.n6 = function (element) {
    var tmp0_elvis_lhs = this.y1k_1.l2(element);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return this;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var links = tmp;
    var newMap = this.y1k_1.z2(element);
    if (links.c1l()) {
      var tmp$ret$0;
      // Inline function 'kotlin.collections.get' call
      var tmp0_get = newMap;
      var tmp1_get = links.z1k_1;
      tmp$ret$0 = (isInterface(tmp0_get, Map) ? tmp0_get : THROW_CCE()).l2(tmp1_get);
      var previousLinks = ensureNotNull(tmp$ret$0);
      var tmp_0 = newMap;
      var tmp_1 = links.z1k_1;
      newMap = tmp_0.a((tmp_1 == null ? true : isObject(tmp_1)) ? tmp_1 : THROW_CCE(), previousLinks.b1l(links.a1l_1));
    }
    if (links.e1l()) {
      var tmp$ret$1;
      // Inline function 'kotlin.collections.get' call
      var tmp2_get = newMap;
      var tmp3_get = links.a1l_1;
      tmp$ret$1 = (isInterface(tmp2_get, Map) ? tmp2_get : THROW_CCE()).l2(tmp3_get);
      var nextLinks = ensureNotNull(tmp$ret$1);
      var tmp_2 = newMap;
      var tmp_3 = links.a1l_1;
      newMap = tmp_2.a((tmp_3 == null ? true : isObject(tmp_3)) ? tmp_3 : THROW_CCE(), nextLinks.d1l(links.z1k_1));
    }
    var newFirstElement = !links.c1l() ? links.a1l_1 : this.w1k_1;
    var newLastElement = !links.e1l() ? links.z1k_1 : this.x1k_1;
    return new PersistentOrderedSet(newFirstElement, newLastElement, newMap);
  };
  PersistentOrderedSet.prototype.d = function () {
    return new PersistentOrderedSetIterator(this.w1k_1, this.y1k_1);
  };
  PersistentOrderedSet.$metadata$ = classMeta('PersistentOrderedSet', [PersistentSet], undefined, undefined, undefined, AbstractSet.prototype);
  function Links_init_$Init$($this) {
    Links.call($this, EndOfChain_getInstance(), EndOfChain_getInstance());
    return $this;
  }
  function Links_init_$Create$() {
    return Links_init_$Init$(Object.create(Links.prototype));
  }
  function Links_init_$Init$_0(previous, $this) {
    Links.call($this, previous, EndOfChain_getInstance());
    return $this;
  }
  function Links_init_$Create$_0(previous) {
    return Links_init_$Init$_0(previous, Object.create(Links.prototype));
  }
  function Links(previous, next) {
    this.z1k_1 = previous;
    this.a1l_1 = next;
  }
  Links.prototype.b1l = function (newNext) {
    return new Links(this.z1k_1, newNext);
  };
  Links.prototype.d1l = function (newPrevious) {
    return new Links(newPrevious, this.a1l_1);
  };
  Links.prototype.e1l = function () {
    return !(this.a1l_1 === EndOfChain_getInstance());
  };
  Links.prototype.c1l = function () {
    return !(this.z1k_1 === EndOfChain_getInstance());
  };
  Links.$metadata$ = classMeta('Links');
  function checkHasNext_0($this) {
    if (!$this.e())
      throw NoSuchElementException_init_$Create$();
  }
  function PersistentOrderedSetIterator(nextElement, map) {
    this.f1l_1 = nextElement;
    this.g1l_1 = map;
    this.h1l_1 = 0;
  }
  PersistentOrderedSetIterator.prototype.e = function () {
    return this.h1l_1 < this.g1l_1.g();
  };
  PersistentOrderedSetIterator.prototype.f = function () {
    checkHasNext_0(this);
    var tmp = this.f1l_1;
    var result = (tmp == null ? true : isObject(tmp)) ? tmp : THROW_CCE();
    var tmp0_this = this;
    var tmp1 = tmp0_this.h1l_1;
    tmp0_this.h1l_1 = tmp1 + 1 | 0;
    var tmp_0 = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.getOrElse' call
    var tmp0_getOrElse = this.g1l_1;
    var tmp0_elvis_lhs = tmp0_getOrElse.l2(result);
    var tmp_1;
    if (tmp0_elvis_lhs == null) {
      throw ConcurrentModificationException_init_$Create$_0('Hash code of an element (' + result + ') has changed after it was added to the persistent set.');
    } else {
      tmp_1 = tmp0_elvis_lhs;
    }
    tmp$ret$0 = tmp_1;
    tmp_0.f1l_1 = tmp$ret$0.a1l_1;
    return result;
  };
  PersistentOrderedSetIterator.$metadata$ = classMeta('PersistentOrderedSetIterator', [Iterator]);
  function EndOfChain() {
    EndOfChain_instance = this;
  }
  EndOfChain.$metadata$ = objectMeta('EndOfChain');
  var EndOfChain_instance;
  function EndOfChain_getInstance() {
    if (EndOfChain_instance == null)
      new EndOfChain();
    return EndOfChain_instance;
  }
  function forEachOneBit(_this__u8e3s4, body) {
    var mask = _this__u8e3s4;
    var index = 0;
    while (!(mask === 0)) {
      var bit = takeLowestOneBit(mask);
      body(bit, index);
      var tmp0 = index;
      index = tmp0 + 1 | 0;
      mask = mask ^ bit;
    }
  }
  function ListImplementation() {
    ListImplementation_instance = this;
  }
  ListImplementation.prototype.s1 = function (index, size) {
    if (index < 0 ? true : index >= size) {
      throw IndexOutOfBoundsException_init_$Create$('index: ' + index + ', size: ' + size);
    }
  };
  ListImplementation.prototype.r1 = function (index, size) {
    if (index < 0 ? true : index > size) {
      throw IndexOutOfBoundsException_init_$Create$('index: ' + index + ', size: ' + size);
    }
  };
  ListImplementation.$metadata$ = objectMeta('ListImplementation');
  var ListImplementation_instance;
  function ListImplementation_getInstance() {
    if (ListImplementation_instance == null)
      new ListImplementation();
    return ListImplementation_instance;
  }
  function MutabilityOwnership() {
  }
  MutabilityOwnership.$metadata$ = classMeta('MutabilityOwnership');
  function DeltaCounter_init_$Init$(count, $mask0, $marker, $this) {
    if (!(($mask0 & 1) === 0))
      count = 0;
    DeltaCounter.call($this, count);
    return $this;
  }
  function DeltaCounter_init_$Create$(count, $mask0, $marker) {
    return DeltaCounter_init_$Init$(count, $mask0, $marker, Object.create(DeltaCounter.prototype));
  }
  function DeltaCounter(count) {
    this.m1i_1 = count;
  }
  DeltaCounter.prototype.i1l = function (_set____db54di) {
    this.m1i_1 = _set____db54di;
  };
  DeltaCounter.prototype.j1l = function () {
    return this.m1i_1;
  };
  DeltaCounter.prototype.v1k = function (that) {
    var tmp0_this = this;
    tmp0_this.m1i_1 = tmp0_this.m1i_1 + that | 0;
  };
  DeltaCounter.prototype.toString = function () {
    return 'DeltaCounter(count=' + this.m1i_1 + ')';
  };
  DeltaCounter.prototype.hashCode = function () {
    return this.m1i_1;
  };
  DeltaCounter.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof DeltaCounter))
      return false;
    var tmp0_other_with_cast = other instanceof DeltaCounter ? other : THROW_CCE();
    if (!(this.m1i_1 === tmp0_other_with_cast.m1i_1))
      return false;
    return true;
  };
  DeltaCounter.$metadata$ = classMeta('DeltaCounter');
  function assert_0(condition) {
  }
  function composableLambdaInstance(key, tracked, block) {
    var tmp$ret$0;
    // Inline function 'kotlin.apply' call
    var tmp0_apply = new ComposableLambdaImpl(key, tracked);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'androidx.compose.runtime.internal.composableLambdaInstance.<anonymous>' call
    tmp0_apply.p1l(block);
    tmp$ret$0 = tmp0_apply;
    return tmp$ret$0;
  }
  function replacableWith(_this__u8e3s4, other) {
    var tmp;
    if (_this__u8e3s4 == null) {
      tmp = true;
    } else {
      var tmp_0;
      var tmp_1;
      if (_this__u8e3s4 instanceof RecomposeScopeImpl) {
        tmp_1 = other instanceof RecomposeScopeImpl;
      } else {
        tmp_1 = false;
      }
      if (tmp_1) {
        tmp_0 = (!_this__u8e3s4.s16() ? true : equals_0(_this__u8e3s4, other)) ? true : equals_0(_this__u8e3s4.qt_1, other.qt_1);
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    }
    return tmp;
  }
  function differentBits(slot) {
    return bitsForSlot(2, slot);
  }
  function sameBits(slot) {
    return bitsForSlot(1, slot);
  }
  function bitsForSlot(bits, slot) {
    var realSlot = slot % 10 | 0;
    return bits << (imul(realSlot, 3) + 1 | 0);
  }
  function composableLambda(composer, key, tracked, block) {
    composer.ks(key);
    var slot = composer.ls();
    var tmp;
    if (slot === Companion_getInstance_8().ns_1) {
      var value = new ComposableLambdaImpl(key, tracked);
      composer.ms(value);
      tmp = value;
    } else {
      tmp = slot instanceof ComposableLambdaImpl ? slot : THROW_CCE();
    }
    var result = tmp;
    result.p1l(block);
    composer.os();
    return result;
  }
  function fastAny(_this__u8e3s4, predicate) {
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'androidx.compose.runtime.snapshots.fastForEach' call
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    var last = _this__u8e3s4.g() - 1 | 0;
    if (inductionVariable <= last)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var item = _this__u8e3s4.h(index);
        // Inline function 'androidx.compose.runtime.snapshots.fastAny.<anonymous>' call
        if (predicate(item))
          return true;
      }
       while (inductionVariable <= last);
    return false;
  }
  function fastAll(_this__u8e3s4, predicate) {
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'androidx.compose.runtime.snapshots.fastForEach' call
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    var last = _this__u8e3s4.g() - 1 | 0;
    if (inductionVariable <= last)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var item = _this__u8e3s4.h(index);
        // Inline function 'androidx.compose.runtime.snapshots.fastAll.<anonymous>' call
        if (!predicate(item))
          return false;
      }
       while (inductionVariable <= last);
    return true;
  }
  function fastForEach(_this__u8e3s4, action) {
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    var last = _this__u8e3s4.g() - 1 | 0;
    if (inductionVariable <= last)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var item = _this__u8e3s4.h(index);
        action(item);
      }
       while (inductionVariable <= last);
  }
  function fastMap(_this__u8e3s4, transform) {
    // Inline function 'kotlin.contracts.contract' call
    var target = ArrayList_init_$Create$_0(_this__u8e3s4.g());
    // Inline function 'androidx.compose.runtime.snapshots.fastForEach' call
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    var last = _this__u8e3s4.g() - 1 | 0;
    if (inductionVariable <= last)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var item = _this__u8e3s4.h(index);
        // Inline function 'androidx.compose.runtime.snapshots.fastMap.<anonymous>' call
        // Inline function 'kotlin.collections.plusAssign' call
        var tmp0_plusAssign = transform(item);
        target.b(tmp0_plusAssign);
      }
       while (inductionVariable <= last);
    return target;
  }
  function fastGroupBy(_this__u8e3s4, keySelector) {
    // Inline function 'kotlin.contracts.contract' call
    var destination = HashMap_init_$Create$_1(_this__u8e3s4.g());
    // Inline function 'androidx.compose.runtime.snapshots.fastForEach' call
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    var last = _this__u8e3s4.g() - 1 | 0;
    if (inductionVariable <= last)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var item = _this__u8e3s4.h(index);
        // Inline function 'androidx.compose.runtime.snapshots.fastGroupBy.<anonymous>' call
        var key = keySelector(item);
        var tmp$ret$1;
        // Inline function 'kotlin.collections.getOrPut' call
        var value = destination.l2(key);
        var tmp;
        if (value == null) {
          var tmp$ret$0;
          // Inline function 'androidx.compose.runtime.snapshots.fastGroupBy.<anonymous>.<anonymous>' call
          tmp$ret$0 = ArrayList_init_$Create$();
          var answer = tmp$ret$0;
          destination.a(key, answer);
          tmp = answer;
        } else {
          tmp = value;
        }
        tmp$ret$1 = tmp;
        var list = tmp$ret$1;
        list.b(item);
      }
       while (inductionVariable <= last);
    return destination;
  }
  function fastForEachIndexed(_this__u8e3s4, action) {
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    var last = _this__u8e3s4.g() - 1 | 0;
    if (inductionVariable <= last)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var item = _this__u8e3s4.h(index);
        action(index, item);
      }
       while (inductionVariable <= last);
  }
  function fastJoinToString(_this__u8e3s4, separator, prefix, postfix, limit, truncated, transform) {
    return fastJoinTo(_this__u8e3s4, StringBuilder_init_$Create$_0(), separator, prefix, postfix, limit, truncated, transform).toString();
  }
  function fastJoinToString$default(_this__u8e3s4, separator, prefix, postfix, limit, truncated, transform, $mask0, $handler) {
    if (!(($mask0 & 1) === 0))
      separator = ', ';
    if (!(($mask0 & 2) === 0))
      prefix = '';
    if (!(($mask0 & 4) === 0))
      postfix = '';
    if (!(($mask0 & 8) === 0))
      limit = -1;
    if (!(($mask0 & 16) === 0))
      truncated = '...';
    if (!(($mask0 & 32) === 0))
      transform = null;
    return fastJoinToString(_this__u8e3s4, separator, prefix, postfix, limit, truncated, transform);
  }
  function fastToSet(_this__u8e3s4) {
    var tmp$ret$0;
    // Inline function 'kotlin.also' call
    var tmp0_also = HashSet_init_$Create$_0(_this__u8e3s4.g());
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'androidx.compose.runtime.snapshots.fastToSet.<anonymous>' call
    // Inline function 'androidx.compose.runtime.snapshots.fastForEach' call
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    var last = _this__u8e3s4.g() - 1 | 0;
    if (inductionVariable <= last)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var item = _this__u8e3s4.h(index);
        // Inline function 'androidx.compose.runtime.snapshots.fastToSet.<anonymous>.<anonymous>' call
        tmp0_also.b(item);
      }
       while (inductionVariable <= last);
    tmp$ret$0 = tmp0_also;
    return tmp$ret$0;
  }
  function fastJoinTo(_this__u8e3s4, buffer, separator, prefix, postfix, limit, truncated, transform) {
    buffer.c(prefix);
    var count = 0;
    var inductionVariable = 0;
    var last = _this__u8e3s4.g() - 1 | 0;
    if (inductionVariable <= last)
      $l$loop: do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var element = _this__u8e3s4.h(index);
        count = count + 1 | 0;
        if (count > 1) {
          buffer.c(separator);
        }
        if (limit < 0 ? true : count <= limit) {
          appendElement_0(buffer, element, transform);
        } else
          break $l$loop;
      }
       while (inductionVariable <= last);
    if (limit >= 0 ? count > limit : false) {
      buffer.c(truncated);
    }
    buffer.c(postfix);
    return buffer;
  }
  function appendElement_0(_this__u8e3s4, element, transform) {
    if (!(transform == null)) {
      _this__u8e3s4.c(transform(element));
    } else {
      if (element == null ? true : isCharSequence(element)) {
        _this__u8e3s4.c(element);
      } else {
        if (element instanceof Char_0) {
          _this__u8e3s4.b5(element.i1_1);
        } else {
          _this__u8e3s4.c(toString_1(element));
        }
      }
    }
  }
  function get_emptyLambda() {
    init_properties_Snapshot_kt_28wf56();
    return emptyLambda;
  }
  var emptyLambda;
  function get_threadSnapshot() {
    init_properties_Snapshot_kt_28wf56();
    return threadSnapshot;
  }
  var threadSnapshot;
  function get_lock() {
    init_properties_Snapshot_kt_28wf56();
    return lock;
  }
  var lock;
  function set_openSnapshots(_set____db54di) {
    init_properties_Snapshot_kt_28wf56();
    openSnapshots = _set____db54di;
  }
  function get_openSnapshots() {
    init_properties_Snapshot_kt_28wf56();
    return openSnapshots;
  }
  var openSnapshots;
  function set_nextSnapshotId(_set____db54di) {
    init_properties_Snapshot_kt_28wf56();
    nextSnapshotId = _set____db54di;
  }
  function get_nextSnapshotId() {
    init_properties_Snapshot_kt_28wf56();
    return nextSnapshotId;
  }
  var nextSnapshotId;
  function get_pinningTable() {
    init_properties_Snapshot_kt_28wf56();
    return pinningTable;
  }
  var pinningTable;
  function get_applyObservers() {
    init_properties_Snapshot_kt_28wf56();
    return applyObservers;
  }
  var applyObservers;
  function get_globalWriteObservers() {
    init_properties_Snapshot_kt_28wf56();
    return globalWriteObservers;
  }
  var globalWriteObservers;
  function get_currentGlobalSnapshot() {
    init_properties_Snapshot_kt_28wf56();
    return currentGlobalSnapshot;
  }
  var currentGlobalSnapshot;
  function get_snapshotInitializer() {
    init_properties_Snapshot_kt_28wf56();
    return snapshotInitializer;
  }
  var snapshotInitializer;
  function StateObject() {
  }
  StateObject.$metadata$ = interfaceMeta('StateObject');
  function sam$androidx_compose_runtime_snapshots_ObserverHandle$0(function_0) {
    this.q1l_1 = function_0;
  }
  sam$androidx_compose_runtime_snapshots_ObserverHandle$0.prototype.pi = function () {
    return this.q1l_1();
  };
  sam$androidx_compose_runtime_snapshots_ObserverHandle$0.$metadata$ = classMeta('sam$androidx_compose_runtime_snapshots_ObserverHandle$0', [ObserverHandle]);
  function sam$androidx_compose_runtime_snapshots_ObserverHandle$0_0(function_0) {
    this.r1l_1 = function_0;
  }
  sam$androidx_compose_runtime_snapshots_ObserverHandle$0_0.prototype.pi = function () {
    return this.r1l_1();
  };
  sam$androidx_compose_runtime_snapshots_ObserverHandle$0_0.$metadata$ = classMeta('sam$androidx_compose_runtime_snapshots_ObserverHandle$0', [ObserverHandle]);
  function Snapshot$Companion$registerApplyObserver$lambda($observer) {
    return function () {
      var tmp$ret$2;
      // Inline function 'androidx.compose.runtime.snapshots.sync' call
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.synchronized' call
      var tmp0_synchronized = get_lock();
      var tmp$ret$0;
      // Inline function 'kotlinx.atomicfu.locks.synchronized' call
      get_applyObservers().n6($observer);
      tmp$ret$0 = Unit_getInstance();
      tmp$ret$1 = tmp$ret$0;
      tmp$ret$2 = tmp$ret$1;
      return Unit_getInstance();
    };
  }
  function Snapshot$Companion$registerGlobalWriteObserver$lambda($observer) {
    return function () {
      var tmp$ret$3;
      // Inline function 'androidx.compose.runtime.snapshots.sync' call
      var tmp$ret$2;
      // Inline function 'androidx.compose.runtime.synchronized' call
      var tmp0_synchronized = get_lock();
      var tmp$ret$1;
      // Inline function 'kotlinx.atomicfu.locks.synchronized' call
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.snapshots.Companion.registerGlobalWriteObserver.<anonymous>.<anonymous>' call
      tmp$ret$0 = get_globalWriteObservers().n6($observer);
      tmp$ret$1 = tmp$ret$0;
      tmp$ret$2 = tmp$ret$1;
      tmp$ret$3 = tmp$ret$2;
      advanceGlobalSnapshot_0();
      return Unit_getInstance();
    };
  }
  function Companion_15() {
    Companion_instance_15 = this;
  }
  Companion_15.prototype.fr = function () {
    return currentSnapshot();
  };
  Companion_15.prototype.c1b = function (readObserver, writeObserver) {
    var tmp = currentSnapshot();
    var tmp0_safe_receiver = tmp instanceof MutableSnapshot ? tmp : null;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.s1l(readObserver, writeObserver);
    var tmp_0;
    if (tmp1_elvis_lhs == null) {
      throw IllegalStateException_init_$Create$_0('Cannot create a mutable snapshot of an read-only snapshot');
    } else {
      tmp_0 = tmp1_elvis_lhs;
    }
    return tmp_0;
  };
  Companion_15.prototype.d1d = function (observer) {
    advanceGlobalSnapshot(get_emptyLambda());
    var tmp$ret$3;
    // Inline function 'androidx.compose.runtime.snapshots.sync' call
    var tmp$ret$2;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = get_lock();
    var tmp$ret$1;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.snapshots.Companion.registerApplyObserver.<anonymous>' call
    tmp$ret$0 = get_applyObservers().b(observer);
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    var tmp = Snapshot$Companion$registerApplyObserver$lambda(observer);
    return new sam$androidx_compose_runtime_snapshots_ObserverHandle$0(tmp);
  };
  Companion_15.prototype.t1l = function (observer) {
    var tmp$ret$3;
    // Inline function 'androidx.compose.runtime.snapshots.sync' call
    var tmp$ret$2;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = get_lock();
    var tmp$ret$1;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.snapshots.Companion.registerGlobalWriteObserver.<anonymous>' call
    tmp$ret$0 = get_globalWriteObservers().b(observer);
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    advanceGlobalSnapshot_0();
    var tmp = Snapshot$Companion$registerGlobalWriteObserver$lambda(observer);
    return new sam$androidx_compose_runtime_snapshots_ObserverHandle$0_0(tmp);
  };
  Companion_15.prototype.g1d = function () {
    return currentSnapshot().g1d();
  };
  Companion_15.prototype.b1a = function () {
    var tmp$ret$4;
    // Inline function 'androidx.compose.runtime.snapshots.sync' call
    var tmp$ret$3;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = get_lock();
    var tmp$ret$2;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.snapshots.Companion.sendApplyNotifications.<anonymous>' call
    var tmp0_safe_receiver = get_currentGlobalSnapshot().qk().u1l();
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      var tmp$ret$0;
      // Inline function 'kotlin.collections.isNotEmpty' call
      tmp$ret$0 = !tmp0_safe_receiver.i();
      tmp = tmp$ret$0;
    }
    tmp$ret$1 = tmp === true;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    tmp$ret$4 = tmp$ret$3;
    var changes = tmp$ret$4;
    if (changes) {
      advanceGlobalSnapshot_0();
    }
  };
  Companion_15.$metadata$ = objectMeta('Companion');
  var Companion_instance_15;
  function Companion_getInstance_15() {
    if (Companion_instance_15 == null)
      new Companion_15();
    return Companion_instance_15;
  }
  function Snapshot(id, invalid) {
    Companion_getInstance_15();
    this.a11_1 = invalid;
    this.b11_1 = id;
    this.c11_1 = false;
    this.d11_1 = !(id === 0) ? trackPinning(id, this.v1l()) : -1;
    this.e11_1 = 8;
  }
  Snapshot.prototype.w1l = function (_set____db54di) {
    this.a11_1 = _set____db54di;
  };
  Snapshot.prototype.v1l = function () {
    return this.a11_1;
  };
  Snapshot.prototype.x1l = function (_set____db54di) {
    this.b11_1 = _set____db54di;
  };
  Snapshot.prototype.f11 = function () {
    return this.b11_1;
  };
  Snapshot.prototype.pi = function () {
    this.c11_1 = true;
    var tmp$ret$2;
    // Inline function 'androidx.compose.runtime.snapshots.sync' call
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = get_lock();
    var tmp$ret$0;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    this.z1l();
    tmp$ret$0 = Unit_getInstance();
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
  };
  Snapshot.prototype.a1m = function (block) {
    var previous = this.d1b();
    try {
      return block();
    }finally {
      this.e1b(previous);
    }
  };
  Snapshot.prototype.d1b = function () {
    var previous = get_threadSnapshot().qk();
    get_threadSnapshot().o18(this);
    return previous;
  };
  Snapshot.prototype.e1b = function (snapshot) {
    get_threadSnapshot().o18(snapshot);
  };
  Snapshot.prototype.b1m = function () {
    return this.c11_1;
  };
  Snapshot.prototype.c1m = function () {
    return this.d11_1 >= 0;
  };
  Snapshot.prototype.g1m = function () {
    var tmp$ret$2;
    // Inline function 'androidx.compose.runtime.snapshots.sync' call
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = get_lock();
    var tmp$ret$0;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    this.h1m();
    this.i1m();
    tmp$ret$0 = Unit_getInstance();
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
  };
  Snapshot.prototype.h1m = function () {
    set_openSnapshots(get_openSnapshots().n1m(this.f11()));
  };
  Snapshot.prototype.i1m = function () {
    this.z1l();
  };
  Snapshot.prototype.o1m = function () {
    // Inline function 'kotlin.require' call
    var tmp0_require = !this.c11_1;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.snapshots.Snapshot.validateNotDisposed.<anonymous>' call
      tmp$ret$0 = 'Cannot use a disposed snapshot';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString_2(message));
    }
  };
  Snapshot.prototype.z1l = function () {
    if (this.d11_1 >= 0) {
      releasePinningLocked(this.d11_1);
      this.d11_1 = -1;
    }
  };
  Snapshot.prototype.p1m = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.also' call
    var tmp0_also = this.d11_1;
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'androidx.compose.runtime.snapshots.Snapshot.takeoverPinnedSnapshot.<anonymous>' call
    this.d11_1 = -1;
    tmp$ret$0 = tmp0_also;
    return tmp$ret$0;
  };
  Snapshot.$metadata$ = classMeta('Snapshot');
  function ObserverHandle() {
  }
  ObserverHandle.$metadata$ = interfaceMeta('ObserverHandle');
  function abandon($this) {
    var modified = $this.u1l();
    if (!(modified == null)) {
      $this.q1m();
      $this.r1m(null);
      var id = $this.f11();
      var tmp0_iterator = modified.d();
      while (tmp0_iterator.e()) {
        var state = tmp0_iterator.f();
        var current = state.b1f();
        while (!(current == null)) {
          if (current.t1e_1 === id ? true : contains_0($this.n1b_1, current.t1e_1)) {
            current.t1e_1 = 0;
          }
          current = current.u1e_1;
        }
      }
    }
    $this.g1m();
  }
  function MutableSnapshot(id, invalid, readObserver, writeObserver) {
    Snapshot.call(this, id, invalid);
    this.k1b_1 = readObserver;
    this.l1b_1 = writeObserver;
    this.m1b_1 = null;
    this.n1b_1 = Companion_getInstance_16().s1m_1;
    this.o1b_1 = new Int32Array(0);
    this.p1b_1 = 1;
    this.q1b_1 = false;
    this.r1b_1 = 8;
  }
  MutableSnapshot.prototype.d1m = function () {
    return this.k1b_1;
  };
  MutableSnapshot.prototype.e1m = function () {
    return this.l1b_1;
  };
  MutableSnapshot.prototype.s1l = function (readObserver, writeObserver) {
    this.o1m();
    this.t1m();
    var tmp$ret$9;
    // Inline function 'androidx.compose.runtime.snapshots.MutableSnapshot.advance' call
    this.u1m(this.f11());
    var tmp$ret$8;
    // Inline function 'kotlin.also' call
    var tmp$ret$4;
    // Inline function 'androidx.compose.runtime.snapshots.MutableSnapshot.takeNestedMutableSnapshot.<anonymous>' call
    var tmp$ret$3;
    // Inline function 'androidx.compose.runtime.snapshots.sync' call
    var tmp$ret$2;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = get_lock();
    var tmp$ret$1;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.snapshots.MutableSnapshot.takeNestedMutableSnapshot.<anonymous>.<anonymous>' call
    var tmp0 = get_nextSnapshotId();
    set_nextSnapshotId(tmp0 + 1 | 0);
    var newId = tmp0;
    set_openSnapshots(get_openSnapshots().v1m(newId));
    var currentInvalid = this.v1l();
    this.w1l(currentInvalid.v1m(newId));
    var tmp = addRange(currentInvalid, this.f11() + 1 | 0, newId);
    var tmp_0 = this.d1m();
    tmp$ret$0 = new NestedMutableSnapshot(newId, tmp, mergedReadObserver$default(readObserver, tmp_0, false, 4, null), mergedWriteObserver(writeObserver, this.e1m()), this);
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    tmp$ret$4 = tmp$ret$3;
    var tmp0_also = tmp$ret$4;
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'androidx.compose.runtime.snapshots.MutableSnapshot.advance.<anonymous>' call
    if (!this.q1b_1 ? !this.c11_1 : false) {
      var previousId = this.f11();
      var tmp$ret$7;
      // Inline function 'androidx.compose.runtime.snapshots.sync' call
      var tmp$ret$6;
      // Inline function 'androidx.compose.runtime.synchronized' call
      var tmp0_synchronized_0 = get_lock();
      var tmp$ret$5;
      // Inline function 'kotlinx.atomicfu.locks.synchronized' call
      var tmp0_0 = get_nextSnapshotId();
      set_nextSnapshotId(tmp0_0 + 1 | 0);
      this.x1l(tmp0_0);
      set_openSnapshots(get_openSnapshots().v1m(this.f11()));
      tmp$ret$5 = Unit_getInstance();
      tmp$ret$6 = tmp$ret$5;
      tmp$ret$7 = tmp$ret$6;
      this.w1l(addRange(this.v1l(), previousId + 1 | 0, this.f11()));
    }
    tmp$ret$8 = tmp0_also;
    tmp$ret$9 = tmp$ret$8;
    return tmp$ret$9;
  };
  MutableSnapshot.prototype.s1b = function () {
    var modified = this.u1l();
    var optimisticMerges_0 = !(modified == null) ? optimisticMerges(get_currentGlobalSnapshot().qk(), this, get_openSnapshots().n1m(get_currentGlobalSnapshot().qk().f11())) : null;
    var tmp$ret$4;
    // Inline function 'androidx.compose.runtime.snapshots.sync' call
    var tmp$ret$3;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = get_lock();
    var tmp$ret$2;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.snapshots.MutableSnapshot.apply.<anonymous>' call
    validateOpen(this);
    var tmp;
    if (modified == null ? true : modified.g() === 0) {
      this.h1m();
      var previousGlobalSnapshot = get_currentGlobalSnapshot().qk();
      takeNewGlobalSnapshot(previousGlobalSnapshot, get_emptyLambda());
      var globalModified = previousGlobalSnapshot.u1l();
      var tmp_0;
      var tmp_1;
      if (!(globalModified == null)) {
        var tmp$ret$0;
        // Inline function 'kotlin.collections.isNotEmpty' call
        tmp$ret$0 = !globalModified.i();
        tmp_1 = tmp$ret$0;
      } else {
        tmp_1 = false;
      }
      if (tmp_1) {
        tmp_0 = to(toMutableList_0(get_applyObservers()), globalModified);
      } else {
        tmp_0 = to(emptyList(), null);
      }
      tmp = tmp_0;
    } else {
      var previousGlobalSnapshot_0 = get_currentGlobalSnapshot().qk();
      var result = this.w1m(get_nextSnapshotId(), optimisticMerges_0, get_openSnapshots().n1m(previousGlobalSnapshot_0.f11()));
      if (!equals_0(result, Success_getInstance()))
        return result;
      this.h1m();
      takeNewGlobalSnapshot(previousGlobalSnapshot_0, get_emptyLambda());
      var globalModified_0 = previousGlobalSnapshot_0.u1l();
      this.r1m(null);
      previousGlobalSnapshot_0.r1m(null);
      tmp = to(toMutableList_0(get_applyObservers()), globalModified_0);
    }
    tmp$ret$1 = tmp;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    tmp$ret$4 = tmp$ret$3;
    var tmp0_container = tmp$ret$4;
    var observers = tmp0_container.a3();
    var globalModified_1 = tmp0_container.b3();
    this.q1b_1 = true;
    var tmp_2;
    if (!(globalModified_1 == null)) {
      var tmp$ret$5;
      // Inline function 'kotlin.collections.isNotEmpty' call
      tmp$ret$5 = !globalModified_1.i();
      tmp_2 = tmp$ret$5;
    } else {
      tmp_2 = false;
    }
    if (tmp_2) {
      // Inline function 'androidx.compose.runtime.snapshots.fastForEach' call
      // Inline function 'kotlin.contracts.contract' call
      var inductionVariable = 0;
      var last = observers.g() - 1 | 0;
      if (inductionVariable <= last)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var item = observers.h(index);
          // Inline function 'androidx.compose.runtime.snapshots.MutableSnapshot.apply.<anonymous>' call
          item(globalModified_1, this);
        }
         while (inductionVariable <= last);
    }
    var tmp_3;
    if (!(modified == null)) {
      var tmp$ret$6;
      // Inline function 'kotlin.collections.isNotEmpty' call
      tmp$ret$6 = !modified.i();
      tmp_3 = tmp$ret$6;
    } else {
      tmp_3 = false;
    }
    if (tmp_3) {
      // Inline function 'androidx.compose.runtime.snapshots.fastForEach' call
      // Inline function 'kotlin.contracts.contract' call
      var inductionVariable_0 = 0;
      var last_0 = observers.g() - 1 | 0;
      if (inductionVariable_0 <= last_0)
        do {
          var index_0 = inductionVariable_0;
          inductionVariable_0 = inductionVariable_0 + 1 | 0;
          var item_0 = observers.h(index_0);
          // Inline function 'androidx.compose.runtime.snapshots.MutableSnapshot.apply.<anonymous>' call
          item_0(modified, this);
        }
         while (inductionVariable_0 <= last_0);
    }
    var tmp$ret$9;
    // Inline function 'androidx.compose.runtime.snapshots.sync' call
    var tmp$ret$8;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp1_synchronized = get_lock();
    var tmp$ret$7;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    this.i1m();
    tmp$ret$7 = Unit_getInstance();
    tmp$ret$8 = tmp$ret$7;
    tmp$ret$9 = tmp$ret$8;
    return Success_getInstance();
  };
  MutableSnapshot.prototype.y1l = function () {
    return false;
  };
  MutableSnapshot.prototype.pi = function () {
    if (!this.c11_1) {
      Snapshot.prototype.pi.call(this);
      this.x1m(this);
    }
  };
  MutableSnapshot.prototype.y1m = function (snapshot) {
    var tmp0_this = this;
    var tmp1 = tmp0_this.p1b_1;
    tmp0_this.p1b_1 = tmp1 + 1 | 0;
  };
  MutableSnapshot.prototype.x1m = function (snapshot) {
    // Inline function 'kotlin.require' call
    var tmp0_require = this.p1b_1 > 0;
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'kotlin.require.<anonymous>' call
      tmp$ret$0 = 'Failed requirement.';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString_2(message));
    }
    var tmp0_this = this;
    tmp0_this.p1b_1 = tmp0_this.p1b_1 - 1 | 0;
    if (tmp0_this.p1b_1 === 0) {
      if (!this.q1b_1) {
        abandon(this);
      }
    }
  };
  MutableSnapshot.prototype.g1d = function () {
    if (this.q1b_1 ? true : this.c11_1)
      return Unit_getInstance();
    this.z1m();
  };
  MutableSnapshot.prototype.h1m = function () {
    set_openSnapshots(get_openSnapshots().n1m(this.f11()).a1n(this.n1b_1));
  };
  MutableSnapshot.prototype.i1m = function () {
    this.b1n();
    Snapshot.prototype.i1m.call(this);
  };
  MutableSnapshot.prototype.q1m = function () {
    // Inline function 'kotlin.check' call
    var tmp0_check = !this.q1b_1;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_check) {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.snapshots.MutableSnapshot.validateNotApplied.<anonymous>' call
      tmp$ret$0 = 'Unsupported operation on a snapshot that has been applied';
      var message = tmp$ret$0;
      throw IllegalStateException_init_$Create$_0(toString_2(message));
    }
  };
  MutableSnapshot.prototype.t1m = function () {
    // Inline function 'kotlin.check' call
    var tmp;
    if (!this.q1b_1) {
      tmp = true;
    } else {
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.snapshots.Snapshot.isPinned' call
      tmp$ret$0 = this.d11_1 >= 0;
      tmp = tmp$ret$0;
    }
    var tmp0_check = tmp;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_check) {
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.snapshots.MutableSnapshot.validateNotAppliedOrPinned.<anonymous>' call
      tmp$ret$1 = 'Unsupported operation on a disposed or applied snapshot';
      var message = tmp$ret$1;
      throw IllegalStateException_init_$Create$_0(toString_2(message));
    }
  };
  MutableSnapshot.prototype.w1m = function (snapshotId, optimisticMerges, invalidSnapshots) {
    var mergedRecords = null;
    var start = this.v1l().v1m(this.f11()).c1n(this.n1b_1);
    var modified = ensureNotNull(this.u1l());
    var statesToRemove = null;
    var tmp0_iterator = modified.d();
    $l$loop_0: while (tmp0_iterator.e()) {
      var state = tmp0_iterator.f();
      var first = state.b1f();
      var tmp1_elvis_lhs = readable(first, snapshotId, invalidSnapshots);
      var tmp;
      if (tmp1_elvis_lhs == null) {
        continue $l$loop_0;
      } else {
        tmp = tmp1_elvis_lhs;
      }
      var current = tmp;
      var tmp2_elvis_lhs = readable(first, this.f11(), start);
      var tmp_0;
      if (tmp2_elvis_lhs == null) {
        continue $l$loop_0;
      } else {
        tmp_0 = tmp2_elvis_lhs;
      }
      var previous = tmp_0;
      if (!equals_0(current, previous)) {
        var tmp3_elvis_lhs = readable(first, this.f11(), this.v1l());
        var tmp_1;
        if (tmp3_elvis_lhs == null) {
          readError();
        } else {
          tmp_1 = tmp3_elvis_lhs;
        }
        var applied = tmp_1;
        var tmp4_safe_receiver = optimisticMerges;
        var tmp5_elvis_lhs = tmp4_safe_receiver == null ? null : tmp4_safe_receiver.l2(current);
        var tmp_2;
        if (tmp5_elvis_lhs == null) {
          var tmp$ret$1;
          // Inline function 'kotlin.run' call
          // Inline function 'kotlin.contracts.contract' call
          var tmp$ret$0;
          // Inline function 'androidx.compose.runtime.snapshots.MutableSnapshot.innerApplyLocked.<anonymous>' call
          tmp$ret$0 = state.d1f(previous, current, applied);
          tmp$ret$1 = tmp$ret$0;
          tmp_2 = tmp$ret$1;
        } else {
          tmp_2 = tmp5_elvis_lhs;
        }
        var merged = tmp_2;
        var tmp6_subject = merged;
        if (tmp6_subject == null)
          return new Failure_0(this);
        else if (equals_0(tmp6_subject, applied)) {
        } else if (equals_0(tmp6_subject, current)) {
          var tmp7_elvis_lhs = mergedRecords;
          var tmp_3;
          if (tmp7_elvis_lhs == null) {
            var tmp$ret$3;
            // Inline function 'kotlin.also' call
            var tmp$ret$2;
            // Inline function 'kotlin.collections.mutableListOf' call
            tmp$ret$2 = ArrayList_init_$Create$();
            var tmp0_also = tmp$ret$2;
            // Inline function 'kotlin.contracts.contract' call
            // Inline function 'androidx.compose.runtime.snapshots.MutableSnapshot.innerApplyLocked.<anonymous>' call
            mergedRecords = tmp0_also;
            tmp$ret$3 = tmp0_also;
            tmp_3 = tmp$ret$3;
          } else {
            tmp_3 = tmp7_elvis_lhs;
          }
          tmp_3.b(to(state, current.s1e()));
          var tmp8_elvis_lhs = statesToRemove;
          var tmp_4;
          if (tmp8_elvis_lhs == null) {
            var tmp$ret$5;
            // Inline function 'kotlin.also' call
            var tmp$ret$4;
            // Inline function 'kotlin.collections.mutableListOf' call
            tmp$ret$4 = ArrayList_init_$Create$();
            var tmp1_also = tmp$ret$4;
            // Inline function 'kotlin.contracts.contract' call
            // Inline function 'androidx.compose.runtime.snapshots.MutableSnapshot.innerApplyLocked.<anonymous>' call
            statesToRemove = tmp1_also;
            tmp$ret$5 = tmp1_also;
            tmp_4 = tmp$ret$5;
          } else {
            tmp_4 = tmp8_elvis_lhs;
          }
          tmp_4.b(state);
        } else {
          var tmp9_elvis_lhs = mergedRecords;
          var tmp_5;
          if (tmp9_elvis_lhs == null) {
            var tmp$ret$7;
            // Inline function 'kotlin.also' call
            var tmp$ret$6;
            // Inline function 'kotlin.collections.mutableListOf' call
            tmp$ret$6 = ArrayList_init_$Create$();
            var tmp2_also = tmp$ret$6;
            // Inline function 'kotlin.contracts.contract' call
            // Inline function 'androidx.compose.runtime.snapshots.MutableSnapshot.innerApplyLocked.<anonymous>' call
            mergedRecords = tmp2_also;
            tmp$ret$7 = tmp2_also;
            tmp_5 = tmp$ret$7;
          } else {
            tmp_5 = tmp9_elvis_lhs;
          }
          tmp_5.b(!equals_0(merged, previous) ? to(state, merged) : to(state, previous.s1e()));
        }
      }
    }
    var tmp10_safe_receiver = mergedRecords;
    if (tmp10_safe_receiver == null)
      null;
    else {
      var tmp$ret$11;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      this.z1m();
      // Inline function 'kotlin.contracts.contract' call
      var inductionVariable = 0;
      var last = tmp10_safe_receiver.g() - 1 | 0;
      var tmp_6;
      if (inductionVariable <= last) {
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var item = tmp10_safe_receiver.h(index);
          // Inline function 'androidx.compose.runtime.snapshots.MutableSnapshot.innerApplyLocked.<anonymous>.<anonymous>' call
          var tmp0_container = item;
          var state_0 = tmp0_container.a3();
          var stateRecord = tmp0_container.b3();
          stateRecord.t1e_1 = this.f11();
          var tmp$ret$10;
          // Inline function 'androidx.compose.runtime.snapshots.sync' call
          var tmp$ret$9;
          // Inline function 'androidx.compose.runtime.synchronized' call
          var tmp0_synchronized = get_lock();
          var tmp$ret$8;
          // Inline function 'kotlinx.atomicfu.locks.synchronized' call
          stateRecord.u1e_1 = state_0.b1f();
          state_0.c1f(stateRecord);
          tmp$ret$8 = Unit_getInstance();
          tmp$ret$9 = tmp$ret$8;
          tmp$ret$10 = tmp$ret$9;
        }
         while (inductionVariable <= last);
        tmp_6 = Unit_getInstance();
      }
      tmp$ret$11 = tmp_6;
    }
    var tmp11_safe_receiver = statesToRemove;
    if (tmp11_safe_receiver == null)
      null;
    else {
      var tmp$ret$13;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$12;
      // Inline function 'androidx.compose.runtime.snapshots.MutableSnapshot.innerApplyLocked.<anonymous>' call
      tmp$ret$12 = modified.p6(tmp11_safe_receiver);
      tmp$ret$13 = tmp$ret$12;
    }
    return Success_getInstance();
  };
  MutableSnapshot.prototype.d1n = function (block) {
    this.u1m(this.f11());
    var tmp$ret$3;
    // Inline function 'kotlin.also' call
    var tmp0_also = block();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'androidx.compose.runtime.snapshots.MutableSnapshot.advance.<anonymous>' call
    if (!this.q1b_1 ? !this.c11_1 : false) {
      var previousId = this.f11();
      var tmp$ret$2;
      // Inline function 'androidx.compose.runtime.snapshots.sync' call
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.synchronized' call
      var tmp0_synchronized = get_lock();
      var tmp$ret$0;
      // Inline function 'kotlinx.atomicfu.locks.synchronized' call
      var tmp0 = get_nextSnapshotId();
      set_nextSnapshotId(tmp0 + 1 | 0);
      this.x1l(tmp0);
      set_openSnapshots(get_openSnapshots().v1m(this.f11()));
      tmp$ret$0 = Unit_getInstance();
      tmp$ret$1 = tmp$ret$0;
      tmp$ret$2 = tmp$ret$1;
      this.w1l(addRange(this.v1l(), previousId + 1 | 0, this.f11()));
    }
    tmp$ret$3 = tmp0_also;
    return tmp$ret$3;
  };
  MutableSnapshot.prototype.z1m = function () {
    var tmp$ret$5;
    // Inline function 'androidx.compose.runtime.snapshots.MutableSnapshot.advance' call
    this.u1m(this.f11());
    var tmp$ret$4;
    // Inline function 'kotlin.also' call
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.snapshots.MutableSnapshot.advance.<anonymous>' call
    tmp$ret$0 = Unit_getInstance();
    var tmp0_also = tmp$ret$0;
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'androidx.compose.runtime.snapshots.MutableSnapshot.advance.<anonymous>' call
    if (!this.q1b_1 ? !this.c11_1 : false) {
      var previousId = this.f11();
      var tmp$ret$3;
      // Inline function 'androidx.compose.runtime.snapshots.sync' call
      var tmp$ret$2;
      // Inline function 'androidx.compose.runtime.synchronized' call
      var tmp0_synchronized = get_lock();
      var tmp$ret$1;
      // Inline function 'kotlinx.atomicfu.locks.synchronized' call
      var tmp0 = get_nextSnapshotId();
      set_nextSnapshotId(tmp0 + 1 | 0);
      this.x1l(tmp0);
      set_openSnapshots(get_openSnapshots().v1m(this.f11()));
      tmp$ret$1 = Unit_getInstance();
      tmp$ret$2 = tmp$ret$1;
      tmp$ret$3 = tmp$ret$2;
      this.w1l(addRange(this.v1l(), previousId + 1 | 0, this.f11()));
    }
    tmp$ret$4 = tmp0_also;
    tmp$ret$5 = tmp$ret$4;
    return tmp$ret$5;
  };
  MutableSnapshot.prototype.u1m = function (id) {
    var tmp$ret$2;
    // Inline function 'androidx.compose.runtime.snapshots.sync' call
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = get_lock();
    var tmp$ret$0;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    this.n1b_1 = this.n1b_1.v1m(id);
    tmp$ret$0 = Unit_getInstance();
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
  };
  MutableSnapshot.prototype.e1n = function (id) {
    if (id >= 0) {
      var tmp = this;
      var tmp$ret$2;
      // Inline function 'kotlin.collections.plus' call
      var tmp0_plus = this.o1b_1;
      var tmp$ret$1;
      // Inline function 'kotlin.collections.plus' call
      var tmp$ret$0;
      // Inline function 'kotlin.intArrayOf' call
      tmp$ret$0 = new Int32Array([id]);
      var tmp0_plus_0 = tmp$ret$0;
      tmp$ret$1 = primitiveArrayConcat([tmp0_plus, tmp0_plus_0]);
      tmp$ret$2 = tmp$ret$1;
      tmp.o1b_1 = tmp$ret$2;
    }
  };
  MutableSnapshot.prototype.f1n = function (handles) {
    var tmp$ret$0;
    // Inline function 'kotlin.collections.isEmpty' call
    tmp$ret$0 = handles.length === 0;
    if (tmp$ret$0)
      return Unit_getInstance();
    var pinned = this.o1b_1;
    var tmp$ret$1;
    // Inline function 'kotlin.collections.isEmpty' call
    tmp$ret$1 = pinned.length === 0;
    if (tmp$ret$1)
      this.o1b_1 = handles;
    else {
      var tmp = this;
      var tmp$ret$2;
      // Inline function 'kotlin.collections.plus' call
      tmp$ret$2 = primitiveArrayConcat([pinned, handles]);
      tmp.o1b_1 = tmp$ret$2;
    }
  };
  MutableSnapshot.prototype.b1n = function () {
    var inductionVariable = 0;
    var last = this.o1b_1.length - 1 | 0;
    if (inductionVariable <= last)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        releasePinningLocked(this.o1b_1[index]);
      }
       while (inductionVariable <= last);
  };
  MutableSnapshot.prototype.g1n = function (snapshots) {
    var tmp$ret$2;
    // Inline function 'androidx.compose.runtime.snapshots.sync' call
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = get_lock();
    var tmp$ret$0;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    this.n1b_1 = this.n1b_1.c1n(snapshots);
    tmp$ret$0 = Unit_getInstance();
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
  };
  MutableSnapshot.prototype.f1m = function (state) {
    var tmp0_elvis_lhs = this.u1l();
    var tmp;
    if (tmp0_elvis_lhs == null) {
      var tmp$ret$0;
      // Inline function 'kotlin.also' call
      var tmp0_also = HashSet_init_$Create$();
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'androidx.compose.runtime.snapshots.MutableSnapshot.recordModified.<anonymous>' call
      this.r1m(tmp0_also);
      tmp$ret$0 = tmp0_also;
      tmp = tmp$ret$0;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    tmp.b(state);
  };
  MutableSnapshot.prototype.r1m = function (_set____db54di) {
    this.m1b_1 = _set____db54di;
  };
  MutableSnapshot.prototype.u1l = function () {
    return this.m1b_1;
  };
  MutableSnapshot.prototype.h1n = function () {
    return this.q1b_1;
  };
  MutableSnapshot.$metadata$ = classMeta('MutableSnapshot', undefined, undefined, undefined, undefined, Snapshot.prototype);
  function Success() {
    Success_instance = this;
    SnapshotApplyResult.call(this);
    this.j1n_1 = 0;
  }
  Success.$metadata$ = objectMeta('Success', undefined, undefined, undefined, undefined, SnapshotApplyResult.prototype);
  var Success_instance;
  function Success_getInstance() {
    if (Success_instance == null)
      new Success();
    return Success_instance;
  }
  function Failure_0(snapshot) {
    SnapshotApplyResult.call(this);
    this.l1n_1 = snapshot;
    this.m1n_1 = 8;
  }
  Failure_0.$metadata$ = classMeta('Failure', undefined, undefined, undefined, undefined, SnapshotApplyResult.prototype);
  function SnapshotApplyResult() {
    this.n1n_1 = 0;
  }
  SnapshotApplyResult.$metadata$ = classMeta('SnapshotApplyResult');
  function GlobalSnapshot$_init_$lambda_36kgl8($tmp0_safe_receiver) {
    return function (state) {
      // Inline function 'kotlin.contracts.contract' call
      var inductionVariable = 0;
      var last = $tmp0_safe_receiver.g() - 1 | 0;
      var tmp;
      if (inductionVariable <= last) {
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var item = $tmp0_safe_receiver.h(index);
          // Inline function 'androidx.compose.runtime.snapshots.GlobalSnapshot.<init>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
          item(state);
        }
         while (inductionVariable <= last);
        tmp = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  function GlobalSnapshot$takeNestedMutableSnapshot$lambda($readObserver, $writeObserver) {
    return function (invalid) {
      var tmp$ret$3;
      // Inline function 'androidx.compose.runtime.snapshots.sync' call
      var tmp$ret$2;
      // Inline function 'androidx.compose.runtime.synchronized' call
      var tmp0_synchronized = get_lock();
      var tmp$ret$1;
      // Inline function 'kotlinx.atomicfu.locks.synchronized' call
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.snapshots.GlobalSnapshot.takeNestedMutableSnapshot.<anonymous>.<anonymous>' call
      var tmp0 = get_nextSnapshotId();
      set_nextSnapshotId(tmp0 + 1 | 0);
      tmp$ret$0 = tmp0;
      tmp$ret$1 = tmp$ret$0;
      tmp$ret$2 = tmp$ret$1;
      tmp$ret$3 = tmp$ret$2;
      return new MutableSnapshot(tmp$ret$3, invalid, $readObserver, $writeObserver);
    };
  }
  function GlobalSnapshot(id, invalid) {
    var tmp$ret$6;
    // Inline function 'androidx.compose.runtime.snapshots.sync' call
    var tmp$ret$5;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = get_lock();
    var tmp$ret$4;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    var tmp$ret$3;
    // Inline function 'androidx.compose.runtime.snapshots.GlobalSnapshot.<init>.<anonymous>' call
    var tmp;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.isNotEmpty' call
    var tmp0_isNotEmpty = get_globalWriteObservers();
    tmp$ret$0 = !tmp0_isNotEmpty.i();
    if (tmp$ret$0) {
      tmp = toMutableList_0(get_globalWriteObservers());
    } else {
      tmp = null;
    }
    var tmp0_safe_receiver = tmp;
    var tmp_0;
    if (tmp0_safe_receiver == null) {
      tmp_0 = null;
    } else {
      var tmp$ret$2;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.snapshots.GlobalSnapshot.<init>.<anonymous>.<anonymous>' call
      var tmp0_elvis_lhs = singleOrNull(tmp0_safe_receiver);
      var tmp_1;
      if (tmp0_elvis_lhs == null) {
        tmp_1 = GlobalSnapshot$_init_$lambda_36kgl8(tmp0_safe_receiver);
      } else {
        tmp_1 = tmp0_elvis_lhs;
      }
      tmp$ret$1 = tmp_1;
      tmp$ret$2 = tmp$ret$1;
      tmp_0 = tmp$ret$2;
    }
    tmp$ret$3 = tmp_0;
    tmp$ret$4 = tmp$ret$3;
    tmp$ret$5 = tmp$ret$4;
    tmp$ret$6 = tmp$ret$5;
    MutableSnapshot.call(this, id, invalid, null, tmp$ret$6);
  }
  GlobalSnapshot.prototype.s1l = function (readObserver, writeObserver) {
    return takeNewSnapshot(GlobalSnapshot$takeNestedMutableSnapshot$lambda(readObserver, writeObserver));
  };
  GlobalSnapshot.prototype.g1d = function () {
    advanceGlobalSnapshot_0();
  };
  GlobalSnapshot.prototype.b1o = function (snapshot) {
    unsupported_0();
  };
  GlobalSnapshot.prototype.x1m = function (snapshot) {
    return this.b1o(snapshot);
  };
  GlobalSnapshot.prototype.c1o = function (snapshot) {
    unsupported_0();
  };
  GlobalSnapshot.prototype.y1m = function (snapshot) {
    return this.c1o(snapshot);
  };
  GlobalSnapshot.prototype.s1b = function () {
    throw IllegalStateException_init_$Create$_0('Cannot apply the global snapshot directly. Call Snapshot.advanceGlobalSnapshot');
  };
  GlobalSnapshot.prototype.pi = function () {
    var tmp$ret$2;
    // Inline function 'androidx.compose.runtime.snapshots.sync' call
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = get_lock();
    var tmp$ret$0;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    this.z1l();
    tmp$ret$0 = Unit_getInstance();
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
  };
  GlobalSnapshot.$metadata$ = classMeta('GlobalSnapshot', undefined, undefined, undefined, undefined, MutableSnapshot.prototype);
  function StateRecord() {
    this.t1e_1 = currentSnapshot().f11();
    this.u1e_1 = null;
    this.v1e_1 = 8;
  }
  StateRecord.prototype.w1e = function (_set____db54di) {
    this.t1e_1 = _set____db54di;
  };
  StateRecord.prototype.x1e = function (_set____db54di) {
    this.u1e_1 = _set____db54di;
  };
  StateRecord.$metadata$ = classMeta('StateRecord');
  function sync(block) {
    init_properties_Snapshot_kt_28wf56();
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = get_lock();
    var tmp$ret$0;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    tmp$ret$0 = block();
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  }
  function trackPinning(id, invalid) {
    init_properties_Snapshot_kt_28wf56();
    var pinned = invalid.d1o(id);
    var tmp$ret$3;
    // Inline function 'androidx.compose.runtime.snapshots.sync' call
    var tmp$ret$2;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = get_lock();
    var tmp$ret$1;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.snapshots.trackPinning.<anonymous>' call
    tmp$ret$0 = get_pinningTable().j1o(pinned);
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    return tmp$ret$3;
  }
  function releasePinningLocked(handle) {
    init_properties_Snapshot_kt_28wf56();
    get_pinningTable().k1o(handle);
  }
  function currentSnapshot() {
    init_properties_Snapshot_kt_28wf56();
    var tmp0_elvis_lhs = get_threadSnapshot().qk();
    return tmp0_elvis_lhs == null ? get_currentGlobalSnapshot().qk() : tmp0_elvis_lhs;
  }
  function advanceGlobalSnapshot(block) {
    init_properties_Snapshot_kt_28wf56();
    var previousGlobalSnapshot = get_currentGlobalSnapshot().qk();
    var tmp$ret$3;
    // Inline function 'androidx.compose.runtime.snapshots.sync' call
    var tmp$ret$2;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = get_lock();
    var tmp$ret$1;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.snapshots.advanceGlobalSnapshot.<anonymous>' call
    tmp$ret$0 = takeNewGlobalSnapshot(previousGlobalSnapshot, block);
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    var result = tmp$ret$3;
    var modified = previousGlobalSnapshot.u1l();
    if (!(modified == null)) {
      var tmp$ret$7;
      // Inline function 'androidx.compose.runtime.snapshots.sync' call
      var tmp$ret$6;
      // Inline function 'androidx.compose.runtime.synchronized' call
      var tmp0_synchronized_0 = get_lock();
      var tmp$ret$5;
      // Inline function 'kotlinx.atomicfu.locks.synchronized' call
      var tmp$ret$4;
      // Inline function 'androidx.compose.runtime.snapshots.advanceGlobalSnapshot.<anonymous>' call
      tmp$ret$4 = toMutableList_0(get_applyObservers());
      tmp$ret$5 = tmp$ret$4;
      tmp$ret$6 = tmp$ret$5;
      tmp$ret$7 = tmp$ret$6;
      var observers = tmp$ret$7;
      // Inline function 'androidx.compose.runtime.snapshots.fastForEach' call
      // Inline function 'kotlin.contracts.contract' call
      var inductionVariable = 0;
      var last = observers.g() - 1 | 0;
      if (inductionVariable <= last)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var item = observers.h(index);
          // Inline function 'androidx.compose.runtime.snapshots.advanceGlobalSnapshot.<anonymous>' call
          item(modified, previousGlobalSnapshot);
        }
         while (inductionVariable <= last);
    }
    return result;
  }
  function advanceGlobalSnapshot_0() {
    init_properties_Snapshot_kt_28wf56();
    return advanceGlobalSnapshot(advanceGlobalSnapshot$lambda);
  }
  function deactivate($this) {
    if (!$this.z1o_1) {
      $this.z1o_1 = true;
      $this.y1o_1.x1m($this);
    }
  }
  function NestedMutableSnapshot(id, invalid, readObserver, writeObserver, parent) {
    MutableSnapshot.call(this, id, invalid, readObserver, writeObserver);
    this.y1o_1 = parent;
    this.z1o_1 = false;
    this.y1o_1.y1m(this);
  }
  NestedMutableSnapshot.prototype.r1d = function () {
    return this.y1o_1;
  };
  NestedMutableSnapshot.prototype.pi = function () {
    if (!this.c11_1) {
      MutableSnapshot.prototype.pi.call(this);
      deactivate(this);
    }
  };
  NestedMutableSnapshot.prototype.s1b = function () {
    if (this.y1o_1.q1b_1 ? true : this.y1o_1.c11_1)
      return new Failure_0(this);
    var modified = this.u1l();
    var id = this.f11();
    var optimisticMerges_0 = !(modified == null) ? optimisticMerges(this.y1o_1, this, this.y1o_1.v1l()) : null;
    var tmp$ret$3;
    // Inline function 'androidx.compose.runtime.snapshots.sync' call
    var tmp$ret$2;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = get_lock();
    var tmp$ret$1;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    validateOpen(this);
    if (modified == null ? true : modified.g() === 0) {
      this.g1m();
    } else {
      var result = this.w1m(this.y1o_1.f11(), optimisticMerges_0, this.y1o_1.v1l());
      if (!equals_0(result, Success_getInstance()))
        return result;
      var tmp0_elvis_lhs = this.y1o_1.u1l();
      var tmp;
      if (tmp0_elvis_lhs == null) {
        var tmp$ret$0;
        // Inline function 'kotlin.also' call
        var tmp0_also = HashSet_init_$Create$();
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'androidx.compose.runtime.snapshots.NestedMutableSnapshot.apply.<anonymous>.<anonymous>' call
        this.y1o_1.r1m(tmp0_also);
        tmp$ret$0 = tmp0_also;
        tmp = tmp$ret$0;
      } else {
        tmp = tmp0_elvis_lhs;
      }
      tmp.h1(modified);
    }
    if (this.y1o_1.f11() < id) {
      this.y1o_1.z1m();
    }
    this.y1o_1.w1l(this.y1o_1.v1l().n1m(id).a1n(this.n1b_1));
    this.y1o_1.u1m(id);
    this.y1o_1.e1n(this.p1m());
    this.y1o_1.g1n(this.n1b_1);
    this.y1o_1.f1n(this.o1b_1);
    tmp$ret$1 = Unit_getInstance();
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    this.q1b_1 = true;
    deactivate(this);
    return Success_getInstance();
  };
  NestedMutableSnapshot.$metadata$ = classMeta('NestedMutableSnapshot', undefined, undefined, undefined, undefined, MutableSnapshot.prototype);
  function addRange(_this__u8e3s4, from, until) {
    init_properties_Snapshot_kt_28wf56();
    var result = _this__u8e3s4;
    var inductionVariable = from;
    if (inductionVariable < until)
      do {
        var invalidId = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        result = result.v1m(invalidId);
      }
       while (inductionVariable < until);
    return result;
  }
  function mergedReadObserver(readObserver, parentObserver, mergeReadObserver) {
    init_properties_Snapshot_kt_28wf56();
    var parentObserver_0 = mergeReadObserver ? parentObserver : null;
    var tmp;
    if ((!(readObserver == null) ? !(parentObserver_0 == null) : false) ? !equals_0(readObserver, parentObserver_0) : false) {
      tmp = mergedReadObserver$lambda(readObserver, parentObserver_0);
    } else {
      var tmp0_elvis_lhs = readObserver;
      tmp = tmp0_elvis_lhs == null ? parentObserver_0 : tmp0_elvis_lhs;
    }
    return tmp;
  }
  function mergedReadObserver$default(readObserver, parentObserver, mergeReadObserver, $mask0, $handler) {
    if (!(($mask0 & 4) === 0))
      mergeReadObserver = true;
    return mergedReadObserver(readObserver, parentObserver, mergeReadObserver);
  }
  function mergedWriteObserver(writeObserver, parentObserver) {
    init_properties_Snapshot_kt_28wf56();
    var tmp;
    if ((!(writeObserver == null) ? !(parentObserver == null) : false) ? !equals_0(writeObserver, parentObserver) : false) {
      tmp = mergedWriteObserver$lambda(writeObserver, parentObserver);
    } else {
      var tmp0_elvis_lhs = writeObserver;
      tmp = tmp0_elvis_lhs == null ? parentObserver : tmp0_elvis_lhs;
    }
    return tmp;
  }
  function optimisticMerges(currentSnapshot, applyingSnapshot, invalidSnapshots) {
    init_properties_Snapshot_kt_28wf56();
    var modified = applyingSnapshot.u1l();
    var id = currentSnapshot.f11();
    if (modified == null)
      return null;
    var start = applyingSnapshot.v1l().v1m(applyingSnapshot.f11()).c1n(applyingSnapshot.n1b_1);
    var result = null;
    var tmp0_iterator = modified.d();
    $l$loop_0: while (tmp0_iterator.e()) {
      var state = tmp0_iterator.f();
      var first = state.b1f();
      var tmp1_elvis_lhs = readable(first, id, invalidSnapshots);
      var tmp;
      if (tmp1_elvis_lhs == null) {
        continue $l$loop_0;
      } else {
        tmp = tmp1_elvis_lhs;
      }
      var current = tmp;
      var tmp2_elvis_lhs = readable(first, id, start);
      var tmp_0;
      if (tmp2_elvis_lhs == null) {
        continue $l$loop_0;
      } else {
        tmp_0 = tmp2_elvis_lhs;
      }
      var previous = tmp_0;
      if (!equals_0(current, previous)) {
        var tmp3_elvis_lhs = readable(first, applyingSnapshot.f11(), applyingSnapshot.v1l());
        var tmp_1;
        if (tmp3_elvis_lhs == null) {
          readError();
        } else {
          tmp_1 = tmp3_elvis_lhs;
        }
        var applied = tmp_1;
        var merged = state.d1f(previous, current, applied);
        if (!(merged == null)) {
          // Inline function 'kotlin.collections.set' call
          var tmp4_elvis_lhs = result;
          var tmp_2;
          if (tmp4_elvis_lhs == null) {
            var tmp$ret$1;
            // Inline function 'kotlin.also' call
            var tmp$ret$0;
            // Inline function 'kotlin.collections.hashMapOf' call
            tmp$ret$0 = HashMap_init_$Create$();
            var tmp0_also = tmp$ret$0;
            // Inline function 'kotlin.contracts.contract' call
            // Inline function 'androidx.compose.runtime.snapshots.optimisticMerges.<anonymous>' call
            result = tmp0_also;
            tmp$ret$1 = tmp0_also;
            tmp_2 = tmp$ret$1;
          } else {
            tmp_2 = tmp4_elvis_lhs;
          }
          var tmp1_set = tmp_2;
          tmp1_set.a(current, merged);
        } else {
          return null;
        }
      }
    }
    return result;
  }
  function validateOpen(snapshot) {
    init_properties_Snapshot_kt_28wf56();
    if (!get_openSnapshots().h(snapshot.f11())) {
      // Inline function 'kotlin.error' call
      throw IllegalStateException_init_$Create$_0('Snapshot is not open');
    }
  }
  function takeNewGlobalSnapshot(previousGlobalSnapshot, block) {
    init_properties_Snapshot_kt_28wf56();
    var result = block(get_openSnapshots().n1m(previousGlobalSnapshot.f11()));
    var tmp$ret$2;
    // Inline function 'androidx.compose.runtime.snapshots.sync' call
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = get_lock();
    var tmp$ret$0;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    var tmp0 = get_nextSnapshotId();
    set_nextSnapshotId(tmp0 + 1 | 0);
    var globalId = tmp0;
    set_openSnapshots(get_openSnapshots().n1m(previousGlobalSnapshot.f11()));
    get_currentGlobalSnapshot().a1p(new GlobalSnapshot(globalId, get_openSnapshots()));
    previousGlobalSnapshot.pi();
    set_openSnapshots(get_openSnapshots().v1m(globalId));
    tmp$ret$0 = Unit_getInstance();
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    return result;
  }
  function readable(r, id, invalid) {
    init_properties_Snapshot_kt_28wf56();
    var current = r;
    var candidate = null;
    while (!(current == null)) {
      if (valid(current, id, invalid)) {
        candidate = candidate == null ? current : candidate.t1e_1 < current.t1e_1 ? current : candidate;
      }
      current = current.u1e_1;
    }
    if (!(candidate == null)) {
      return candidate instanceof StateRecord ? candidate : THROW_CCE();
    }
    return null;
  }
  function readError() {
    init_properties_Snapshot_kt_28wf56();
    // Inline function 'kotlin.error' call
    var tmp0_error = 'Reading a state that was created after the snapshot was taken or in a snapshot that has not yet been applied';
    throw IllegalStateException_init_$Create$_0(toString_2(tmp0_error));
  }
  function takeNewSnapshot(block) {
    init_properties_Snapshot_kt_28wf56();
    return advanceGlobalSnapshot(takeNewSnapshot$lambda(block));
  }
  function valid(data, snapshot, invalid) {
    init_properties_Snapshot_kt_28wf56();
    return valid_0(snapshot, data.t1e_1, invalid);
  }
  function valid_0(currentSnapshot, candidateSnapshot, invalid) {
    init_properties_Snapshot_kt_28wf56();
    return (!(candidateSnapshot === 0) ? candidateSnapshot <= currentSnapshot : false) ? !invalid.h(candidateSnapshot) : false;
  }
  function readable_0(_this__u8e3s4, state) {
    init_properties_Snapshot_kt_28wf56();
    return readable_1(_this__u8e3s4, state, currentSnapshot());
  }
  function withCurrent(_this__u8e3s4, block) {
    init_properties_Snapshot_kt_28wf56();
    return block(current(_this__u8e3s4, Companion_getInstance_15().fr()));
  }
  function overwritable(_this__u8e3s4, state, candidate, block) {
    init_properties_Snapshot_kt_28wf56();
    var snapshot = get_snapshotInitializer();
    var tmp$ret$4;
    // Inline function 'kotlin.also' call
    var tmp$ret$3;
    // Inline function 'androidx.compose.runtime.snapshots.sync' call
    var tmp$ret$2;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = get_lock();
    var tmp$ret$1;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.snapshots.overwritable.<anonymous>' call
    snapshot = Companion_getInstance_15().fr();
    tmp$ret$0 = block(overwritableRecord(_this__u8e3s4, state, snapshot, candidate));
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    var tmp0_also = tmp$ret$3;
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'androidx.compose.runtime.snapshots.overwritable.<anonymous>' call
    notifyWrite(snapshot, state);
    tmp$ret$4 = tmp0_also;
    return tmp$ret$4;
  }
  function readable_1(_this__u8e3s4, state, snapshot) {
    init_properties_Snapshot_kt_28wf56();
    var tmp0_safe_receiver = snapshot.d1m();
    if (tmp0_safe_receiver == null)
      null;
    else
      tmp0_safe_receiver(state);
    var tmp1_elvis_lhs = readable(_this__u8e3s4, snapshot.f11(), snapshot.v1l());
    var tmp;
    if (tmp1_elvis_lhs == null) {
      readError();
    } else {
      tmp = tmp1_elvis_lhs;
    }
    return tmp;
  }
  function current(r, snapshot) {
    init_properties_Snapshot_kt_28wf56();
    var tmp0_elvis_lhs = readable(r, snapshot.f11(), snapshot.v1l());
    var tmp;
    if (tmp0_elvis_lhs == null) {
      readError();
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  }
  function notifyWrite(snapshot, state) {
    init_properties_Snapshot_kt_28wf56();
    var tmp0_safe_receiver = snapshot.e1m();
    if (tmp0_safe_receiver == null)
      null;
    else
      tmp0_safe_receiver(state);
  }
  function overwritableRecord(_this__u8e3s4, state, snapshot, candidate) {
    init_properties_Snapshot_kt_28wf56();
    if (snapshot.y1l()) {
      snapshot.f1m(state);
    }
    var id = snapshot.f11();
    if (candidate.t1e_1 === id)
      return candidate;
    var newData = newOverwritableRecord(_this__u8e3s4, state);
    newData.t1e_1 = id;
    snapshot.f1m(state);
    return newData;
  }
  function newOverwritableRecord(_this__u8e3s4, state) {
    init_properties_Snapshot_kt_28wf56();
    var tmp = used(state);
    var tmp0_safe_receiver = (tmp == null ? true : tmp instanceof StateRecord) ? tmp : THROW_CCE();
    var tmp_0;
    if (tmp0_safe_receiver == null) {
      tmp_0 = null;
    } else {
      var tmp$ret$0;
      // Inline function 'kotlin.apply' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'androidx.compose.runtime.snapshots.newOverwritableRecord.<anonymous>' call
      tmp0_safe_receiver.t1e_1 = IntCompanionObject_getInstance().w_1;
      tmp$ret$0 = tmp0_safe_receiver;
      tmp_0 = tmp$ret$0;
    }
    var tmp1_elvis_lhs = tmp_0;
    var tmp_1;
    if (tmp1_elvis_lhs == null) {
      var tmp$ret$1;
      // Inline function 'kotlin.apply' call
      var tmp0_apply = _this__u8e3s4.s1e();
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'androidx.compose.runtime.snapshots.newOverwritableRecord.<anonymous>' call
      tmp0_apply.t1e_1 = IntCompanionObject_getInstance().w_1;
      tmp0_apply.u1e_1 = state.b1f();
      state.c1f(tmp0_apply instanceof StateRecord ? tmp0_apply : THROW_CCE());
      tmp$ret$1 = tmp0_apply;
      var tmp_2 = tmp$ret$1;
      tmp_1 = tmp_2 instanceof StateRecord ? tmp_2 : THROW_CCE();
    } else {
      tmp_1 = tmp1_elvis_lhs;
    }
    return tmp_1;
  }
  function used(state) {
    init_properties_Snapshot_kt_28wf56();
    var current = state.b1f();
    var validRecord = null;
    var reuseLimit = get_pinningTable().b1p(get_nextSnapshotId()) - 1 | 0;
    var invalid = Companion_getInstance_16().s1m_1;
    while (!(current == null)) {
      var currentId = current.t1e_1;
      if (currentId === 0) {
        return current;
      }
      if (valid(current, reuseLimit, invalid)) {
        if (validRecord == null) {
          validRecord = current;
        } else {
          return current.t1e_1 < validRecord.t1e_1 ? current : validRecord;
        }
      }
      current = current.u1e_1;
    }
    return null;
  }
  function writable(_this__u8e3s4, state, block) {
    init_properties_Snapshot_kt_28wf56();
    var snapshot = get_snapshotInitializer();
    var tmp$ret$4;
    // Inline function 'kotlin.also' call
    var tmp$ret$3;
    // Inline function 'androidx.compose.runtime.snapshots.sync' call
    var tmp$ret$2;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = get_lock();
    var tmp$ret$1;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.snapshots.writable.<anonymous>' call
    snapshot = Companion_getInstance_15().fr();
    tmp$ret$0 = block(writableRecord(_this__u8e3s4, state, snapshot));
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    var tmp0_also = tmp$ret$3;
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'androidx.compose.runtime.snapshots.writable.<anonymous>' call
    notifyWrite(snapshot, state);
    tmp$ret$4 = tmp0_also;
    return tmp$ret$4;
  }
  function writableRecord(_this__u8e3s4, state, snapshot) {
    init_properties_Snapshot_kt_28wf56();
    if (snapshot.y1l()) {
      snapshot.f1m(state);
    }
    var id = snapshot.f11();
    var tmp0_elvis_lhs = readable(_this__u8e3s4, id, snapshot.v1l());
    var tmp;
    if (tmp0_elvis_lhs == null) {
      readError();
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var readData = tmp;
    if (readData.t1e_1 === snapshot.f11())
      return readData;
    var newData = newWritableRecord(readData, state, snapshot);
    snapshot.f1m(state);
    return newData;
  }
  function newWritableRecord(_this__u8e3s4, state, snapshot) {
    init_properties_Snapshot_kt_28wf56();
    var newData = newOverwritableRecord(_this__u8e3s4, state);
    newData.r1e(_this__u8e3s4);
    newData.t1e_1 = snapshot.f11();
    return newData;
  }
  function emptyLambda$lambda(it) {
    init_properties_Snapshot_kt_28wf56();
    return Unit_getInstance();
  }
  function advanceGlobalSnapshot$lambda(it) {
    init_properties_Snapshot_kt_28wf56();
    return Unit_getInstance();
  }
  function mergedReadObserver$lambda($readObserver, $parentObserver) {
    return function (state) {
      $readObserver(state);
      $parentObserver(state);
      return Unit_getInstance();
    };
  }
  function mergedWriteObserver$lambda($writeObserver, $parentObserver) {
    return function (state) {
      $writeObserver(state);
      $parentObserver(state);
      return Unit_getInstance();
    };
  }
  function takeNewSnapshot$lambda($block) {
    return function (invalid) {
      var result = $block(invalid);
      var tmp$ret$2;
      // Inline function 'androidx.compose.runtime.snapshots.sync' call
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.synchronized' call
      var tmp0_synchronized = get_lock();
      var tmp$ret$0;
      // Inline function 'kotlinx.atomicfu.locks.synchronized' call
      set_openSnapshots(get_openSnapshots().v1m(result.f11()));
      tmp$ret$0 = Unit_getInstance();
      tmp$ret$1 = tmp$ret$0;
      tmp$ret$2 = tmp$ret$1;
      return result;
    };
  }
  var properties_initialized_Snapshot_kt_2vlcoq;
  function init_properties_Snapshot_kt_28wf56() {
    if (properties_initialized_Snapshot_kt_2vlcoq) {
    } else {
      properties_initialized_Snapshot_kt_2vlcoq = true;
      emptyLambda = emptyLambda$lambda;
      threadSnapshot = new SnapshotThreadLocal();
      lock = createSynchronizedObject();
      openSnapshots = Companion_getInstance_16().s1m_1;
      nextSnapshotId = 1;
      pinningTable = new SnapshotDoubleIndexHeap();
      var tmp$ret$0;
      // Inline function 'kotlin.collections.mutableListOf' call
      tmp$ret$0 = ArrayList_init_$Create$();
      applyObservers = tmp$ret$0;
      var tmp$ret$0_0;
      // Inline function 'kotlin.collections.mutableListOf' call
      tmp$ret$0_0 = ArrayList_init_$Create$();
      globalWriteObservers = tmp$ret$0_0;
      var tmp$ret$0_1;
      // Inline function 'kotlin.also' call
      var tmp0 = get_nextSnapshotId();
      set_nextSnapshotId(tmp0 + 1 | 0);
      var tmp0_also = new GlobalSnapshot(tmp0, Companion_getInstance_16().s1m_1);
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'androidx.compose.runtime.snapshots.currentGlobalSnapshot.<anonymous>' call
      set_openSnapshots(get_openSnapshots().v1m(tmp0_also.f11()));
      tmp$ret$0_1 = tmp0_also;
      currentGlobalSnapshot = new AtomicReference(tmp$ret$0_1);
      snapshotInitializer = get_currentGlobalSnapshot().qk();
    }
  }
  function shiftUp($this, index) {
    var values = $this.f1o_1;
    var value = values[index];
    var current = index;
    $l$loop: while (current > 0) {
      var parent = ((current + 1 | 0) >> 1) - 1 | 0;
      if (values[parent] > value) {
        swap($this, parent, current);
        current = parent;
        continue $l$loop;
      }
      break $l$loop;
    }
  }
  function shiftDown($this, index) {
    var values = $this.f1o_1;
    var half = $this.e1o_1 >> 1;
    var current = index;
    while (current < half) {
      var right = (current + 1 | 0) << 1;
      var left = right - 1 | 0;
      if (right < $this.e1o_1 ? values[right] < values[left] : false) {
        if (values[right] < values[current]) {
          swap($this, right, current);
          current = right;
        } else
          return Unit_getInstance();
      } else if (values[left] < values[current]) {
        swap($this, left, current);
        current = left;
      } else
        return Unit_getInstance();
    }
  }
  function swap($this, a, b) {
    var values = $this.f1o_1;
    var index = $this.g1o_1;
    var handles = $this.h1o_1;
    var t = values[a];
    values[a] = values[b];
    values[b] = t;
    t = index[a];
    index[a] = index[b];
    index[b] = t;
    handles[index[a]] = a;
    handles[index[b]] = b;
  }
  function ensure($this, atLeast) {
    var capacity = $this.f1o_1.length;
    if (atLeast <= capacity)
      return Unit_getInstance();
    var newCapacity = imul(capacity, 2);
    var newValues = new Int32Array(newCapacity);
    var newIndex = new Int32Array(newCapacity);
    var tmp$ret$4;
    // Inline function 'kotlin.collections.copyInto' call
    var tmp0_copyInto = $this.f1o_1;
    var tmp1_copyInto = tmp0_copyInto.length;
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = tmp0_copyInto;
    tmp$ret$1 = tmp$ret$0;
    var tmp = tmp$ret$1;
    var tmp$ret$3;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$2;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$2 = newValues;
    tmp$ret$3 = tmp$ret$2;
    arrayCopy(tmp, tmp$ret$3, 0, 0, tmp1_copyInto);
    tmp$ret$4 = newValues;
    var tmp$ret$9;
    // Inline function 'kotlin.collections.copyInto' call
    var tmp2_copyInto = $this.g1o_1;
    var tmp3_copyInto = tmp2_copyInto.length;
    var tmp$ret$6;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$5;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$5 = tmp2_copyInto;
    tmp$ret$6 = tmp$ret$5;
    var tmp_0 = tmp$ret$6;
    var tmp$ret$8;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$7;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$7 = newIndex;
    tmp$ret$8 = tmp$ret$7;
    arrayCopy(tmp_0, tmp$ret$8, 0, 0, tmp3_copyInto);
    tmp$ret$9 = newIndex;
    $this.f1o_1 = newValues;
    $this.g1o_1 = newIndex;
  }
  function allocateHandle($this) {
    var capacity = $this.h1o_1.length;
    if ($this.i1o_1 >= capacity) {
      var tmp = 0;
      var tmp_0 = imul(capacity, 2);
      var tmp_1 = new Int32Array(tmp_0);
      while (tmp < tmp_0) {
        var tmp_2 = tmp;
        var tmp$ret$0;
        // Inline function 'androidx.compose.runtime.snapshots.SnapshotDoubleIndexHeap.allocateHandle.<anonymous>' call
        tmp$ret$0 = tmp_2 + 1 | 0;
        tmp_1[tmp_2] = tmp$ret$0;
        tmp = tmp + 1 | 0;
      }
      var newHandles = tmp_1;
      var tmp$ret$5;
      // Inline function 'kotlin.collections.copyInto' call
      var tmp0_copyInto = $this.h1o_1;
      var tmp1_copyInto = tmp0_copyInto.length;
      var tmp$ret$2;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$1;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$1 = tmp0_copyInto;
      tmp$ret$2 = tmp$ret$1;
      var tmp_3 = tmp$ret$2;
      var tmp$ret$4;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$3;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$3 = newHandles;
      tmp$ret$4 = tmp$ret$3;
      arrayCopy(tmp_3, tmp$ret$4, 0, 0, tmp1_copyInto);
      tmp$ret$5 = newHandles;
      $this.h1o_1 = newHandles;
    }
    var handle = $this.i1o_1;
    $this.i1o_1 = $this.h1o_1[$this.i1o_1];
    return handle;
  }
  function freeHandle($this, handle) {
    $this.h1o_1[handle] = $this.i1o_1;
    $this.i1o_1 = handle;
  }
  function SnapshotDoubleIndexHeap() {
    this.e1o_1 = 0;
    this.f1o_1 = new Int32Array(16);
    this.g1o_1 = new Int32Array(16);
    var tmp = this;
    var tmp_0 = 0;
    var tmp_1 = 16;
    var tmp_2 = new Int32Array(tmp_1);
    while (tmp_0 < tmp_1) {
      var tmp_3 = tmp_0;
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotDoubleIndexHeap.handles.<anonymous>' call
      tmp$ret$0 = tmp_3 + 1 | 0;
      tmp_2[tmp_3] = tmp$ret$0;
      tmp_0 = tmp_0 + 1 | 0;
    }
    tmp.h1o_1 = tmp_2;
    this.i1o_1 = 0;
  }
  SnapshotDoubleIndexHeap.prototype.b1p = function (default_0) {
    return this.e1o_1 > 0 ? this.f1o_1[0] : default_0;
  };
  SnapshotDoubleIndexHeap.prototype.j1o = function (value) {
    ensure(this, this.e1o_1 + 1 | 0);
    var tmp0_this = this;
    var tmp1 = tmp0_this.e1o_1;
    tmp0_this.e1o_1 = tmp1 + 1 | 0;
    var i = tmp1;
    var handle = allocateHandle(this);
    this.f1o_1[i] = value;
    this.g1o_1[i] = handle;
    this.h1o_1[handle] = i;
    shiftUp(this, i);
    return handle;
  };
  SnapshotDoubleIndexHeap.prototype.k1o = function (handle) {
    var i = this.h1o_1[handle];
    swap(this, i, this.e1o_1 - 1 | 0);
    var tmp0_this = this;
    var tmp1 = tmp0_this.e1o_1;
    tmp0_this.e1o_1 = tmp1 - 1 | 0;
    shiftUp(this, i);
    shiftDown(this, i);
    freeHandle(this, handle);
  };
  SnapshotDoubleIndexHeap.$metadata$ = classMeta('SnapshotDoubleIndexHeap');
  function Companion_16() {
    Companion_instance_16 = this;
    this.s1m_1 = new SnapshotIdSet(new Long(0, 0), new Long(0, 0), 0, null);
  }
  Companion_16.$metadata$ = objectMeta('Companion');
  var Companion_instance_16;
  function Companion_getInstance_16() {
    if (Companion_instance_16 == null)
      new Companion_16();
    return Companion_instance_16;
  }
  function SnapshotIdSet$iterator$slambda(this$0, resultContinuation) {
    this.k1p_1 = this$0;
    CoroutineImpl.call(this, resultContinuation);
  }
  SnapshotIdSet$iterator$slambda.prototype.t1p = function ($this$sequence, $cont) {
    var tmp = this.u1p($this$sequence, $cont);
    tmp.jd_1 = Unit_getInstance();
    tmp.kd_1 = null;
    return tmp.qd();
  };
  SnapshotIdSet$iterator$slambda.prototype.rd = function (p1, $cont) {
    return this.t1p(p1 instanceof SequenceScope ? p1 : THROW_CCE(), $cont);
  };
  SnapshotIdSet$iterator$slambda.prototype.qd = function () {
    var suspendResult = this.jd_1;
    $sm: do
      try {
        var tmp = this.hd_1;
        switch (tmp) {
          case 0:
            this.id_1 = 15;
            this.m1p_1 = this.k1p_1.m1m_1;
            if (!(this.m1p_1 == null)) {
              this.n1p_1 = intArrayIterator(this.m1p_1);
              this.hd_1 = 1;
              continue $sm;
            } else {
              this.hd_1 = 4;
              continue $sm;
            }

            break;
          case 1:
            if (!this.n1p_1.e()) {
              this.hd_1 = 3;
              continue $sm;
            }

            this.o1p_1 = this.n1p_1.f();
            this.hd_1 = 2;
            suspendResult = this.l1p_1.i3(this.o1p_1, this);
            if (suspendResult === get_COROUTINE_SUSPENDED()) {
              return suspendResult;
            }

            continue $sm;
          case 2:
            this.hd_1 = 1;
            continue $sm;
          case 3:
            this.hd_1 = 4;
            continue $sm;
          case 4:
            if (!this.k1p_1.k1m_1.equals(new Long(0, 0))) {
              var tmp_0 = this;
              Companion_getInstance_7();
              tmp_0.p1p_1 = until(0, 64).d();
              this.hd_1 = 5;
              continue $sm;
            } else {
              this.hd_1 = 9;
              continue $sm;
            }

            break;
          case 5:
            if (!this.p1p_1.e()) {
              this.hd_1 = 8;
              continue $sm;
            }

            this.q1p_1 = this.p1p_1.f();
            if (!this.k1p_1.k1m_1.ed((new Long(1, 0)).s5(this.q1p_1)).equals(new Long(0, 0))) {
              this.hd_1 = 6;
              suspendResult = this.l1p_1.i3(this.q1p_1 + this.k1p_1.l1m_1 | 0, this);
              if (suspendResult === get_COROUTINE_SUSPENDED()) {
                return suspendResult;
              }
              continue $sm;
            } else {
              this.hd_1 = 7;
              continue $sm;
            }

            break;
          case 6:
            this.hd_1 = 7;
            continue $sm;
          case 7:
            this.hd_1 = 5;
            continue $sm;
          case 8:
            this.hd_1 = 9;
            continue $sm;
          case 9:
            if (!this.k1p_1.j1m_1.equals(new Long(0, 0))) {
              var tmp_1 = this;
              Companion_getInstance_7();
              tmp_1.r1p_1 = until(0, 64).d();
              this.hd_1 = 10;
              continue $sm;
            } else {
              this.hd_1 = 14;
              continue $sm;
            }

            break;
          case 10:
            if (!this.r1p_1.e()) {
              this.hd_1 = 13;
              continue $sm;
            }

            this.s1p_1 = this.r1p_1.f();
            if (!this.k1p_1.j1m_1.ed((new Long(1, 0)).s5(this.s1p_1)).equals(new Long(0, 0))) {
              this.hd_1 = 11;
              Companion_getInstance_7();
              suspendResult = this.l1p_1.i3((this.s1p_1 + 64 | 0) + this.k1p_1.l1m_1 | 0, this);
              if (suspendResult === get_COROUTINE_SUSPENDED()) {
                return suspendResult;
              }
              continue $sm;
            } else {
              this.hd_1 = 12;
              continue $sm;
            }

            break;
          case 11:
            this.hd_1 = 12;
            continue $sm;
          case 12:
            this.hd_1 = 10;
            continue $sm;
          case 13:
            this.hd_1 = 14;
            continue $sm;
          case 14:
            return Unit_getInstance();
          case 15:
            throw this.kd_1;
        }
      } catch ($p) {
        if (this.id_1 === 15) {
          throw $p;
        } else {
          this.hd_1 = this.id_1;
          this.kd_1 = $p;
        }
      }
     while (true);
  };
  SnapshotIdSet$iterator$slambda.prototype.u1p = function ($this$sequence, completion) {
    var i = new SnapshotIdSet$iterator$slambda(this.k1p_1, completion);
    i.l1p_1 = $this$sequence;
    return i;
  };
  SnapshotIdSet$iterator$slambda.$metadata$ = classMeta('SnapshotIdSet$iterator$slambda', undefined, undefined, undefined, [1], CoroutineImpl.prototype);
  function SnapshotIdSet$iterator$slambda_0(this$0, resultContinuation) {
    var i = new SnapshotIdSet$iterator$slambda(this$0, resultContinuation);
    var l = function ($this$sequence, $cont) {
      return i.t1p($this$sequence, $cont);
    };
    l.$arity = 1;
    return l;
  }
  function SnapshotIdSet(upperSet, lowerSet, lowerBound, belowBound) {
    Companion_getInstance_16();
    this.j1m_1 = upperSet;
    this.k1m_1 = lowerSet;
    this.l1m_1 = lowerBound;
    this.m1m_1 = belowBound;
  }
  SnapshotIdSet.prototype.h = function (bit) {
    var offset = bit - this.l1m_1 | 0;
    var tmp;
    if (offset >= 0) {
      Companion_getInstance_7();
      tmp = offset < 64;
    } else {
      tmp = false;
    }
    if (tmp) {
      return !(new Long(1, 0)).s5(offset).ed(this.k1m_1).equals(new Long(0, 0));
    } else {
      var tmp_0;
      Companion_getInstance_7();
      if (offset >= 64) {
        Companion_getInstance_7();
        tmp_0 = offset < imul(64, 2);
      } else {
        tmp_0 = false;
      }
      if (tmp_0) {
        var tmp_1 = new Long(1, 0);
        Companion_getInstance_7();
        return !tmp_1.s5(offset - 64 | 0).ed(this.j1m_1).equals(new Long(0, 0));
      } else {
        if (offset > 0) {
          return false;
        } else {
          var tmp0_safe_receiver = this.m1m_1;
          var tmp_2;
          if (tmp0_safe_receiver == null) {
            tmp_2 = null;
          } else {
            var tmp$ret$1;
            // Inline function 'kotlin.let' call
            // Inline function 'kotlin.contracts.contract' call
            var tmp$ret$0;
            // Inline function 'androidx.compose.runtime.snapshots.SnapshotIdSet.get.<anonymous>' call
            tmp$ret$0 = binarySearch(tmp0_safe_receiver, bit) >= 0;
            tmp$ret$1 = tmp$ret$0;
            tmp_2 = tmp$ret$1;
          }
          var tmp1_elvis_lhs = tmp_2;
          return tmp1_elvis_lhs == null ? false : tmp1_elvis_lhs;
        }
      }
    }
  };
  SnapshotIdSet.prototype.v1m = function (bit) {
    var offset = bit - this.l1m_1 | 0;
    var tmp;
    if (offset >= 0) {
      Companion_getInstance_7();
      tmp = offset < 64;
    } else {
      tmp = false;
    }
    if (tmp) {
      var mask = (new Long(1, 0)).s5(offset);
      if (this.k1m_1.ed(mask).equals(new Long(0, 0))) {
        return new SnapshotIdSet(this.j1m_1, this.k1m_1.fd(mask), this.l1m_1, this.m1m_1);
      }
    } else {
      var tmp_0;
      Companion_getInstance_7();
      if (offset >= 64) {
        Companion_getInstance_7();
        tmp_0 = offset < imul(64, 2);
      } else {
        tmp_0 = false;
      }
      if (tmp_0) {
        var tmp_1 = new Long(1, 0);
        Companion_getInstance_7();
        var mask_0 = tmp_1.s5(offset - 64 | 0);
        if (this.j1m_1.ed(mask_0).equals(new Long(0, 0))) {
          return new SnapshotIdSet(this.j1m_1.fd(mask_0), this.k1m_1, this.l1m_1, this.m1m_1);
        }
      } else {
        Companion_getInstance_7();
        if (offset >= imul(64, 2)) {
          if (!this.h(bit)) {
            var newUpperSet = this.j1m_1;
            var newLowerSet = this.k1m_1;
            var newLowerBound = this.l1m_1;
            var newBelowBound = null;
            var tmp_2 = bit + 1 | 0;
            Companion_getInstance_7();
            var tmp_3 = tmp_2 / 64 | 0;
            Companion_getInstance_7();
            var targetLowerBound = imul(tmp_3, 64);
            $l$loop: while (newLowerBound < targetLowerBound) {
              if (!newLowerSet.equals(new Long(0, 0))) {
                if (newBelowBound == null) {
                  var tmp$ret$2;
                  // Inline function 'kotlin.apply' call
                  var tmp$ret$0;
                  // Inline function 'kotlin.collections.mutableListOf' call
                  tmp$ret$0 = ArrayList_init_$Create$();
                  var tmp0_apply = tmp$ret$0;
                  // Inline function 'kotlin.contracts.contract' call
                  // Inline function 'androidx.compose.runtime.snapshots.SnapshotIdSet.set.<anonymous>' call
                  var tmp0_safe_receiver = this.m1m_1;
                  if (tmp0_safe_receiver == null)
                    null;
                  else {
                    var tmp$ret$1;
                    // Inline function 'kotlin.let' call
                    // Inline function 'kotlin.contracts.contract' call
                    var indexedObject = tmp0_safe_receiver;
                    var inductionVariable = 0;
                    var last = indexedObject.length;
                    while (inductionVariable < last) {
                      var element = indexedObject[inductionVariable];
                      inductionVariable = inductionVariable + 1 | 0;
                      // Inline function 'androidx.compose.runtime.snapshots.SnapshotIdSet.set.<anonymous>.<anonymous>.<anonymous>' call
                      tmp0_apply.b(element);
                    }
                    tmp$ret$1 = Unit_getInstance();
                  }
                  tmp$ret$2 = tmp0_apply;
                  newBelowBound = tmp$ret$2;
                }
                // Inline function 'kotlin.repeat' call
                Companion_getInstance_7();
                var tmp1_repeat = 64;
                // Inline function 'kotlin.contracts.contract' call
                var inductionVariable_0 = 0;
                if (inductionVariable_0 < tmp1_repeat)
                  do {
                    var index = inductionVariable_0;
                    inductionVariable_0 = inductionVariable_0 + 1 | 0;
                    // Inline function 'androidx.compose.runtime.snapshots.SnapshotIdSet.set.<anonymous>' call
                    if (!newLowerSet.ed((new Long(1, 0)).s5(index)).equals(new Long(0, 0))) {
                      newBelowBound.b(index + newLowerBound | 0);
                    }
                  }
                   while (inductionVariable_0 < tmp1_repeat);
              }
              if (newUpperSet.equals(new Long(0, 0))) {
                newLowerBound = targetLowerBound;
                newLowerSet = new Long(0, 0);
                break $l$loop;
              }
              newLowerSet = newUpperSet;
              newUpperSet = new Long(0, 0);
              var tmp_4 = newLowerBound;
              Companion_getInstance_7();
              newLowerBound = tmp_4 + 64 | 0;
            }
            var tmp_5 = newUpperSet;
            var tmp_6 = newLowerSet;
            var tmp_7 = newLowerBound;
            var tmp0_safe_receiver_0 = newBelowBound;
            var tmp1_elvis_lhs = tmp0_safe_receiver_0 == null ? null : toIntArray(tmp0_safe_receiver_0);
            return (new SnapshotIdSet(tmp_5, tmp_6, tmp_7, tmp1_elvis_lhs == null ? this.m1m_1 : tmp1_elvis_lhs)).v1m(bit);
          }
        } else {
          var tmp2_elvis_lhs = this.m1m_1;
          var tmp_8;
          if (tmp2_elvis_lhs == null) {
            var tmp$ret$3;
            // Inline function 'kotlin.intArrayOf' call
            tmp$ret$3 = new Int32Array([bit]);
            return new SnapshotIdSet(this.j1m_1, this.k1m_1, this.l1m_1, tmp$ret$3);
          } else {
            tmp_8 = tmp2_elvis_lhs;
          }
          var array = tmp_8;
          var location = binarySearch(array, bit);
          if (location < 0) {
            var insertLocation = -(location + 1 | 0) | 0;
            var newSize = array.length + 1 | 0;
            var newBelowBound_0 = new Int32Array(newSize);
            var tmp$ret$8;
            // Inline function 'kotlin.collections.copyInto' call
            var tmp$ret$5;
            // Inline function 'kotlin.js.unsafeCast' call
            var tmp$ret$4;
            // Inline function 'kotlin.js.asDynamic' call
            tmp$ret$4 = array;
            tmp$ret$5 = tmp$ret$4;
            var tmp_9 = tmp$ret$5;
            var tmp$ret$7;
            // Inline function 'kotlin.js.unsafeCast' call
            var tmp$ret$6;
            // Inline function 'kotlin.js.asDynamic' call
            tmp$ret$6 = newBelowBound_0;
            tmp$ret$7 = tmp$ret$6;
            arrayCopy(tmp_9, tmp$ret$7, 0, 0, insertLocation);
            tmp$ret$8 = newBelowBound_0;
            var tmp$ret$13;
            // Inline function 'kotlin.collections.copyInto' call
            var tmp2_copyInto = insertLocation + 1 | 0;
            var tmp3_copyInto = newSize - 1 | 0;
            var tmp$ret$10;
            // Inline function 'kotlin.js.unsafeCast' call
            var tmp$ret$9;
            // Inline function 'kotlin.js.asDynamic' call
            tmp$ret$9 = array;
            tmp$ret$10 = tmp$ret$9;
            var tmp_10 = tmp$ret$10;
            var tmp$ret$12;
            // Inline function 'kotlin.js.unsafeCast' call
            var tmp$ret$11;
            // Inline function 'kotlin.js.asDynamic' call
            tmp$ret$11 = newBelowBound_0;
            tmp$ret$12 = tmp$ret$11;
            arrayCopy(tmp_10, tmp$ret$12, tmp2_copyInto, insertLocation, tmp3_copyInto);
            tmp$ret$13 = newBelowBound_0;
            newBelowBound_0[insertLocation] = bit;
            return new SnapshotIdSet(this.j1m_1, this.k1m_1, this.l1m_1, newBelowBound_0);
          }
        }
      }
    }
    return this;
  };
  SnapshotIdSet.prototype.n1m = function (bit) {
    var offset = bit - this.l1m_1 | 0;
    var tmp;
    if (offset >= 0) {
      Companion_getInstance_7();
      tmp = offset < 64;
    } else {
      tmp = false;
    }
    if (tmp) {
      var mask = (new Long(1, 0)).s5(offset);
      if (!this.k1m_1.ed(mask).equals(new Long(0, 0))) {
        return new SnapshotIdSet(this.j1m_1, this.k1m_1.ed(mask.dd()), this.l1m_1, this.m1m_1);
      }
    } else {
      var tmp_0;
      Companion_getInstance_7();
      if (offset >= 64) {
        Companion_getInstance_7();
        tmp_0 = offset < imul(64, 2);
      } else {
        tmp_0 = false;
      }
      if (tmp_0) {
        var tmp_1 = new Long(1, 0);
        Companion_getInstance_7();
        var mask_0 = tmp_1.s5(offset - 64 | 0);
        if (!this.j1m_1.ed(mask_0).equals(new Long(0, 0))) {
          return new SnapshotIdSet(this.j1m_1.ed(mask_0.dd()), this.k1m_1, this.l1m_1, this.m1m_1);
        }
      } else {
        if (offset < 0) {
          var array = this.m1m_1;
          if (!(array == null)) {
            var location = binarySearch(array, bit);
            if (location >= 0) {
              var newSize = array.length - 1 | 0;
              if (newSize === 0) {
                return new SnapshotIdSet(this.j1m_1, this.k1m_1, this.l1m_1, null);
              }
              var newBelowBound = new Int32Array(newSize);
              if (location > 0) {
                var tmp$ret$4;
                // Inline function 'kotlin.collections.copyInto' call
                var tmp$ret$1;
                // Inline function 'kotlin.js.unsafeCast' call
                var tmp$ret$0;
                // Inline function 'kotlin.js.asDynamic' call
                tmp$ret$0 = array;
                tmp$ret$1 = tmp$ret$0;
                var tmp_2 = tmp$ret$1;
                var tmp$ret$3;
                // Inline function 'kotlin.js.unsafeCast' call
                var tmp$ret$2;
                // Inline function 'kotlin.js.asDynamic' call
                tmp$ret$2 = newBelowBound;
                tmp$ret$3 = tmp$ret$2;
                arrayCopy(tmp_2, tmp$ret$3, 0, 0, location);
                tmp$ret$4 = newBelowBound;
              }
              if (location < newSize) {
                var tmp$ret$9;
                // Inline function 'kotlin.collections.copyInto' call
                var tmp0_copyInto = location + 1 | 0;
                var tmp1_copyInto = newSize + 1 | 0;
                var tmp$ret$6;
                // Inline function 'kotlin.js.unsafeCast' call
                var tmp$ret$5;
                // Inline function 'kotlin.js.asDynamic' call
                tmp$ret$5 = array;
                tmp$ret$6 = tmp$ret$5;
                var tmp_3 = tmp$ret$6;
                var tmp$ret$8;
                // Inline function 'kotlin.js.unsafeCast' call
                var tmp$ret$7;
                // Inline function 'kotlin.js.asDynamic' call
                tmp$ret$7 = newBelowBound;
                tmp$ret$8 = tmp$ret$7;
                arrayCopy(tmp_3, tmp$ret$8, location, tmp0_copyInto, tmp1_copyInto);
                tmp$ret$9 = newBelowBound;
              }
              return new SnapshotIdSet(this.j1m_1, this.k1m_1, this.l1m_1, newBelowBound);
            }
          }
        }
      }
    }
    return this;
  };
  SnapshotIdSet.prototype.a1n = function (bits) {
    if (bits === Companion_getInstance_16().s1m_1)
      return this;
    if (this === Companion_getInstance_16().s1m_1)
      return Companion_getInstance_16().s1m_1;
    var tmp;
    if (bits.l1m_1 === this.l1m_1 ? bits.m1m_1 === this.m1m_1 : false) {
      tmp = new SnapshotIdSet(this.j1m_1.ed(bits.j1m_1.dd()), this.k1m_1.ed(bits.k1m_1.dd()), this.l1m_1, this.m1m_1);
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.collections.fold' call
      var accumulator = this;
      var tmp0_iterator = bits.d();
      while (tmp0_iterator.e()) {
        var element = tmp0_iterator.f();
        var tmp$ret$0;
        // Inline function 'androidx.compose.runtime.snapshots.SnapshotIdSet.andNot.<anonymous>' call
        var tmp0__anonymous__q1qw7t = accumulator;
        tmp$ret$0 = tmp0__anonymous__q1qw7t.n1m(element);
        accumulator = tmp$ret$0;
      }
      tmp$ret$1 = accumulator;
      tmp = tmp$ret$1;
    }
    return tmp;
  };
  SnapshotIdSet.prototype.c1n = function (bits) {
    if (bits === Companion_getInstance_16().s1m_1)
      return this;
    if (this === Companion_getInstance_16().s1m_1)
      return bits;
    var tmp;
    if (bits.l1m_1 === this.l1m_1 ? bits.m1m_1 === this.m1m_1 : false) {
      tmp = new SnapshotIdSet(this.j1m_1.fd(bits.j1m_1), this.k1m_1.fd(bits.k1m_1), this.l1m_1, this.m1m_1);
    } else {
      var tmp_0;
      if (this.m1m_1 == null) {
        var tmp$ret$1;
        // Inline function 'kotlin.collections.fold' call
        var accumulator = bits;
        var tmp0_iterator = this.d();
        while (tmp0_iterator.e()) {
          var element = tmp0_iterator.f();
          var tmp$ret$0;
          // Inline function 'androidx.compose.runtime.snapshots.SnapshotIdSet.or.<anonymous>' call
          var tmp0__anonymous__q1qw7t = accumulator;
          tmp$ret$0 = tmp0__anonymous__q1qw7t.v1m(element);
          accumulator = tmp$ret$0;
        }
        tmp$ret$1 = accumulator;
        tmp_0 = tmp$ret$1;
      } else {
        var tmp$ret$3;
        // Inline function 'kotlin.collections.fold' call
        var accumulator_0 = this;
        var tmp0_iterator_0 = bits.d();
        while (tmp0_iterator_0.e()) {
          var element_0 = tmp0_iterator_0.f();
          var tmp$ret$2;
          // Inline function 'androidx.compose.runtime.snapshots.SnapshotIdSet.or.<anonymous>' call
          var tmp1__anonymous__uwfjfc = accumulator_0;
          tmp$ret$2 = tmp1__anonymous__uwfjfc.v1m(element_0);
          accumulator_0 = tmp$ret$2;
        }
        tmp$ret$3 = accumulator_0;
        tmp_0 = tmp$ret$3;
      }
      tmp = tmp_0;
    }
    return tmp;
  };
  SnapshotIdSet.prototype.d = function () {
    return sequence(SnapshotIdSet$iterator$slambda_0(this, null)).d();
  };
  SnapshotIdSet.prototype.d1o = function (default_0) {
    var belowBound = this.m1m_1;
    if (!(belowBound == null))
      return belowBound[0];
    if (!this.k1m_1.equals(new Long(0, 0)))
      return this.l1m_1 + lowestBitOf(this.k1m_1) | 0;
    if (!this.j1m_1.equals(new Long(0, 0))) {
      Companion_getInstance_7();
      return (this.l1m_1 + 64 | 0) + lowestBitOf(this.j1m_1) | 0;
    }
    return default_0;
  };
  SnapshotIdSet.prototype.toString = function () {
    var tmp = anyToString(this);
    var tmp$ret$2;
    // Inline function 'kotlin.collections.map' call
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mapTo' call
    var tmp0_mapTo = ArrayList_init_$Create$_0(collectionSizeOrDefault(this, 10));
    var tmp0_iterator = this.d();
    while (tmp0_iterator.e()) {
      var item = tmp0_iterator.f();
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotIdSet.toString.<anonymous>' call
      tmp$ret$0 = item.toString();
      tmp0_mapTo.b(tmp$ret$0);
    }
    tmp$ret$1 = tmp0_mapTo;
    tmp$ret$2 = tmp$ret$1;
    var tmp_0 = tmp$ret$2;
    return tmp + ' [' + fastJoinToString$default(tmp_0, null, null, null, 0, null, null, 63, null) + ']';
  };
  SnapshotIdSet.$metadata$ = classMeta('SnapshotIdSet', [Iterable_0]);
  function binarySearch(_this__u8e3s4, value) {
    var low = 0;
    var high = _this__u8e3s4.length - 1 | 0;
    while (low <= high) {
      var mid = (low + high | 0) >>> 1 | 0;
      var midVal = _this__u8e3s4[mid];
      if (value > midVal)
        low = mid + 1 | 0;
      else if (value < midVal)
        high = mid - 1 | 0;
      else
        return mid;
    }
    return -(low + 1 | 0) | 0;
  }
  function lowestBitOf(bits) {
    var b = bits;
    var base = 0;
    if (b.ed(new Long(-1, 0)).equals(new Long(0, 0))) {
      base = base + 32 | 0;
      b = b.p5(32);
    }
    if (b.ed(new Long(65535, 0)).equals(new Long(0, 0))) {
      base = base + 16 | 0;
      b = b.p5(16);
    }
    if (b.ed(new Long(255, 0)).equals(new Long(0, 0))) {
      base = base + 8 | 0;
      b = b.p5(8);
    }
    if (b.ed(new Long(15, 0)).equals(new Long(0, 0))) {
      base = base + 4 | 0;
      b = b.p5(4);
    }
    if (!b.ed(new Long(1, 0)).equals(new Long(0, 0)))
      return base;
    if (!b.ed(new Long(2, 0)).equals(new Long(0, 0)))
      return base + 1 | 0;
    if (!b.ed(new Long(4, 0)).equals(new Long(0, 0)))
      return base + 2 | 0;
    if (!b.ed(new Long(8, 0)).equals(new Long(0, 0)))
      return base + 3 | 0;
    return -1;
  }
  function SnapshotMutableState() {
  }
  SnapshotMutableState.$metadata$ = interfaceMeta('SnapshotMutableState', [MutableState]);
  function get_sync() {
    init_properties_SnapshotStateList_kt_7zrdcn();
    return sync_0;
  }
  var sync_0;
  function StateListStateRecord(list) {
    StateRecord.call(this);
    this.y1p_1 = list;
    this.z1p_1 = 0;
  }
  StateListStateRecord.prototype.a1q = function (_set____db54di) {
    this.y1p_1 = _set____db54di;
  };
  StateListStateRecord.prototype.tk = function () {
    return this.y1p_1;
  };
  StateListStateRecord.prototype.b1q = function (_set____db54di) {
    this.z1p_1 = _set____db54di;
  };
  StateListStateRecord.prototype.c1q = function () {
    return this.z1p_1;
  };
  StateListStateRecord.prototype.r1e = function (value) {
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = _get_sync_$accessor$oh7eud_9jnt9b();
    var tmp$ret$0;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    var tmp = this;
    tmp.y1p_1 = (value instanceof StateListStateRecord ? value : THROW_CCE()).y1p_1;
    this.z1p_1 = value.z1p_1;
    tmp$ret$0 = Unit_getInstance();
    tmp$ret$1 = tmp$ret$0;
  };
  StateListStateRecord.prototype.s1e = function () {
    return new StateListStateRecord(this.y1p_1);
  };
  StateListStateRecord.$metadata$ = classMeta('StateListStateRecord', undefined, undefined, undefined, undefined, StateRecord.prototype);
  function SnapshotStateList() {
    this.d1q_1 = new StateListStateRecord(persistentListOf());
  }
  SnapshotStateList.prototype.b1f = function () {
    return this.d1q_1;
  };
  SnapshotStateList.prototype.c1f = function (value) {
    value.u1e_1 = this.d1q_1;
    var tmp = this;
    tmp.d1q_1 = value instanceof StateListStateRecord ? value : THROW_CCE();
  };
  SnapshotStateList.prototype.c1q = function () {
    var tmp$ret$2;
    // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.withCurrent' call
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.snapshots.withCurrent' call
    var tmp = this.d1q_1;
    var tmp0_withCurrent = tmp instanceof StateListStateRecord ? tmp : THROW_CCE();
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.<get-modification>.<anonymous>' call
    var tmp1__anonymous__uwfjfc = current(tmp0_withCurrent, Companion_getInstance_15().fr());
    tmp$ret$0 = tmp1__anonymous__uwfjfc.z1p_1;
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  };
  SnapshotStateList.prototype.e1q = function () {
    var tmp = this.d1q_1;
    return readable_0(tmp instanceof StateListStateRecord ? tmp : THROW_CCE(), this);
  };
  SnapshotStateList.prototype.g = function () {
    return this.e1q().y1p_1.g();
  };
  SnapshotStateList.prototype.v2 = function (element) {
    return this.e1q().y1p_1.j(element);
  };
  SnapshotStateList.prototype.j = function (element) {
    if (!(element == null ? true : isObject(element)))
      return false;
    return this.v2((element == null ? true : isObject(element)) ? element : THROW_CCE());
  };
  SnapshotStateList.prototype.w2 = function (elements) {
    return this.e1q().y1p_1.l1(elements);
  };
  SnapshotStateList.prototype.l1 = function (elements) {
    return this.w2(elements);
  };
  SnapshotStateList.prototype.h = function (index) {
    return this.e1q().y1p_1.h(index);
  };
  SnapshotStateList.prototype.f1q = function (element) {
    return this.e1q().y1p_1.m(element);
  };
  SnapshotStateList.prototype.m = function (element) {
    if (!(element == null ? true : isObject(element)))
      return -1;
    return this.f1q((element == null ? true : isObject(element)) ? element : THROW_CCE());
  };
  SnapshotStateList.prototype.i = function () {
    return this.e1q().y1p_1.i();
  };
  SnapshotStateList.prototype.d = function () {
    return this.a1g();
  };
  SnapshotStateList.prototype.g1q = function (element) {
    return this.e1q().y1p_1.w1(element);
  };
  SnapshotStateList.prototype.w1 = function (element) {
    if (!(element == null ? true : isObject(element)))
      return -1;
    return this.g1q((element == null ? true : isObject(element)) ? element : THROW_CCE());
  };
  SnapshotStateList.prototype.a1g = function () {
    return new StateListIterator(this, 0);
  };
  SnapshotStateList.prototype.n = function (index) {
    return new StateListIterator(this, index);
  };
  SnapshotStateList.prototype.p15 = function (element) {
    var tmp$ret$19;
    // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.conditionalUpdate' call
    var tmp$ret$18;
    // Inline function 'kotlin.run' call
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$17;
    // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.conditionalUpdate.<anonymous>' call
    var result;
    $l$loop_0: while (true) {
      var oldList = null;
      var currentModification = 0;
      var tmp$ret$4;
      // Inline function 'androidx.compose.runtime.synchronized' call
      var tmp0_synchronized = _get_sync_$accessor$oh7eud_9jnt9b();
      var tmp$ret$3;
      // Inline function 'kotlinx.atomicfu.locks.synchronized' call
      var tmp$ret$2;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.withCurrent' call
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.snapshots.withCurrent' call
      var tmp = this.d1q_1;
      var tmp0_withCurrent = tmp instanceof StateListStateRecord ? tmp : THROW_CCE();
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.conditionalUpdate.<anonymous>.<anonymous>.<anonymous>' call
      var tmp1__anonymous__uwfjfc = current(tmp0_withCurrent, Companion_getInstance_15().fr());
      tmp$ret$0 = tmp1__anonymous__uwfjfc;
      tmp$ret$1 = tmp$ret$0;
      tmp$ret$2 = tmp$ret$1;
      var current_0 = tmp$ret$2;
      currentModification = current_0.z1p_1;
      oldList = current_0.y1p_1;
      tmp$ret$3 = Unit_getInstance();
      tmp$ret$4 = tmp$ret$3;
      var tmp$ret$5;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.add.<anonymous>' call
      var tmp0__anonymous__q1qw7t = ensureNotNull(oldList);
      tmp$ret$5 = tmp0__anonymous__q1qw7t.b(element);
      var newList = tmp$ret$5;
      if (equals_0(newList, oldList)) {
        result = false;
        break $l$loop_0;
      }
      var tmp$ret$16;
      // Inline function 'androidx.compose.runtime.synchronized' call
      var tmp1_synchronized = _get_sync_$accessor$oh7eud_9jnt9b();
      var tmp$ret$15;
      // Inline function 'kotlinx.atomicfu.locks.synchronized' call
      var tmp$ret$14;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.conditionalUpdate.<anonymous>.<anonymous>' call
      var tmp$ret$13;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.writable' call
      var tmp$ret$12;
      // Inline function 'androidx.compose.runtime.snapshots.writable' call
      var tmp_0 = this.d1q_1;
      var tmp0_writable = tmp_0 instanceof StateListStateRecord ? tmp_0 : THROW_CCE();
      var snapshot = get_snapshotInitializer();
      var tmp$ret$11;
      // Inline function 'kotlin.also' call
      var tmp$ret$10;
      // Inline function 'androidx.compose.runtime.snapshots.sync' call
      var tmp$ret$9;
      // Inline function 'androidx.compose.runtime.synchronized' call
      var tmp0_synchronized_0 = get_lock();
      var tmp$ret$8;
      // Inline function 'kotlinx.atomicfu.locks.synchronized' call
      var tmp$ret$7;
      // Inline function 'androidx.compose.runtime.snapshots.writable.<anonymous>' call
      snapshot = Companion_getInstance_15().fr();
      var tmp$ret$6;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.conditionalUpdate.<anonymous>.<anonymous>.<anonymous>' call
      var tmp1__anonymous__uwfjfc_0 = writableRecord(tmp0_writable, this, snapshot);
      var tmp_1;
      if (tmp1__anonymous__uwfjfc_0.z1p_1 === currentModification) {
        tmp1__anonymous__uwfjfc_0.y1p_1 = newList;
        var tmp0_this = tmp1__anonymous__uwfjfc_0;
        var tmp1 = tmp0_this.z1p_1;
        tmp0_this.z1p_1 = tmp1 + 1 | 0;
        tmp_1 = true;
      } else {
        tmp_1 = false;
      }
      tmp$ret$6 = tmp_1;
      tmp$ret$7 = tmp$ret$6;
      tmp$ret$8 = tmp$ret$7;
      tmp$ret$9 = tmp$ret$8;
      tmp$ret$10 = tmp$ret$9;
      var tmp0_also = tmp$ret$10;
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'androidx.compose.runtime.snapshots.writable.<anonymous>' call
      notifyWrite(snapshot, this);
      tmp$ret$11 = tmp0_also;
      tmp$ret$12 = tmp$ret$11;
      tmp$ret$13 = tmp$ret$12;
      tmp$ret$14 = tmp$ret$13;
      tmp$ret$15 = tmp$ret$14;
      tmp$ret$16 = tmp$ret$15;
      if (tmp$ret$16) {
        result = true;
        break $l$loop_0;
      }
    }
    tmp$ret$17 = result;
    tmp$ret$18 = tmp$ret$17;
    tmp$ret$19 = tmp$ret$18;
    return tmp$ret$19;
  };
  SnapshotStateList.prototype.b = function (element) {
    return this.p15((element == null ? true : isObject(element)) ? element : THROW_CCE());
  };
  SnapshotStateList.prototype.h1q = function (index, element) {
    var tmp$ret$19;
    // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.conditionalUpdate' call
    var tmp$ret$18;
    // Inline function 'kotlin.run' call
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$17;
    // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.conditionalUpdate.<anonymous>' call
    var result;
    $l$loop_0: while (true) {
      var oldList = null;
      var currentModification = 0;
      var tmp$ret$4;
      // Inline function 'androidx.compose.runtime.synchronized' call
      var tmp0_synchronized = _get_sync_$accessor$oh7eud_9jnt9b();
      var tmp$ret$3;
      // Inline function 'kotlinx.atomicfu.locks.synchronized' call
      var tmp$ret$2;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.withCurrent' call
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.snapshots.withCurrent' call
      var tmp = this.d1q_1;
      var tmp0_withCurrent = tmp instanceof StateListStateRecord ? tmp : THROW_CCE();
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.conditionalUpdate.<anonymous>.<anonymous>.<anonymous>' call
      var tmp1__anonymous__uwfjfc = current(tmp0_withCurrent, Companion_getInstance_15().fr());
      tmp$ret$0 = tmp1__anonymous__uwfjfc;
      tmp$ret$1 = tmp$ret$0;
      tmp$ret$2 = tmp$ret$1;
      var current_0 = tmp$ret$2;
      currentModification = current_0.z1p_1;
      oldList = current_0.y1p_1;
      tmp$ret$3 = Unit_getInstance();
      tmp$ret$4 = tmp$ret$3;
      var tmp$ret$5;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.add.<anonymous>' call
      var tmp0__anonymous__q1qw7t = ensureNotNull(oldList);
      tmp$ret$5 = tmp0__anonymous__q1qw7t.r1f(index, element);
      var newList = tmp$ret$5;
      if (equals_0(newList, oldList)) {
        result = false;
        break $l$loop_0;
      }
      var tmp$ret$16;
      // Inline function 'androidx.compose.runtime.synchronized' call
      var tmp1_synchronized = _get_sync_$accessor$oh7eud_9jnt9b();
      var tmp$ret$15;
      // Inline function 'kotlinx.atomicfu.locks.synchronized' call
      var tmp$ret$14;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.conditionalUpdate.<anonymous>.<anonymous>' call
      var tmp$ret$13;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.writable' call
      var tmp$ret$12;
      // Inline function 'androidx.compose.runtime.snapshots.writable' call
      var tmp_0 = this.d1q_1;
      var tmp0_writable = tmp_0 instanceof StateListStateRecord ? tmp_0 : THROW_CCE();
      var snapshot = get_snapshotInitializer();
      var tmp$ret$11;
      // Inline function 'kotlin.also' call
      var tmp$ret$10;
      // Inline function 'androidx.compose.runtime.snapshots.sync' call
      var tmp$ret$9;
      // Inline function 'androidx.compose.runtime.synchronized' call
      var tmp0_synchronized_0 = get_lock();
      var tmp$ret$8;
      // Inline function 'kotlinx.atomicfu.locks.synchronized' call
      var tmp$ret$7;
      // Inline function 'androidx.compose.runtime.snapshots.writable.<anonymous>' call
      snapshot = Companion_getInstance_15().fr();
      var tmp$ret$6;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.conditionalUpdate.<anonymous>.<anonymous>.<anonymous>' call
      var tmp1__anonymous__uwfjfc_0 = writableRecord(tmp0_writable, this, snapshot);
      var tmp_1;
      if (tmp1__anonymous__uwfjfc_0.z1p_1 === currentModification) {
        tmp1__anonymous__uwfjfc_0.y1p_1 = newList;
        var tmp0_this = tmp1__anonymous__uwfjfc_0;
        var tmp1 = tmp0_this.z1p_1;
        tmp0_this.z1p_1 = tmp1 + 1 | 0;
        tmp_1 = true;
      } else {
        tmp_1 = false;
      }
      tmp$ret$6 = tmp_1;
      tmp$ret$7 = tmp$ret$6;
      tmp$ret$8 = tmp$ret$7;
      tmp$ret$9 = tmp$ret$8;
      tmp$ret$10 = tmp$ret$9;
      var tmp0_also = tmp$ret$10;
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'androidx.compose.runtime.snapshots.writable.<anonymous>' call
      notifyWrite(snapshot, this);
      tmp$ret$11 = tmp0_also;
      tmp$ret$12 = tmp$ret$11;
      tmp$ret$13 = tmp$ret$12;
      tmp$ret$14 = tmp$ret$13;
      tmp$ret$15 = tmp$ret$14;
      tmp$ret$16 = tmp$ret$15;
      if (tmp$ret$16) {
        result = true;
        break $l$loop_0;
      }
    }
    tmp$ret$17 = result;
    tmp$ret$18 = tmp$ret$17;
    tmp$ret$19 = tmp$ret$18;
    return Unit_getInstance();
  };
  SnapshotStateList.prototype.d7 = function (index, element) {
    return this.h1q(index, (element == null ? true : isObject(element)) ? element : THROW_CCE());
  };
  SnapshotStateList.prototype.i1q = function (elements) {
    var tmp$ret$19;
    // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.conditionalUpdate' call
    var tmp$ret$18;
    // Inline function 'kotlin.run' call
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$17;
    // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.conditionalUpdate.<anonymous>' call
    var result;
    $l$loop_0: while (true) {
      var oldList = null;
      var currentModification = 0;
      var tmp$ret$4;
      // Inline function 'androidx.compose.runtime.synchronized' call
      var tmp0_synchronized = _get_sync_$accessor$oh7eud_9jnt9b();
      var tmp$ret$3;
      // Inline function 'kotlinx.atomicfu.locks.synchronized' call
      var tmp$ret$2;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.withCurrent' call
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.snapshots.withCurrent' call
      var tmp = this.d1q_1;
      var tmp0_withCurrent = tmp instanceof StateListStateRecord ? tmp : THROW_CCE();
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.conditionalUpdate.<anonymous>.<anonymous>.<anonymous>' call
      var tmp1__anonymous__uwfjfc = current(tmp0_withCurrent, Companion_getInstance_15().fr());
      tmp$ret$0 = tmp1__anonymous__uwfjfc;
      tmp$ret$1 = tmp$ret$0;
      tmp$ret$2 = tmp$ret$1;
      var current_0 = tmp$ret$2;
      currentModification = current_0.z1p_1;
      oldList = current_0.y1p_1;
      tmp$ret$3 = Unit_getInstance();
      tmp$ret$4 = tmp$ret$3;
      var tmp$ret$5;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.addAll.<anonymous>' call
      var tmp0__anonymous__q1qw7t = ensureNotNull(oldList);
      tmp$ret$5 = tmp0__anonymous__q1qw7t.h1(elements);
      var newList = tmp$ret$5;
      if (equals_0(newList, oldList)) {
        result = false;
        break $l$loop_0;
      }
      var tmp$ret$16;
      // Inline function 'androidx.compose.runtime.synchronized' call
      var tmp1_synchronized = _get_sync_$accessor$oh7eud_9jnt9b();
      var tmp$ret$15;
      // Inline function 'kotlinx.atomicfu.locks.synchronized' call
      var tmp$ret$14;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.conditionalUpdate.<anonymous>.<anonymous>' call
      var tmp$ret$13;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.writable' call
      var tmp$ret$12;
      // Inline function 'androidx.compose.runtime.snapshots.writable' call
      var tmp_0 = this.d1q_1;
      var tmp0_writable = tmp_0 instanceof StateListStateRecord ? tmp_0 : THROW_CCE();
      var snapshot = get_snapshotInitializer();
      var tmp$ret$11;
      // Inline function 'kotlin.also' call
      var tmp$ret$10;
      // Inline function 'androidx.compose.runtime.snapshots.sync' call
      var tmp$ret$9;
      // Inline function 'androidx.compose.runtime.synchronized' call
      var tmp0_synchronized_0 = get_lock();
      var tmp$ret$8;
      // Inline function 'kotlinx.atomicfu.locks.synchronized' call
      var tmp$ret$7;
      // Inline function 'androidx.compose.runtime.snapshots.writable.<anonymous>' call
      snapshot = Companion_getInstance_15().fr();
      var tmp$ret$6;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.conditionalUpdate.<anonymous>.<anonymous>.<anonymous>' call
      var tmp1__anonymous__uwfjfc_0 = writableRecord(tmp0_writable, this, snapshot);
      var tmp_1;
      if (tmp1__anonymous__uwfjfc_0.z1p_1 === currentModification) {
        tmp1__anonymous__uwfjfc_0.y1p_1 = newList;
        var tmp0_this = tmp1__anonymous__uwfjfc_0;
        var tmp1 = tmp0_this.z1p_1;
        tmp0_this.z1p_1 = tmp1 + 1 | 0;
        tmp_1 = true;
      } else {
        tmp_1 = false;
      }
      tmp$ret$6 = tmp_1;
      tmp$ret$7 = tmp$ret$6;
      tmp$ret$8 = tmp$ret$7;
      tmp$ret$9 = tmp$ret$8;
      tmp$ret$10 = tmp$ret$9;
      var tmp0_also = tmp$ret$10;
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'androidx.compose.runtime.snapshots.writable.<anonymous>' call
      notifyWrite(snapshot, this);
      tmp$ret$11 = tmp0_also;
      tmp$ret$12 = tmp$ret$11;
      tmp$ret$13 = tmp$ret$12;
      tmp$ret$14 = tmp$ret$13;
      tmp$ret$15 = tmp$ret$14;
      tmp$ret$16 = tmp$ret$15;
      if (tmp$ret$16) {
        result = true;
        break $l$loop_0;
      }
    }
    tmp$ret$17 = result;
    tmp$ret$18 = tmp$ret$17;
    tmp$ret$19 = tmp$ret$18;
    return tmp$ret$19;
  };
  SnapshotStateList.prototype.h1 = function (elements) {
    return this.i1q(elements);
  };
  SnapshotStateList.prototype.q6 = function () {
    var tmp$ret$10;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized = _get_sync_$accessor$oh7eud_9jnt9b();
    var tmp$ret$9;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    var tmp$ret$8;
    // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.clear.<anonymous>' call
    var tmp$ret$7;
    // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.writable' call
    var tmp$ret$6;
    // Inline function 'androidx.compose.runtime.snapshots.writable' call
    var tmp = this.d1q_1;
    var tmp0_writable = tmp instanceof StateListStateRecord ? tmp : THROW_CCE();
    var snapshot = get_snapshotInitializer();
    var tmp$ret$5;
    // Inline function 'kotlin.also' call
    var tmp$ret$4;
    // Inline function 'androidx.compose.runtime.snapshots.sync' call
    var tmp$ret$3;
    // Inline function 'androidx.compose.runtime.synchronized' call
    var tmp0_synchronized_0 = get_lock();
    var tmp$ret$2;
    // Inline function 'kotlinx.atomicfu.locks.synchronized' call
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.snapshots.writable.<anonymous>' call
    snapshot = Companion_getInstance_15().fr();
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.clear.<anonymous>.<anonymous>' call
    var tmp1__anonymous__uwfjfc = writableRecord(tmp0_writable, this, snapshot);
    tmp1__anonymous__uwfjfc.y1p_1 = persistentListOf();
    var tmp0_this = tmp1__anonymous__uwfjfc;
    var tmp1 = tmp0_this.z1p_1;
    tmp0_this.z1p_1 = tmp1 + 1 | 0;
    tmp$ret$0 = tmp1;
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    tmp$ret$4 = tmp$ret$3;
    var tmp0_also = tmp$ret$4;
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'androidx.compose.runtime.snapshots.writable.<anonymous>' call
    notifyWrite(snapshot, this);
    tmp$ret$5 = tmp0_also;
    tmp$ret$6 = tmp$ret$5;
    tmp$ret$7 = tmp$ret$6;
    tmp$ret$8 = tmp$ret$7;
    tmp$ret$9 = tmp$ret$8;
    tmp$ret$10 = tmp$ret$9;
  };
  SnapshotStateList.prototype.m1f = function (element) {
    var tmp$ret$19;
    // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.conditionalUpdate' call
    var tmp$ret$18;
    // Inline function 'kotlin.run' call
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$17;
    // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.conditionalUpdate.<anonymous>' call
    var result;
    $l$loop_0: while (true) {
      var oldList = null;
      var currentModification = 0;
      var tmp$ret$4;
      // Inline function 'androidx.compose.runtime.synchronized' call
      var tmp0_synchronized = _get_sync_$accessor$oh7eud_9jnt9b();
      var tmp$ret$3;
      // Inline function 'kotlinx.atomicfu.locks.synchronized' call
      var tmp$ret$2;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.withCurrent' call
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.snapshots.withCurrent' call
      var tmp = this.d1q_1;
      var tmp0_withCurrent = tmp instanceof StateListStateRecord ? tmp : THROW_CCE();
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.conditionalUpdate.<anonymous>.<anonymous>.<anonymous>' call
      var tmp1__anonymous__uwfjfc = current(tmp0_withCurrent, Companion_getInstance_15().fr());
      tmp$ret$0 = tmp1__anonymous__uwfjfc;
      tmp$ret$1 = tmp$ret$0;
      tmp$ret$2 = tmp$ret$1;
      var current_0 = tmp$ret$2;
      currentModification = current_0.z1p_1;
      oldList = current_0.y1p_1;
      tmp$ret$3 = Unit_getInstance();
      tmp$ret$4 = tmp$ret$3;
      var tmp$ret$5;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.remove.<anonymous>' call
      var tmp0__anonymous__q1qw7t = ensureNotNull(oldList);
      tmp$ret$5 = tmp0__anonymous__q1qw7t.n6(element);
      var newList = tmp$ret$5;
      if (equals_0(newList, oldList)) {
        result = false;
        break $l$loop_0;
      }
      var tmp$ret$16;
      // Inline function 'androidx.compose.runtime.synchronized' call
      var tmp1_synchronized = _get_sync_$accessor$oh7eud_9jnt9b();
      var tmp$ret$15;
      // Inline function 'kotlinx.atomicfu.locks.synchronized' call
      var tmp$ret$14;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.conditionalUpdate.<anonymous>.<anonymous>' call
      var tmp$ret$13;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.writable' call
      var tmp$ret$12;
      // Inline function 'androidx.compose.runtime.snapshots.writable' call
      var tmp_0 = this.d1q_1;
      var tmp0_writable = tmp_0 instanceof StateListStateRecord ? tmp_0 : THROW_CCE();
      var snapshot = get_snapshotInitializer();
      var tmp$ret$11;
      // Inline function 'kotlin.also' call
      var tmp$ret$10;
      // Inline function 'androidx.compose.runtime.snapshots.sync' call
      var tmp$ret$9;
      // Inline function 'androidx.compose.runtime.synchronized' call
      var tmp0_synchronized_0 = get_lock();
      var tmp$ret$8;
      // Inline function 'kotlinx.atomicfu.locks.synchronized' call
      var tmp$ret$7;
      // Inline function 'androidx.compose.runtime.snapshots.writable.<anonymous>' call
      snapshot = Companion_getInstance_15().fr();
      var tmp$ret$6;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.conditionalUpdate.<anonymous>.<anonymous>.<anonymous>' call
      var tmp1__anonymous__uwfjfc_0 = writableRecord(tmp0_writable, this, snapshot);
      var tmp_1;
      if (tmp1__anonymous__uwfjfc_0.z1p_1 === currentModification) {
        tmp1__anonymous__uwfjfc_0.y1p_1 = newList;
        var tmp0_this = tmp1__anonymous__uwfjfc_0;
        var tmp1 = tmp0_this.z1p_1;
        tmp0_this.z1p_1 = tmp1 + 1 | 0;
        tmp_1 = true;
      } else {
        tmp_1 = false;
      }
      tmp$ret$6 = tmp_1;
      tmp$ret$7 = tmp$ret$6;
      tmp$ret$8 = tmp$ret$7;
      tmp$ret$9 = tmp$ret$8;
      tmp$ret$10 = tmp$ret$9;
      var tmp0_also = tmp$ret$10;
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'androidx.compose.runtime.snapshots.writable.<anonymous>' call
      notifyWrite(snapshot, this);
      tmp$ret$11 = tmp0_also;
      tmp$ret$12 = tmp$ret$11;
      tmp$ret$13 = tmp$ret$12;
      tmp$ret$14 = tmp$ret$13;
      tmp$ret$15 = tmp$ret$14;
      tmp$ret$16 = tmp$ret$15;
      if (tmp$ret$16) {
        result = true;
        break $l$loop_0;
      }
    }
    tmp$ret$17 = result;
    tmp$ret$18 = tmp$ret$17;
    tmp$ret$19 = tmp$ret$18;
    return tmp$ret$19;
  };
  SnapshotStateList.prototype.n6 = function (element) {
    if (!(element == null ? true : isObject(element)))
      return false;
    return this.m1f((element == null ? true : isObject(element)) ? element : THROW_CCE());
  };
  SnapshotStateList.prototype.f3 = function (index) {
    var tmp$ret$20;
    // Inline function 'kotlin.also' call
    var tmp0_also = this.h(index);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.removeAt.<anonymous>' call
    // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.update' call
    var tmp$ret$19;
    // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.conditionalUpdate' call
    var tmp$ret$18;
    // Inline function 'kotlin.run' call
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$17;
    // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.conditionalUpdate.<anonymous>' call
    var result;
    $l$loop_0: while (true) {
      var oldList = null;
      var currentModification = 0;
      var tmp$ret$4;
      // Inline function 'androidx.compose.runtime.synchronized' call
      var tmp0_synchronized = _get_sync_$accessor$oh7eud_9jnt9b();
      var tmp$ret$3;
      // Inline function 'kotlinx.atomicfu.locks.synchronized' call
      var tmp$ret$2;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.withCurrent' call
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.snapshots.withCurrent' call
      var tmp = this.d1q_1;
      var tmp0_withCurrent = tmp instanceof StateListStateRecord ? tmp : THROW_CCE();
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.conditionalUpdate.<anonymous>.<anonymous>.<anonymous>' call
      var tmp1__anonymous__uwfjfc = current(tmp0_withCurrent, Companion_getInstance_15().fr());
      tmp$ret$0 = tmp1__anonymous__uwfjfc;
      tmp$ret$1 = tmp$ret$0;
      tmp$ret$2 = tmp$ret$1;
      var current_0 = tmp$ret$2;
      currentModification = current_0.z1p_1;
      oldList = current_0.y1p_1;
      tmp$ret$3 = Unit_getInstance();
      tmp$ret$4 = tmp$ret$3;
      var tmp$ret$5;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.removeAt.<anonymous>.<anonymous>' call
      var tmp0__anonymous__q1qw7t = ensureNotNull(oldList);
      tmp$ret$5 = tmp0__anonymous__q1qw7t.f3(index);
      var newList = tmp$ret$5;
      if (equals_0(newList, oldList)) {
        result = false;
        break $l$loop_0;
      }
      var tmp$ret$16;
      // Inline function 'androidx.compose.runtime.synchronized' call
      var tmp1_synchronized = _get_sync_$accessor$oh7eud_9jnt9b();
      var tmp$ret$15;
      // Inline function 'kotlinx.atomicfu.locks.synchronized' call
      var tmp$ret$14;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.conditionalUpdate.<anonymous>.<anonymous>' call
      var tmp$ret$13;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.writable' call
      var tmp$ret$12;
      // Inline function 'androidx.compose.runtime.snapshots.writable' call
      var tmp_0 = this.d1q_1;
      var tmp0_writable = tmp_0 instanceof StateListStateRecord ? tmp_0 : THROW_CCE();
      var snapshot = get_snapshotInitializer();
      var tmp$ret$11;
      // Inline function 'kotlin.also' call
      var tmp$ret$10;
      // Inline function 'androidx.compose.runtime.snapshots.sync' call
      var tmp$ret$9;
      // Inline function 'androidx.compose.runtime.synchronized' call
      var tmp0_synchronized_0 = get_lock();
      var tmp$ret$8;
      // Inline function 'kotlinx.atomicfu.locks.synchronized' call
      var tmp$ret$7;
      // Inline function 'androidx.compose.runtime.snapshots.writable.<anonymous>' call
      snapshot = Companion_getInstance_15().fr();
      var tmp$ret$6;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.conditionalUpdate.<anonymous>.<anonymous>.<anonymous>' call
      var tmp1__anonymous__uwfjfc_0 = writableRecord(tmp0_writable, this, snapshot);
      var tmp_1;
      if (tmp1__anonymous__uwfjfc_0.z1p_1 === currentModification) {
        tmp1__anonymous__uwfjfc_0.y1p_1 = newList;
        var tmp0_this = tmp1__anonymous__uwfjfc_0;
        var tmp1 = tmp0_this.z1p_1;
        tmp0_this.z1p_1 = tmp1 + 1 | 0;
        tmp_1 = true;
      } else {
        tmp_1 = false;
      }
      tmp$ret$6 = tmp_1;
      tmp$ret$7 = tmp$ret$6;
      tmp$ret$8 = tmp$ret$7;
      tmp$ret$9 = tmp$ret$8;
      tmp$ret$10 = tmp$ret$9;
      var tmp0_also_0 = tmp$ret$10;
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'androidx.compose.runtime.snapshots.writable.<anonymous>' call
      notifyWrite(snapshot, this);
      tmp$ret$11 = tmp0_also_0;
      tmp$ret$12 = tmp$ret$11;
      tmp$ret$13 = tmp$ret$12;
      tmp$ret$14 = tmp$ret$13;
      tmp$ret$15 = tmp$ret$14;
      tmp$ret$16 = tmp$ret$15;
      if (tmp$ret$16) {
        result = true;
        break $l$loop_0;
      }
    }
    tmp$ret$17 = result;
    tmp$ret$18 = tmp$ret$17;
    tmp$ret$19 = tmp$ret$18;
    tmp$ret$20 = tmp0_also;
    return tmp$ret$20;
  };
  SnapshotStateList.prototype.j1q = function (index, element) {
    var tmp$ret$20;
    // Inline function 'kotlin.also' call
    var tmp0_also = this.h(index);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.set.<anonymous>' call
    // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.update' call
    var tmp$ret$19;
    // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.conditionalUpdate' call
    var tmp$ret$18;
    // Inline function 'kotlin.run' call
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$17;
    // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.conditionalUpdate.<anonymous>' call
    var result;
    $l$loop_0: while (true) {
      var oldList = null;
      var currentModification = 0;
      var tmp$ret$4;
      // Inline function 'androidx.compose.runtime.synchronized' call
      var tmp0_synchronized = _get_sync_$accessor$oh7eud_9jnt9b();
      var tmp$ret$3;
      // Inline function 'kotlinx.atomicfu.locks.synchronized' call
      var tmp$ret$2;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.withCurrent' call
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.snapshots.withCurrent' call
      var tmp = this.d1q_1;
      var tmp0_withCurrent = tmp instanceof StateListStateRecord ? tmp : THROW_CCE();
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.conditionalUpdate.<anonymous>.<anonymous>.<anonymous>' call
      var tmp1__anonymous__uwfjfc = current(tmp0_withCurrent, Companion_getInstance_15().fr());
      tmp$ret$0 = tmp1__anonymous__uwfjfc;
      tmp$ret$1 = tmp$ret$0;
      tmp$ret$2 = tmp$ret$1;
      var current_0 = tmp$ret$2;
      currentModification = current_0.z1p_1;
      oldList = current_0.y1p_1;
      tmp$ret$3 = Unit_getInstance();
      tmp$ret$4 = tmp$ret$3;
      var tmp$ret$5;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.set.<anonymous>.<anonymous>' call
      var tmp0__anonymous__q1qw7t = ensureNotNull(oldList);
      tmp$ret$5 = tmp0__anonymous__q1qw7t.m6(index, element);
      var newList = tmp$ret$5;
      if (equals_0(newList, oldList)) {
        result = false;
        break $l$loop_0;
      }
      var tmp$ret$16;
      // Inline function 'androidx.compose.runtime.synchronized' call
      var tmp1_synchronized = _get_sync_$accessor$oh7eud_9jnt9b();
      var tmp$ret$15;
      // Inline function 'kotlinx.atomicfu.locks.synchronized' call
      var tmp$ret$14;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.conditionalUpdate.<anonymous>.<anonymous>' call
      var tmp$ret$13;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.writable' call
      var tmp$ret$12;
      // Inline function 'androidx.compose.runtime.snapshots.writable' call
      var tmp_0 = this.d1q_1;
      var tmp0_writable = tmp_0 instanceof StateListStateRecord ? tmp_0 : THROW_CCE();
      var snapshot = get_snapshotInitializer();
      var tmp$ret$11;
      // Inline function 'kotlin.also' call
      var tmp$ret$10;
      // Inline function 'androidx.compose.runtime.snapshots.sync' call
      var tmp$ret$9;
      // Inline function 'androidx.compose.runtime.synchronized' call
      var tmp0_synchronized_0 = get_lock();
      var tmp$ret$8;
      // Inline function 'kotlinx.atomicfu.locks.synchronized' call
      var tmp$ret$7;
      // Inline function 'androidx.compose.runtime.snapshots.writable.<anonymous>' call
      snapshot = Companion_getInstance_15().fr();
      var tmp$ret$6;
      // Inline function 'androidx.compose.runtime.snapshots.SnapshotStateList.conditionalUpdate.<anonymous>.<anonymous>.<anonymous>' call
      var tmp1__anonymous__uwfjfc_0 = writableRecord(tmp0_writable, this, snapshot);
      var tmp_1;
      if (tmp1__anonymous__uwfjfc_0.z1p_1 === currentModification) {
        tmp1__anonymous__uwfjfc_0.y1p_1 = newList;
        var tmp0_this = tmp1__anonymous__uwfjfc_0;
        var tmp1 = tmp0_this.z1p_1;
        tmp0_this.z1p_1 = tmp1 + 1 | 0;
        tmp_1 = true;
      } else {
        tmp_1 = false;
      }
      tmp$ret$6 = tmp_1;
      tmp$ret$7 = tmp$ret$6;
      tmp$ret$8 = tmp$ret$7;
      tmp$ret$9 = tmp$ret$8;
      tmp$ret$10 = tmp$ret$9;
      var tmp0_also_0 = tmp$ret$10;
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'androidx.compose.runtime.snapshots.writable.<anonymous>' call
      notifyWrite(snapshot, this);
      tmp$ret$11 = tmp0_also_0;
      tmp$ret$12 = tmp$ret$11;
      tmp$ret$13 = tmp$ret$12;
      tmp$ret$14 = tmp$ret$13;
      tmp$ret$15 = tmp$ret$14;
      tmp$ret$16 = tmp$ret$15;
      if (tmp$ret$16) {
        result = true;
        break $l$loop_0;
      }
    }
    tmp$ret$17 = result;
    tmp$ret$18 = tmp$ret$17;
    tmp$ret$19 = tmp$ret$18;
    tmp$ret$20 = tmp0_also;
    return tmp$ret$20;
  };
  SnapshotStateList.prototype.m6 = function (index, element) {
    return this.j1q(index, (element == null ? true : isObject(element)) ? element : THROW_CCE());
  };
  SnapshotStateList.$metadata$ = classMeta('SnapshotStateList', [MutableList, StateObject]);
  function validateModification($this) {
    if (!($this.k1q_1.c1q() === $this.m1q_1)) {
      throw ConcurrentModificationException_init_$Create$();
    }
  }
  function StateListIterator(list, offset) {
    this.k1q_1 = list;
    this.l1q_1 = offset - 1 | 0;
    this.m1q_1 = this.k1q_1.c1q();
  }
  StateListIterator.prototype.o = function () {
    return this.l1q_1 >= 0;
  };
  StateListIterator.prototype.p = function () {
    return this.l1q_1 + 1 | 0;
  };
  StateListIterator.prototype.q = function () {
    validateModification(this);
    validateRange(this.l1q_1, this.k1q_1.g());
    var tmp$ret$0;
    // Inline function 'kotlin.also' call
    var tmp0_also = this.k1q_1.h(this.l1q_1);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'androidx.compose.runtime.snapshots.StateListIterator.previous.<anonymous>' call
    var tmp0_this = this;
    var tmp1 = tmp0_this.l1q_1;
    tmp0_this.l1q_1 = tmp1 - 1 | 0;
    tmp$ret$0 = tmp0_also;
    return tmp$ret$0;
  };
  StateListIterator.prototype.e = function () {
    return this.l1q_1 < (this.k1q_1.g() - 1 | 0);
  };
  StateListIterator.prototype.f = function () {
    validateModification(this);
    var newIndex = this.l1q_1 + 1 | 0;
    validateRange(newIndex, this.k1q_1.g());
    var tmp$ret$0;
    // Inline function 'kotlin.also' call
    var tmp0_also = this.k1q_1.h(newIndex);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'androidx.compose.runtime.snapshots.StateListIterator.next.<anonymous>' call
    this.l1q_1 = newIndex;
    tmp$ret$0 = tmp0_also;
    return tmp$ret$0;
  };
  StateListIterator.prototype.g3 = function () {
    validateModification(this);
    this.k1q_1.f3(this.l1q_1);
    var tmp0_this = this;
    var tmp1 = tmp0_this.l1q_1;
    tmp0_this.l1q_1 = tmp1 - 1 | 0;
    this.m1q_1 = this.k1q_1.c1q();
  };
  StateListIterator.$metadata$ = classMeta('StateListIterator', [MutableListIterator]);
  function validateRange(index, size) {
    init_properties_SnapshotStateList_kt_7zrdcn();
    if (!(0 <= index ? index < size : false)) {
      throw IndexOutOfBoundsException_init_$Create$('index (' + index + ') is out of bound of [0, ' + size + ')');
    }
  }
  function _get_sync_$accessor$oh7eud_9jnt9b() {
    init_properties_SnapshotStateList_kt_7zrdcn();
    return get_sync();
  }
  var properties_initialized_SnapshotStateList_kt_lcuarf;
  function init_properties_SnapshotStateList_kt_7zrdcn() {
    if (properties_initialized_SnapshotStateList_kt_lcuarf) {
    } else {
      properties_initialized_SnapshotStateList_kt_lcuarf = true;
      sync_0 = createSynchronizedObject();
    }
  }
  var sync_1;
  function unsupported_0() {
    init_properties_SnapshotStateMap_kt_ya1h2t();
    throw UnsupportedOperationException_init_$Create$();
  }
  var properties_initialized_SnapshotStateMap_kt_9i73ip;
  function init_properties_SnapshotStateMap_kt_ya1h2t() {
    if (properties_initialized_SnapshotStateMap_kt_9i73ip) {
    } else {
      properties_initialized_SnapshotStateMap_kt_9i73ip = true;
      sync_1 = createSynchronizedObject();
    }
  }
  function CompositionData() {
  }
  CompositionData.$metadata$ = interfaceMeta('CompositionData');
  function CompositionGroup() {
  }
  CompositionGroup.$metadata$ = interfaceMeta('CompositionGroup', [CompositionData]);
  function get_LocalInspectionTables() {
    init_properties_InspectionTables_kt_4oiy2p();
    return LocalInspectionTables;
  }
  var LocalInspectionTables;
  function LocalInspectionTables$lambda() {
    init_properties_InspectionTables_kt_4oiy2p();
    return null;
  }
  var properties_initialized_InspectionTables_kt_tgdbmt;
  function init_properties_InspectionTables_kt_4oiy2p() {
    if (properties_initialized_InspectionTables_kt_tgdbmt) {
    } else {
      properties_initialized_InspectionTables_kt_tgdbmt = true;
      LocalInspectionTables = staticCompositionLocalOf(LocalInspectionTables$lambda);
    }
  }
  function set_nextHash(_set____db54di) {
    init_properties_ActualJs_js_kt_h9bmuk();
    nextHash = _set____db54di;
  }
  function get_nextHash() {
    init_properties_ActualJs_js_kt_h9bmuk();
    return nextHash;
  }
  var nextHash;
  function get_DefaultMonotonicFrameClock() {
    init_properties_ActualJs_js_kt_h9bmuk();
    return DefaultMonotonicFrameClock;
  }
  var DefaultMonotonicFrameClock;
  function AtomicReference(value) {
    this.b16_1 = value;
    this.c16_1 = 8;
  }
  AtomicReference.prototype.qk = function () {
    return this.b16_1;
  };
  AtomicReference.prototype.a1p = function (value) {
    this.b16_1 = value;
  };
  AtomicReference.prototype.d16 = function (value) {
    var oldValue = this.b16_1;
    this.b16_1 = value;
    return oldValue;
  };
  AtomicReference.prototype.h17 = function (expect, newValue) {
    var tmp;
    if (equals_0(expect, this.b16_1)) {
      this.b16_1 = newValue;
      tmp = true;
    } else {
      tmp = false;
    }
    return tmp;
  };
  AtomicReference.$metadata$ = classMeta('AtomicReference');
  function SnapshotThreadLocal() {
    this.n18_1 = null;
  }
  SnapshotThreadLocal.prototype.qk = function () {
    return this.n18_1;
  };
  SnapshotThreadLocal.prototype.o18 = function (value) {
    this.n18_1 = value;
  };
  SnapshotThreadLocal.$metadata$ = classMeta('SnapshotThreadLocal');
  function identityHashCode_0(instance) {
    init_properties_ActualJs_js_kt_h9bmuk();
    if (instance == null) {
      return 0;
    }
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = instance;
    var hashCode = tmp$ret$0['kotlinIdentityHashcodeValue$'];
    if (hashCode != null) {
      return hashCode;
    }
    var tmp0_subject = typeof instance;
    var tmp;
    switch (tmp0_subject) {
      case 'object':
      case 'function':
        tmp = memoizeIdentityHashCode(instance);
        break;
      default:
        throw IllegalArgumentException_init_$Create$('identity hash code for ' + typeof instance + ' is not supported');
    }
    return tmp;
  }
  function MonotonicClockImpl$withFrameNanos$lambda($onFrame, $safe) {
    return function (it) {
      var duration = toDuration(it, DurationUnit_MILLISECONDS_getInstance());
      var result = $onFrame(Duration__toLongNanoseconds_impl_xyxob7(duration));
      var tmp$ret$1;
      // Inline function 'kotlin.coroutines.resume' call
      var tmp$ret$0;
      // Inline function 'kotlin.Companion.success' call
      var tmp0_success = Companion_getInstance_4();
      tmp$ret$0 = _Result___init__impl__xyqfz8(result);
      $safe.o3(tmp$ret$0);
      tmp$ret$1 = Unit_getInstance();
      return Unit_getInstance();
    };
  }
  function $withFrameNanosCOROUTINE$4(_this__u8e3s4, onFrame, resultContinuation) {
    CoroutineImpl.call(this, resultContinuation);
    this.v1q_1 = _this__u8e3s4;
    this.w1q_1 = onFrame;
  }
  $withFrameNanosCOROUTINE$4.prototype.qd = function () {
    var suspendResult = this.jd_1;
    $sm: do
      try {
        var tmp = this.hd_1;
        switch (tmp) {
          case 0:
            this.id_1 = 2;
            this.hd_1 = 1;
            var tmp_0 = this;
            tmp_0.x1q_1 = this;
            this.y1q_1 = SafeContinuation_init_$Create$(intercepted(this.x1q_1));
            var tmp_1 = window;
            tmp_1.requestAnimationFrame(MonotonicClockImpl$withFrameNanos$lambda(this.w1q_1, this.y1q_1));
            ;
            suspendResult = returnIfSuspended(this.y1q_1.w9(), this);
            if (suspendResult === get_COROUTINE_SUSPENDED()) {
              return suspendResult;
            }

            continue $sm;
          case 1:
            return suspendResult;
          case 2:
            throw this.kd_1;
        }
      } catch ($p) {
        if (this.id_1 === 2) {
          throw $p;
        } else {
          this.hd_1 = this.id_1;
          this.kd_1 = $p;
        }
      }
     while (true);
  };
  $withFrameNanosCOROUTINE$4.$metadata$ = classMeta('$withFrameNanosCOROUTINE$4', undefined, undefined, undefined, undefined, CoroutineImpl.prototype);
  function MonotonicClockImpl() {
  }
  MonotonicClockImpl.prototype.js = function (onFrame, $cont) {
    var tmp = new $withFrameNanosCOROUTINE$4(this, onFrame, $cont);
    tmp.jd_1 = Unit_getInstance();
    tmp.kd_1 = null;
    return tmp.qd();
  };
  MonotonicClockImpl.$metadata$ = classMeta('MonotonicClockImpl', [MonotonicFrameClock]);
  function memoizeIdentityHashCode(instance) {
    init_properties_ActualJs_js_kt_h9bmuk();
    var tmp0 = get_nextHash();
    set_nextHash(tmp0 + 1 | 0);
    var value = tmp0;
    var descriptor = new Object();
    descriptor.value = value;
    descriptor.writable = false;
    descriptor.configurable = false;
    descriptor.enumerable = false;
    Object.defineProperty(instance, 'kotlinIdentityHashcodeValue$', descriptor);
    return value;
  }
  function createSnapshotMutableState(value, policy) {
    init_properties_ActualJs_js_kt_h9bmuk();
    return new SnapshotMutableStateImpl(value, policy);
  }
  var properties_initialized_ActualJs_js_kt_azbr3k;
  function init_properties_ActualJs_js_kt_h9bmuk() {
    if (properties_initialized_ActualJs_js_kt_azbr3k) {
    } else {
      properties_initialized_ActualJs_js_kt_azbr3k = true;
      nextHash = 1;
      DefaultMonotonicFrameClock = new MonotonicClockImpl();
    }
  }
  function Trace() {
    Trace_instance = this;
  }
  Trace.prototype.z10 = function (name) {
    return null;
  };
  Trace.prototype.l11 = function (token) {
  };
  Trace.$metadata$ = objectMeta('Trace');
  var Trace_instance;
  function Trace_getInstance() {
    if (Trace_instance == null)
      new Trace();
    return Trace_instance;
  }
  function invokeComposableForResult$composable(composer, composable) {
    var tmp$ret$3;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = composable;
    tmp$ret$1 = tmp$ret$0;
    var tmp0_unsafeCast = tmp$ret$1(composer, 1);
    var tmp$ret$2;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$2 = tmp0_unsafeCast;
    tmp$ret$3 = tmp$ret$2;
    return tmp$ret$3;
  }
  function invokeComposable$composable(composer, composable) {
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = composable;
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$1(composer, 1);
  }
  function ComposableLambda() {
  }
  ComposableLambda.$metadata$ = interfaceMeta('ComposableLambda');
  function trackWrite($this) {
    if ($this.l1l_1) {
      var scope = $this.n1l_1;
      if (!(scope == null)) {
        scope.u17();
        $this.n1l_1 = null;
      }
      var scopes = $this.o1l_1;
      if (!(scopes == null)) {
        var inductionVariable = 0;
        var last = scopes.g();
        if (inductionVariable < last)
          do {
            var index = inductionVariable;
            inductionVariable = inductionVariable + 1 | 0;
            var item = scopes.h(index);
            item.u17();
          }
           while (inductionVariable < last);
        scopes.q6();
      }
    }
  }
  function trackRead($this, composer) {
    if ($this.l1l_1) {
      var scope = composer.j14();
      if (!(scope == null)) {
        composer.k14(scope);
        var lastScope = $this.n1l_1;
        if (replacableWith(lastScope, scope)) {
          $this.n1l_1 = scope;
        } else {
          var lastScopes = $this.o1l_1;
          if (lastScopes == null) {
            var tmp$ret$0;
            // Inline function 'kotlin.collections.mutableListOf' call
            tmp$ret$0 = ArrayList_init_$Create$();
            var newScopes = tmp$ret$0;
            $this.o1l_1 = newScopes;
            newScopes.b(scope);
          } else {
            var inductionVariable = 0;
            var last = lastScopes.g();
            if (inductionVariable < last)
              do {
                var index = inductionVariable;
                inductionVariable = inductionVariable + 1 | 0;
                var scopeAtIndex = lastScopes.h(index);
                if (replacableWith(scopeAtIndex, scope)) {
                  lastScopes.m6(index, scope);
                  return Unit_getInstance();
                }
              }
               while (inductionVariable < last);
            lastScopes.b(scope);
          }
        }
      }
    }
  }
  function invoke$invoke(receiver, p0, p1) {
    receiver.b12(p0, p1);
  }
  function ComposableLambdaImpl$invoke$invoke$ref($boundThis) {
    return function (p0, p1) {
      invoke$invoke($boundThis, p0, p1);
      return Unit_getInstance();
    };
  }
  function ComposableLambdaImpl$invoke$lambda(this$0, $p1, $changed) {
    return function (nc, _anonymous_parameter_1__qggqgd) {
      this$0.z1q($p1, nc, $changed | 1);
      return Unit_getInstance();
    };
  }
  function ComposableLambdaImpl(key, tracked) {
    this.k1l_1 = key;
    this.l1l_1 = tracked;
    this.m1l_1 = null;
    this.n1l_1 = null;
    this.o1l_1 = null;
  }
  ComposableLambdaImpl.prototype.p1l = function (block) {
    if (!equals_0(this.m1l_1, block)) {
      var oldBlockNull = this.m1l_1 == null;
      this.m1l_1 = block;
      if (!oldBlockNull) {
        trackWrite(this);
      }
    }
  };
  ComposableLambdaImpl.prototype.b12 = function (c, changed) {
    var c_0 = c.z13(this.k1l_1);
    trackRead(this, c_0);
    var dirty = changed | (c_0.ps(this) ? differentBits(0) : sameBits(0));
    var tmp = this.m1l_1;
    var result = ((!(tmp == null) ? typeof tmp === 'function' : false) ? tmp : THROW_CCE())(c_0, dirty);
    var tmp0_safe_receiver = c_0.a14();
    if (tmp0_safe_receiver == null)
      null;
    else {
      tmp0_safe_receiver.b15(ComposableLambdaImpl$invoke$invoke$ref(this));
    }
    return result;
  };
  ComposableLambdaImpl.prototype.z1q = function (p1, c, changed) {
    var c_0 = c.z13(this.k1l_1);
    trackRead(this, c_0);
    var dirty = changed | (c_0.ps(this) ? differentBits(1) : sameBits(1));
    var tmp = this.m1l_1;
    var result = ((!(tmp == null) ? typeof tmp === 'function' : false) ? tmp : THROW_CCE())(p1, c_0, dirty);
    var tmp0_safe_receiver = c_0.a14();
    if (tmp0_safe_receiver == null)
      null;
    else {
      tmp0_safe_receiver.b15(ComposableLambdaImpl$invoke$lambda(this, p1, changed));
    }
    return result;
  };
  ComposableLambdaImpl.$metadata$ = classMeta('ComposableLambdaImpl', [ComposableLambda]);
  function DOMScope() {
  }
  DOMScope.$metadata$ = interfaceMeta('DOMScope');
  function DomNodeWrapper(node) {
    this.a1r_1 = node;
    this.b1r_1 = 0;
  }
  DomNodeWrapper.prototype.s1k = function () {
    return this.a1r_1;
  };
  DomNodeWrapper.prototype.c1r = function (index, nodeWrapper) {
    var length = this.s1k().childNodes.length;
    if (index < length) {
      var tmp = this.s1k();
      var tmp_0 = nodeWrapper.s1k();
      var tmp$ret$1;
      // Inline function 'org.w3c.dom.get' call
      var tmp0_get = this.s1k().childNodes;
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = tmp0_get;
      tmp$ret$1 = tmp$ret$0[index];
      tmp.insertBefore(tmp_0, ensureNotNull(tmp$ret$1));
    } else {
      this.s1k().appendChild(nodeWrapper.s1k());
    }
  };
  DomNodeWrapper.prototype.mr = function (index, count) {
    // Inline function 'kotlin.repeat' call
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    if (inductionVariable < count)
      do {
        var index_0 = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'org.jetbrains.compose.web.internal.runtime.DomNodeWrapper.remove.<anonymous>' call
        var tmp = this.s1k();
        var tmp$ret$1;
        // Inline function 'org.w3c.dom.get' call
        var tmp0_get = this.s1k().childNodes;
        var tmp$ret$0;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$0 = tmp0_get;
        tmp$ret$1 = tmp$ret$0[index];
        tmp.removeChild(ensureNotNull(tmp$ret$1));
      }
       while (inductionVariable < count);
  };
  DomNodeWrapper.prototype.nr = function (from, to, count) {
    if (from === to) {
      return Unit_getInstance();
    }
    var inductionVariable = 0;
    if (inductionVariable < count)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var fromIndex = from > to ? from + i | 0 : from;
        var toIndex = from > to ? to + i | 0 : (to + count | 0) - 2 | 0;
        var tmp = this.s1k();
        var tmp$ret$1;
        // Inline function 'org.w3c.dom.get' call
        var tmp0_get = this.s1k().childNodes;
        var tmp$ret$0;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$0 = tmp0_get;
        tmp$ret$1 = tmp$ret$0[fromIndex];
        var child = tmp.removeChild(ensureNotNull(tmp$ret$1));
        var tmp_0 = this.s1k();
        var tmp$ret$3;
        // Inline function 'org.w3c.dom.get' call
        var tmp1_get = this.s1k().childNodes;
        var tmp$ret$2;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$2 = tmp1_get;
        tmp$ret$3 = tmp$ret$2[toIndex];
        tmp_0.insertBefore(child, ensureNotNull(tmp$ret$3));
      }
       while (inductionVariable < count);
  };
  DomNodeWrapper.$metadata$ = classMeta('DomNodeWrapper');
  function DomApplier(root) {
    AbstractApplier.call(this, root);
    this.h1r_1 = 0;
  }
  DomApplier.prototype.i1r = function (index, instance) {
  };
  DomApplier.prototype.kr = function (index, instance) {
    return this.i1r(index, instance instanceof DomNodeWrapper ? instance : THROW_CCE());
  };
  DomApplier.prototype.j1r = function (index, instance) {
    this.fr().c1r(index, instance);
  };
  DomApplier.prototype.lr = function (index, instance) {
    return this.j1r(index, instance instanceof DomNodeWrapper ? instance : THROW_CCE());
  };
  DomApplier.prototype.mr = function (index, count) {
    this.fr().mr(index, count);
  };
  DomApplier.prototype.nr = function (from, to, count) {
    this.fr().nr(from, to, count);
  };
  DomApplier.$metadata$ = classMeta('DomApplier', undefined, undefined, undefined, undefined, AbstractApplier.prototype);
  function NamedEventListener() {
  }
  NamedEventListener.$metadata$ = interfaceMeta('NamedEventListener');
  function synchronize($this) {
    // Inline function 'kotlin.collections.forEach' call
    var tmp0_forEach = $this.p1r_1;
    var tmp0_iterator = tmp0_forEach.d();
    while (tmp0_iterator.e()) {
      var element = tmp0_iterator.f();
      // Inline function 'org.jetbrains.compose.web.internal.runtime.GlobalSnapshotManager.synchronize.<anonymous>' call
      element();
    }
    $this.p1r_1.q6();
    $this.q1r_1 = false;
  }
  function schedule($this, block) {
    $this.p1r_1.b(block);
    if (!$this.q1r_1) {
      $this.q1r_1 = true;
      launch$default($this.n1r_1, null, null, GlobalSnapshotManager$schedule$slambda_0(null), 3, null);
    }
  }
  function GlobalSnapshotManager$globalWriteObserver$lambda(it) {
    if (!GlobalSnapshotManager_getInstance().l1r_1) {
      GlobalSnapshotManager_getInstance().l1r_1 = true;
      var tmp = GlobalSnapshotManager_getInstance();
      schedule(tmp, GlobalSnapshotManager$globalWriteObserver$lambda$lambda);
    }
    return Unit_getInstance();
  }
  function GlobalSnapshotManager$globalWriteObserver$lambda$lambda() {
    GlobalSnapshotManager_getInstance().l1r_1 = false;
    Companion_getInstance_15().b1a();
    return Unit_getInstance();
  }
  function GlobalSnapshotManager$schedule$slambda(resultContinuation) {
    CoroutineImpl.call(this, resultContinuation);
  }
  GlobalSnapshotManager$schedule$slambda.prototype.n1a = function ($this$launch, $cont) {
    var tmp = this.o1a($this$launch, $cont);
    tmp.jd_1 = Unit_getInstance();
    tmp.kd_1 = null;
    return tmp.qd();
  };
  GlobalSnapshotManager$schedule$slambda.prototype.rd = function (p1, $cont) {
    return this.n1a((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $cont);
  };
  GlobalSnapshotManager$schedule$slambda.prototype.qd = function () {
    var suspendResult = this.jd_1;
    $sm: do
      try {
        var tmp = this.hd_1;
        if (tmp === 0) {
          this.id_1 = 1;
          synchronize(GlobalSnapshotManager_getInstance());
          return Unit_getInstance();
        } else if (tmp === 1) {
          throw this.kd_1;
        }
      } catch ($p) {
        throw $p;
      }
     while (true);
  };
  GlobalSnapshotManager$schedule$slambda.prototype.o1a = function ($this$launch, completion) {
    var i = new GlobalSnapshotManager$schedule$slambda(completion);
    i.a1s_1 = $this$launch;
    return i;
  };
  GlobalSnapshotManager$schedule$slambda.$metadata$ = classMeta('GlobalSnapshotManager$schedule$slambda', undefined, undefined, undefined, [1], CoroutineImpl.prototype);
  function GlobalSnapshotManager$schedule$slambda_0(resultContinuation) {
    var i = new GlobalSnapshotManager$schedule$slambda(resultContinuation);
    var l = function ($this$launch, $cont) {
      return i.n1a($this$launch, $cont);
    };
    l.$arity = 1;
    return l;
  }
  function GlobalSnapshotManager() {
    GlobalSnapshotManager_instance = this;
    this.k1r_1 = false;
    this.l1r_1 = false;
    this.m1r_1 = null;
    var tmp = this;
    var tmp_0 = new JsMicrotasksDispatcher();
    tmp.n1r_1 = CoroutineScope_0(tmp_0.i4(SupervisorJob$default(null, 1, null)));
    var tmp_1 = this;
    tmp_1.o1r_1 = GlobalSnapshotManager$globalWriteObserver$lambda;
    var tmp_2 = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$0 = ArrayList_init_$Create$();
    tmp_2.p1r_1 = tmp$ret$0;
    this.q1r_1 = false;
    this.r1r_1 = 8;
  }
  GlobalSnapshotManager.prototype.b1s = function () {
    if (!this.k1r_1) {
      this.k1r_1 = true;
      this.m1r_1 = Companion_getInstance_15().t1l(this.o1r_1);
    }
  };
  GlobalSnapshotManager.$metadata$ = objectMeta('GlobalSnapshotManager');
  var GlobalSnapshotManager_instance;
  function GlobalSnapshotManager_getInstance() {
    if (GlobalSnapshotManager_instance == null)
      new GlobalSnapshotManager();
    return GlobalSnapshotManager_instance;
  }
  function JsMicrotasksDispatcher$dispatch$lambda($block) {
    return function (it) {
      $block.hj();
      return Unit_getInstance();
    };
  }
  function JsMicrotasksDispatcher() {
    CoroutineDispatcher.call(this);
    this.d1s_1 = 0;
  }
  JsMicrotasksDispatcher.prototype.tj = function (context, block) {
    var tmp = Promise.resolve(Unit_getInstance());
    tmp.then(JsMicrotasksDispatcher$dispatch$lambda(block));
  };
  JsMicrotasksDispatcher.$metadata$ = classMeta('JsMicrotasksDispatcher', undefined, undefined, undefined, undefined, CoroutineDispatcher.prototype);
  function renderComposable$composable(rootElementId, content) {
    var tmp = ensureNotNull(document.getElementById(rootElementId));
    return renderComposable$composable$default(tmp, null, content, 2, null);
  }
  function renderComposable$composable_0(root, monotonicFrameClock, content) {
    GlobalSnapshotManager_getInstance().b1s();
    var context = monotonicFrameClock.i4(new JsMicrotasksDispatcher());
    var recomposer = new Recomposer(context);
    var tmp = CoroutineScope_0(context);
    var tmp_0 = CoroutineStart_UNDISPATCHED_getInstance();
    launch$default(tmp, null, tmp_0, renderComposable$composable$slambda_0(recomposer, null), 1, null);
    var composition = ControlledComposition_0(new DomApplier(new DomNodeWrapper(root)), recomposer);
    var scope = new renderComposable$composable$scope$1(root);
    composition.c18(ComposableLambda$invoke$ref_2(composableLambdaInstance(-1520853124, true, renderComposable$composable$lambda(content, scope))));
    return composition;
  }
  function renderComposable$composable$default(root, monotonicFrameClock, content, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      monotonicFrameClock = get_DefaultMonotonicFrameClock();
    return renderComposable$composable_0(root, monotonicFrameClock, content);
  }
  function renderComposable$composable$slambda($recomposer, resultContinuation) {
    this.m1s_1 = $recomposer;
    CoroutineImpl.call(this, resultContinuation);
  }
  renderComposable$composable$slambda.prototype.n1a = function ($this$launch, $cont) {
    var tmp = this.o1a($this$launch, $cont);
    tmp.jd_1 = Unit_getInstance();
    tmp.kd_1 = null;
    return tmp.qd();
  };
  renderComposable$composable$slambda.prototype.rd = function (p1, $cont) {
    return this.n1a((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $cont);
  };
  renderComposable$composable$slambda.prototype.qd = function () {
    var suspendResult = this.jd_1;
    $sm: do
      try {
        var tmp = this.hd_1;
        switch (tmp) {
          case 0:
            this.id_1 = 2;
            this.hd_1 = 1;
            suspendResult = this.m1s_1.f1d(this);
            if (suspendResult === get_COROUTINE_SUSPENDED()) {
              return suspendResult;
            }

            continue $sm;
          case 1:
            return Unit_getInstance();
          case 2:
            throw this.kd_1;
        }
      } catch ($p) {
        if (this.id_1 === 2) {
          throw $p;
        } else {
          this.hd_1 = this.id_1;
          this.kd_1 = $p;
        }
      }
     while (true);
  };
  renderComposable$composable$slambda.prototype.o1a = function ($this$launch, completion) {
    var i = new renderComposable$composable$slambda(this.m1s_1, completion);
    i.n1s_1 = $this$launch;
    return i;
  };
  renderComposable$composable$slambda.$metadata$ = classMeta('renderComposable$composable$slambda', undefined, undefined, undefined, [1], CoroutineImpl.prototype);
  function renderComposable$composable$slambda_0($recomposer, resultContinuation) {
    var i = new renderComposable$composable$slambda($recomposer, resultContinuation);
    var l = function ($this$launch, $cont) {
      return i.n1a($this$launch, $cont);
    };
    l.$arity = 1;
    return l;
  }
  function renderComposable$composable$scope$1($root) {
    this.o1s_1 = $root;
  }
  renderComposable$composable$scope$1.$metadata$ = classMeta(undefined, [DOMScope]);
  function ComposableLambda$invoke$ref_2($boundThis) {
    return function (p0, p1) {
      return $boundThis.b12(p0, p1);
    };
  }
  function renderComposable$composable$lambda($content, $scope) {
    return function ($composer, $changed) {
      var $composer_0 = $composer;
      var tmp;
      if (!(($changed & 11) === 2) ? true : !$composer_0.d12()) {
        if (isTraceInProgress()) {
          traceEventStart(-1520853124, $changed, -1, 'org.jetbrains.compose.web.renderComposable$composable.<anonymous> (renderComposable.kt:59)');
        }
        $content($scope, $composer_0, 0);
        var tmp_0;
        if (isTraceInProgress()) {
          traceEventEnd();
          tmp_0 = Unit_getInstance();
        }
        tmp = tmp_0;
      } else {
        $composer_0.hy();
        tmp = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  var setInputValue;
  var setTextAreaDefaultValue;
  var setCheckedValue;
  function href(_this__u8e3s4, value) {
    init_properties_Attrs_kt_mv9v1q();
    return _this__u8e3s4.p1s('href', value);
  }
  function setInputValue$lambda(e, v) {
    init_properties_Attrs_kt_mv9v1q();
    if (!(v === e.value)) {
      e.value = v;
    }
    saveControlledInputState(e, v);
    return Unit_getInstance();
  }
  function setTextAreaDefaultValue$lambda(e, v) {
    init_properties_Attrs_kt_mv9v1q();
    e.innerText = v;
    return Unit_getInstance();
  }
  function setCheckedValue$lambda(e, v) {
    init_properties_Attrs_kt_mv9v1q();
    e.checked = v;
    saveControlledInputState(e, v);
    return Unit_getInstance();
  }
  var properties_initialized_Attrs_kt_uypsku;
  function init_properties_Attrs_kt_mv9v1q() {
    if (properties_initialized_Attrs_kt_uypsku) {
    } else {
      properties_initialized_Attrs_kt_uypsku = true;
      setInputValue = setInputValue$lambda;
      setTextAreaDefaultValue = setTextAreaDefaultValue$lambda;
      setCheckedValue = setCheckedValue$lambda;
    }
  }
  function Companion_17() {
    Companion_instance_17 = this;
    this.q1s_1 = 'class';
    this.r1s_1 = 'id';
    this.s1s_1 = 'hidden';
    this.t1s_1 = 'title';
    this.u1s_1 = 'dir';
    this.v1s_1 = 'draggable';
    this.w1s_1 = 'contenteditable';
    this.x1s_1 = 'lang';
    this.y1s_1 = 'tabindex';
    this.z1s_1 = 'spellcheck';
  }
  Companion_17.$metadata$ = objectMeta('Companion');
  var Companion_instance_17;
  function Companion_getInstance_17() {
    if (Companion_instance_17 == null)
      new Companion_17();
    return Companion_instance_17;
  }
  function AttrsScope() {
  }
  AttrsScope.$metadata$ = interfaceMeta('AttrsScope', [EventsListenerScope]);
  function AttrsScopeBuilder_init_$Init$(eventsListenerScopeBuilder, $mask0, $marker, $this) {
    if (!(($mask0 & 1) === 0))
      eventsListenerScopeBuilder = new EventsListenerScopeBuilder();
    AttrsScopeBuilder.call($this, eventsListenerScopeBuilder);
    return $this;
  }
  function AttrsScopeBuilder_init_$Create$(eventsListenerScopeBuilder, $mask0, $marker) {
    return AttrsScopeBuilder_init_$Init$(eventsListenerScopeBuilder, $mask0, $marker, Object.create(AttrsScopeBuilder.prototype));
  }
  function AttrsScopeBuilder(eventsListenerScopeBuilder) {
    this.i1t_1 = eventsListenerScopeBuilder;
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableMapOf' call
    tmp$ret$0 = LinkedHashMap_init_$Create$();
    tmp.j1t_1 = tmp$ret$0;
    this.k1t_1 = new StyleScopeBuilder();
    var tmp_0 = this;
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$1 = ArrayList_init_$Create$();
    tmp_0.l1t_1 = tmp$ret$1;
    this.m1t_1 = null;
    var tmp_1 = this;
    var tmp$ret$2;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$2 = ArrayList_init_$Create$();
    tmp_1.n1t_1 = tmp$ret$2;
    this.o1t_1 = 8;
  }
  AttrsScopeBuilder.prototype.p1t = function () {
    return this.i1t_1;
  };
  AttrsScopeBuilder.prototype.g1t = function (listener) {
    this.i1t_1.g1t(listener);
  };
  AttrsScopeBuilder.prototype.h1t = function (listener) {
    this.i1t_1.h1t(listener);
  };
  AttrsScopeBuilder.prototype.f1t = function (listener) {
    this.i1t_1.f1t(listener);
  };
  AttrsScopeBuilder.prototype.s1t = function () {
    return this.k1t_1;
  };
  AttrsScopeBuilder.prototype.t1t = function () {
    return this.l1t_1;
  };
  AttrsScopeBuilder.prototype.u1t = function () {
    return this.m1t_1;
  };
  AttrsScopeBuilder.prototype.v1t = function () {
    return this.n1t_1;
  };
  AttrsScopeBuilder.prototype.b1t = function (classes) {
    this.n1t_1.h1(classes);
  };
  AttrsScopeBuilder.prototype.c1t = function (classes) {
    addAll_0(this.n1t_1, classes);
  };
  AttrsScopeBuilder.prototype.a1t = function (builder) {
    var tmp$ret$0;
    // Inline function 'kotlin.apply' call
    var tmp0_apply = this.k1t_1;
    // Inline function 'kotlin.contracts.contract' call
    builder(tmp0_apply);
    tmp$ret$0 = tmp0_apply;
  };
  AttrsScopeBuilder.prototype.p1s = function (attr, value) {
    // Inline function 'kotlin.collections.set' call
    var tmp0_set = this.j1t_1;
    tmp0_set.a(attr, value);
    return this;
  };
  AttrsScopeBuilder.prototype.w1t = function () {
    return this.j1t_1;
  };
  AttrsScopeBuilder.$metadata$ = classMeta('AttrsScopeBuilder', [AttrsScope, EventsListenerScope]);
  function Companion_18() {
    Companion_instance_18 = this;
    this.x1t_1 = 'copy';
    this.y1t_1 = 'cut';
    this.z1t_1 = 'paste';
    this.a1u_1 = 'contextmenu';
    this.b1u_1 = 'click';
    this.c1u_1 = 'dblclick';
    this.d1u_1 = 'focus';
    this.e1u_1 = 'blur';
    this.f1u_1 = 'focusin';
    this.g1u_1 = 'focusout';
    this.h1u_1 = 'keydown';
    this.i1u_1 = 'keyup';
    this.j1u_1 = 'mousedown';
    this.k1u_1 = 'mouseup';
    this.l1u_1 = 'mouseenter';
    this.m1u_1 = 'mouseleave';
    this.n1u_1 = 'mousemove';
    this.o1u_1 = 'mouseout';
    this.p1u_1 = 'mouseover';
    this.q1u_1 = 'wheel';
    this.r1u_1 = 'scroll';
    this.s1u_1 = 'select';
    this.t1u_1 = 'touchcancel';
    this.u1u_1 = 'touchend';
    this.v1u_1 = 'touchmove';
    this.w1u_1 = 'touchstart';
    this.x1u_1 = 'animationcancel';
    this.y1u_1 = 'animationend';
    this.z1u_1 = 'animationiteration';
    this.a1v_1 = 'animationstart';
    this.b1v_1 = 'beforeinput';
    this.c1v_1 = 'input';
    this.d1v_1 = 'change';
    this.e1v_1 = 'invalid';
    this.f1v_1 = 'drag';
    this.g1v_1 = 'drop';
    this.h1v_1 = 'dragstart';
    this.i1v_1 = 'dragend';
    this.j1v_1 = 'dragover';
    this.k1v_1 = 'dragenter';
    this.l1v_1 = 'dragleave';
    this.m1v_1 = 'submit';
    this.n1v_1 = 'reset';
  }
  Companion_18.$metadata$ = objectMeta('Companion');
  var Companion_instance_18;
  function Companion_getInstance_18() {
    if (Companion_instance_18 == null)
      new Companion_18();
    return Companion_instance_18;
  }
  function EventsListenerScope() {
  }
  EventsListenerScope.$metadata$ = interfaceMeta('EventsListenerScope');
  function EventsListenerScopeBuilder() {
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$0 = ArrayList_init_$Create$();
    tmp.q1t_1 = tmp$ret$0;
    this.r1t_1 = 8;
  }
  EventsListenerScopeBuilder.prototype.f1t = function (listener) {
    this.q1t_1.b(listener);
  };
  EventsListenerScopeBuilder.prototype.o1v = function () {
    return this.q1t_1;
  };
  EventsListenerScopeBuilder.$metadata$ = classMeta('EventsListenerScopeBuilder', [EventsListenerScope]);
  function SyntheticEventListener(event, listener) {
    this.p1v_1 = event;
    this.q1v_1 = listener;
    this.r1v_1 = this.p1v_1;
    this.s1v_1 = 0;
  }
  SyntheticEventListener.prototype.oc = function () {
    return this.r1v_1;
  };
  SyntheticEventListener.prototype.t1v = function (event) {
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast = new SyntheticEvent(event);
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = tmp0_unsafeCast;
    tmp$ret$1 = tmp$ret$0;
    this.q1v_1(tmp$ret$1);
  };
  SyntheticEventListener.prototype.handleEvent = function (event) {
    return this.t1v(event);
  };
  SyntheticEventListener.$metadata$ = classMeta('SyntheticEventListener', [NamedEventListener]);
  function MouseEventListener(event, listener) {
    SyntheticEventListener.call(this, event, listener);
  }
  MouseEventListener.prototype.t1v = function (event) {
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = event;
    tmp$ret$1 = tmp$ret$0;
    this.q1v_1(new SyntheticMouseEvent(tmp$ret$1));
  };
  MouseEventListener.prototype.handleEvent = function (event) {
    return this.t1v(event);
  };
  MouseEventListener.$metadata$ = classMeta('MouseEventListener', undefined, undefined, undefined, undefined, SyntheticEventListener.prototype);
  function KeyboardEventListener(event, listener) {
    SyntheticEventListener.call(this, event, listener);
  }
  KeyboardEventListener.prototype.t1v = function (event) {
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = event;
    tmp$ret$1 = tmp$ret$0;
    this.q1v_1(new SyntheticKeyboardEvent(tmp$ret$1));
  };
  KeyboardEventListener.prototype.handleEvent = function (event) {
    return this.t1v(event);
  };
  KeyboardEventListener.$metadata$ = classMeta('KeyboardEventListener', undefined, undefined, undefined, undefined, SyntheticEventListener.prototype);
  function get_controlledInputsValuesWeakMap() {
    init_properties_InternalControlledInputUtils_kt_yo4x4o();
    return controlledInputsValuesWeakMap;
  }
  var controlledInputsValuesWeakMap;
  function get_controlledRadioGroups() {
    init_properties_InternalControlledInputUtils_kt_yo4x4o();
    return controlledRadioGroups;
  }
  var controlledRadioGroups;
  function saveControlledInputState(element, value) {
    init_properties_InternalControlledInputUtils_kt_yo4x4o();
    get_controlledInputsValuesWeakMap().set(element, value);
    if (element instanceof HTMLInputElement) {
      updateRadioGroupIfNeeded(element);
    }
  }
  function updateRadioGroupIfNeeded(element) {
    init_properties_InternalControlledInputUtils_kt_yo4x4o();
    var tmp;
    if (element.type === 'radio') {
      var tmp$ret$0;
      // Inline function 'kotlin.text.isNotEmpty' call
      var tmp0_isNotEmpty = element.name;
      tmp$ret$0 = charSequenceLength(tmp0_isNotEmpty) > 0;
      tmp = tmp$ret$0;
    } else {
      tmp = false;
    }
    if (tmp) {
      if (!get_controlledRadioGroups().h2(element.name)) {
        // Inline function 'kotlin.collections.set' call
        var tmp1_set = get_controlledRadioGroups();
        var tmp2_set = element.name;
        var tmp$ret$1;
        // Inline function 'kotlin.collections.mutableSetOf' call
        tmp$ret$1 = LinkedHashSet_init_$Create$();
        var tmp3_set = tmp$ret$1;
        tmp1_set.a(tmp2_set, tmp3_set);
      }
      ensureNotNull(get_controlledRadioGroups().l2(element.name)).b(element);
    }
  }
  var properties_initialized_InternalControlledInputUtils_kt_dwq2r0;
  function init_properties_InternalControlledInputUtils_kt_yo4x4o() {
    if (properties_initialized_InternalControlledInputUtils_kt_dwq2r0) {
    } else {
      properties_initialized_InternalControlledInputUtils_kt_dwq2r0 = true;
      var tmp$ret$0;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp0_unsafeCast = new WeakMap();
      tmp$ret$0 = tmp0_unsafeCast;
      controlledInputsValuesWeakMap = tmp$ret$0;
      var tmp$ret$0_0;
      // Inline function 'kotlin.collections.mutableMapOf' call
      tmp$ret$0_0 = LinkedHashMap_init_$Create$();
      controlledRadioGroups = tmp$ret$0_0;
    }
  }
  function appendRule(_this__u8e3s4, cssRule) {
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    tmp$ret$0.appendRule(cssRule);
  }
  function Companion_19() {
    Companion_instance_19 = this;
  }
  Companion_19.prototype.c1w = function () {
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.LineStyle' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'solid';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  };
  Companion_19.$metadata$ = objectMeta('Companion');
  var Companion_instance_19;
  function Companion_getInstance_19() {
    if (Companion_instance_19 == null)
      new Companion_19();
    return Companion_instance_19;
  }
  function Companion_20() {
    Companion_instance_20 = this;
  }
  Companion_20.prototype.d1w = function () {
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.DisplayStyle' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'flex';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  };
  Companion_20.prototype.e1w = function () {
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.DisplayStyle' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'grid';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  };
  Companion_20.prototype.f1w = function () {
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.DisplayStyle' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'none';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  };
  Companion_20.$metadata$ = objectMeta('Companion');
  var Companion_instance_20;
  function Companion_getInstance_20() {
    if (Companion_instance_20 == null)
      new Companion_20();
    return Companion_instance_20;
  }
  function Companion_21() {
    Companion_instance_21 = this;
  }
  Companion_21.prototype.g1w = function () {
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignSelf' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'center';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  };
  Companion_21.prototype.h1w = function () {
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignSelf' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'start';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  };
  Companion_21.prototype.i1w = function () {
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignSelf' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'end';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  };
  Companion_21.prototype.j1w = function () {
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignSelf' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'flex-start';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  };
  Companion_21.prototype.k1w = function () {
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignSelf' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'flex-end';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  };
  Companion_21.$metadata$ = objectMeta('Companion');
  var Companion_instance_21;
  function Companion_getInstance_21() {
    if (Companion_instance_21 == null)
      new Companion_21();
    return Companion_instance_21;
  }
  function LineStyle(value) {
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = value;
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  }
  function DisplayStyle(value) {
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = value;
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  }
  function AlignSelf(value) {
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = value;
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  }
  function get_value(_this__u8e3s4) {
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  }
  function Companion_22() {
    Companion_instance_22 = this;
  }
  Companion_22.prototype.g1w = function () {
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignItems' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'center';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  };
  Companion_22.prototype.h1w = function () {
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignItems' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'start';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  };
  Companion_22.prototype.i1w = function () {
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignItems' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'end';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  };
  Companion_22.prototype.j1w = function () {
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignItems' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'flex-start';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  };
  Companion_22.prototype.k1w = function () {
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignItems' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'flex-end';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  };
  Companion_22.$metadata$ = objectMeta('Companion');
  var Companion_instance_22;
  function Companion_getInstance_22() {
    if (Companion_instance_22 == null)
      new Companion_22();
    return Companion_instance_22;
  }
  function Companion_23() {
    Companion_instance_23 = this;
  }
  Companion_23.prototype.l1w = function () {
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.FlexDirection' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'row';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  };
  Companion_23.prototype.m1w = function () {
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.FlexDirection' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'column';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  };
  Companion_23.$metadata$ = objectMeta('Companion');
  var Companion_instance_23;
  function Companion_getInstance_23() {
    if (Companion_instance_23 == null)
      new Companion_23();
    return Companion_instance_23;
  }
  function Companion_24() {
    Companion_instance_24 = this;
  }
  Companion_24.prototype.g1w = function () {
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.JustifyContent' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'center';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  };
  Companion_24.prototype.j1w = function () {
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.JustifyContent' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'flex-start';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  };
  Companion_24.prototype.k1w = function () {
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.JustifyContent' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'flex-end';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  };
  Companion_24.prototype.n1w = function () {
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.JustifyContent' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'space-between';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  };
  Companion_24.prototype.o1w = function () {
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.JustifyContent' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'space-around';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  };
  Companion_24.prototype.p1w = function () {
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.JustifyContent' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'space-evenly';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  };
  Companion_24.$metadata$ = objectMeta('Companion');
  var Companion_instance_24;
  function Companion_getInstance_24() {
    if (Companion_instance_24 == null)
      new Companion_24();
    return Companion_instance_24;
  }
  function AlignItems(value) {
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = value;
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  }
  function FlexDirection(value) {
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = value;
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  }
  function JustifyContent(value) {
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = value;
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  }
  function CSSNamedKeyframes() {
  }
  CSSNamedKeyframes.$metadata$ = interfaceMeta('CSSNamedKeyframes');
  function CSSKeyframesRuleDeclaration() {
  }
  CSSKeyframesRuleDeclaration.$metadata$ = classMeta('CSSKeyframesRuleDeclaration', [CSSRuleDeclaration, CSSNamedKeyframes]);
  function Invertible() {
  }
  Invertible.$metadata$ = interfaceMeta('Invertible', [CSSMediaQuery]);
  function Combinable() {
  }
  Combinable.$metadata$ = interfaceMeta('Combinable', [CSSMediaQuery]);
  function Atomic() {
  }
  Atomic.$metadata$ = interfaceMeta('Atomic', [Invertible, Combinable]);
  function Raw(string) {
    this.q1w_1 = string;
    this.r1w_1 = 0;
  }
  Raw.prototype.toString = function () {
    return this.q1w_1;
  };
  Raw.prototype.hashCode = function () {
    return getStringHashCode(this.q1w_1);
  };
  Raw.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Raw))
      return false;
    var tmp0_other_with_cast = other instanceof Raw ? other : THROW_CCE();
    if (!(this.q1w_1 === tmp0_other_with_cast.q1w_1))
      return false;
    return true;
  };
  Raw.$metadata$ = classMeta('Raw', [Atomic]);
  function MediaFeature(name, value) {
    this.s1w_1 = name;
    this.t1w_1 = value;
    this.u1w_1 = 8;
  }
  MediaFeature.prototype.a2 = function () {
    return this.t1w_1;
  };
  MediaFeature.prototype.equals = function (other) {
    var tmp;
    if (other instanceof MediaFeature) {
      tmp = this.s1w_1 === other.s1w_1 ? toString_1(this.t1w_1) === toString_1(other.t1w_1) : false;
    } else {
      tmp = false;
    }
    return tmp;
  };
  MediaFeature.prototype.toString = function () {
    var tmp0_safe_receiver = this.t1w_1;
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'org.jetbrains.compose.web.css.MediaFeature.toString.<anonymous>' call
      tmp$ret$0 = ': ' + this.t1w_1 + ')';
      tmp$ret$1 = tmp$ret$0;
      tmp = tmp$ret$1;
    }
    var tmp1_elvis_lhs = tmp;
    return '(' + this.s1w_1 + (tmp1_elvis_lhs == null ? '' : tmp1_elvis_lhs);
  };
  MediaFeature.$metadata$ = classMeta('MediaFeature', [CSSMediaQuery, Atomic]);
  function CSSMediaQuery() {
  }
  CSSMediaQuery.$metadata$ = interfaceMeta('CSSMediaQuery');
  function media(_this__u8e3s4, query, rulesBuild) {
    media_0(_this__u8e3s4, new Raw(query), rulesBuild);
  }
  function media_0(_this__u8e3s4, query, rulesBuild) {
    var rules = _this__u8e3s4.v1w(rulesBuild);
    _this__u8e3s4.w1w(new CSSMediaRuleDeclaration(query, rules));
  }
  function CSSMediaRuleDeclaration(query, rules) {
    this.x1w_1 = query;
    this.y1w_1 = rules;
    this.z1w_1 = 0;
  }
  CSSMediaRuleDeclaration.prototype.a1x = function () {
    return this.y1w_1;
  };
  CSSMediaRuleDeclaration.prototype.b1x = function () {
    return '@media ' + this.x1w_1;
  };
  CSSMediaRuleDeclaration.prototype.equals = function (other) {
    var tmp;
    if (other instanceof CSSMediaRuleDeclaration) {
      tmp = equals_0(this.y1w_1, other.y1w_1) ? equals_0(this.x1w_1, other.x1w_1) : false;
    } else {
      tmp = false;
    }
    return tmp;
  };
  CSSMediaRuleDeclaration.$metadata$ = classMeta('CSSMediaRuleDeclaration', [CSSGroupingRuleDeclaration]);
  function CSSStyleRuleBuilder() {
  }
  CSSStyleRuleBuilder.$metadata$ = interfaceMeta('CSSStyleRuleBuilder', [StyleScope]);
  function CSSRuleDeclaration() {
  }
  CSSRuleDeclaration.$metadata$ = interfaceMeta('CSSRuleDeclaration');
  function CSSGroupingRuleDeclaration() {
  }
  CSSGroupingRuleDeclaration.$metadata$ = interfaceMeta('CSSGroupingRuleDeclaration', [CSSRuleDeclaration]);
  function CSSStyleRuleDeclaration(selector, style) {
    this.c1x_1 = selector;
    this.d1x_1 = style;
    this.e1x_1 = 8;
  }
  CSSStyleRuleDeclaration.prototype.f1x = function () {
    return this.d1x_1;
  };
  CSSStyleRuleDeclaration.prototype.b1x = function () {
    return this.c1x_1.h1x();
  };
  CSSStyleRuleDeclaration.prototype.toString = function () {
    return 'CSSStyleRuleDeclaration(selector=' + this.c1x_1 + ', style=' + this.d1x_1 + ')';
  };
  CSSStyleRuleDeclaration.prototype.hashCode = function () {
    var result = hashCode_0(this.c1x_1);
    result = imul(result, 31) + hashCode_0(this.d1x_1) | 0;
    return result;
  };
  CSSStyleRuleDeclaration.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof CSSStyleRuleDeclaration))
      return false;
    var tmp0_other_with_cast = other instanceof CSSStyleRuleDeclaration ? other : THROW_CCE();
    if (!equals_0(this.c1x_1, tmp0_other_with_cast.c1x_1))
      return false;
    if (!equals_0(this.d1x_1, tmp0_other_with_cast.d1x_1))
      return false;
    return true;
  };
  CSSStyleRuleDeclaration.$metadata$ = classMeta('CSSStyleRuleDeclaration', [CSSRuleDeclaration, CSSStyledRuleDeclaration]);
  function CSSStyledRuleDeclaration() {
  }
  CSSStyledRuleDeclaration.$metadata$ = interfaceMeta('CSSStyledRuleDeclaration');
  function buildCSSStyleRule(cssRule) {
    var builder = new CSSRuleBuilderImpl();
    cssRule(builder);
    return builder;
  }
  function CSSRuleBuilderImpl() {
    StyleScopeBuilder.call(this);
    this.l1x_1 = 0;
  }
  CSSRuleBuilderImpl.$metadata$ = classMeta('CSSRuleBuilderImpl', [CSSStyleRuleBuilder], undefined, undefined, undefined, StyleScopeBuilder.prototype);
  function Companion_25() {
    Companion_instance_25 = this;
  }
  Companion_25.prototype.w1x = function () {
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = '%';
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  };
  Companion_25.prototype.x1x = function () {
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'rem';
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  };
  Companion_25.prototype.y1x = function () {
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'vw';
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  };
  Companion_25.prototype.z1x = function () {
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'vh';
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  };
  Companion_25.prototype.a1y = function () {
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'px';
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  };
  Companion_25.prototype.b1y = function () {
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'ms';
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  };
  Companion_25.$metadata$ = objectMeta('Companion');
  var Companion_instance_25;
  function Companion_getInstance_25() {
    if (Companion_instance_25 == null)
      new Companion_25();
    return Companion_instance_25;
  }
  function get_px(_this__u8e3s4) {
    var tmp = numberToDouble(_this__u8e3s4);
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.Companion.px' call
    var tmp0__get_px__p4dvcn = Companion_getInstance_25();
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'px';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    return new CSSUnitValueTyped(tmp, tmp$ret$2);
  }
  function get_percent(_this__u8e3s4) {
    var tmp = numberToDouble(_this__u8e3s4);
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.Companion.percent' call
    var tmp0__get_percent__ps7yqu = Companion_getInstance_25();
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = '%';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    return new CSSUnitValueTyped(tmp, tmp$ret$2);
  }
  function get_ms(_this__u8e3s4) {
    var tmp = numberToDouble(_this__u8e3s4);
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.Companion.ms' call
    var tmp0__get_ms__p4dxp1 = Companion_getInstance_25();
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'ms';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    return new CSSUnitValueTyped(tmp, tmp$ret$2);
  }
  function get_cssRem(_this__u8e3s4) {
    var tmp = numberToDouble(_this__u8e3s4);
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.Companion.rem' call
    var tmp0__get_rem__2kbiwh = Companion_getInstance_25();
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'rem';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    return new CSSUnitValueTyped(tmp, tmp$ret$2);
  }
  function get_vh(_this__u8e3s4) {
    var tmp = numberToDouble(_this__u8e3s4);
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.Companion.vh' call
    var tmp0__get_vh__p4dra9 = Companion_getInstance_25();
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'vh';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    return new CSSUnitValueTyped(tmp, tmp$ret$2);
  }
  function get_vw(_this__u8e3s4) {
    var tmp = numberToDouble(_this__u8e3s4);
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.Companion.vw' call
    var tmp0__get_vw__p4dqxc = Companion_getInstance_25();
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'vw';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    return new CSSUnitValueTyped(tmp, tmp$ret$2);
  }
  function CSSUnitValueTyped(value, unit) {
    this.c1y_1 = value;
    this.d1y_1 = unit;
    this.e1y_1 = 0;
  }
  CSSUnitValueTyped.prototype.a2 = function () {
    return this.c1y_1;
  };
  CSSUnitValueTyped.prototype.f1y = function () {
    return this.d1y_1;
  };
  CSSUnitValueTyped.prototype.toString = function () {
    return '' + this.c1y_1 + this.d1y_1;
  };
  CSSUnitValueTyped.prototype.hashCode = function () {
    var result = getNumberHashCode(this.c1y_1);
    result = imul(result, 31) + hashCode_0(this.d1y_1) | 0;
    return result;
  };
  CSSUnitValueTyped.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof CSSUnitValueTyped))
      return false;
    var tmp0_other_with_cast = other instanceof CSSUnitValueTyped ? other : THROW_CCE();
    if (!equals_0(this.c1y_1, tmp0_other_with_cast.c1y_1))
      return false;
    if (!equals_0(this.d1y_1, tmp0_other_with_cast.d1y_1))
      return false;
    return true;
  };
  CSSUnitValueTyped.$metadata$ = classMeta('CSSUnitValueTyped');
  Object.defineProperty(CSSUnitValueTyped.prototype, 'value', {
    configurable: true,
    get: function () {
      return this.a2();
    }
  });
  Object.defineProperty(CSSUnitValueTyped.prototype, 'unit', {
    configurable: true,
    get: function () {
      return this.f1y();
    }
  });
  function Color() {
    Color_instance = this;
    this.g1y_1 = 0;
  }
  Color.prototype.h1y = function () {
    return Color_0('transparent');
  };
  Color.$metadata$ = objectMeta('Color');
  var Color_instance;
  function Color_getInstance() {
    if (Color_instance == null)
      new Color();
    return Color_instance;
  }
  function Color_0(name) {
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = name;
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  }
  function StylePropertyValue(value) {
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = value;
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  }
  function StylePropertyValue_0(value) {
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = value;
    tmp$ret$1 = tmp$ret$0;
    return tmp$ret$1;
  }
  function StyleScope() {
  }
  StyleScope.$metadata$ = interfaceMeta('StyleScope');
  function StyleHolder() {
  }
  StyleHolder.$metadata$ = interfaceMeta('StyleHolder');
  function StylePropertyDeclaration(name, value) {
    this.i1y_1 = name;
    this.j1y_1 = value;
    this.k1y_1 = 8;
  }
  StylePropertyDeclaration.prototype.oc = function () {
    return this.i1y_1;
  };
  StylePropertyDeclaration.prototype.a2 = function () {
    return this.j1y_1;
  };
  StylePropertyDeclaration.prototype.a3 = function () {
    return this.i1y_1;
  };
  StylePropertyDeclaration.prototype.b3 = function () {
    return this.j1y_1;
  };
  StylePropertyDeclaration.prototype.toString = function () {
    return 'StylePropertyDeclaration(name=' + this.i1y_1 + ', value=' + this.j1y_1 + ')';
  };
  StylePropertyDeclaration.prototype.hashCode = function () {
    var result = getStringHashCode(this.i1y_1);
    result = imul(result, 31) + hashCode_0(this.j1y_1) | 0;
    return result;
  };
  StylePropertyDeclaration.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof StylePropertyDeclaration))
      return false;
    var tmp0_other_with_cast = other instanceof StylePropertyDeclaration ? other : THROW_CCE();
    if (!(this.i1y_1 === tmp0_other_with_cast.i1y_1))
      return false;
    if (!equals_0(this.j1y_1, tmp0_other_with_cast.j1y_1))
      return false;
    return true;
  };
  StylePropertyDeclaration.$metadata$ = classMeta('StylePropertyDeclaration');
  function StyleScopeBuilder() {
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$0 = ArrayList_init_$Create$();
    tmp.m1x_1 = tmp$ret$0;
    var tmp_0 = this;
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$1 = ArrayList_init_$Create$();
    tmp_0.n1x_1 = tmp$ret$1;
    this.o1x_1 = 0;
  }
  StyleScopeBuilder.prototype.u1x = function () {
    return this.m1x_1;
  };
  StyleScopeBuilder.prototype.v1x = function () {
    return this.n1x_1;
  };
  StyleScopeBuilder.prototype.p1x = function (propertyName, value) {
    this.u1x().b(new StylePropertyDeclaration(propertyName, value));
  };
  StyleScopeBuilder.prototype.s1x = function (variableName, value) {
    this.v1x().b(new StylePropertyDeclaration(variableName, value));
  };
  StyleScopeBuilder.prototype.equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, StyleHolder) : false) {
      tmp = nativeEquals(this.u1x(), other.u1x()) ? nativeEquals(this.v1x(), other.v1x()) : false;
    } else {
      tmp = false;
    }
    return tmp;
  };
  StyleScopeBuilder.$metadata$ = classMeta('StyleScopeBuilder', [StyleScope, StyleHolder]);
  function nativeEquals(_this__u8e3s4, properties) {
    if (!(_this__u8e3s4.g() === properties.g()))
      return false;
    var index = 0;
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.all' call
      var tmp;
      if (isInterface(_this__u8e3s4, Collection)) {
        tmp = _this__u8e3s4.i();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = true;
        break $l$block_0;
      }
      var tmp0_iterator = _this__u8e3s4.d();
      while (tmp0_iterator.e()) {
        var element = tmp0_iterator.f();
        var tmp$ret$1;
        // Inline function 'org.jetbrains.compose.web.css.nativeEquals.<anonymous>' call
        var tmp0 = index;
        index = tmp0 + 1 | 0;
        var otherProp = properties.h(tmp0);
        tmp$ret$1 = element.i1y_1 === otherProp.i1y_1 ? toString_2(element.j1y_1) === toString_2(otherProp.j1y_1) : false;
        if (!tmp$ret$1) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
      }
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  }
  function StyleSheet_init_$Init$(rulesHolder, usePrefix, $mask0, $marker, $this) {
    if (!(($mask0 & 1) === 0))
      rulesHolder = new CSSRulesHolderState();
    if (!(($mask0 & 2) === 0))
      usePrefix = true;
    StyleSheet.call($this, rulesHolder, usePrefix);
    return $this;
  }
  function StyleSheet_init_$Create$(rulesHolder, usePrefix, $mask0, $marker) {
    return StyleSheet_init_$Init$(rulesHolder, usePrefix, $mask0, $marker, Object.create(StyleSheet.prototype));
  }
  function Companion_26() {
    Companion_instance_26 = this;
    this.l1y_1 = 0;
  }
  Companion_26.$metadata$ = objectMeta('Companion');
  var Companion_instance_26;
  function Companion_getInstance_26() {
    if (Companion_instance_26 == null)
      new Companion_26();
    return Companion_instance_26;
  }
  function StyleSheet(rulesHolder, usePrefix) {
    Companion_getInstance_26();
    this.m1y_1 = rulesHolder;
    this.n1y_1 = usePrefix;
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableMapOf' call
    tmp$ret$0 = LinkedHashMap_init_$Create$();
    tmp.o1y_1 = tmp$ret$0;
    this.p1y_1 = 0;
  }
  StyleSheet.prototype.q1y = function () {
    return this.m1y_1.q1y();
  };
  StyleSheet.prototype.w1w = function (cssRule) {
    this.m1y_1.w1w(cssRule);
  };
  StyleSheet.prototype.r1y = function (selector, style) {
    this.m1y_1.r1y(selector, style);
  };
  StyleSheet.prototype.s1y = function (rulesBuild) {
    var tmp$ret$0;
    // Inline function 'kotlin.apply' call
    var tmp0_apply = StyleSheet_init_$Create$(null, false, 3, null);
    // Inline function 'kotlin.contracts.contract' call
    rulesBuild(tmp0_apply);
    tmp$ret$0 = tmp0_apply;
    return tmp$ret$0.q1y();
  };
  StyleSheet.prototype.v1w = function (rulesBuild) {
    return this.s1y(rulesBuild);
  };
  StyleSheet.prototype.u1y = function (selector, cssRule) {
    return this.t1y(selector, cssRule);
  };
  StyleSheet.$metadata$ = classMeta('StyleSheet', [StyleSheetBuilder, CSSRulesHolder]);
  function CSSRulesHolderState() {
    this.x1y_1 = mutableStateListOf();
    this.y1y_1 = 0;
  }
  CSSRulesHolderState.prototype.q1y = function () {
    return this.x1y_1;
  };
  CSSRulesHolderState.prototype.w1w = function (cssRule) {
    this.x1y_1.p15(cssRule);
  };
  CSSRulesHolderState.$metadata$ = classMeta('CSSRulesHolderState', [CSSRulesHolder]);
  function Style$composable(styleSheet, $composer, $changed) {
    var $composer_0 = $composer;
    $composer_0.ks(-168645675);
    sourceInformation($composer_0, 'C(Style$composable)');
    Style$composable_0(null, styleSheet.q1y(), $composer_0, 0, 1);
    $composer_0.os();
  }
  function get_Universal() {
    init_properties_StyleSheetBuilder_kt_hdubw9();
    return Universal;
  }
  var Universal;
  function RawSelector(selector) {
    CSSSelector.call(this);
    this.a1z_1 = selector;
  }
  RawSelector.prototype.toString = function () {
    return this.a1z_1;
  };
  RawSelector.prototype.hashCode = function () {
    return getStringHashCode(this.a1z_1);
  };
  RawSelector.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof RawSelector))
      return false;
    var tmp0_other_with_cast = other instanceof RawSelector ? other : THROW_CCE();
    if (!(this.a1z_1 === tmp0_other_with_cast.a1z_1))
      return false;
    return true;
  };
  RawSelector.$metadata$ = classMeta('RawSelector', undefined, undefined, undefined, undefined, CSSSelector.prototype);
  function SelectorsScope() {
  }
  SelectorsScope.$metadata$ = interfaceMeta('SelectorsScope');
  function PseudoClassInternal(name) {
    CSSSelector.call(this);
    this.c1z_1 = name;
  }
  PseudoClassInternal.prototype.equals = function (other) {
    var tmp;
    if (other instanceof PseudoClassInternal) {
      tmp = this.c1z_1 === other.c1z_1 ? this.d1z() == other.d1z() : false;
    } else {
      tmp = false;
    }
    return tmp;
  };
  PseudoClassInternal.prototype.d1z = function () {
    return null;
  };
  PseudoClassInternal.prototype.toString = function () {
    var tmp0_safe_receiver = this.d1z();
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'org.jetbrains.compose.web.css.PseudoClassInternal.toString.<anonymous>' call
      tmp$ret$0 = '(' + tmp0_safe_receiver + ')';
      tmp$ret$1 = tmp$ret$0;
      tmp = tmp$ret$1;
    }
    var tmp1_elvis_lhs = tmp;
    return ':' + this.c1z_1 + (tmp1_elvis_lhs == null ? '' : tmp1_elvis_lhs);
  };
  PseudoClassInternal.$metadata$ = classMeta('PseudoClassInternal', undefined, undefined, undefined, undefined, CSSSelector.prototype);
  function GenericStyleSheetBuilder() {
  }
  GenericStyleSheetBuilder.$metadata$ = interfaceMeta('GenericStyleSheetBuilder', [CSSRulesHolder, SelectorsScope]);
  function CSSRulesHolder() {
  }
  CSSRulesHolder.$metadata$ = interfaceMeta('CSSRulesHolder');
  function StyleSheetBuilder() {
  }
  StyleSheetBuilder.$metadata$ = interfaceMeta('StyleSheetBuilder', [CSSRulesHolder, GenericStyleSheetBuilder]);
  var properties_initialized_StyleSheetBuilder_kt_uqx9b1;
  function init_properties_StyleSheetBuilder_kt_hdubw9() {
    if (properties_initialized_StyleSheetBuilder_kt_uqx9b1) {
    } else {
      properties_initialized_StyleSheetBuilder_kt_uqx9b1 = true;
      Universal = new RawSelector('*');
    }
  }
  function backgroundColor(_this__u8e3s4, value) {
    _this__u8e3s4.p1x('background-color', value);
  }
  function backgroundSize(_this__u8e3s4, value) {
    _this__u8e3s4.q1x('background-size', value);
  }
  function backgroundRepeat(_this__u8e3s4, value) {
    _this__u8e3s4.q1x('background-repeat', value);
  }
  function backgroundImage(_this__u8e3s4, value) {
    _this__u8e3s4.q1x('background-image', value);
  }
  function borderWidth(_this__u8e3s4, width) {
    _this__u8e3s4.p1x('border-width', width);
  }
  function borderRadius(_this__u8e3s4, r) {
    _this__u8e3s4.p1x('border-radius', r);
  }
  function CSSBorder() {
    this.f1z_1 = null;
    this.g1z_1 = null;
    this.h1z_1 = null;
    this.i1z_1 = 8;
  }
  CSSBorder.prototype.equals = function (other) {
    var tmp;
    if (other instanceof CSSBorder) {
      tmp = (equals_0(this.f1z_1, other.f1z_1) ? equals_0(this.g1z_1, other.g1z_1) : false) ? equals_0(this.h1z_1, other.h1z_1) : false;
    } else {
      tmp = false;
    }
    return tmp;
  };
  CSSBorder.prototype.toString = function () {
    var values = listOfNotNull([this.f1z_1, this.g1z_1, this.h1z_1]);
    return joinToString$default_0(values, ' ', null, null, 0, null, null, 62, null);
  };
  CSSBorder.$metadata$ = classMeta('CSSBorder');
  function width(_this__u8e3s4, size) {
    _this__u8e3s4.f1z_1 = size;
  }
  function style_1(_this__u8e3s4, style) {
    _this__u8e3s4.g1z_1 = style;
  }
  function color(_this__u8e3s4, color) {
    _this__u8e3s4.h1z_1 = color;
  }
  function width_0(_this__u8e3s4, value) {
    _this__u8e3s4.p1x('width', value);
  }
  function height(_this__u8e3s4, value) {
    _this__u8e3s4.p1x('height', value);
  }
  function boxSizing(_this__u8e3s4, value) {
    _this__u8e3s4.q1x('box-sizing', value);
  }
  function color_0(_this__u8e3s4, value) {
    _this__u8e3s4.p1x('color', value);
  }
  function alignSelf(_this__u8e3s4, alignSelf) {
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.value' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = alignSelf;
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    _this__u8e3s4.q1x('align-self', tmp$ret$2);
  }
  function alignItems(_this__u8e3s4, alignItems) {
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.value' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = alignItems;
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    _this__u8e3s4.q1x('align-items', tmp$ret$2);
  }
  function flexDirection(_this__u8e3s4, flexDirection) {
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.value' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = flexDirection;
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    _this__u8e3s4.q1x('flex-direction', tmp$ret$2);
  }
  function justifyContent(_this__u8e3s4, justifyContent) {
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.value' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = justifyContent;
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    _this__u8e3s4.q1x('justify-content', tmp$ret$2);
  }
  function flexGrow(_this__u8e3s4, value) {
    _this__u8e3s4.r1x('flex-grow', value);
  }
  function gridTemplateColumns(_this__u8e3s4, value) {
    _this__u8e3s4.q1x('grid-template-columns', value);
  }
  function gridTemplateRows(_this__u8e3s4, value) {
    _this__u8e3s4.q1x('grid-template-rows', value);
  }
  function gridArea(_this__u8e3s4, rowStart, columnStart) {
    _this__u8e3s4.q1x('grid-area', rowStart + ' / ' + columnStart);
  }
  function margin(_this__u8e3s4, value) {
    _this__u8e3s4.q1x('margin', joinToString$default(value, ' ', null, null, 0, null, null, 62, null));
  }
  function padding(_this__u8e3s4, value) {
    _this__u8e3s4.q1x('padding', joinToString$default(value, ' ', null, null, 0, null, null, 62, null));
  }
  function opacity(_this__u8e3s4, value) {
    _this__u8e3s4.r1x('opacity', value);
  }
  function display(_this__u8e3s4, displayStyle) {
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.value' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = displayStyle;
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    _this__u8e3s4.q1x('display', tmp$ret$2);
  }
  function lineHeight(_this__u8e3s4, value) {
    _this__u8e3s4.q1x('line-height', value);
  }
  function fontSize(_this__u8e3s4, value) {
    _this__u8e3s4.p1x('font-size', value);
  }
  function fontFamily(_this__u8e3s4, value) {
    _this__u8e3s4.q1x('font-family', joinToString$default(value, ', ', null, null, 0, null, fontFamily$lambda, 30, null));
  }
  function fontFamily$lambda(it) {
    var tmp;
    if (contains$default_0(it, ' ', false, 2, null)) {
      tmp = '"' + it + '"';
    } else {
      tmp = it;
    }
    return tmp;
  }
  function CSSSelector() {
    this.g1x_1 = 0;
  }
  CSSSelector.prototype.h1x = function () {
    return toString_2(this);
  };
  CSSSelector.$metadata$ = classMeta('CSSSelector');
  function TagElement$composable(elementBuilder, applyAttrs, content, $composer, $changed) {
    var $composer_0 = $composer;
    $composer_0 = $composer_0.z13(-1594897193);
    sourceInformation($composer_0, 'C(TagElement$composable)P(2)');
    var $dirty = $changed;
    if (($changed & 14) === 0)
      $dirty = $dirty | ($composer_0.ps(elementBuilder) ? 4 : 2);
    if (($changed & 112) === 0)
      $dirty = $dirty | ($composer_0.ps(applyAttrs) ? 32 : 16);
    if (($changed & 896) === 0)
      $dirty = $dirty | ($composer_0.ps(content) ? 256 : 128);
    if (!(($dirty & 731) === 146) ? true : !$composer_0.d12()) {
      if (isTraceInProgress()) {
        traceEventStart(-1594897193, $dirty, -1, 'org.jetbrains.compose.web.dom.TagElement$composable (Base.kt:106)');
      }
      var tmp$ret$4;
      // Inline function 'androidx.compose.runtime.remember$composable' call
      var tmp0_remember$composable = $composer_0;
      var $composer_1 = tmp0_remember$composable;
      $composer_1.ks(547886695);
      sourceInformation($composer_1, 'C(remember$composable):Composables.kt#9igjgp');
      var tmp$ret$3;
      // Inline function 'androidx.compose.runtime.cache' call
      var tmp1_cache = $composer_1;
      var tmp$ret$2;
      // Inline function 'kotlin.let' call
      var tmp0_let = tmp1_cache.ls();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
      var tmp;
      if (false ? true : tmp0_let === Companion_getInstance_8().ns_1) {
        var tmp$ret$0;
        // Inline function 'org.jetbrains.compose.web.dom.TagElement$composable.<anonymous>' call
        tmp$ret$0 = new ElementScopeImpl();
        var value = tmp$ret$0;
        tmp1_cache.ms(value);
        tmp = value;
      } else {
        tmp = tmp0_let;
      }
      tmp$ret$1 = tmp;
      tmp$ret$2 = tmp$ret$1;
      var tmp_0 = tmp$ret$2;
      tmp$ret$3 = (tmp_0 == null ? true : isObject(tmp_0)) ? tmp_0 : THROW_CCE();
      var tmp0 = tmp$ret$3;
      $composer_1.os();
      tmp$ret$4 = tmp0;
      var scope = tmp$ret$4;
      var refEffect = null;
      // Inline function 'org.jetbrains.compose.web.dom.ComposeDomNode$composable' call
      var tmp1_ComposeDomNode$composable = $composer_0;
      var $composer_2 = tmp1_ComposeDomNode$composable;
      $composer_2.ky();
      if ($composer_2.k13()) {
        var tmp_1 = $composer_2;
        tmp_1.m13(TagElement$composable$lambda_0(elementBuilder, scope));
      } else {
        $composer_2.o13();
      }
      // Inline function 'org.jetbrains.compose.web.dom.TagElement$composable.<anonymous>' call
      var tmp2__anonymous__z9zvc9 = _SkippableUpdater___init__impl__4ft0t9($composer_2);
      var tmp3__anonymous__ufb84q = $composer_2;
      var tmp4__anonymous__pkmkx7 = 0;
      var $composer_3 = tmp3__anonymous__ufb84q;
      var $dirty_0 = tmp4__anonymous__pkmkx7;
      if ((tmp4__anonymous__pkmkx7 & 14) === 0)
        $dirty_0 = $dirty_0 | ($composer_3.ps(_SkippableUpdater___get_composer__impl__6t7yne(tmp2__anonymous__z9zvc9)) ? 4 : 2);
      if (!(($dirty_0 & 91) === 18) ? true : !$composer_3.d12()) {
        var attrsScope = AttrsScopeBuilder_init_$Create$(null, 1, null);
        var tmp0_safe_receiver = applyAttrs;
        if (tmp0_safe_receiver == null)
          null;
        else
          tmp0_safe_receiver(attrsScope);
        refEffect = attrsScope.m1t_1;
        // Inline function 'androidx.compose.runtime.SkippableUpdater.update' call
        _SkippableUpdater___get_composer__impl__6t7yne(tmp2__anonymous__z9zvc9).ks(509942095);
        // Inline function 'org.jetbrains.compose.web.dom.TagElement$composable.<anonymous>.<anonymous>' call
        var tmp0__anonymous__q1qw7t = _Updater___init__impl__rbfxm8(_SkippableUpdater___get_composer__impl__6t7yne(tmp2__anonymous__z9zvc9));
        Updater__set_impl_v7kwss(tmp0__anonymous__q1qw7t, attrsScope.n1t_1, DomElementWrapper$updateClasses$ref());
        Updater__set_impl_v7kwss(tmp0__anonymous__q1qw7t, attrsScope.k1t_1, DomElementWrapper$updateStyleDeclarations$ref());
        var tmp_2 = attrsScope.w1t();
        Updater__set_impl_v7kwss(tmp0__anonymous__q1qw7t, tmp_2, DomElementWrapper$updateAttrs$ref());
        var tmp_3 = attrsScope.i1t_1.o1v();
        Updater__set_impl_v7kwss(tmp0__anonymous__q1qw7t, tmp_3, DomElementWrapper$updateEventListeners$ref());
        Updater__set_impl_v7kwss(tmp0__anonymous__q1qw7t, attrsScope.l1t_1, DomElementWrapper$updateProperties$ref());
        _SkippableUpdater___get_composer__impl__6t7yne(tmp2__anonymous__z9zvc9).os();
      } else {
        $composer_3.hy();
      }
      $composer_2.ks(2058660585);
      // Inline function 'org.jetbrains.compose.web.dom.TagElement$composable.<anonymous>' call
      var tmp5__anonymous__kpxxpo = $composer_2;
      var tmp6__anonymous__fv9ai5 = 8;
      var $composer_4 = tmp5__anonymous__kpxxpo;
      var $dirty_1 = tmp6__anonymous__fv9ai5;
      if ((tmp6__anonymous__fv9ai5 & 14) === 0)
        $dirty_1 = $dirty_1 | ($composer_4.ps(scope) ? 4 : 2);
      if (!(($dirty_1 & 91) === 18) ? true : !$composer_4.d12()) {
        var tmp0_safe_receiver_0 = content;
        $composer_0.ks(-1128047990);
        var tmp0_group = tmp0_safe_receiver_0 == null ? null : tmp0_safe_receiver_0(scope, $composer_4, 14 & $dirty_1 | 112 & $dirty >> 3);
        $composer_0.os();
      } else {
        $composer_4.hy();
      }
      $composer_2.os();
      $composer_2.p13();
      var tmp0_safe_receiver_1 = refEffect;
      var tmp_4;
      if (tmp0_safe_receiver_1 == null) {
        tmp_4 = null;
      } else {
        var tmp$ret$5;
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        DisposableEffect$composable(null, TagElement$composable$lambda_1(tmp0_safe_receiver_1, scope), $composer_0, 6);
        tmp$ret$5 = Unit_getInstance();
        tmp_4 = Unit_getInstance();
      }
      var tmp0_group_0 = tmp_4;
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    var tmp1_safe_receiver = $composer_0.a14();
    if (tmp1_safe_receiver === null)
      null;
    else {
      tmp1_safe_receiver.b15(TagElement$composable$lambda$ref(elementBuilder, applyAttrs, content, $changed));
    }
  }
  function ComposeDomNode$composable(factory, elementScope, attrsSkippableUpdate, content, $composer, $changed) {
    var $composer_0 = $composer;
    $composer_0.ky();
    if ($composer_0.k13()) {
      var tmp = $composer_0;
      tmp.m13(ComposeDomNode$composable$lambda(factory));
    } else {
      $composer_0.o13();
    }
    attrsSkippableUpdate(new SkippableUpdater(_SkippableUpdater___init__impl__4ft0t9($composer_0)), $composer_0, 112 & $changed >> 3);
    $composer_0.ks(2058660585);
    content(elementScope, $composer_0, 8 & $changed >> 3 | 14 & $changed >> 3 | 112 & $changed >> 6);
    $composer_0.os();
    $composer_0.p13();
  }
  function DomElementWrapper(node) {
    DomNodeWrapper.call(this, node);
    this.l1z_1 = node;
    this.m1z_1 = emptyList();
  }
  DomElementWrapper.prototype.s1k = function () {
    return this.l1z_1;
  };
  DomElementWrapper.prototype.n1z = function (list) {
    // Inline function 'kotlin.collections.forEach' call
    var tmp0_forEach = this.m1z_1;
    var tmp0_iterator = tmp0_forEach.d();
    while (tmp0_iterator.e()) {
      var element = tmp0_iterator.f();
      // Inline function 'org.jetbrains.compose.web.dom.DomElementWrapper.updateEventListeners.<anonymous>' call
      this.l1z_1.removeEventListener(element.oc(), element);
    }
    this.m1z_1 = list;
    // Inline function 'kotlin.collections.forEach' call
    var tmp1_forEach = this.m1z_1;
    var tmp0_iterator_0 = tmp1_forEach.d();
    while (tmp0_iterator_0.e()) {
      var element_0 = tmp0_iterator_0.f();
      // Inline function 'org.jetbrains.compose.web.dom.DomElementWrapper.updateEventListeners.<anonymous>' call
      this.l1z_1.addEventListener(element_0.oc(), element_0);
    }
  };
  DomElementWrapper.prototype.o1z = function (applicators) {
    // Inline function 'kotlin.collections.forEach' call
    var tmp0_iterator = applicators.d();
    while (tmp0_iterator.e()) {
      var element = tmp0_iterator.f();
      // Inline function 'org.jetbrains.compose.web.dom.DomElementWrapper.updateProperties.<anonymous>' call
      var applicator = element.a3();
      var item = element.b3();
      applicator(this.l1z_1, item);
    }
  };
  DomElementWrapper.prototype.p1z = function (styleApplier) {
    var tmp0_subject = this.l1z_1;
    var tmp;
    if (tmp0_subject instanceof HTMLElement) {
      tmp = true;
    } else {
      tmp = tmp0_subject instanceof SVGElement;
    }
    if (tmp) {
      this.l1z_1.removeAttribute('style');
      var tmp$ret$1;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp0_unsafeCast = this.l1z_1;
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = tmp0_unsafeCast;
      tmp$ret$1 = tmp$ret$0;
      var style = tmp$ret$1.style;
      // Inline function 'kotlin.collections.forEach' call
      var tmp1_forEach = styleApplier.u1x();
      var tmp0_iterator = tmp1_forEach.d();
      while (tmp0_iterator.e()) {
        var element = tmp0_iterator.f();
        // Inline function 'org.jetbrains.compose.web.dom.DomElementWrapper.updateStyleDeclarations.<anonymous>' call
        var name = element.a3();
        var value = element.b3();
        style.setProperty(name, toString_2(value));
      }
      // Inline function 'kotlin.collections.forEach' call
      var tmp2_forEach = styleApplier.v1x();
      var tmp0_iterator_0 = tmp2_forEach.d();
      while (tmp0_iterator_0.e()) {
        var element_0 = tmp0_iterator_0.f();
        // Inline function 'org.jetbrains.compose.web.dom.DomElementWrapper.updateStyleDeclarations.<anonymous>' call
        var name_0 = element_0.a3();
        var value_0 = element_0.b3();
        style.setProperty(name_0, toString_2(value_0));
      }
    }
  };
  DomElementWrapper.prototype.q1z = function (attrs) {
    // Inline function 'kotlin.collections.forEach' call
    var tmp0_forEach = this.l1z_1.getAttributeNames();
    var indexedObject = tmp0_forEach;
    var inductionVariable = 0;
    var last = indexedObject.length;
    while (inductionVariable < last) {
      var element = indexedObject[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      // Inline function 'org.jetbrains.compose.web.dom.DomElementWrapper.updateAttrs.<anonymous>' call
      var tmp0_subject = element;
      switch (tmp0_subject) {
        case 'style':
        case 'class':
          break;
        default:
          this.l1z_1.removeAttribute(element);
          ;
          break;
      }
    }
    // Inline function 'kotlin.collections.forEach' call
    var tmp$ret$0;
    // Inline function 'kotlin.collections.iterator' call
    tmp$ret$0 = attrs.t().d();
    var tmp0_iterator = tmp$ret$0;
    while (tmp0_iterator.e()) {
      var element_0 = tmp0_iterator.f();
      // Inline function 'org.jetbrains.compose.web.dom.DomElementWrapper.updateAttrs.<anonymous>' call
      this.l1z_1.setAttribute(element_0.y1(), element_0.a2());
    }
  };
  DomElementWrapper.prototype.r1z = function (classes) {
    this.l1z_1.removeAttribute('class');
    var tmp$ret$0;
    // Inline function 'kotlin.collections.isNotEmpty' call
    tmp$ret$0 = !classes.i();
    if (tmp$ret$0) {
      var tmp = this.l1z_1.classList;
      var tmp$ret$1;
      // Inline function 'kotlin.collections.toTypedArray' call
      tmp$ret$1 = copyToArray(classes);
      (function () {
        var $externalVarargReceiverTmp = tmp;
        return $externalVarargReceiverTmp.add.apply($externalVarargReceiverTmp, [].slice.call(tmp$ret$1.slice()));
      }.call(this));
    }
  };
  DomElementWrapper.$metadata$ = classMeta('DomElementWrapper', undefined, undefined, undefined, undefined, DomNodeWrapper.prototype);
  function TagElement$composable$lambda($elementBuilder, $applyAttrs, $content, $$changed, $composer, $force) {
    return TagElement$composable($elementBuilder, $applyAttrs, $content, $composer, $$changed | 1);
  }
  function TagElement$composable$lambda_0($elementBuilder, $scope) {
    return function () {
      var tmp$ret$0;
      // Inline function 'org.jetbrains.compose.web.dom.TagElement$composable.<anonymous>' call
      var node = $elementBuilder.s1e();
      $scope.v1z(node);
      tmp$ret$0 = new DomElementWrapper(node);
      return tmp$ret$0;
    };
  }
  function DomElementWrapper$updateClasses$ref() {
    var l = function (p0, p1) {
      p0.r1z(p1);
      return Unit_getInstance();
    };
    l.callableName = 'updateClasses';
    return l;
  }
  function DomElementWrapper$updateStyleDeclarations$ref() {
    var l = function (p0, p1) {
      p0.p1z(p1);
      return Unit_getInstance();
    };
    l.callableName = 'updateStyleDeclarations';
    return l;
  }
  function DomElementWrapper$updateAttrs$ref() {
    var l = function (p0, p1) {
      p0.q1z(p1);
      return Unit_getInstance();
    };
    l.callableName = 'updateAttrs';
    return l;
  }
  function DomElementWrapper$updateEventListeners$ref() {
    var l = function (p0, p1) {
      p0.n1z(p1);
      return Unit_getInstance();
    };
    l.callableName = 'updateEventListeners';
    return l;
  }
  function DomElementWrapper$updateProperties$ref() {
    var l = function (p0, p1) {
      p0.o1z(p1);
      return Unit_getInstance();
    };
    l.callableName = 'updateProperties';
    return l;
  }
  function TagElement$composable$lambda_1($tmp0_safe_receiver, $scope) {
    return function ($this$DisposableEffect) {
      return $tmp0_safe_receiver($this$DisposableEffect, $scope.w1z());
    };
  }
  function TagElement$composable$lambda$ref($elementBuilder, $applyAttrs, $content, $$changed) {
    return function (p0, p1) {
      TagElement$composable$lambda($elementBuilder, $applyAttrs, $content, $$changed, p0, p1);
      return Unit_getInstance();
    };
  }
  function ComposeDomNode$composable$lambda($factory) {
    return function () {
      return $factory();
    };
  }
  function ElementScope() {
  }
  ElementScope.$metadata$ = interfaceMeta('ElementScope', [DOMScope]);
  function ElementScopeImpl() {
    ElementScopeBase.call(this);
  }
  ElementScopeImpl.prototype.v1z = function (_set____db54di) {
    this.u1z_1 = _set____db54di;
  };
  ElementScopeImpl.prototype.w1z = function () {
    var tmp = this.u1z_1;
    if (!(tmp == null))
      return tmp;
    else {
      throwUninitializedPropertyAccessException('element');
    }
  };
  ElementScopeImpl.prototype.x1z = function (_this__u8e3s4) {
    return this.w1z();
  };
  ElementScopeImpl.$metadata$ = classMeta('ElementScopeImpl', undefined, undefined, undefined, undefined, ElementScopeBase.prototype);
  function ElementScopeBase() {
    this.y1z_1 = 0;
    this.z1z_1 = 8;
  }
  ElementScopeBase.$metadata$ = classMeta('ElementScopeBase', [ElementScope]);
  var Address;
  var Article;
  var Aside;
  var Header;
  var Area;
  var Audio;
  var Map_0;
  var Track;
  var Video;
  var Datalist;
  var Fieldset;
  var Legend;
  var Meter;
  var Output;
  var Progress;
  var Embed;
  var Iframe;
  var Object_0;
  var Param;
  var Picture;
  var Source;
  var Canvas;
  var DList;
  var DTerm;
  var DDescription;
  function get_Div() {
    init_properties_Elements_kt_bp8qwz();
    return Div;
  }
  var Div;
  function get_A() {
    init_properties_Elements_kt_bp8qwz();
    return A;
  }
  var A;
  var Input;
  function get_Button() {
    init_properties_Elements_kt_bp8qwz();
    return Button;
  }
  var Button;
  function get_H1() {
    init_properties_Elements_kt_bp8qwz();
    return H1;
  }
  var H1;
  function get_H2() {
    init_properties_Elements_kt_bp8qwz();
    return H2;
  }
  var H2;
  var H3;
  var H4;
  var H5;
  var H6;
  function get_P() {
    init_properties_Elements_kt_bp8qwz();
    return P;
  }
  var P;
  var Em;
  var I;
  var B;
  var Small;
  function get_Span() {
    init_properties_Elements_kt_bp8qwz();
    return Span;
  }
  var Span;
  var Br;
  var Ul;
  var Ol;
  var Li;
  var Img;
  var Form;
  var Select;
  var Option;
  var OptGroup;
  var Section;
  var TextArea;
  var Nav;
  var Pre;
  var Code;
  var Main;
  var Footer;
  var Hr;
  var Label;
  var Table;
  var Caption;
  var Col;
  var Colgroup;
  var Tr;
  var Thead;
  var Th;
  var Td;
  var Tbody;
  var Tfoot;
  function get_Style() {
    init_properties_Elements_kt_bp8qwz();
    return Style;
  }
  var Style;
  function ElementBuilder() {
  }
  ElementBuilder.$metadata$ = interfaceMeta('ElementBuilder');
  function _get_el__ndc0ck($this) {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = el$factory();
    tmp$ret$0 = $this.b20_1.a2();
    return tmp$ret$0;
  }
  function ElementBuilderImplementation$el$delegate$lambda(this$0) {
    return function () {
      return document.createElement(this$0.a20_1);
    };
  }
  function ElementBuilderImplementation(tagName) {
    this.a20_1 = tagName;
    var tmp = this;
    tmp.b20_1 = lazy(ElementBuilderImplementation$el$delegate$lambda(this));
  }
  ElementBuilderImplementation.prototype.s1e = function () {
    var tmp = _get_el__ndc0ck(this).cloneNode();
    return tmp instanceof Element ? tmp : THROW_CCE();
  };
  ElementBuilderImplementation.$metadata$ = classMeta('ElementBuilderImplementation', [ElementBuilder]);
  function Text$composable(value, $composer, $changed) {
    init_properties_Elements_kt_bp8qwz();
    var $composer_0 = $composer;
    $composer_0 = $composer_0.z13(-363526853);
    sourceInformation($composer_0, 'C(Text$composable)');
    var $dirty = $changed;
    if (($changed & 14) === 0)
      $dirty = $dirty | ($composer_0.ps(value) ? 4 : 2);
    if (!(($dirty & 11) === 2) ? true : !$composer_0.d12()) {
      if (isTraceInProgress()) {
        traceEventStart(-363526853, $changed, -1, 'org.jetbrains.compose.web.dom.Text$composable (Elements.kt:479)');
      }
      // Inline function 'androidx.compose.runtime.ComposeNode$composable' call
      var tmp$ret$4;
      // Inline function 'androidx.compose.runtime.remember$composable' call
      var tmp0_remember$composable = $composer_0;
      var $composer_1 = tmp0_remember$composable;
      $composer_1.ks(547886695);
      sourceInformation($composer_1, 'C(remember$composable):Composables.kt#9igjgp');
      var tmp$ret$3;
      // Inline function 'androidx.compose.runtime.cache' call
      var tmp1_cache = $composer_1;
      var tmp$ret$2;
      // Inline function 'kotlin.let' call
      var tmp0_let = tmp1_cache.ls();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
      var tmp;
      if (false ? true : tmp0_let === Companion_getInstance_8().ns_1) {
        var tmp$ret$0;
        // Inline function 'org.jetbrains.compose.web.dom.Text$composable.<anonymous>' call
        tmp$ret$0 = Text$composable$lambda_0;
        var value_0 = tmp$ret$0;
        tmp1_cache.ms(value_0);
        tmp = value_0;
      } else {
        tmp = tmp0_let;
      }
      tmp$ret$1 = tmp;
      tmp$ret$2 = tmp$ret$1;
      var tmp_0 = tmp$ret$2;
      tmp$ret$3 = (tmp_0 == null ? true : isObject(tmp_0)) ? tmp_0 : THROW_CCE();
      var tmp0 = tmp$ret$3;
      $composer_1.os();
      tmp$ret$4 = tmp0;
      var tmp1_ComposeNode$composable = tmp$ret$4;
      var tmp2_ComposeNode$composable = $composer_0;
      var $composer_2 = tmp2_ComposeNode$composable;
      $composer_2.ks(-1846754774);
      sourceInformation($composer_2, 'C(ComposeNode$composable):Composables.kt#9igjgp');
      var tmp_1 = $composer_2.z12();
      if (!(tmp_1 instanceof DomApplier)) {
        invalidApplier();
      }
      $composer_2.ky();
      if ($composer_2.k13()) {
        var tmp_2 = $composer_2;
        tmp_2.m13(Text$composable$lambda_1(tmp1_ComposeNode$composable));
      } else {
        $composer_2.o13();
      }
      // Inline function 'org.jetbrains.compose.web.dom.Text$composable.<anonymous>' call
      var tmp3__anonymous__ufb84q = _Updater___init__impl__rbfxm8($composer_2);
      Updater__set_impl_v7kwss(tmp3__anonymous__ufb84q, value, Text$composable$lambda_2);
      $composer_2.p13();
      $composer_2.os();
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    var tmp0_safe_receiver = $composer_0.a14();
    if (tmp0_safe_receiver === null)
      null;
    else {
      tmp0_safe_receiver.b15(Text$composable$lambda$ref(value, $changed));
    }
  }
  function H2$composable(attrs, content, $composer, $changed, $default) {
    init_properties_Elements_kt_bp8qwz();
    var attrs_0 = {_v: attrs};
    var content_0 = {_v: content};
    var $composer_0 = $composer;
    $composer_0 = $composer_0.z13(1397973931);
    sourceInformation($composer_0, 'C(H2$composable)');
    var $dirty = $changed;
    if (!(($default & 1) === 0))
      $dirty = $dirty | 6;
    else if (($changed & 14) === 0)
      $dirty = $dirty | ($composer_0.ps(attrs_0._v) ? 4 : 2);
    if (!(($default & 2) === 0))
      $dirty = $dirty | 48;
    else if (($changed & 112) === 0)
      $dirty = $dirty | ($composer_0.ps(content_0._v) ? 32 : 16);
    if (!(($dirty & 91) === 18) ? true : !$composer_0.d12()) {
      if (!(($default & 1) === 0)) {
        attrs_0._v = null;
      }
      if (!(($default & 2) === 0)) {
        content_0._v = null;
      }
      if (isTraceInProgress()) {
        traceEventStart(1397973931, $dirty, -1, 'org.jetbrains.compose.web.dom.H2$composable (Elements.kt:533)');
      }
      TagElement$composable(get_H2(), attrs_0._v, content_0._v, $composer_0, 112 & $dirty << 3 | 896 & $dirty << 3);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    var tmp0_safe_receiver = $composer_0.a14();
    if (tmp0_safe_receiver === null)
      null;
    else {
      tmp0_safe_receiver.b15(H2$composable$lambda$ref(attrs_0, content_0, $changed, $default));
    }
  }
  function P$composable(attrs, content, $composer, $changed, $default) {
    init_properties_Elements_kt_bp8qwz();
    var attrs_0 = {_v: attrs};
    var content_0 = {_v: content};
    var $composer_0 = $composer;
    $composer_0 = $composer_0.z13(-100692211);
    sourceInformation($composer_0, 'C(P$composable)');
    var $dirty = $changed;
    if (!(($default & 1) === 0))
      $dirty = $dirty | 6;
    else if (($changed & 14) === 0)
      $dirty = $dirty | ($composer_0.ps(attrs_0._v) ? 4 : 2);
    if (!(($default & 2) === 0))
      $dirty = $dirty | 48;
    else if (($changed & 112) === 0)
      $dirty = $dirty | ($composer_0.ps(content_0._v) ? 32 : 16);
    if (!(($dirty & 91) === 18) ? true : !$composer_0.d12()) {
      if (!(($default & 1) === 0)) {
        attrs_0._v = null;
      }
      if (!(($default & 2) === 0)) {
        content_0._v = null;
      }
      if (isTraceInProgress()) {
        traceEventStart(-100692211, $dirty, -1, 'org.jetbrains.compose.web.dom.P$composable (Elements.kt:563)');
      }
      TagElement$composable(get_P(), attrs_0._v, content_0._v, $composer_0, 112 & $dirty << 3 | 896 & $dirty << 3);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    var tmp0_safe_receiver = $composer_0.a14();
    if (tmp0_safe_receiver === null)
      null;
    else {
      tmp0_safe_receiver.b15(P$composable$lambda$ref(attrs_0, content_0, $changed, $default));
    }
  }
  function H1$composable(attrs, content, $composer, $changed, $default) {
    init_properties_Elements_kt_bp8qwz();
    var attrs_0 = {_v: attrs};
    var content_0 = {_v: content};
    var $composer_0 = $composer;
    $composer_0 = $composer_0.z13(-583188148);
    sourceInformation($composer_0, 'C(H1$composable)');
    var $dirty = $changed;
    if (!(($default & 1) === 0))
      $dirty = $dirty | 6;
    else if (($changed & 14) === 0)
      $dirty = $dirty | ($composer_0.ps(attrs_0._v) ? 4 : 2);
    if (!(($default & 2) === 0))
      $dirty = $dirty | 48;
    else if (($changed & 112) === 0)
      $dirty = $dirty | ($composer_0.ps(content_0._v) ? 32 : 16);
    if (!(($dirty & 91) === 18) ? true : !$composer_0.d12()) {
      if (!(($default & 1) === 0)) {
        attrs_0._v = null;
      }
      if (!(($default & 2) === 0)) {
        content_0._v = null;
      }
      if (isTraceInProgress()) {
        traceEventStart(-583188148, $dirty, -1, 'org.jetbrains.compose.web.dom.H1$composable (Elements.kt:527)');
      }
      TagElement$composable(get_H1(), attrs_0._v, content_0._v, $composer_0, 112 & $dirty << 3 | 896 & $dirty << 3);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    var tmp0_safe_receiver = $composer_0.a14();
    if (tmp0_safe_receiver === null)
      null;
    else {
      tmp0_safe_receiver.b15(H1$composable$lambda$ref(attrs_0, content_0, $changed, $default));
    }
  }
  function Span$composable(attrs, content, $composer, $changed, $default) {
    init_properties_Elements_kt_bp8qwz();
    var attrs_0 = {_v: attrs};
    var content_0 = {_v: content};
    var $composer_0 = $composer;
    $composer_0 = $composer_0.z13(-155327957);
    sourceInformation($composer_0, 'C(Span$composable)');
    var $dirty = $changed;
    if (!(($default & 1) === 0))
      $dirty = $dirty | 6;
    else if (($changed & 14) === 0)
      $dirty = $dirty | ($composer_0.ps(attrs_0._v) ? 4 : 2);
    if (!(($default & 2) === 0))
      $dirty = $dirty | 48;
    else if (($changed & 112) === 0)
      $dirty = $dirty | ($composer_0.ps(content_0._v) ? 32 : 16);
    if (!(($dirty & 91) === 18) ? true : !$composer_0.d12()) {
      if (!(($default & 1) === 0)) {
        attrs_0._v = null;
      }
      if (!(($default & 2) === 0)) {
        content_0._v = null;
      }
      if (isTraceInProgress()) {
        traceEventStart(-155327957, $dirty, -1, 'org.jetbrains.compose.web.dom.Span$composable (Elements.kt:593)');
      }
      TagElement$composable(get_Span(), attrs_0._v, content_0._v, $composer_0, 112 & $dirty << 3 | 896 & $dirty << 3);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    var tmp0_safe_receiver = $composer_0.a14();
    if (tmp0_safe_receiver === null)
      null;
    else {
      tmp0_safe_receiver.b15(Span$composable$lambda$ref(attrs_0, content_0, $changed, $default));
    }
  }
  function Button$composable(attrs, content, $composer, $changed, $default) {
    init_properties_Elements_kt_bp8qwz();
    var attrs_0 = {_v: attrs};
    var content_0 = {_v: content};
    var $composer_0 = $composer;
    $composer_0 = $composer_0.z13(-767970749);
    sourceInformation($composer_0, 'C(Button$composable)');
    var $dirty = $changed;
    if (!(($default & 1) === 0))
      $dirty = $dirty | 6;
    else if (($changed & 14) === 0)
      $dirty = $dirty | ($composer_0.ps(attrs_0._v) ? 4 : 2);
    if (!(($default & 2) === 0))
      $dirty = $dirty | 48;
    else if (($changed & 112) === 0)
      $dirty = $dirty | ($composer_0.ps(content_0._v) ? 32 : 16);
    if (!(($dirty & 91) === 18) ? true : !$composer_0.d12()) {
      if (!(($default & 1) === 0)) {
        attrs_0._v = null;
      }
      if (!(($default & 2) === 0)) {
        content_0._v = null;
      }
      if (isTraceInProgress()) {
        traceEventStart(-767970749, $dirty, -1, 'org.jetbrains.compose.web.dom.Button$composable (Elements.kt:521)');
      }
      TagElement$composable(get_Button(), attrs_0._v, content_0._v, $composer_0, 112 & $dirty << 3 | 896 & $dirty << 3);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    var tmp0_safe_receiver = $composer_0.a14();
    if (tmp0_safe_receiver === null)
      null;
    else {
      tmp0_safe_receiver.b15(Button$composable$lambda$ref(attrs_0, content_0, $changed, $default));
    }
  }
  function Div$composable(attrs, content, $composer, $changed, $default) {
    init_properties_Elements_kt_bp8qwz();
    var attrs_0 = {_v: attrs};
    var content_0 = {_v: content};
    var $composer_0 = $composer;
    $composer_0 = $composer_0.z13(1021009996);
    sourceInformation($composer_0, 'C(Div$composable)');
    var $dirty = $changed;
    if (!(($default & 1) === 0))
      $dirty = $dirty | 6;
    else if (($changed & 14) === 0)
      $dirty = $dirty | ($composer_0.ps(attrs_0._v) ? 4 : 2);
    if (!(($default & 2) === 0))
      $dirty = $dirty | 48;
    else if (($changed & 112) === 0)
      $dirty = $dirty | ($composer_0.ps(content_0._v) ? 32 : 16);
    if (!(($dirty & 91) === 18) ? true : !$composer_0.d12()) {
      if (!(($default & 1) === 0)) {
        attrs_0._v = null;
      }
      if (!(($default & 2) === 0)) {
        content_0._v = null;
      }
      if (isTraceInProgress()) {
        traceEventStart(1021009996, $dirty, -1, 'org.jetbrains.compose.web.dom.Div$composable (Elements.kt:489)');
      }
      TagElement$composable(get_Div(), attrs_0._v, content_0._v, $composer_0, 112 & $dirty << 3 | 896 & $dirty << 3);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    var tmp0_safe_receiver = $composer_0.a14();
    if (tmp0_safe_receiver === null)
      null;
    else {
      tmp0_safe_receiver.b15(Div$composable$lambda$ref(attrs_0, content_0, $changed, $default));
    }
  }
  function Style$composable_0(applyAttrs, cssRules, $composer, $changed, $default) {
    init_properties_Elements_kt_bp8qwz();
    var applyAttrs_0 = {_v: applyAttrs};
    var $composer_0 = $composer;
    $composer_0 = $composer_0.z13(-1688263201);
    sourceInformation($composer_0, 'C(Style$composable)');
    var $dirty = $changed;
    if (!(($default & 1) === 0))
      $dirty = $dirty | 6;
    else if (($changed & 14) === 0)
      $dirty = $dirty | ($composer_0.ps(applyAttrs_0._v) ? 4 : 2);
    if (!(($default & 2) === 0))
      $dirty = $dirty | 48;
    else if (($changed & 112) === 0)
      $dirty = $dirty | ($composer_0.ps(cssRules) ? 32 : 16);
    if (!(($dirty & 91) === 18) ? true : !$composer_0.d12()) {
      if (!(($default & 1) === 0)) {
        applyAttrs_0._v = null;
      }
      if (isTraceInProgress()) {
        traceEventStart(-1688263201, $dirty, -1, 'org.jetbrains.compose.web.dom.Style$composable (Elements.kt:978)');
      }
      var tmp = get_Style();
      var tmp$ret$4;
      // Inline function 'androidx.compose.runtime.remember$composable' call
      var tmp0_remember$composable = applyAttrs_0._v;
      var tmp1_remember$composable = $composer_0;
      var tmp2_remember$composable = 14 & $dirty;
      var $composer_1 = tmp1_remember$composable;
      $composer_1.ks(-838505973);
      sourceInformation($composer_1, 'C(remember$composable)P(1):Composables.kt#9igjgp');
      var tmp$ret$3;
      // Inline function 'androidx.compose.runtime.cache' call
      var tmp1_cache = $composer_1;
      var tmp2_cache = $composer_1.ps(tmp0_remember$composable);
      var tmp$ret$2;
      // Inline function 'kotlin.let' call
      var tmp0_let = tmp1_cache.ls();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
      var tmp_0;
      if (tmp2_cache ? true : tmp0_let === Companion_getInstance_8().ns_1) {
        var tmp$ret$0;
        // Inline function 'org.jetbrains.compose.web.dom.Style$composable.<anonymous>' call
        tmp$ret$0 = Style$composable$lambda_0(applyAttrs_0);
        var value = tmp$ret$0;
        tmp1_cache.ms(value);
        tmp_0 = value;
      } else {
        tmp_0 = tmp0_let;
      }
      tmp$ret$1 = tmp_0;
      tmp$ret$2 = tmp$ret$1;
      var tmp_1 = tmp$ret$2;
      tmp$ret$3 = (tmp_1 == null ? true : isObject(tmp_1)) ? tmp_1 : THROW_CCE();
      var tmp0 = tmp$ret$3;
      $composer_1.os();
      tmp$ret$4 = tmp0;
      var tmp_2 = tmp$ret$4;
      var tmp$ret$11;
      // Inline function 'kotlin.run' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$10;
      // Inline function 'org.jetbrains.compose.web.dom.Style$composable.<anonymous>' call
      var tmp_3 = $composer_0;
      var dispatchReceiver = composableLambda(tmp_3, 962227798, true, Style$composable$lambda_1(cssRules, $dirty));
      var tmp$ret$9;
      // Inline function 'androidx.compose.runtime.remember$composable' call
      var tmp0_remember$composable_0 = $composer_0;
      var $composer_2 = tmp0_remember$composable_0;
      $composer_2.ks(-838505973);
      sourceInformation($composer_2, 'C(remember$composable)P(1):Composables.kt#9igjgp');
      var tmp$ret$8;
      // Inline function 'androidx.compose.runtime.cache' call
      var tmp1_cache_0 = $composer_2;
      var tmp2_cache_0 = $composer_2.ps(dispatchReceiver);
      var tmp$ret$7;
      // Inline function 'kotlin.let' call
      var tmp0_let_0 = tmp1_cache_0.ls();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$6;
      // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
      var tmp_4;
      if (tmp2_cache_0 ? true : tmp0_let_0 === Companion_getInstance_8().ns_1) {
        var tmp$ret$5;
        // Inline function 'org.jetbrains.compose.web.dom.Style$composable.<anonymous>.<anonymous>' call
        tmp$ret$5 = ComposableLambda$invoke$ref_3(dispatchReceiver);
        var value_0 = tmp$ret$5;
        tmp1_cache_0.ms(value_0);
        tmp_4 = value_0;
      } else {
        tmp_4 = tmp0_let_0;
      }
      tmp$ret$6 = tmp_4;
      tmp$ret$7 = tmp$ret$6;
      var tmp_5 = tmp$ret$7;
      tmp$ret$8 = (tmp_5 == null ? true : isObject(tmp_5)) ? tmp_5 : THROW_CCE();
      var tmp0_0 = tmp$ret$8;
      $composer_2.os();
      tmp$ret$9 = tmp0_0;
      tmp$ret$10 = tmp$ret$9;
      tmp$ret$11 = tmp$ret$10;
      TagElement$composable(tmp, tmp_2, tmp$ret$11, $composer_0, 384);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    var tmp0_safe_receiver = $composer_0.a14();
    if (tmp0_safe_receiver === null)
      null;
    else {
      tmp0_safe_receiver.b15(Style$composable$lambda$ref(applyAttrs_0, cssRules, $changed, $default));
    }
  }
  function clearCSSRules(_this__u8e3s4) {
    init_properties_Elements_kt_bp8qwz();
    // Inline function 'kotlin.repeat' call
    var tmp0_repeat = _this__u8e3s4.cssRules.length;
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    if (inductionVariable < tmp0_repeat)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'org.jetbrains.compose.web.dom.clearCSSRules.<anonymous>' call
        _this__u8e3s4.deleteRule(0);
      }
       while (inductionVariable < tmp0_repeat);
  }
  function A$composable(href, attrs, content, $composer, $changed, $default) {
    init_properties_Elements_kt_bp8qwz();
    var href_0 = {_v: href};
    var attrs_0 = {_v: attrs};
    var content_0 = {_v: content};
    var $composer_0 = $composer;
    $composer_0 = $composer_0.z13(294823474);
    sourceInformation($composer_0, 'C(A$composable)P(2)');
    var $dirty = $changed;
    if (!(($default & 1) === 0))
      $dirty = $dirty | 6;
    else if (($changed & 14) === 0)
      $dirty = $dirty | ($composer_0.ps(href_0._v) ? 4 : 2);
    if (!(($default & 2) === 0))
      $dirty = $dirty | 48;
    else if (($changed & 112) === 0)
      $dirty = $dirty | ($composer_0.ps(attrs_0._v) ? 32 : 16);
    if (!(($default & 4) === 0))
      $dirty = $dirty | 384;
    else if (($changed & 896) === 0)
      $dirty = $dirty | ($composer_0.ps(content_0._v) ? 256 : 128);
    if (!(($dirty & 731) === 146) ? true : !$composer_0.d12()) {
      if (!(($default & 1) === 0)) {
        href_0._v = null;
      }
      if (!(($default & 2) === 0)) {
        attrs_0._v = null;
      }
      if (!(($default & 4) === 0)) {
        content_0._v = null;
      }
      if (isTraceInProgress()) {
        traceEventStart(294823474, $dirty, -1, 'org.jetbrains.compose.web.dom.A$composable (Elements.kt:501)');
      }
      var tmp = get_A();
      var tmp$ret$4;
      // Inline function 'androidx.compose.runtime.remember$composable' call
      var tmp0_remember$composable = href_0._v;
      var tmp1_remember$composable = attrs_0._v;
      var tmp2_remember$composable = $composer_0;
      var tmp3_remember$composable = 14 & $dirty | 112 & $dirty;
      var $composer_1 = tmp2_remember$composable;
      $composer_1.ks(-1124426577);
      sourceInformation($composer_1, 'C(remember$composable)P(1,2):Composables.kt#9igjgp');
      var tmp$ret$3;
      // Inline function 'androidx.compose.runtime.cache' call
      var tmp1_cache = $composer_1;
      var tmp2_cache = !!($composer_1.ps(tmp0_remember$composable) | $composer_1.ps(tmp1_remember$composable));
      var tmp$ret$2;
      // Inline function 'kotlin.let' call
      var tmp0_let = tmp1_cache.ls();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
      var tmp_0;
      if (tmp2_cache ? true : tmp0_let === Companion_getInstance_8().ns_1) {
        var tmp$ret$0;
        // Inline function 'org.jetbrains.compose.web.dom.A$composable.<anonymous>' call
        tmp$ret$0 = A$composable$lambda_0(href_0, attrs_0);
        var value = tmp$ret$0;
        tmp1_cache.ms(value);
        tmp_0 = value;
      } else {
        tmp_0 = tmp0_let;
      }
      tmp$ret$1 = tmp_0;
      tmp$ret$2 = tmp$ret$1;
      var tmp_1 = tmp$ret$2;
      tmp$ret$3 = (tmp_1 == null ? true : isObject(tmp_1)) ? tmp_1 : THROW_CCE();
      var tmp0 = tmp$ret$3;
      $composer_1.os();
      tmp$ret$4 = tmp0;
      TagElement$composable(tmp, tmp$ret$4, content_0._v, $composer_0, 896 & $dirty);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    var tmp0_safe_receiver = $composer_0.a14();
    if (tmp0_safe_receiver === null)
      null;
    else {
      tmp0_safe_receiver.b15(A$composable$lambda$ref(href_0, attrs_0, content_0, $changed, $default));
    }
  }
  function Text$composable$lambda($value, $$changed, $composer, $force) {
    return Text$composable($value, $composer, $$changed | 1);
  }
  function H2$composable$lambda($attrs, $content, $$changed, $$default, $composer, $force) {
    return H2$composable($attrs._v, $content._v, $composer, $$changed | 1, $$default);
  }
  function P$composable$lambda($attrs, $content, $$changed, $$default, $composer, $force) {
    return P$composable($attrs._v, $content._v, $composer, $$changed | 1, $$default);
  }
  function H1$composable$lambda($attrs, $content, $$changed, $$default, $composer, $force) {
    return H1$composable($attrs._v, $content._v, $composer, $$changed | 1, $$default);
  }
  function Span$composable$lambda($attrs, $content, $$changed, $$default, $composer, $force) {
    return Span$composable($attrs._v, $content._v, $composer, $$changed | 1, $$default);
  }
  function Button$composable$lambda($attrs, $content, $$changed, $$default, $composer, $force) {
    return Button$composable($attrs._v, $content._v, $composer, $$changed | 1, $$default);
  }
  function Div$composable$lambda($attrs, $content, $$changed, $$default, $composer, $force) {
    return Div$composable($attrs._v, $content._v, $composer, $$changed | 1, $$default);
  }
  function Style$composable$lambda($applyAttrs, $cssRules, $$changed, $$default, $composer, $force) {
    return Style$composable_0($applyAttrs._v, $cssRules, $composer, $$changed | 1, $$default);
  }
  function A$composable$lambda($href, $attrs, $content, $$changed, $$default, $composer, $force) {
    return A$composable($href._v, $attrs._v, $content._v, $composer, $$changed | 1, $$default);
  }
  function Text$composable$lambda_0() {
    init_properties_Elements_kt_bp8qwz();
    return new DomNodeWrapper(document.createTextNode(''));
  }
  function Text$composable$lambda_1($tmp1_ComposeNode$composable) {
    return function () {
      return $tmp1_ComposeNode$composable();
    };
  }
  function Text$composable$lambda_2($this$set, value) {
    init_properties_Elements_kt_bp8qwz();
    var tmp = $this$set.s1k();
    (tmp instanceof Text ? tmp : THROW_CCE()).data = value;
    return Unit_getInstance();
  }
  function Text$composable$lambda$ref($value, $$changed) {
    return function (p0, p1) {
      Text$composable$lambda($value, $$changed, p0, p1);
      return Unit_getInstance();
    };
  }
  function H2$composable$lambda$ref($attrs, $content, $$changed, $$default) {
    return function (p0, p1) {
      H2$composable$lambda($attrs, $content, $$changed, $$default, p0, p1);
      return Unit_getInstance();
    };
  }
  function P$composable$lambda$ref($attrs, $content, $$changed, $$default) {
    return function (p0, p1) {
      P$composable$lambda($attrs, $content, $$changed, $$default, p0, p1);
      return Unit_getInstance();
    };
  }
  function H1$composable$lambda$ref($attrs, $content, $$changed, $$default) {
    return function (p0, p1) {
      H1$composable$lambda($attrs, $content, $$changed, $$default, p0, p1);
      return Unit_getInstance();
    };
  }
  function Span$composable$lambda$ref($attrs, $content, $$changed, $$default) {
    return function (p0, p1) {
      Span$composable$lambda($attrs, $content, $$changed, $$default, p0, p1);
      return Unit_getInstance();
    };
  }
  function Button$composable$lambda$ref($attrs, $content, $$changed, $$default) {
    return function (p0, p1) {
      Button$composable$lambda($attrs, $content, $$changed, $$default, p0, p1);
      return Unit_getInstance();
    };
  }
  function Div$composable$lambda$ref($attrs, $content, $$changed, $$default) {
    return function (p0, p1) {
      Div$composable$lambda($attrs, $content, $$changed, $$default, p0, p1);
      return Unit_getInstance();
    };
  }
  function Style$composable$lambda_0($applyAttrs) {
    return function ($this$TagElement) {
      var tmp;
      if (!($applyAttrs._v == null)) {
        tmp = $applyAttrs._v($this$TagElement);
      }
      return Unit_getInstance();
    };
  }
  function _no_name_provided__qut3iv_6($cssStylesheet) {
    this.c20_1 = $cssStylesheet;
  }
  _no_name_provided__qut3iv_6.prototype.pi = function () {
    // Inline function 'org.jetbrains.compose.web.dom.Style$composable.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
    var tmp0_safe_receiver = this.c20_1;
    if (tmp0_safe_receiver == null)
      null;
    else {
      clearCSSRules(tmp0_safe_receiver);
    }
  };
  _no_name_provided__qut3iv_6.$metadata$ = classMeta(undefined, [DisposableEffectResult]);
  function Style$composable$lambda$lambda($this_TagElement, $cssRules) {
    return function ($this$DisposableEffect) {
      var tmp = $this_TagElement.x1z($this$DisposableEffect).sheet;
      var cssStylesheet = tmp instanceof CSSStyleSheet ? tmp : null;
      var tmp0_safe_receiver = cssStylesheet;
      if (tmp0_safe_receiver == null)
        null;
      else {
        setCSSRules(tmp0_safe_receiver, $cssRules);
      }
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.DisposableEffectScope.onDispose' call
      tmp$ret$0 = new _no_name_provided__qut3iv_6(cssStylesheet);
      return tmp$ret$0;
    };
  }
  function Style$composable$lambda_1($cssRules, $$dirty) {
    return function ($this$TagElement, $composer, $changed) {
      var $composer_0 = $composer;
      var $dirty = $changed;
      var tmp;
      if (($changed & 14) === 0) {
        $dirty = $dirty | ($composer_0.ps($this$TagElement) ? 4 : 2);
        tmp = Unit_getInstance();
      }
      var tmp_0;
      if (!(($dirty & 91) === 18) ? true : !$composer_0.d12()) {
        if (isTraceInProgress()) {
          traceEventStart(962227798, $changed, -1, 'org.jetbrains.compose.web.dom.Style$composable.<anonymous> (Elements.kt:989)');
        }
        var tmp_1 = $cssRules.g();
        DisposableEffect$composable_1($cssRules, tmp_1, Style$composable$lambda$lambda($this$TagElement, $cssRules), $composer_0, 14 & $$dirty >> 3);
        var tmp_2;
        if (isTraceInProgress()) {
          traceEventEnd();
          tmp_2 = Unit_getInstance();
        }
        tmp_0 = tmp_2;
      } else {
        $composer_0.hy();
        tmp_0 = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  function ComposableLambda$invoke$ref_3($boundThis) {
    return function (p0, p1, p2) {
      return $boundThis.z1q(p0, p1, p2);
    };
  }
  function Style$composable$lambda$ref($applyAttrs, $cssRules, $$changed, $$default) {
    return function (p0, p1) {
      Style$composable$lambda($applyAttrs, $cssRules, $$changed, $$default, p0, p1);
      return Unit_getInstance();
    };
  }
  function A$composable$lambda_0($href, $attrs) {
    return function ($this$TagElement) {
      var tmp;
      if (!($href._v == null)) {
        href($this$TagElement, $href._v);
        tmp = Unit_getInstance();
      }
      var tmp_0;
      if (!($attrs._v == null)) {
        tmp_0 = $attrs._v($this$TagElement);
      }
      return Unit_getInstance();
    };
  }
  function A$composable$lambda$ref($href, $attrs, $content, $$changed, $$default) {
    return function (p0, p1) {
      A$composable$lambda($href, $attrs, $content, $$changed, $$default, p0, p1);
      return Unit_getInstance();
    };
  }
  function el$factory() {
    return getPropertyCallableRef('el', 1, KProperty1, function (receiver) {
      return _get_el__ndc0ck(receiver);
    }, null);
  }
  var properties_initialized_Elements_kt_gtqiqv;
  function init_properties_Elements_kt_bp8qwz() {
    if (properties_initialized_Elements_kt_gtqiqv) {
    } else {
      properties_initialized_Elements_kt_gtqiqv = true;
      Address = new ElementBuilderImplementation('address');
      Article = new ElementBuilderImplementation('article');
      Aside = new ElementBuilderImplementation('aside');
      Header = new ElementBuilderImplementation('header');
      Area = new ElementBuilderImplementation('area');
      Audio = new ElementBuilderImplementation('audio');
      Map_0 = new ElementBuilderImplementation('map');
      Track = new ElementBuilderImplementation('track');
      Video = new ElementBuilderImplementation('video');
      Datalist = new ElementBuilderImplementation('datalist');
      Fieldset = new ElementBuilderImplementation('fieldset');
      Legend = new ElementBuilderImplementation('legend');
      Meter = new ElementBuilderImplementation('meter');
      Output = new ElementBuilderImplementation('output');
      Progress = new ElementBuilderImplementation('progress');
      Embed = new ElementBuilderImplementation('embed');
      Iframe = new ElementBuilderImplementation('iframe');
      Object_0 = new ElementBuilderImplementation('object');
      Param = new ElementBuilderImplementation('param');
      Picture = new ElementBuilderImplementation('picture');
      Source = new ElementBuilderImplementation('source');
      Canvas = new ElementBuilderImplementation('canvas');
      DList = new ElementBuilderImplementation('dl');
      DTerm = new ElementBuilderImplementation('dt');
      DDescription = new ElementBuilderImplementation('dd');
      Div = new ElementBuilderImplementation('div');
      A = new ElementBuilderImplementation('a');
      Input = new ElementBuilderImplementation('input');
      Button = new ElementBuilderImplementation('button');
      H1 = new ElementBuilderImplementation('h1');
      H2 = new ElementBuilderImplementation('h2');
      H3 = new ElementBuilderImplementation('h3');
      H4 = new ElementBuilderImplementation('h4');
      H5 = new ElementBuilderImplementation('h5');
      H6 = new ElementBuilderImplementation('h6');
      P = new ElementBuilderImplementation('p');
      Em = new ElementBuilderImplementation('em');
      I = new ElementBuilderImplementation('i');
      B = new ElementBuilderImplementation('b');
      Small = new ElementBuilderImplementation('small');
      Span = new ElementBuilderImplementation('span');
      Br = new ElementBuilderImplementation('br');
      Ul = new ElementBuilderImplementation('ul');
      Ol = new ElementBuilderImplementation('ol');
      Li = new ElementBuilderImplementation('li');
      Img = new ElementBuilderImplementation('img');
      Form = new ElementBuilderImplementation('form');
      Select = new ElementBuilderImplementation('select');
      Option = new ElementBuilderImplementation('option');
      OptGroup = new ElementBuilderImplementation('optgroup');
      Section = new ElementBuilderImplementation('section');
      TextArea = new ElementBuilderImplementation('textarea');
      Nav = new ElementBuilderImplementation('nav');
      Pre = new ElementBuilderImplementation('pre');
      Code = new ElementBuilderImplementation('code');
      Main = new ElementBuilderImplementation('main');
      Footer = new ElementBuilderImplementation('footer');
      Hr = new ElementBuilderImplementation('hr');
      Label = new ElementBuilderImplementation('label');
      Table = new ElementBuilderImplementation('table');
      Caption = new ElementBuilderImplementation('caption');
      Col = new ElementBuilderImplementation('col');
      Colgroup = new ElementBuilderImplementation('colgroup');
      Tr = new ElementBuilderImplementation('tr');
      Thead = new ElementBuilderImplementation('thead');
      Th = new ElementBuilderImplementation('th');
      Td = new ElementBuilderImplementation('td');
      Tbody = new ElementBuilderImplementation('tbody');
      Tfoot = new ElementBuilderImplementation('tfoot');
      Style = new ElementBuilderImplementation('style');
    }
  }
  function setCSSRules(_this__u8e3s4, cssRules) {
    // Inline function 'kotlin.collections.forEach' call
    var tmp0_iterator = cssRules.d();
    while (tmp0_iterator.e()) {
      var element = tmp0_iterator.f();
      // Inline function 'org.jetbrains.compose.web.dom.setCSSRules.<anonymous>' call
      addRule(_this__u8e3s4, element);
    }
  }
  function addRule(_this__u8e3s4, cssRuleDeclaration) {
    var tmp0_safe_receiver = addRule_0(_this__u8e3s4, cssRuleDeclaration.b1x() + ' {}');
    if (tmp0_safe_receiver == null)
      null;
    else {
      var tmp$ret$0;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      fillRule(cssRuleDeclaration, tmp0_safe_receiver);
      tmp$ret$0 = Unit_getInstance();
    }
  }
  function addRule_0(_this__u8e3s4, cssRule) {
    var cssRuleIndex = _this__u8e3s4.insertRule(cssRule, _this__u8e3s4.cssRules.length);
    return _this__u8e3s4.cssRules.item(cssRuleIndex);
  }
  function fillRule(cssRuleDeclaration, cssRule) {
    var tmp0_subject = cssRuleDeclaration;
    if (isInterface(tmp0_subject, CSSStyledRuleDeclaration)) {
      var tmp$ret$1;
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = cssRule;
      tmp$ret$1 = tmp$ret$0;
      var cssStyleRule = tmp$ret$1;
      // Inline function 'kotlin.collections.forEach' call
      var tmp0_forEach = cssRuleDeclaration.f1x().u1x();
      var tmp0_iterator = tmp0_forEach.d();
      while (tmp0_iterator.e()) {
        var element = tmp0_iterator.f();
        // Inline function 'org.jetbrains.compose.web.dom.fillRule.<anonymous>' call
        var name = element.a3();
        var value = element.b3();
        setProperty(cssStyleRule.style, name, value);
      }
      // Inline function 'kotlin.collections.forEach' call
      var tmp1_forEach = cssRuleDeclaration.f1x().v1x();
      var tmp0_iterator_0 = tmp1_forEach.d();
      while (tmp0_iterator_0.e()) {
        var element_0 = tmp0_iterator_0.f();
        // Inline function 'org.jetbrains.compose.web.dom.fillRule.<anonymous>' call
        var name_0 = element_0.a3();
        var value_0 = element_0.b3();
        setVariable(cssStyleRule.style, name_0, value_0);
      }
    } else {
      if (isInterface(tmp0_subject, CSSGroupingRuleDeclaration)) {
        var tmp$ret$3;
        // Inline function 'kotlin.js.unsafeCast' call
        var tmp$ret$2;
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$2 = cssRule;
        tmp$ret$3 = tmp$ret$2;
        var cssGroupingRule = tmp$ret$3;
        // Inline function 'kotlin.collections.forEach' call
        var tmp2_forEach = cssRuleDeclaration.a1x();
        var tmp0_iterator_1 = tmp2_forEach.d();
        while (tmp0_iterator_1.e()) {
          var element_1 = tmp0_iterator_1.f();
          // Inline function 'org.jetbrains.compose.web.dom.fillRule.<anonymous>' call
          addRule_1(cssGroupingRule, element_1);
        }
      } else {
        if (tmp0_subject instanceof CSSKeyframesRuleDeclaration) {
          var tmp$ret$5;
          // Inline function 'kotlin.js.unsafeCast' call
          var tmp$ret$4;
          // Inline function 'kotlin.js.asDynamic' call
          tmp$ret$4 = cssRule;
          tmp$ret$5 = tmp$ret$4;
          var cssGroupingRule_0 = tmp$ret$5;
          // Inline function 'kotlin.collections.forEach' call
          var tmp3_forEach = cssRuleDeclaration.d20_1;
          var tmp0_iterator_2 = tmp3_forEach.d();
          while (tmp0_iterator_2.e()) {
            var element_2 = tmp0_iterator_2.f();
            // Inline function 'org.jetbrains.compose.web.dom.fillRule.<anonymous>' call
            addRule_2(cssGroupingRule_0, element_2);
          }
        }
      }
    }
  }
  function setProperty(style, name, value) {
    style.setProperty(name, toString_2(value));
  }
  function setVariable(style, name, value) {
    style.setProperty('--' + name, toString_2(value));
  }
  function addRule_1(_this__u8e3s4, cssRuleDeclaration) {
    var tmp0_safe_receiver = addRule_3(_this__u8e3s4, cssRuleDeclaration.b1x() + ' {}');
    if (tmp0_safe_receiver == null)
      null;
    else {
      var tmp$ret$0;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      fillRule(cssRuleDeclaration, tmp0_safe_receiver);
      tmp$ret$0 = Unit_getInstance();
    }
  }
  function addRule_2(_this__u8e3s4, cssRuleDeclaration) {
    var tmp0_safe_receiver = addRule_4(_this__u8e3s4, cssRuleDeclaration.b1x() + ' {}');
    if (tmp0_safe_receiver == null)
      null;
    else {
      var tmp$ret$0;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      fillRule(cssRuleDeclaration, tmp0_safe_receiver);
      tmp$ret$0 = Unit_getInstance();
    }
  }
  function addRule_3(_this__u8e3s4, cssRule) {
    var cssRuleIndex = _this__u8e3s4.insertRule(cssRule, _this__u8e3s4.cssRules.length);
    return _this__u8e3s4.cssRules.item(cssRuleIndex);
  }
  function addRule_4(_this__u8e3s4, cssRule) {
    // Inline function 'org.jetbrains.compose.web.css.appendRule' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = _this__u8e3s4;
    tmp$ret$0.appendRule(cssRule);
    return _this__u8e3s4.cssRules.item(_this__u8e3s4.cssRules.length - 1 | 0);
  }
  function SyntheticEvent(nativeEvent) {
    this.h20_1 = nativeEvent;
    var tmp = this;
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_unsafeCast = this.h20_1.target;
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = tmp0_unsafeCast;
    tmp$ret$1 = tmp$ret$0;
    tmp.i20_1 = tmp$ret$1;
    this.j20_1 = this.h20_1.bubbles;
    this.k20_1 = this.h20_1.cancelable;
    this.l20_1 = this.h20_1.composed;
    this.m20_1 = this.h20_1.currentTarget;
    this.n20_1 = this.h20_1.eventPhase;
    this.o20_1 = this.h20_1.defaultPrevented;
    this.p20_1 = this.h20_1.timeStamp;
    this.q20_1 = this.h20_1.type;
    this.r20_1 = this.h20_1.isTrusted;
    this.s20_1 = 0;
  }
  SyntheticEvent.prototype.t20 = function () {
    return this.h20_1.preventDefault();
  };
  SyntheticEvent.$metadata$ = classMeta('SyntheticEvent');
  function SyntheticKeyboardEvent(nativeEvent) {
    SyntheticEvent.call(this, nativeEvent);
    this.g21_1 = nativeEvent;
    this.h21_1 = nativeEvent.altKey;
    this.i21_1 = nativeEvent.code;
    this.j21_1 = nativeEvent.ctrlKey;
    this.k21_1 = nativeEvent.isComposing;
    this.l21_1 = nativeEvent.key;
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = nativeEvent;
    tmp.m21_1 = toString_2(tmp$ret$0.locale);
    this.n21_1 = nativeEvent.location;
    this.o21_1 = nativeEvent.metaKey;
    this.p21_1 = nativeEvent.repeat;
    this.q21_1 = nativeEvent.shiftKey;
    this.r21_1 = 0;
  }
  SyntheticKeyboardEvent.prototype.v16 = function () {
    return this.k21_1;
  };
  SyntheticKeyboardEvent.prototype.y1 = function () {
    return this.l21_1;
  };
  SyntheticKeyboardEvent.$metadata$ = classMeta('SyntheticKeyboardEvent', undefined, undefined, undefined, undefined, SyntheticEvent.prototype);
  function SyntheticMouseEvent(nativeEvent) {
    SyntheticEvent.call(this, nativeEvent);
    this.e22_1 = nativeEvent;
    this.f22_1 = nativeEvent.altKey;
    this.g22_1 = nativeEvent.button;
    this.h22_1 = nativeEvent.buttons;
    this.i22_1 = nativeEvent.clientX;
    this.j22_1 = nativeEvent.clientY;
    this.k22_1 = nativeEvent.ctrlKey;
    this.l22_1 = nativeEvent.metaKey;
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = nativeEvent;
    var tmp_0 = tmp$ret$0.movementX;
    var tmp0_elvis_lhs = (!(tmp_0 == null) ? typeof tmp_0 === 'number' : false) ? tmp_0 : null;
    tmp.m22_1 = tmp0_elvis_lhs == null ? 0 : tmp0_elvis_lhs;
    var tmp_1 = this;
    var tmp$ret$1;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$1 = nativeEvent;
    var tmp_2 = tmp$ret$1.movementY;
    var tmp0_elvis_lhs_0 = (!(tmp_2 == null) ? typeof tmp_2 === 'number' : false) ? tmp_2 : null;
    tmp_1.n22_1 = tmp0_elvis_lhs_0 == null ? 0 : tmp0_elvis_lhs_0;
    this.o22_1 = nativeEvent.offsetX;
    this.p22_1 = nativeEvent.offsetY;
    this.q22_1 = nativeEvent.pageX;
    this.r22_1 = nativeEvent.pageY;
    this.s22_1 = nativeEvent.region;
    this.t22_1 = nativeEvent.relatedTarget;
    this.u22_1 = nativeEvent.screenX;
    this.v22_1 = nativeEvent.screenY;
    this.w22_1 = nativeEvent.shiftKey;
    this.x22_1 = nativeEvent.x;
    this.y22_1 = nativeEvent.y;
    this.z22_1 = 0;
  }
  SyntheticMouseEvent.$metadata$ = classMeta('SyntheticMouseEvent', undefined, undefined, undefined, undefined, SyntheticEvent.prototype);
  function ComparableAttrsScope_init_$Init$($this) {
    ComparableAttrsScope.call($this, new DummyAttrsScope());
    return $this;
  }
  function ComparableAttrsScope_init_$Create$() {
    return ComparableAttrsScope_init_$Init$(Object.create(ComparableAttrsScope.prototype));
  }
  function ComparableAttrsScope(wrapped) {
    this.a23_1 = wrapped;
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableMapOf' call
    tmp$ret$0 = LinkedHashMap_init_$Create$();
    tmp.b23_1 = tmp$ret$0;
    var tmp_0 = this;
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mutableSetOf' call
    tmp$ret$1 = LinkedHashSet_init_$Create$();
    tmp_0.c23_1 = tmp$ret$1;
    var tmp_1 = this;
    var tmp$ret$2;
    // Inline function 'kotlin.collections.mutableSetOf' call
    tmp$ret$2 = LinkedHashSet_init_$Create$();
    tmp_1.d23_1 = tmp$ret$2;
    this.e23_1 = null;
    this.f23_1 = 8;
  }
  ComparableAttrsScope.prototype.p1s = function (attr, value) {
    // Inline function 'kotlin.collections.set' call
    var tmp0_set = this.b23_1;
    tmp0_set.a(attr, value);
    this.a23_1.p1s(attr, value);
    return this;
  };
  ComparableAttrsScope.prototype.b1t = function (classes) {
    this.c23_1.h1(classes);
  };
  ComparableAttrsScope.prototype.f1t = function (listener) {
    this.d23_1.b(listener);
    this.a23_1.f1t(listener);
  };
  ComparableAttrsScope.prototype.a1t = function (builder) {
    var tmp0_elvis_lhs = this.e23_1;
    var style = tmp0_elvis_lhs == null ? new ComparableStyleScope() : tmp0_elvis_lhs;
    builder(style);
    this.e23_1 = style;
    this.a23_1.a1t(builder);
  };
  ComparableAttrsScope.prototype.equals = function (other) {
    var tmp;
    var tmp_0;
    var tmp_1;
    var tmp_2;
    if (other instanceof ComparableAttrsScope) {
      tmp_2 = equals_0(other.b23_1, this.b23_1);
    } else {
      tmp_2 = false;
    }
    if (tmp_2) {
      tmp_1 = equals_0(other.c23_1, this.c23_1);
    } else {
      tmp_1 = false;
    }
    if (tmp_1) {
      tmp_0 = equals_0(other.d23_1, this.d23_1);
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = equals_0(other.e23_1, this.e23_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  ComparableAttrsScope.prototype.hashCode = function () {
    var result = hashCode_0(this.b23_1);
    result = imul(31, result) + hashCode_0(this.c23_1) | 0;
    result = imul(31, result) + hashCode_0(this.d23_1) | 0;
    var tmp = imul(31, result);
    var tmp0_safe_receiver = this.e23_1;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.hashCode();
    result = tmp + (tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs) | 0;
    return result;
  };
  ComparableAttrsScope.$metadata$ = classMeta('ComparableAttrsScope', [AttrsScope]);
  function DummyAttrsScope() {
  }
  DummyAttrsScope.prototype.p1s = function (attr, value) {
    return this;
  };
  DummyAttrsScope.prototype.b1t = function (classes) {
    return Unit_getInstance();
  };
  DummyAttrsScope.prototype.f1t = function (listener) {
    return Unit_getInstance();
  };
  DummyAttrsScope.prototype.a1t = function (builder) {
    return Unit_getInstance();
  };
  DummyAttrsScope.$metadata$ = classMeta('DummyAttrsScope', [AttrsScope]);
  function justifyItems(_this__u8e3s4, justifyItems) {
    _this__u8e3s4.q1x('justify-items', justifyItems.g23_1);
  }
  function JustifyItemsKeyword(value) {
    JustifyItems.call(this, value);
    this.k23_1 = 0;
  }
  JustifyItemsKeyword.$metadata$ = classMeta('JustifyItemsKeyword', undefined, undefined, undefined, undefined, JustifyItems.prototype);
  function JustifyItemsPosition(value) {
    JustifyItemsKeyword.call(this, value);
    this.o23_1 = 0;
  }
  JustifyItemsPosition.$metadata$ = classMeta('JustifyItemsPosition', undefined, undefined, undefined, undefined, JustifyItemsKeyword.prototype);
  function Companion_27() {
    Companion_instance_27 = this;
  }
  Companion_27.prototype.g1w = function () {
    return new JustifyItemsPosition('center');
  };
  Companion_27.prototype.h1w = function () {
    return new JustifyItemsPosition('start');
  };
  Companion_27.prototype.i1w = function () {
    return new JustifyItemsPosition('end');
  };
  Companion_27.$metadata$ = objectMeta('Companion');
  var Companion_instance_27;
  function Companion_getInstance_27() {
    if (Companion_instance_27 == null)
      new Companion_27();
    return Companion_instance_27;
  }
  function JustifyItems(value) {
    Companion_getInstance_27();
    this.g23_1 = value;
    this.h23_1 = 0;
  }
  JustifyItems.$metadata$ = classMeta('JustifyItems');
  function justifySelf(_this__u8e3s4, justifySelf) {
    _this__u8e3s4.q1x('justify-self', justifySelf.p23_1);
  }
  function JustifySelfKeyword(value) {
    JustifySelf.call(this, value);
    this.t23_1 = 0;
  }
  JustifySelfKeyword.$metadata$ = classMeta('JustifySelfKeyword', undefined, undefined, undefined, undefined, JustifySelf.prototype);
  function JustifySelfPosition(value) {
    JustifySelfKeyword.call(this, value);
    this.x23_1 = 0;
  }
  JustifySelfPosition.$metadata$ = classMeta('JustifySelfPosition', undefined, undefined, undefined, undefined, JustifySelfKeyword.prototype);
  function Companion_28() {
    Companion_instance_28 = this;
  }
  Companion_28.prototype.g1w = function () {
    return new JustifySelfPosition('center');
  };
  Companion_28.prototype.h1w = function () {
    return new JustifySelfPosition('start');
  };
  Companion_28.prototype.i1w = function () {
    return new JustifySelfPosition('end');
  };
  Companion_28.$metadata$ = objectMeta('Companion');
  var Companion_instance_28;
  function Companion_getInstance_28() {
    if (Companion_instance_28 == null)
      new Companion_28();
    return Companion_instance_28;
  }
  function JustifySelf(value) {
    Companion_getInstance_28();
    this.p23_1 = value;
    this.q23_1 = 0;
  }
  JustifySelf.$metadata$ = classMeta('JustifySelf');
  function borderTop(_this__u8e3s4, width_0, style, color_0) {
    // Inline function 'com.varabyte.kobweb.compose.css.borderTop' call
    var tmp$ret$3;
    // Inline function 'kotlin.apply' call
    var tmp0_apply = new CSSBorder();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'com.varabyte.kobweb.compose.css.borderTop.<anonymous>' call
    var tmp0_safe_receiver = width_0;
    if (tmp0_safe_receiver == null)
      null;
    else {
      var tmp$ret$0;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      width(tmp0_apply, tmp0_safe_receiver);
      tmp$ret$0 = Unit_getInstance();
    }
    var tmp1_safe_receiver = style;
    if (tmp1_safe_receiver == null)
      null;
    else {
      var tmp$ret$1;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      style_1(tmp0_apply, tmp1_safe_receiver);
      tmp$ret$1 = Unit_getInstance();
    }
    var tmp2_safe_receiver = color_0;
    if (tmp2_safe_receiver == null)
      null;
    else {
      var tmp$ret$2;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      color(tmp0_apply, tmp2_safe_receiver);
      tmp$ret$2 = Unit_getInstance();
    }
    tmp$ret$3 = tmp0_apply;
    _this__u8e3s4.p1x('border-top', tmp$ret$3);
  }
  function borderTop_0(_this__u8e3s4, borderBuild) {
    var tmp$ret$0;
    // Inline function 'kotlin.apply' call
    var tmp0_apply = new CSSBorder();
    // Inline function 'kotlin.contracts.contract' call
    borderBuild(tmp0_apply);
    tmp$ret$0 = tmp0_apply;
    _this__u8e3s4.p1x('border-top', tmp$ret$0);
  }
  function ComparableStyleScope() {
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableMapOf' call
    tmp$ret$0 = LinkedHashMap_init_$Create$();
    tmp.y23_1 = tmp$ret$0;
    var tmp_0 = this;
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mutableMapOf' call
    tmp$ret$1 = LinkedHashMap_init_$Create$();
    tmp_0.z23_1 = tmp$ret$1;
    this.a24_1 = 0;
  }
  ComparableStyleScope.prototype.p1x = function (propertyName, value) {
    // Inline function 'kotlin.collections.set' call
    var tmp0_set = this.y23_1;
    var tmp1_set = toString_2(value);
    tmp0_set.a(propertyName, tmp1_set);
  };
  ComparableStyleScope.prototype.s1x = function (variableName, value) {
    // Inline function 'kotlin.collections.set' call
    var tmp0_set = this.z23_1;
    var tmp1_set = toString_2(value);
    tmp0_set.a(variableName, tmp1_set);
  };
  ComparableStyleScope.prototype.equals = function (other) {
    var tmp;
    var tmp_0;
    if (other instanceof ComparableStyleScope) {
      tmp_0 = equals_0(this.y23_1, other.y23_1);
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = equals_0(this.z23_1, other.z23_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  ComparableStyleScope.prototype.hashCode = function () {
    var result = hashCode_0(this.y23_1);
    result = imul(31, result) + hashCode_0(this.z23_1) | 0;
    return result;
  };
  ComparableStyleScope.$metadata$ = classMeta('ComparableStyleScope', [StyleScope]);
  function isNotEmpty_2(_this__u8e3s4) {
    var tmp;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.isNotEmpty' call
    var tmp0_isNotEmpty = _this__u8e3s4.y23_1;
    tmp$ret$0 = !tmp0_isNotEmpty.i();
    if (tmp$ret$0) {
      tmp = true;
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.collections.isNotEmpty' call
      var tmp1_isNotEmpty = _this__u8e3s4.z23_1;
      tmp$ret$1 = !tmp1_isNotEmpty.i();
      tmp = tmp$ret$1;
    }
    return tmp;
  }
  function Companion_29() {
    Companion_instance_29 = this;
  }
  Companion_29.prototype.b24 = function () {
    return new Cursor('pointer');
  };
  Companion_29.prototype.c24 = function () {
    return new Cursor('not-allowed');
  };
  Companion_29.$metadata$ = objectMeta('Companion');
  var Companion_instance_29;
  function Companion_getInstance_29() {
    if (Companion_instance_29 == null)
      new Companion_29();
    return Companion_instance_29;
  }
  function Cursor(value) {
    Companion_getInstance_29();
    this.d24_1 = value;
    this.e24_1 = 0;
  }
  Cursor.$metadata$ = classMeta('Cursor');
  function cursor(_this__u8e3s4, cursor) {
    _this__u8e3s4.q1x('cursor', cursor.d24_1);
  }
  function disabled(_this__u8e3s4) {
    _this__u8e3s4.p1s('disabled', 'true');
  }
  function Companion_30() {
    Companion_instance_30 = this;
  }
  Companion_30.prototype.f24 = function () {
    return new ObjectFit('scale-down');
  };
  Companion_30.$metadata$ = objectMeta('Companion');
  var Companion_instance_30;
  function Companion_getInstance_30() {
    if (Companion_instance_30 == null)
      new Companion_30();
    return Companion_instance_30;
  }
  function ObjectFit(value) {
    Companion_getInstance_30();
    this.g24_1 = value;
    this.h24_1 = 0;
  }
  ObjectFit.$metadata$ = classMeta('ObjectFit');
  function objectFit(_this__u8e3s4, objectFit) {
    _this__u8e3s4.q1x('object-fit', objectFit.g24_1);
  }
  function outline(_this__u8e3s4, width, style, color) {
    // Inline function 'com.varabyte.kobweb.compose.css.outline' call
    var tmp$ret$0;
    // Inline function 'kotlin.apply' call
    var tmp0_apply = new CSSOutline();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'com.varabyte.kobweb.compose.css.outline.<anonymous>' call
    tmp0_apply.i24_1 = width;
    tmp0_apply.j24_1 = style;
    tmp0_apply.k24_1 = color;
    tmp$ret$0 = tmp0_apply;
    _this__u8e3s4.p1x('outline', tmp$ret$0);
  }
  function outline_0(_this__u8e3s4, outlineBuilder) {
    var tmp$ret$0;
    // Inline function 'kotlin.apply' call
    var tmp0_apply = new CSSOutline();
    // Inline function 'kotlin.contracts.contract' call
    outlineBuilder(tmp0_apply);
    tmp$ret$0 = tmp0_apply;
    _this__u8e3s4.p1x('outline', tmp$ret$0);
  }
  function CSSOutline() {
    this.i24_1 = null;
    this.j24_1 = null;
    this.k24_1 = null;
    this.l24_1 = 8;
  }
  CSSOutline.prototype.m24 = function (_set____db54di) {
    this.i24_1 = _set____db54di;
  };
  CSSOutline.prototype.n24 = function (_set____db54di) {
    this.j24_1 = _set____db54di;
  };
  CSSOutline.prototype.o24 = function (_set____db54di) {
    this.k24_1 = _set____db54di;
  };
  CSSOutline.prototype.equals = function (other) {
    var tmp;
    if (other instanceof CSSOutline) {
      tmp = (equals_0(this.i24_1, other.i24_1) ? equals_0(this.j24_1, other.j24_1) : false) ? equals_0(this.k24_1, other.k24_1) : false;
    } else {
      tmp = false;
    }
    return tmp;
  };
  CSSOutline.prototype.toString = function () {
    var values = listOfNotNull([this.k24_1, this.j24_1, this.i24_1]);
    return joinToString$default_0(values, ' ', null, null, 0, null, null, 62, null);
  };
  CSSOutline.$metadata$ = classMeta('CSSOutline');
  function Companion_31() {
    Companion_instance_31 = this;
  }
  Companion_31.prototype.f1w = function () {
    return new UserSelect('none');
  };
  Companion_31.$metadata$ = objectMeta('Companion');
  var Companion_instance_31;
  function Companion_getInstance_31() {
    if (Companion_instance_31 == null)
      new Companion_31();
    return Companion_instance_31;
  }
  function UserSelect(value) {
    Companion_getInstance_31();
    this.p24_1 = value;
    this.q24_1 = 0;
  }
  UserSelect.$metadata$ = classMeta('UserSelect');
  function Companion_32() {
    Companion_instance_32 = this;
  }
  Companion_32.prototype.r24 = function () {
    return new TextDecorationLine('underline');
  };
  Companion_32.prototype.f1w = function () {
    return new TextDecorationLine('none');
  };
  Companion_32.$metadata$ = objectMeta('Companion');
  var Companion_instance_32;
  function Companion_getInstance_32() {
    if (Companion_instance_32 == null)
      new Companion_32();
    return Companion_instance_32;
  }
  function TextDecorationLine(value) {
    Companion_getInstance_32();
    this.s24_1 = value;
    this.t24_1 = 0;
  }
  TextDecorationLine.$metadata$ = classMeta('TextDecorationLine');
  function Companion_33() {
    Companion_instance_33 = this;
  }
  Companion_33.prototype.u24 = function () {
    return new WhiteSpace('pre-wrap');
  };
  Companion_33.$metadata$ = objectMeta('Companion');
  var Companion_instance_33;
  function Companion_getInstance_33() {
    if (Companion_instance_33 == null)
      new Companion_33();
    return Companion_instance_33;
  }
  function WhiteSpace(value) {
    Companion_getInstance_33();
    this.v24_1 = value;
    this.w24_1 = 0;
  }
  WhiteSpace.$metadata$ = classMeta('WhiteSpace');
  function userSelect(_this__u8e3s4, userSelect) {
    _this__u8e3s4.q1x('user-select', userSelect.p24_1);
  }
  function textDecorationLine(_this__u8e3s4, textDecorationLines) {
    _this__u8e3s4.q1x('text-decoration-line', joinToString$default(textDecorationLines, ' ', null, null, 0, null, textDecorationLine$lambda, 30, null));
  }
  function whiteSpace(_this__u8e3s4, whiteSpace) {
    _this__u8e3s4.q1x('white-space', whiteSpace.v24_1);
  }
  function textDecorationLine$lambda(it) {
    return it.s24_1;
  }
  function Companion_34() {
    Companion_instance_34 = this;
  }
  Companion_34.prototype.x24 = function () {
    return new TransitionDuration('inherit');
  };
  Companion_34.$metadata$ = objectMeta('Companion');
  var Companion_instance_34;
  function Companion_getInstance_34() {
    if (Companion_instance_34 == null)
      new Companion_34();
    return Companion_instance_34;
  }
  function TransitionDuration(value) {
    Companion_getInstance_34();
    this.y24_1 = value;
    this.z24_1 = 0;
  }
  TransitionDuration.$metadata$ = classMeta('TransitionDuration');
  function Companion_35() {
    Companion_instance_35 = this;
  }
  Companion_35.prototype.x24 = function () {
    return new TransitionProperty('inherit');
  };
  Companion_35.$metadata$ = objectMeta('Companion');
  var Companion_instance_35;
  function Companion_getInstance_35() {
    if (Companion_instance_35 == null)
      new Companion_35();
    return Companion_instance_35;
  }
  function TransitionProperty(value) {
    Companion_getInstance_35();
    this.a25_1 = value;
    this.b25_1 = 0;
  }
  TransitionProperty.$metadata$ = classMeta('TransitionProperty');
  function transitionDuration(_this__u8e3s4, duration) {
    _this__u8e3s4.q1x('transition-duration', joinToString$default(duration, null, null, null, 0, null, null, 63, null));
  }
  function transitionProperty(_this__u8e3s4, properties) {
    _this__u8e3s4.q1x('transition-property', joinToString$default(properties, null, null, null, 0, null, null, 63, null));
  }
  function transitionDuration_0(_this__u8e3s4, duration) {
    _this__u8e3s4.q1x('transition-duration', duration.y24_1);
  }
  function transitionProperty_0(_this__u8e3s4, property) {
    transitionProperty(_this__u8e3s4, [property.a25_1]);
  }
  function clearFocus(_this__u8e3s4) {
    var dynElement = _this__u8e3s4;
    dynElement.blur();
  }
  function _no_name_provided__qut3iv_7() {
  }
  _no_name_provided__qut3iv_7.prototype.pi = function () {
    var tmp$ret$0;
    // Inline function 'com.varabyte.kobweb.compose.dom.Simple.invoke.<anonymous>' call
    tmp$ret$0 = Unit_getInstance();
  };
  _no_name_provided__qut3iv_7.$metadata$ = classMeta(undefined, [DisposableEffectResult]);
  function Simple(handle) {
    RefCallback.call(this);
    this.c25_1 = handle;
    this.d25_1 = 0;
  }
  Simple.prototype.e25 = function (scope, element) {
    this.c25_1(element);
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.DisposableEffectScope.onDispose' call
    tmp$ret$0 = new _no_name_provided__qut3iv_7();
    return tmp$ret$0;
  };
  Simple.$metadata$ = classMeta('Simple', undefined, undefined, undefined, undefined, RefCallback.prototype);
  function RefCallback() {
  }
  RefCallback.$metadata$ = classMeta('RefCallback');
  function KeysToEffect(keys, refCallback) {
    this.f25_1 = keys;
    this.g25_1 = refCallback;
  }
  KeysToEffect.prototype.m2 = function () {
    return this.f25_1;
  };
  KeysToEffect.prototype.h25 = function () {
    return this.g25_1;
  };
  KeysToEffect.prototype.toString = function () {
    return 'KeysToEffect(keys=' + this.f25_1 + ', refCallback=' + this.g25_1 + ')';
  };
  KeysToEffect.prototype.hashCode = function () {
    var result = hashCode_0(this.f25_1);
    result = imul(result, 31) + hashCode_0(this.g25_1) | 0;
    return result;
  };
  KeysToEffect.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof KeysToEffect))
      return false;
    var tmp0_other_with_cast = other instanceof KeysToEffect ? other : THROW_CCE();
    if (!equals_0(this.f25_1, tmp0_other_with_cast.f25_1))
      return false;
    if (!equals_0(this.g25_1, tmp0_other_with_cast.g25_1))
      return false;
    return true;
  };
  KeysToEffect.$metadata$ = classMeta('KeysToEffect');
  function Builder_2() {
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$0 = ArrayList_init_$Create$();
    tmp.i25_1 = tmp$ret$0;
    this.j25_1 = 8;
  }
  Builder_2.prototype.k25 = function (keys, handle) {
    this.i25_1.b(new KeysToEffect(toList(keys), new Simple(handle)));
  };
  Builder_2.prototype.dy = function () {
    return new ElementRefScope(this.i25_1);
  };
  Builder_2.$metadata$ = classMeta('Builder');
  function ElementRefScope(keyedCallbacks) {
    this.l25_1 = keyedCallbacks;
    this.m25_1 = 8;
  }
  ElementRefScope.prototype.toString = function () {
    return 'ElementRefScope(keyedCallbacks=' + this.l25_1 + ')';
  };
  ElementRefScope.prototype.hashCode = function () {
    return hashCode_0(this.l25_1);
  };
  ElementRefScope.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof ElementRefScope))
      return false;
    var tmp0_other_with_cast = other instanceof ElementRefScope ? other : THROW_CCE();
    if (!equals_0(this.l25_1, tmp0_other_with_cast.l25_1))
      return false;
    return true;
  };
  ElementRefScope.$metadata$ = classMeta('ElementRefScope');
  function ref(keys, handle) {
    return refScope(ref$lambda(keys, handle));
  }
  function registerRefScope$composable(_this__u8e3s4, scope, $composer, $changed) {
    var $composer_0 = $composer;
    $composer_0.ks(1682539725);
    sourceInformation($composer_0, 'C(registerRefScope$composable)');
    if (isTraceInProgress()) {
      traceEventStart(1682539725, $changed, -1, 'com.varabyte.kobweb.compose.dom.registerRefScope$composable (ElementRefScope.kt:72)');
    }
    if (scope == null) {
      if (isTraceInProgress()) {
        traceEventEnd();
      }
      $composer_0.os();
      return Unit_getInstance();
    }
    // Inline function 'kotlin.collections.forEach' call
    var tmp0_forEach = scope.l25_1;
    var tmp0_iterator = tmp0_forEach.d();
    while (tmp0_iterator.e()) {
      var element = tmp0_iterator.f();
      // Inline function 'com.varabyte.kobweb.compose.dom.registerRefScope$composable.<anonymous>' call
      var tmp$ret$0;
      // Inline function 'kotlin.collections.toTypedArray' call
      var tmp0_toTypedArray = element.f25_1;
      tmp$ret$0 = copyToArray(tmp0_toTypedArray);
      var tmp = tmp$ret$0.slice();
      DisposableEffect$composable_0(tmp, registerRefScope$composable$lambda(element, _this__u8e3s4), $composer_0, 0);
    }
    if (isTraceInProgress()) {
      traceEventEnd();
    }
    $composer_0.os();
  }
  function refScope(init) {
    var tmp$ret$2;
    // Inline function 'kotlin.run' call
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$1;
    // Inline function 'com.varabyte.kobweb.compose.dom.refScope.<anonymous>' call
    var tmp$ret$0;
    // Inline function 'kotlin.apply' call
    var tmp0_apply = new Builder_2();
    // Inline function 'kotlin.contracts.contract' call
    init(tmp0_apply);
    tmp$ret$0 = tmp0_apply;
    tmp$ret$1 = tmp$ret$0.dy();
    tmp$ret$2 = tmp$ret$1;
    return tmp$ret$2;
  }
  function ref$lambda($keys, $handle) {
    return function ($this$refScope) {
      $this$refScope.k25($keys.slice(), $handle);
      return Unit_getInstance();
    };
  }
  function registerRefScope$composable$lambda($element, $this_registerRefScope$composable) {
    return function ($this$DisposableEffect) {
      return $element.g25_1.e25($this$DisposableEffect, $this_registerRefScope$composable.x1z($this$DisposableEffect));
    };
  }
  function Horizontal() {
  }
  Horizontal.$metadata$ = interfaceMeta('Horizontal');
  function Vertical() {
  }
  Vertical.$metadata$ = interfaceMeta('Vertical');
  function HorizontalOrVertical() {
  }
  HorizontalOrVertical.$metadata$ = interfaceMeta('HorizontalOrVertical', [Horizontal, Vertical]);
  function End() {
    End_instance = this;
    this.n25_1 = 0;
  }
  End.$metadata$ = objectMeta('End', [Horizontal]);
  var End_instance;
  function End_getInstance() {
    if (End_instance == null)
      new End();
    return End_instance;
  }
  function Start() {
    Start_instance = this;
    this.o25_1 = 0;
  }
  Start.$metadata$ = objectMeta('Start', [Horizontal]);
  var Start_instance;
  function Start_getInstance() {
    if (Start_instance == null)
      new Start();
    return Start_instance;
  }
  function Top() {
    Top_instance = this;
    this.p25_1 = 0;
  }
  Top.$metadata$ = objectMeta('Top', [Vertical]);
  var Top_instance;
  function Top_getInstance() {
    if (Top_instance == null)
      new Top();
    return Top_instance;
  }
  function Bottom() {
    Bottom_instance = this;
    this.q25_1 = 0;
  }
  Bottom.$metadata$ = objectMeta('Bottom', [Vertical]);
  var Bottom_instance;
  function Bottom_getInstance() {
    if (Bottom_instance == null)
      new Bottom();
    return Bottom_instance;
  }
  function Center() {
    Center_instance = this;
    this.r25_1 = 0;
  }
  Center.$metadata$ = objectMeta('Center', [HorizontalOrVertical]);
  var Center_instance;
  function Center_getInstance() {
    if (Center_instance == null)
      new Center();
    return Center_instance;
  }
  function SpaceEvenly() {
    SpaceEvenly_instance = this;
    this.s25_1 = 0;
  }
  SpaceEvenly.$metadata$ = objectMeta('SpaceEvenly', [HorizontalOrVertical]);
  var SpaceEvenly_instance;
  function SpaceEvenly_getInstance() {
    if (SpaceEvenly_instance == null)
      new SpaceEvenly();
    return SpaceEvenly_instance;
  }
  function SpaceBetween() {
    SpaceBetween_instance = this;
    this.t25_1 = 0;
  }
  SpaceBetween.$metadata$ = objectMeta('SpaceBetween', [HorizontalOrVertical]);
  var SpaceBetween_instance;
  function SpaceBetween_getInstance() {
    if (SpaceBetween_instance == null)
      new SpaceBetween();
    return SpaceBetween_instance;
  }
  function SpaceAround() {
    SpaceAround_instance = this;
    this.u25_1 = 0;
  }
  SpaceAround.$metadata$ = objectMeta('SpaceAround', [HorizontalOrVertical]);
  var SpaceAround_instance;
  function SpaceAround_getInstance() {
    if (SpaceAround_instance == null)
      new SpaceAround();
    return SpaceAround_instance;
  }
  function FromStyle() {
    FromStyle_instance = this;
    this.v25_1 = 0;
  }
  FromStyle.$metadata$ = objectMeta('FromStyle', [HorizontalOrVertical]);
  var FromStyle_instance;
  function FromStyle_getInstance() {
    if (FromStyle_instance == null)
      new FromStyle();
    return FromStyle_instance;
  }
  function Box$composable(modifier, contentAlignment, ref, content, $composer, $changed, $default) {
    var modifier_0 = {_v: modifier};
    var contentAlignment_0 = {_v: contentAlignment};
    var ref_0 = {_v: ref};
    var content_0 = {_v: content};
    var $composer_0 = $composer;
    $composer_0 = $composer_0.z13(921036704);
    sourceInformation($composer_0, 'C(Box$composable)P(2,1,3)');
    var $dirty = $changed;
    if (!(($default & 1) === 0))
      $dirty = $dirty | 6;
    else if (($changed & 14) === 0)
      $dirty = $dirty | ($composer_0.ps(modifier_0._v) ? 4 : 2);
    if (!(($default & 2) === 0))
      $dirty = $dirty | 48;
    else if (($changed & 112) === 0)
      $dirty = $dirty | ($composer_0.ps(contentAlignment_0._v) ? 32 : 16);
    if (!(($default & 4) === 0))
      $dirty = $dirty | 384;
    else if (($changed & 896) === 0)
      $dirty = $dirty | ($composer_0.ps(ref_0._v) ? 256 : 128);
    if (!(($default & 8) === 0))
      $dirty = $dirty | 3072;
    else if (($changed & 7168) === 0)
      $dirty = $dirty | ($composer_0.ps(content_0._v) ? 2048 : 1024);
    if (!(($dirty & 5851) === 1170) ? true : !$composer_0.d12()) {
      if (!(($default & 1) === 0)) {
        modifier_0._v = Companion_getInstance_36();
      }
      if (!(($default & 2) === 0)) {
        contentAlignment_0._v = TopStart_getInstance();
      }
      if (!(($default & 4) === 0)) {
        ref_0._v = null;
      }
      if (!(($default & 8) === 0)) {
        content_0._v = ComposableSingletons$BoxKt_getInstance().w25_1;
      }
      if (isTraceInProgress()) {
        traceEventStart(921036704, $dirty, -1, 'com.varabyte.kobweb.compose.foundation.layout.Box$composable (Box.kt:20)');
      }
      var tmp = modifier_0._v;
      var tmp_0 = toAttrs(tmp, Box$composable$lambda_0(contentAlignment_0));
      var tmp$ret$6;
      // Inline function 'kotlin.run' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$5;
      // Inline function 'com.varabyte.kobweb.compose.foundation.layout.Box$composable.<anonymous>' call
      var tmp_1 = $composer_0;
      var dispatchReceiver = composableLambda(tmp_1, 721727587, true, Box$composable$lambda_1(ref_0, $dirty, content_0));
      var tmp$ret$4;
      // Inline function 'androidx.compose.runtime.remember$composable' call
      var tmp0_remember$composable = $composer_0;
      var $composer_1 = tmp0_remember$composable;
      $composer_1.ks(-838505973);
      sourceInformation($composer_1, 'C(remember$composable)P(1):Composables.kt#9igjgp');
      var tmp$ret$3;
      // Inline function 'androidx.compose.runtime.cache' call
      var tmp1_cache = $composer_1;
      var tmp2_cache = $composer_1.ps(dispatchReceiver);
      var tmp$ret$2;
      // Inline function 'kotlin.let' call
      var tmp0_let = tmp1_cache.ls();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
      var tmp_2;
      if (tmp2_cache ? true : tmp0_let === Companion_getInstance_8().ns_1) {
        var tmp$ret$0;
        // Inline function 'com.varabyte.kobweb.compose.foundation.layout.Box$composable.<anonymous>.<anonymous>' call
        tmp$ret$0 = ComposableLambda$invoke$ref_5(dispatchReceiver);
        var value = tmp$ret$0;
        tmp1_cache.ms(value);
        tmp_2 = value;
      } else {
        tmp_2 = tmp0_let;
      }
      tmp$ret$1 = tmp_2;
      tmp$ret$2 = tmp$ret$1;
      var tmp_3 = tmp$ret$2;
      tmp$ret$3 = (tmp_3 == null ? true : isObject(tmp_3)) ? tmp_3 : THROW_CCE();
      var tmp0 = tmp$ret$3;
      $composer_1.os();
      tmp$ret$4 = tmp0;
      tmp$ret$5 = tmp$ret$4;
      tmp$ret$6 = tmp$ret$5;
      Div$composable(tmp_0, tmp$ret$6, $composer_0, 48, 0);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    var tmp0_safe_receiver = $composer_0.a14();
    if (tmp0_safe_receiver === null)
      null;
    else {
      tmp0_safe_receiver.b15(Box$composable$lambda$ref(modifier_0, contentAlignment_0, ref_0, content_0, $changed, $default));
    }
  }
  function BoxScope() {
    this.x25_1 = 0;
  }
  BoxScope.$metadata$ = classMeta('BoxScope');
  function ComposableLambda$invoke$ref_4($boundThis) {
    return function (p0, p1, p2) {
      return $boundThis.z1q(p0, p1, p2);
    };
  }
  function ComposableSingletons$BoxKt$lambda_1$lambda_ab4h0h($this$null, $composer, $changed) {
    var $composer_0 = $composer;
    if (!(($changed & 81) === 16) ? true : !$composer_0.d12()) {
      if (isTraceInProgress()) {
        traceEventStart(-1088174424, $changed, -1, 'com.varabyte.kobweb.compose.foundation.layout.ComposableSingletons$BoxKt.lambda-1.<anonymous> (Box.kt:24)');
      }
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    return Unit_getInstance();
  }
  function ComposableSingletons$BoxKt() {
    ComposableSingletons$BoxKt_instance = this;
    var tmp = this;
    tmp.w25_1 = ComposableLambda$invoke$ref_4(composableLambdaInstance(-1088174424, false, ComposableSingletons$BoxKt$lambda_1$lambda_ab4h0h));
  }
  ComposableSingletons$BoxKt.$metadata$ = objectMeta('ComposableSingletons$BoxKt');
  var ComposableSingletons$BoxKt_instance;
  function ComposableSingletons$BoxKt_getInstance() {
    if (ComposableSingletons$BoxKt_instance == null)
      new ComposableSingletons$BoxKt();
    return ComposableSingletons$BoxKt_instance;
  }
  function Box$composable$lambda($modifier, $contentAlignment, $ref, $content, $$changed, $$default, $composer, $force) {
    return Box$composable($modifier._v, $contentAlignment._v, $ref._v, $content._v, $composer, $$changed | 1, $$default);
  }
  function Box$composable$lambda_0($contentAlignment) {
    return function ($this$toAttrs) {
      $this$toAttrs.c1t(['kobweb-box', toClassName_1($contentAlignment._v)]);
      return Unit_getInstance();
    };
  }
  function Box$composable$lambda_1($ref, $$dirty, $content) {
    return function ($this$Div, $composer, $changed) {
      var $composer_0 = $composer;
      var $dirty = $changed;
      var tmp;
      if (($changed & 14) === 0) {
        $dirty = $dirty | ($composer_0.ps($this$Div) ? 4 : 2);
        tmp = Unit_getInstance();
      }
      var tmp_0;
      if (!(($dirty & 91) === 18) ? true : !$composer_0.d12()) {
        if (isTraceInProgress()) {
          traceEventStart(721727587, $dirty, -1, 'com.varabyte.kobweb.compose.foundation.layout.Box$composable.<anonymous> (Box.kt:28)');
        }
        registerRefScope$composable($this$Div, $ref._v, $composer_0, 14 & $dirty | 112 & $$dirty >> 3);
        $content._v(new BoxScope(), $composer_0, 112 & $$dirty >> 6);
        var tmp_1;
        if (isTraceInProgress()) {
          traceEventEnd();
          tmp_1 = Unit_getInstance();
        }
        tmp_0 = tmp_1;
      } else {
        $composer_0.hy();
        tmp_0 = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  function ComposableLambda$invoke$ref_5($boundThis) {
    return function (p0, p1, p2) {
      return $boundThis.z1q(p0, p1, p2);
    };
  }
  function Box$composable$lambda$ref($modifier, $contentAlignment, $ref, $content, $$changed, $$default) {
    return function (p0, p1) {
      Box$composable$lambda($modifier, $contentAlignment, $ref, $content, $$changed, $$default, p0, p1);
      return Unit_getInstance();
    };
  }
  function Column$composable(modifier, verticalArrangement, horizontalAlignment, ref, content, $composer, $changed, $default) {
    var modifier_0 = {_v: modifier};
    var verticalArrangement_0 = {_v: verticalArrangement};
    var horizontalAlignment_0 = {_v: horizontalAlignment};
    var ref_0 = {_v: ref};
    var $composer_0 = $composer;
    $composer_0 = $composer_0.z13(-1435219930);
    sourceInformation($composer_0, 'C(Column$composable)P(2,4,1,3)');
    var $dirty = $changed;
    if (!(($default & 1) === 0))
      $dirty = $dirty | 6;
    else if (($changed & 14) === 0)
      $dirty = $dirty | ($composer_0.ps(modifier_0._v) ? 4 : 2);
    if (!(($default & 2) === 0))
      $dirty = $dirty | 48;
    else if (($changed & 112) === 0)
      $dirty = $dirty | ($composer_0.ps(verticalArrangement_0._v) ? 32 : 16);
    if (!(($default & 4) === 0))
      $dirty = $dirty | 384;
    else if (($changed & 896) === 0)
      $dirty = $dirty | ($composer_0.ps(horizontalAlignment_0._v) ? 256 : 128);
    if (!(($default & 8) === 0))
      $dirty = $dirty | 3072;
    else if (($changed & 7168) === 0)
      $dirty = $dirty | ($composer_0.ps(ref_0._v) ? 2048 : 1024);
    if (!(($default & 16) === 0))
      $dirty = $dirty | 24576;
    else if (($changed & 57344) === 0)
      $dirty = $dirty | ($composer_0.ps(content) ? 16384 : 8192);
    if (!(($dirty & 46811) === 9362) ? true : !$composer_0.d12()) {
      if (!(($default & 1) === 0)) {
        modifier_0._v = Companion_getInstance_36();
      }
      if (!(($default & 2) === 0)) {
        verticalArrangement_0._v = Top_getInstance();
      }
      if (!(($default & 4) === 0)) {
        horizontalAlignment_0._v = Start_getInstance_0();
      }
      if (!(($default & 8) === 0)) {
        ref_0._v = null;
      }
      if (isTraceInProgress()) {
        traceEventStart(-1435219930, $dirty, -1, 'com.varabyte.kobweb.compose.foundation.layout.Column$composable (Column.kt:20)');
      }
      var tmp = modifier_0._v;
      var tmp_0 = toAttrs(tmp, Column$composable$lambda_0(verticalArrangement_0, horizontalAlignment_0));
      var tmp$ret$6;
      // Inline function 'kotlin.run' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$5;
      // Inline function 'com.varabyte.kobweb.compose.foundation.layout.Column$composable.<anonymous>' call
      var tmp_1 = $composer_0;
      var dispatchReceiver = composableLambda(tmp_1, 1861113368, true, Column$composable$lambda_1(ref_0, $dirty, content));
      var tmp$ret$4;
      // Inline function 'androidx.compose.runtime.remember$composable' call
      var tmp0_remember$composable = $composer_0;
      var $composer_1 = tmp0_remember$composable;
      $composer_1.ks(-838505973);
      sourceInformation($composer_1, 'C(remember$composable)P(1):Composables.kt#9igjgp');
      var tmp$ret$3;
      // Inline function 'androidx.compose.runtime.cache' call
      var tmp1_cache = $composer_1;
      var tmp2_cache = $composer_1.ps(dispatchReceiver);
      var tmp$ret$2;
      // Inline function 'kotlin.let' call
      var tmp0_let = tmp1_cache.ls();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
      var tmp_2;
      if (tmp2_cache ? true : tmp0_let === Companion_getInstance_8().ns_1) {
        var tmp$ret$0;
        // Inline function 'com.varabyte.kobweb.compose.foundation.layout.Column$composable.<anonymous>.<anonymous>' call
        tmp$ret$0 = ComposableLambda$invoke$ref_6(dispatchReceiver);
        var value = tmp$ret$0;
        tmp1_cache.ms(value);
        tmp_2 = value;
      } else {
        tmp_2 = tmp0_let;
      }
      tmp$ret$1 = tmp_2;
      tmp$ret$2 = tmp$ret$1;
      var tmp_3 = tmp$ret$2;
      tmp$ret$3 = (tmp_3 == null ? true : isObject(tmp_3)) ? tmp_3 : THROW_CCE();
      var tmp0 = tmp$ret$3;
      $composer_1.os();
      tmp$ret$4 = tmp0;
      tmp$ret$5 = tmp$ret$4;
      tmp$ret$6 = tmp$ret$5;
      Div$composable(tmp_0, tmp$ret$6, $composer_0, 48, 0);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    var tmp0_safe_receiver = $composer_0.a14();
    if (tmp0_safe_receiver === null)
      null;
    else {
      tmp0_safe_receiver.b15(Column$composable$lambda$ref(modifier_0, verticalArrangement_0, horizontalAlignment_0, ref_0, content, $changed, $default));
    }
  }
  function ColumnScope() {
    this.y25_1 = 0;
  }
  ColumnScope.$metadata$ = classMeta('ColumnScope');
  function Column$composable$lambda($modifier, $verticalArrangement, $horizontalAlignment, $ref, $content, $$changed, $$default, $composer, $force) {
    return Column$composable($modifier._v, $verticalArrangement._v, $horizontalAlignment._v, $ref._v, $content, $composer, $$changed | 1, $$default);
  }
  function Column$composable$lambda_0($verticalArrangement, $horizontalAlignment) {
    return function ($this$toAttrs) {
      $this$toAttrs.c1t(['kobweb-col', toClassName_2($verticalArrangement._v), toClassName($horizontalAlignment._v)]);
      return Unit_getInstance();
    };
  }
  function Column$composable$lambda_1($ref, $$dirty, $content) {
    return function ($this$Div, $composer, $changed) {
      var $composer_0 = $composer;
      var $dirty = $changed;
      var tmp;
      if (($changed & 14) === 0) {
        $dirty = $dirty | ($composer_0.ps($this$Div) ? 4 : 2);
        tmp = Unit_getInstance();
      }
      var tmp_0;
      if (!(($dirty & 91) === 18) ? true : !$composer_0.d12()) {
        if (isTraceInProgress()) {
          traceEventStart(1861113368, $dirty, -1, 'com.varabyte.kobweb.compose.foundation.layout.Column$composable.<anonymous> (Column.kt:29)');
        }
        registerRefScope$composable($this$Div, $ref._v, $composer_0, 14 & $dirty | 112 & $$dirty >> 6);
        $content(new ColumnScope(), $composer_0, 112 & $$dirty >> 9);
        var tmp_1;
        if (isTraceInProgress()) {
          traceEventEnd();
          tmp_1 = Unit_getInstance();
        }
        tmp_0 = tmp_1;
      } else {
        $composer_0.hy();
        tmp_0 = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  function ComposableLambda$invoke$ref_6($boundThis) {
    return function (p0, p1, p2) {
      return $boundThis.z1q(p0, p1, p2);
    };
  }
  function Column$composable$lambda$ref($modifier, $verticalArrangement, $horizontalAlignment, $ref, $content, $$changed, $$default) {
    return function (p0, p1) {
      Column$composable$lambda($modifier, $verticalArrangement, $horizontalAlignment, $ref, $content, $$changed, $$default, p0, p1);
      return Unit_getInstance();
    };
  }
  function RowScope() {
    this.z25_1 = 0;
  }
  RowScope.$metadata$ = classMeta('RowScope');
  function Row$composable(modifier, horizontalArrangement, verticalAlignment, ref, content, $composer, $changed, $default) {
    var modifier_0 = {_v: modifier};
    var horizontalArrangement_0 = {_v: horizontalArrangement};
    var verticalAlignment_0 = {_v: verticalAlignment};
    var ref_0 = {_v: ref};
    var $composer_0 = $composer;
    $composer_0 = $composer_0.z13(2022945866);
    sourceInformation($composer_0, 'C(Row$composable)P(2,1,4,3)');
    var $dirty = $changed;
    if (!(($default & 1) === 0))
      $dirty = $dirty | 6;
    else if (($changed & 14) === 0)
      $dirty = $dirty | ($composer_0.ps(modifier_0._v) ? 4 : 2);
    if (!(($default & 2) === 0))
      $dirty = $dirty | 48;
    else if (($changed & 112) === 0)
      $dirty = $dirty | ($composer_0.ps(horizontalArrangement_0._v) ? 32 : 16);
    if (!(($default & 4) === 0))
      $dirty = $dirty | 384;
    else if (($changed & 896) === 0)
      $dirty = $dirty | ($composer_0.ps(verticalAlignment_0._v) ? 256 : 128);
    if (!(($default & 8) === 0))
      $dirty = $dirty | 3072;
    else if (($changed & 7168) === 0)
      $dirty = $dirty | ($composer_0.ps(ref_0._v) ? 2048 : 1024);
    if (!(($default & 16) === 0))
      $dirty = $dirty | 24576;
    else if (($changed & 57344) === 0)
      $dirty = $dirty | ($composer_0.ps(content) ? 16384 : 8192);
    if (!(($dirty & 46811) === 9362) ? true : !$composer_0.d12()) {
      if (!(($default & 1) === 0)) {
        modifier_0._v = Companion_getInstance_36();
      }
      if (!(($default & 2) === 0)) {
        horizontalArrangement_0._v = Start_getInstance();
      }
      if (!(($default & 4) === 0)) {
        verticalAlignment_0._v = Top_getInstance_0();
      }
      if (!(($default & 8) === 0)) {
        ref_0._v = null;
      }
      if (isTraceInProgress()) {
        traceEventStart(2022945866, $dirty, -1, 'com.varabyte.kobweb.compose.foundation.layout.Row$composable (Row.kt:20)');
      }
      var tmp = modifier_0._v;
      var tmp_0 = toAttrs(tmp, Row$composable$lambda_0(horizontalArrangement_0, verticalAlignment_0));
      var tmp$ret$6;
      // Inline function 'kotlin.run' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$5;
      // Inline function 'com.varabyte.kobweb.compose.foundation.layout.Row$composable.<anonymous>' call
      var tmp_1 = $composer_0;
      var dispatchReceiver = composableLambda(tmp_1, 1725920680, true, Row$composable$lambda_1(ref_0, $dirty, content));
      var tmp$ret$4;
      // Inline function 'androidx.compose.runtime.remember$composable' call
      var tmp0_remember$composable = $composer_0;
      var $composer_1 = tmp0_remember$composable;
      $composer_1.ks(-838505973);
      sourceInformation($composer_1, 'C(remember$composable)P(1):Composables.kt#9igjgp');
      var tmp$ret$3;
      // Inline function 'androidx.compose.runtime.cache' call
      var tmp1_cache = $composer_1;
      var tmp2_cache = $composer_1.ps(dispatchReceiver);
      var tmp$ret$2;
      // Inline function 'kotlin.let' call
      var tmp0_let = tmp1_cache.ls();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
      var tmp_2;
      if (tmp2_cache ? true : tmp0_let === Companion_getInstance_8().ns_1) {
        var tmp$ret$0;
        // Inline function 'com.varabyte.kobweb.compose.foundation.layout.Row$composable.<anonymous>.<anonymous>' call
        tmp$ret$0 = ComposableLambda$invoke$ref_7(dispatchReceiver);
        var value = tmp$ret$0;
        tmp1_cache.ms(value);
        tmp_2 = value;
      } else {
        tmp_2 = tmp0_let;
      }
      tmp$ret$1 = tmp_2;
      tmp$ret$2 = tmp$ret$1;
      var tmp_3 = tmp$ret$2;
      tmp$ret$3 = (tmp_3 == null ? true : isObject(tmp_3)) ? tmp_3 : THROW_CCE();
      var tmp0 = tmp$ret$3;
      $composer_1.os();
      tmp$ret$4 = tmp0;
      tmp$ret$5 = tmp$ret$4;
      tmp$ret$6 = tmp$ret$5;
      Div$composable(tmp_0, tmp$ret$6, $composer_0, 48, 0);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    var tmp0_safe_receiver = $composer_0.a14();
    if (tmp0_safe_receiver === null)
      null;
    else {
      tmp0_safe_receiver.b15(Row$composable$lambda$ref(modifier_0, horizontalArrangement_0, verticalAlignment_0, ref_0, content, $changed, $default));
    }
  }
  function Row$composable$lambda($modifier, $horizontalArrangement, $verticalAlignment, $ref, $content, $$changed, $$default, $composer, $force) {
    return Row$composable($modifier._v, $horizontalArrangement._v, $verticalAlignment._v, $ref._v, $content, $composer, $$changed | 1, $$default);
  }
  function Row$composable$lambda_0($horizontalArrangement, $verticalAlignment) {
    return function ($this$toAttrs) {
      $this$toAttrs.c1t(['kobweb-row', toClassName_3($horizontalArrangement._v), toClassName_0($verticalAlignment._v)]);
      return Unit_getInstance();
    };
  }
  function Row$composable$lambda_1($ref, $$dirty, $content) {
    return function ($this$Div, $composer, $changed) {
      var $composer_0 = $composer;
      var $dirty = $changed;
      var tmp;
      if (($changed & 14) === 0) {
        $dirty = $dirty | ($composer_0.ps($this$Div) ? 4 : 2);
        tmp = Unit_getInstance();
      }
      var tmp_0;
      if (!(($dirty & 91) === 18) ? true : !$composer_0.d12()) {
        if (isTraceInProgress()) {
          traceEventStart(1725920680, $dirty, -1, 'com.varabyte.kobweb.compose.foundation.layout.Row$composable.<anonymous> (Row.kt:29)');
        }
        registerRefScope$composable($this$Div, $ref._v, $composer_0, 14 & $dirty | 112 & $$dirty >> 6);
        $content(new RowScope(), $composer_0, 112 & $$dirty >> 9);
        var tmp_1;
        if (isTraceInProgress()) {
          traceEventEnd();
          tmp_1 = Unit_getInstance();
        }
        tmp_0 = tmp_1;
      } else {
        $composer_0.hy();
        tmp_0 = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  function ComposableLambda$invoke$ref_7($boundThis) {
    return function (p0, p1, p2) {
      return $boundThis.z1q(p0, p1, p2);
    };
  }
  function Row$composable$lambda$ref($modifier, $horizontalArrangement, $verticalAlignment, $ref, $content, $$changed, $$default) {
    return function (p0, p1) {
      Row$composable$lambda($modifier, $horizontalArrangement, $verticalAlignment, $ref, $content, $$changed, $$default, p0, p1);
      return Unit_getInstance();
    };
  }
  function Spacer$composable($composer, $changed) {
    var $composer_0 = $composer;
    $composer_0 = $composer_0.z13(-1458211606);
    sourceInformation($composer_0, 'C(Spacer$composable)');
    if (!($changed === 0) ? true : !$composer_0.d12()) {
      if (isTraceInProgress()) {
        traceEventStart(-1458211606, $changed, -1, 'com.varabyte.kobweb.compose.foundation.layout.Spacer$composable (Spacer.kt:10)');
      }
      var tmp$ret$4;
      // Inline function 'androidx.compose.runtime.remember$composable' call
      var tmp0_remember$composable = $composer_0;
      var $composer_1 = tmp0_remember$composable;
      $composer_1.ks(547886695);
      sourceInformation($composer_1, 'C(remember$composable):Composables.kt#9igjgp');
      var tmp$ret$3;
      // Inline function 'androidx.compose.runtime.cache' call
      var tmp1_cache = $composer_1;
      var tmp$ret$2;
      // Inline function 'kotlin.let' call
      var tmp0_let = tmp1_cache.ls();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
      var tmp;
      if (false ? true : tmp0_let === Companion_getInstance_8().ns_1) {
        var tmp$ret$0;
        // Inline function 'com.varabyte.kobweb.compose.foundation.layout.Spacer$composable.<anonymous>' call
        tmp$ret$0 = Spacer$composable$lambda_0;
        var value = tmp$ret$0;
        tmp1_cache.ms(value);
        tmp = value;
      } else {
        tmp = tmp0_let;
      }
      tmp$ret$1 = tmp;
      tmp$ret$2 = tmp$ret$1;
      var tmp_0 = tmp$ret$2;
      tmp$ret$3 = (tmp_0 == null ? true : isObject(tmp_0)) ? tmp_0 : THROW_CCE();
      var tmp0 = tmp$ret$3;
      $composer_1.os();
      tmp$ret$4 = tmp0;
      var tmp_1 = tmp$ret$4;
      Div$composable(tmp_1, null, $composer_0, 0, 2);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    var tmp0_safe_receiver = $composer_0.a14();
    if (tmp0_safe_receiver === null)
      null;
    else {
      tmp0_safe_receiver.b15(Spacer$composable$lambda$ref($changed));
    }
  }
  function Spacer$composable$lambda($$changed, $composer, $force) {
    return Spacer$composable($composer, $$changed | 1);
  }
  function Spacer$composable$lambda_0($this$Div) {
    $this$Div.c1t(['kobweb-spacer']);
    return Unit_getInstance();
  }
  function Spacer$composable$lambda$ref($$changed) {
    return function (p0, p1) {
      Spacer$composable$lambda($$changed, p0, p1);
      return Unit_getInstance();
    };
  }
  function toClassName(_this__u8e3s4) {
    var tmp0_subject = _this__u8e3s4;
    var tmp;
    if (equals_0(tmp0_subject, Start_getInstance_0())) {
      tmp = 'kobweb-align-start';
    } else if (equals_0(tmp0_subject, CenterHorizontally_getInstance())) {
      tmp = 'kobweb-align-center-horiz';
    } else if (equals_0(tmp0_subject, End_getInstance_0())) {
      tmp = 'kobweb-align-end';
    } else {
      noWhenBranchMatchedException();
    }
    return tmp;
  }
  function toClassName_0(_this__u8e3s4) {
    var tmp0_subject = _this__u8e3s4;
    var tmp;
    if (equals_0(tmp0_subject, Top_getInstance_0())) {
      tmp = 'kobweb-align-top';
    } else if (equals_0(tmp0_subject, CenterVertically_getInstance())) {
      tmp = 'kobweb-align-center-vert';
    } else if (equals_0(tmp0_subject, Bottom_getInstance_0())) {
      tmp = 'kobweb-align-bottom';
    } else {
      noWhenBranchMatchedException();
    }
    return tmp;
  }
  function toClassName_1(_this__u8e3s4) {
    var tmp0_subject = _this__u8e3s4;
    var tmp;
    if (equals_0(tmp0_subject, TopStart_getInstance())) {
      tmp = 'kobweb-align-top-start';
    } else if (equals_0(tmp0_subject, TopCenter_getInstance())) {
      tmp = 'kobweb-align-top-center';
    } else if (equals_0(tmp0_subject, TopEnd_getInstance())) {
      tmp = 'kobweb-align-top-end';
    } else if (equals_0(tmp0_subject, CenterStart_getInstance())) {
      tmp = 'kobweb-align-center-start';
    } else if (equals_0(tmp0_subject, Center_getInstance_0())) {
      tmp = 'kobweb-align-center';
    } else if (equals_0(tmp0_subject, CenterEnd_getInstance())) {
      tmp = 'kobweb-align-center-end';
    } else if (equals_0(tmp0_subject, BottomStart_getInstance())) {
      tmp = 'kobweb-align-bottom-start';
    } else if (equals_0(tmp0_subject, BottomCenter_getInstance())) {
      tmp = 'kobweb-align-bottom-center';
    } else if (equals_0(tmp0_subject, BottomEnd_getInstance())) {
      tmp = 'kobweb-align-bottom-end';
    } else if (equals_0(tmp0_subject, FromStyle_getInstance_0())) {
      tmp = 'kobweb-align-from-style';
    } else {
      noWhenBranchMatchedException();
    }
    return tmp;
  }
  function toClassName_2(_this__u8e3s4) {
    var tmp0_subject = _this__u8e3s4;
    var tmp;
    if (equals_0(tmp0_subject, Top_getInstance())) {
      tmp = 'kobweb-arrange-top';
    } else {
      if (equals_0(tmp0_subject, Bottom_getInstance())) {
        tmp = 'kobweb-arrange-bottom';
      } else {
        if (isInterface(tmp0_subject, HorizontalOrVertical)) {
          tmp = toClassName_4(_this__u8e3s4);
        } else {
          noWhenBranchMatchedException();
        }
      }
    }
    return tmp;
  }
  function toClassName_3(_this__u8e3s4) {
    var tmp0_subject = _this__u8e3s4;
    var tmp;
    if (equals_0(tmp0_subject, End_getInstance())) {
      tmp = 'kobweb-arrange-end';
    } else {
      if (equals_0(tmp0_subject, Start_getInstance())) {
        tmp = 'kobweb-arrange-start';
      } else {
        if (isInterface(tmp0_subject, HorizontalOrVertical)) {
          tmp = toClassName_4(_this__u8e3s4);
        } else {
          noWhenBranchMatchedException();
        }
      }
    }
    return tmp;
  }
  function toClassName_4(_this__u8e3s4) {
    var tmp0_subject = _this__u8e3s4;
    var tmp;
    if (equals_0(tmp0_subject, Center_getInstance())) {
      tmp = 'kobweb-arrange-center';
    } else if (equals_0(tmp0_subject, SpaceAround_getInstance())) {
      tmp = 'kobweb-arrange-space-around';
    } else if (equals_0(tmp0_subject, SpaceBetween_getInstance())) {
      tmp = 'kobweb-arrange-space-between';
    } else if (equals_0(tmp0_subject, SpaceEvenly_getInstance())) {
      tmp = 'kobweb-arrange-space-evenly';
    } else if (equals_0(tmp0_subject, FromStyle_getInstance())) {
      tmp = 'kobweb-arrange-from-style';
    } else {
      noWhenBranchMatchedException();
    }
    return tmp;
  }
  function initBox($this) {
    $this.e1z('.kobweb-box', KobwebComposeStyleSheet$initBox$lambda);
    $this.e1z('.kobweb-box > *', KobwebComposeStyleSheet$initBox$lambda_0);
    $this.e1z('.kobweb-box.kobweb-align-top-start', KobwebComposeStyleSheet$initBox$lambda_1);
    $this.e1z('.kobweb-box.kobweb-align-top-center', KobwebComposeStyleSheet$initBox$lambda_2);
    $this.e1z('.kobweb-box.kobweb-align-top-end', KobwebComposeStyleSheet$initBox$lambda_3);
    $this.e1z('.kobweb-box.kobweb-align-center-start', KobwebComposeStyleSheet$initBox$lambda_4);
    $this.e1z('.kobweb-box.kobweb-align-center', KobwebComposeStyleSheet$initBox$lambda_5);
    $this.e1z('.kobweb-box.kobweb-align-center-end', KobwebComposeStyleSheet$initBox$lambda_6);
    $this.e1z('.kobweb-box.kobweb-align-bottom-start', KobwebComposeStyleSheet$initBox$lambda_7);
    $this.e1z('.kobweb-box.kobweb-align-bottom-center', KobwebComposeStyleSheet$initBox$lambda_8);
    $this.e1z('.kobweb-box.kobweb-align-bottom-end', KobwebComposeStyleSheet$initBox$lambda_9);
    $this.e1z('.kobweb-box > .kobweb-align-top-start-self', KobwebComposeStyleSheet$initBox$lambda_10);
    $this.e1z('.kobweb-box > .kobweb-align-top-center-self', KobwebComposeStyleSheet$initBox$lambda_11);
    $this.e1z('.kobweb-box > .kobweb-align-top-end-self', KobwebComposeStyleSheet$initBox$lambda_12);
    $this.e1z('.kobweb-box > .kobweb-align-center-start-self', KobwebComposeStyleSheet$initBox$lambda_13);
    $this.e1z('.kobweb-box > .kobweb-align-center-self', KobwebComposeStyleSheet$initBox$lambda_14);
    $this.e1z('.kobweb-box > .kobweb-align-center-end-self', KobwebComposeStyleSheet$initBox$lambda_15);
    $this.e1z('.kobweb-box > .kobweb-align-bottom-start-self', KobwebComposeStyleSheet$initBox$lambda_16);
    $this.e1z('.kobweb-box > .kobweb-align-bottom-center-self', KobwebComposeStyleSheet$initBox$lambda_17);
    $this.e1z('.kobweb-box > .kobweb-align-bottom-end-self', KobwebComposeStyleSheet$initBox$lambda_18);
  }
  function initRow($this) {
    $this.e1z('.kobweb-row', KobwebComposeStyleSheet$initRow$lambda);
    $this.e1z('.kobweb-row.kobweb-arrange-start', KobwebComposeStyleSheet$initRow$lambda_0);
    $this.e1z('.kobweb-row.kobweb-arrange-center', KobwebComposeStyleSheet$initRow$lambda_1);
    $this.e1z('.kobweb-row.kobweb-arrange-end', KobwebComposeStyleSheet$initRow$lambda_2);
    $this.e1z('.kobweb-row.kobweb-arrange-space-evenly', KobwebComposeStyleSheet$initRow$lambda_3);
    $this.e1z('.kobweb-row.kobweb-arrange-space-between', KobwebComposeStyleSheet$initRow$lambda_4);
    $this.e1z('.kobweb-row.kobweb-arrange-space-around', KobwebComposeStyleSheet$initRow$lambda_5);
    $this.e1z('.kobweb-row.kobweb-align-top', KobwebComposeStyleSheet$initRow$lambda_6);
    $this.e1z('.kobweb-row.kobweb-align-center-vert', KobwebComposeStyleSheet$initRow$lambda_7);
    $this.e1z('.kobweb-row.kobweb-align-bottom', KobwebComposeStyleSheet$initRow$lambda_8);
    $this.e1z('.kobweb-row > .kobweb-align-top-self', KobwebComposeStyleSheet$initRow$lambda_9);
    $this.e1z('.kobweb-row > .kobweb-align-center-vert-self', KobwebComposeStyleSheet$initRow$lambda_10);
    $this.e1z('.kobweb-row > .kobweb-align-bottom-self', KobwebComposeStyleSheet$initRow$lambda_11);
  }
  function initCol($this) {
    $this.e1z('.kobweb-col', KobwebComposeStyleSheet$initCol$lambda);
    $this.e1z('.kobweb-col.kobweb-arrange-top', KobwebComposeStyleSheet$initCol$lambda_0);
    $this.e1z('.kobweb-col.kobweb-arrange-center', KobwebComposeStyleSheet$initCol$lambda_1);
    $this.e1z('.kobweb-col.kobweb-arrange-bottom', KobwebComposeStyleSheet$initCol$lambda_2);
    $this.e1z('.kobweb-col.kobweb-arrange-space-evenly', KobwebComposeStyleSheet$initCol$lambda_3);
    $this.e1z('.kobweb-col.kobweb-arrange-space-between', KobwebComposeStyleSheet$initCol$lambda_4);
    $this.e1z('.kobweb-col.kobweb-arrange-space-around', KobwebComposeStyleSheet$initCol$lambda_5);
    $this.e1z('.kobweb-col.kobweb-align-start', KobwebComposeStyleSheet$initCol$lambda_6);
    $this.e1z('.kobweb-col.kobweb-align-center-horiz', KobwebComposeStyleSheet$initCol$lambda_7);
    $this.e1z('.kobweb-col.kobweb-align-end', KobwebComposeStyleSheet$initCol$lambda_8);
    $this.e1z('.kobweb-col > .kobweb-align-start-self', KobwebComposeStyleSheet$initCol$lambda_9);
    $this.e1z('.kobweb-col > .kobweb-align-center-horiz-self', KobwebComposeStyleSheet$initCol$lambda_10);
    $this.e1z('.kobweb-col > .kobweb-align-end-self', KobwebComposeStyleSheet$initCol$lambda_11);
  }
  function initSpacer($this) {
    $this.e1z('.kobweb-spacer', KobwebComposeStyleSheet$initSpacer$lambda);
  }
  function KobwebComposeStyleSheet$initBox$lambda($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.Grid' call
    var tmp0__get_Grid__7tebaj = Companion_getInstance_20();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.DisplayStyle' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'grid';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    display($this$invoke, tmp$ret$3);
    gridTemplateColumns($this$invoke, '1fr');
    gridTemplateRows($this$invoke, '1fr');
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initBox$lambda_0($this$invoke) {
    gridArea($this$invoke, '1', '1');
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initBox$lambda_1($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.Start' call
    var tmp0__get_Start__yxhtvt = Companion_getInstance_22();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignItems' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'start';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    alignItems($this$invoke, tmp$ret$3);
    justifyItems($this$invoke, Companion_getInstance_27().h1w());
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initBox$lambda_2($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.Start' call
    var tmp0__get_Start__yxhtvt = Companion_getInstance_22();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignItems' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'start';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    alignItems($this$invoke, tmp$ret$3);
    justifyItems($this$invoke, Companion_getInstance_27().g1w());
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initBox$lambda_3($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.Start' call
    var tmp0__get_Start__yxhtvt = Companion_getInstance_22();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignItems' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'start';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    alignItems($this$invoke, tmp$ret$3);
    justifyItems($this$invoke, Companion_getInstance_27().i1w());
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initBox$lambda_4($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.Center' call
    var tmp0__get_Center__b9ugxw = Companion_getInstance_22();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignItems' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'center';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    alignItems($this$invoke, tmp$ret$3);
    justifyItems($this$invoke, Companion_getInstance_27().h1w());
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initBox$lambda_5($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.Center' call
    var tmp0__get_Center__b9ugxw = Companion_getInstance_22();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignItems' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'center';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    alignItems($this$invoke, tmp$ret$3);
    justifyItems($this$invoke, Companion_getInstance_27().g1w());
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initBox$lambda_6($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.Center' call
    var tmp0__get_Center__b9ugxw = Companion_getInstance_22();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignItems' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'center';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    alignItems($this$invoke, tmp$ret$3);
    justifyItems($this$invoke, Companion_getInstance_27().i1w());
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initBox$lambda_7($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.End' call
    var tmp0__get_End__2jiyy8 = Companion_getInstance_22();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignItems' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'end';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    alignItems($this$invoke, tmp$ret$3);
    justifyItems($this$invoke, Companion_getInstance_27().h1w());
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initBox$lambda_8($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.End' call
    var tmp0__get_End__2jiyy8 = Companion_getInstance_22();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignItems' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'end';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    alignItems($this$invoke, tmp$ret$3);
    justifyItems($this$invoke, Companion_getInstance_27().g1w());
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initBox$lambda_9($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.End' call
    var tmp0__get_End__2jiyy8 = Companion_getInstance_22();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignItems' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'end';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    alignItems($this$invoke, tmp$ret$3);
    justifyItems($this$invoke, Companion_getInstance_27().i1w());
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initBox$lambda_10($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.Start' call
    var tmp0__get_Start__yxhtvt = Companion_getInstance_21();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignSelf' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'start';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    alignSelf($this$invoke, tmp$ret$3);
    justifySelf($this$invoke, Companion_getInstance_28().h1w());
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initBox$lambda_11($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.Start' call
    var tmp0__get_Start__yxhtvt = Companion_getInstance_21();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignSelf' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'start';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    alignSelf($this$invoke, tmp$ret$3);
    justifySelf($this$invoke, Companion_getInstance_28().g1w());
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initBox$lambda_12($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.Start' call
    var tmp0__get_Start__yxhtvt = Companion_getInstance_21();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignSelf' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'start';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    alignSelf($this$invoke, tmp$ret$3);
    justifySelf($this$invoke, Companion_getInstance_28().i1w());
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initBox$lambda_13($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.Center' call
    var tmp0__get_Center__b9ugxw = Companion_getInstance_21();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignSelf' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'center';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    alignSelf($this$invoke, tmp$ret$3);
    justifySelf($this$invoke, Companion_getInstance_28().h1w());
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initBox$lambda_14($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.Center' call
    var tmp0__get_Center__b9ugxw = Companion_getInstance_21();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignSelf' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'center';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    alignSelf($this$invoke, tmp$ret$3);
    justifySelf($this$invoke, Companion_getInstance_28().g1w());
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initBox$lambda_15($this$invoke) {
    justifySelf($this$invoke, Companion_getInstance_28().i1w());
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.Center' call
    var tmp0__get_Center__b9ugxw = Companion_getInstance_21();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignSelf' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'center';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    alignSelf($this$invoke, tmp$ret$3);
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initBox$lambda_16($this$invoke) {
    justifySelf($this$invoke, Companion_getInstance_28().h1w());
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.End' call
    var tmp0__get_End__2jiyy8 = Companion_getInstance_21();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignSelf' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'end';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    alignSelf($this$invoke, tmp$ret$3);
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initBox$lambda_17($this$invoke) {
    justifySelf($this$invoke, Companion_getInstance_28().g1w());
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.End' call
    var tmp0__get_End__2jiyy8 = Companion_getInstance_21();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignSelf' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'end';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    alignSelf($this$invoke, tmp$ret$3);
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initBox$lambda_18($this$invoke) {
    justifySelf($this$invoke, Companion_getInstance_28().i1w());
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.End' call
    var tmp0__get_End__2jiyy8 = Companion_getInstance_21();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignSelf' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'end';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    alignSelf($this$invoke, tmp$ret$3);
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initRow$lambda($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.Flex' call
    var tmp0__get_Flex__7sqmag = Companion_getInstance_20();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.DisplayStyle' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'flex';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    display($this$invoke, tmp$ret$3);
    var tmp$ret$7;
    // Inline function 'org.jetbrains.compose.web.css.Companion.Row' call
    var tmp1__get_Row__r63lke = Companion_getInstance_23();
    var tmp$ret$6;
    // Inline function 'org.jetbrains.compose.web.css.FlexDirection' call
    var tmp$ret$5;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$4;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$4 = 'row';
    tmp$ret$5 = tmp$ret$4;
    tmp$ret$6 = tmp$ret$5;
    tmp$ret$7 = tmp$ret$6;
    flexDirection($this$invoke, tmp$ret$7);
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initRow$lambda_0($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.FlexStart' call
    var tmp0__get_FlexStart__h0vpge = Companion_getInstance_24();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.JustifyContent' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'flex-start';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    justifyContent($this$invoke, tmp$ret$3);
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initRow$lambda_1($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.Center' call
    var tmp0__get_Center__b9ugxw = Companion_getInstance_24();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.JustifyContent' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'center';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    justifyContent($this$invoke, tmp$ret$3);
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initRow$lambda_2($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.FlexEnd' call
    var tmp0__get_FlexEnd__mf4z93 = Companion_getInstance_24();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.JustifyContent' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'flex-end';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    justifyContent($this$invoke, tmp$ret$3);
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initRow$lambda_3($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.SpaceEvenly' call
    var tmp0__get_SpaceEvenly__9r8n26 = Companion_getInstance_24();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.JustifyContent' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'space-evenly';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    justifyContent($this$invoke, tmp$ret$3);
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initRow$lambda_4($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.SpaceBetween' call
    var tmp0__get_SpaceBetween__qaore9 = Companion_getInstance_24();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.JustifyContent' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'space-between';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    justifyContent($this$invoke, tmp$ret$3);
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initRow$lambda_5($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.SpaceAround' call
    var tmp0__get_SpaceAround__kc7ie0 = Companion_getInstance_24();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.JustifyContent' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'space-around';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    justifyContent($this$invoke, tmp$ret$3);
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initRow$lambda_6($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.FlexStart' call
    var tmp0__get_FlexStart__h0vpge = Companion_getInstance_22();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignItems' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'flex-start';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    alignItems($this$invoke, tmp$ret$3);
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initRow$lambda_7($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.Center' call
    var tmp0__get_Center__b9ugxw = Companion_getInstance_22();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignItems' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'center';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    alignItems($this$invoke, tmp$ret$3);
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initRow$lambda_8($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.FlexEnd' call
    var tmp0__get_FlexEnd__mf4z93 = Companion_getInstance_22();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignItems' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'flex-end';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    alignItems($this$invoke, tmp$ret$3);
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initRow$lambda_9($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.FlexStart' call
    var tmp0__get_FlexStart__h0vpge = Companion_getInstance_21();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignSelf' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'flex-start';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    alignSelf($this$invoke, tmp$ret$3);
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initRow$lambda_10($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.Center' call
    var tmp0__get_Center__b9ugxw = Companion_getInstance_21();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignSelf' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'center';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    alignSelf($this$invoke, tmp$ret$3);
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initRow$lambda_11($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.FlexEnd' call
    var tmp0__get_FlexEnd__mf4z93 = Companion_getInstance_21();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignSelf' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'flex-end';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    alignSelf($this$invoke, tmp$ret$3);
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initCol$lambda($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.Flex' call
    var tmp0__get_Flex__7sqmag = Companion_getInstance_20();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.DisplayStyle' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'flex';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    display($this$invoke, tmp$ret$3);
    var tmp$ret$7;
    // Inline function 'org.jetbrains.compose.web.css.Companion.Column' call
    var tmp1__get_Column__exgww6 = Companion_getInstance_23();
    var tmp$ret$6;
    // Inline function 'org.jetbrains.compose.web.css.FlexDirection' call
    var tmp$ret$5;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$4;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$4 = 'column';
    tmp$ret$5 = tmp$ret$4;
    tmp$ret$6 = tmp$ret$5;
    tmp$ret$7 = tmp$ret$6;
    flexDirection($this$invoke, tmp$ret$7);
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initCol$lambda_0($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.FlexStart' call
    var tmp0__get_FlexStart__h0vpge = Companion_getInstance_24();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.JustifyContent' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'flex-start';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    justifyContent($this$invoke, tmp$ret$3);
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initCol$lambda_1($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.Center' call
    var tmp0__get_Center__b9ugxw = Companion_getInstance_24();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.JustifyContent' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'center';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    justifyContent($this$invoke, tmp$ret$3);
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initCol$lambda_2($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.FlexEnd' call
    var tmp0__get_FlexEnd__mf4z93 = Companion_getInstance_24();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.JustifyContent' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'flex-end';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    justifyContent($this$invoke, tmp$ret$3);
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initCol$lambda_3($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.SpaceEvenly' call
    var tmp0__get_SpaceEvenly__9r8n26 = Companion_getInstance_24();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.JustifyContent' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'space-evenly';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    justifyContent($this$invoke, tmp$ret$3);
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initCol$lambda_4($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.SpaceBetween' call
    var tmp0__get_SpaceBetween__qaore9 = Companion_getInstance_24();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.JustifyContent' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'space-between';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    justifyContent($this$invoke, tmp$ret$3);
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initCol$lambda_5($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.SpaceAround' call
    var tmp0__get_SpaceAround__kc7ie0 = Companion_getInstance_24();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.JustifyContent' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'space-around';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    justifyContent($this$invoke, tmp$ret$3);
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initCol$lambda_6($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.FlexStart' call
    var tmp0__get_FlexStart__h0vpge = Companion_getInstance_22();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignItems' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'flex-start';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    alignItems($this$invoke, tmp$ret$3);
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initCol$lambda_7($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.Center' call
    var tmp0__get_Center__b9ugxw = Companion_getInstance_22();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignItems' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'center';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    alignItems($this$invoke, tmp$ret$3);
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initCol$lambda_8($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.FlexEnd' call
    var tmp0__get_FlexEnd__mf4z93 = Companion_getInstance_22();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignItems' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'flex-end';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    alignItems($this$invoke, tmp$ret$3);
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initCol$lambda_9($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.FlexStart' call
    var tmp0__get_FlexStart__h0vpge = Companion_getInstance_21();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignSelf' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'flex-start';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    alignSelf($this$invoke, tmp$ret$3);
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initCol$lambda_10($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.Center' call
    var tmp0__get_Center__b9ugxw = Companion_getInstance_21();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignSelf' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'center';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    alignSelf($this$invoke, tmp$ret$3);
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initCol$lambda_11($this$invoke) {
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.FlexEnd' call
    var tmp0__get_FlexEnd__mf4z93 = Companion_getInstance_21();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.AlignSelf' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'flex-end';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    alignSelf($this$invoke, tmp$ret$3);
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet$initSpacer$lambda($this$invoke) {
    flexGrow($this$invoke, 1);
    return Unit_getInstance();
  }
  function KobwebComposeStyleSheet() {
    KobwebComposeStyleSheet_instance = this;
    StyleSheet_init_$Init$(null, false, 3, null, this);
    initBox(this);
    initCol(this);
    initRow(this);
    initSpacer(this);
    this.e26_1 = 0;
  }
  KobwebComposeStyleSheet.prototype.u1y = function (selector, cssRule) {
    return this.t1y(selector, cssRule);
  };
  KobwebComposeStyleSheet.$metadata$ = objectMeta('KobwebComposeStyleSheet', undefined, undefined, undefined, undefined, StyleSheet.prototype);
  var KobwebComposeStyleSheet_instance;
  function KobwebComposeStyleSheet_getInstance() {
    if (KobwebComposeStyleSheet_instance == null)
      new KobwebComposeStyleSheet();
    return KobwebComposeStyleSheet_instance;
  }
  function Vertical_0() {
  }
  Vertical_0.$metadata$ = interfaceMeta('Vertical');
  function Horizontal_0() {
  }
  Horizontal_0.$metadata$ = interfaceMeta('Horizontal');
  function TopStart() {
    TopStart_instance = this;
    this.f26_1 = 0;
  }
  TopStart.$metadata$ = objectMeta('TopStart', [Alignment]);
  var TopStart_instance;
  function TopStart_getInstance() {
    if (TopStart_instance == null)
      new TopStart();
    return TopStart_instance;
  }
  function TopCenter() {
    TopCenter_instance = this;
    this.g26_1 = 0;
  }
  TopCenter.$metadata$ = objectMeta('TopCenter', [Alignment]);
  var TopCenter_instance;
  function TopCenter_getInstance() {
    if (TopCenter_instance == null)
      new TopCenter();
    return TopCenter_instance;
  }
  function TopEnd() {
    TopEnd_instance = this;
    this.h26_1 = 0;
  }
  TopEnd.$metadata$ = objectMeta('TopEnd', [Alignment]);
  var TopEnd_instance;
  function TopEnd_getInstance() {
    if (TopEnd_instance == null)
      new TopEnd();
    return TopEnd_instance;
  }
  function CenterStart() {
    CenterStart_instance = this;
    this.i26_1 = 0;
  }
  CenterStart.$metadata$ = objectMeta('CenterStart', [Alignment]);
  var CenterStart_instance;
  function CenterStart_getInstance() {
    if (CenterStart_instance == null)
      new CenterStart();
    return CenterStart_instance;
  }
  function Center_0() {
    Center_instance_0 = this;
    this.j26_1 = 0;
  }
  Center_0.$metadata$ = objectMeta('Center', [Alignment]);
  var Center_instance_0;
  function Center_getInstance_0() {
    if (Center_instance_0 == null)
      new Center_0();
    return Center_instance_0;
  }
  function CenterEnd() {
    CenterEnd_instance = this;
    this.k26_1 = 0;
  }
  CenterEnd.$metadata$ = objectMeta('CenterEnd', [Alignment]);
  var CenterEnd_instance;
  function CenterEnd_getInstance() {
    if (CenterEnd_instance == null)
      new CenterEnd();
    return CenterEnd_instance;
  }
  function BottomStart() {
    BottomStart_instance = this;
    this.l26_1 = 0;
  }
  BottomStart.$metadata$ = objectMeta('BottomStart', [Alignment]);
  var BottomStart_instance;
  function BottomStart_getInstance() {
    if (BottomStart_instance == null)
      new BottomStart();
    return BottomStart_instance;
  }
  function BottomCenter() {
    BottomCenter_instance = this;
    this.m26_1 = 0;
  }
  BottomCenter.$metadata$ = objectMeta('BottomCenter', [Alignment]);
  var BottomCenter_instance;
  function BottomCenter_getInstance() {
    if (BottomCenter_instance == null)
      new BottomCenter();
    return BottomCenter_instance;
  }
  function BottomEnd() {
    BottomEnd_instance = this;
    this.n26_1 = 0;
  }
  BottomEnd.$metadata$ = objectMeta('BottomEnd', [Alignment]);
  var BottomEnd_instance;
  function BottomEnd_getInstance() {
    if (BottomEnd_instance == null)
      new BottomEnd();
    return BottomEnd_instance;
  }
  function Top_0() {
    Top_instance_0 = this;
    this.o26_1 = 0;
  }
  Top_0.$metadata$ = objectMeta('Top', [Vertical_0]);
  var Top_instance_0;
  function Top_getInstance_0() {
    if (Top_instance_0 == null)
      new Top_0();
    return Top_instance_0;
  }
  function CenterVertically() {
    CenterVertically_instance = this;
    this.p26_1 = 0;
  }
  CenterVertically.$metadata$ = objectMeta('CenterVertically', [Vertical_0]);
  var CenterVertically_instance;
  function CenterVertically_getInstance() {
    if (CenterVertically_instance == null)
      new CenterVertically();
    return CenterVertically_instance;
  }
  function Bottom_0() {
    Bottom_instance_0 = this;
    this.q26_1 = 0;
  }
  Bottom_0.$metadata$ = objectMeta('Bottom', [Vertical_0]);
  var Bottom_instance_0;
  function Bottom_getInstance_0() {
    if (Bottom_instance_0 == null)
      new Bottom_0();
    return Bottom_instance_0;
  }
  function Start_0() {
    Start_instance_0 = this;
    this.r26_1 = 0;
  }
  Start_0.$metadata$ = objectMeta('Start', [Horizontal_0]);
  var Start_instance_0;
  function Start_getInstance_0() {
    if (Start_instance_0 == null)
      new Start_0();
    return Start_instance_0;
  }
  function CenterHorizontally() {
    CenterHorizontally_instance = this;
    this.s26_1 = 0;
  }
  CenterHorizontally.$metadata$ = objectMeta('CenterHorizontally', [Horizontal_0]);
  var CenterHorizontally_instance;
  function CenterHorizontally_getInstance() {
    if (CenterHorizontally_instance == null)
      new CenterHorizontally();
    return CenterHorizontally_instance;
  }
  function End_0() {
    End_instance_0 = this;
    this.t26_1 = 0;
  }
  End_0.$metadata$ = objectMeta('End', [Horizontal_0]);
  var End_instance_0;
  function End_getInstance_0() {
    if (End_instance_0 == null)
      new End_0();
    return End_instance_0;
  }
  function FromStyle_0() {
    FromStyle_instance_0 = this;
    this.u26_1 = 0;
  }
  FromStyle_0.$metadata$ = objectMeta('FromStyle', [Alignment]);
  var FromStyle_instance_0;
  function FromStyle_getInstance_0() {
    if (FromStyle_instance_0 == null)
      new FromStyle_0();
    return FromStyle_instance_0;
  }
  function Alignment() {
  }
  Alignment.$metadata$ = interfaceMeta('Alignment');
  function Element_1() {
  }
  Element_1.$metadata$ = interfaceMeta('Element', [Modifier]);
  function Companion_36() {
    Companion_instance_36 = this;
  }
  Companion_36.prototype.v26 = function (initial, operation) {
    return initial;
  };
  Companion_36.prototype.w26 = function (other) {
    return other;
  };
  Companion_36.$metadata$ = objectMeta('Companion', [Modifier]);
  var Companion_instance_36;
  function Companion_getInstance_36() {
    if (Companion_instance_36 == null)
      new Companion_36();
    return Companion_instance_36;
  }
  function Modifier() {
  }
  Modifier.$metadata$ = interfaceMeta('Modifier');
  function thenIf(_this__u8e3s4, condition, lazyProduce) {
    return _this__u8e3s4.w26(condition ? lazyProduce() : Companion_getInstance_36());
  }
  function thenIf_0(_this__u8e3s4, condition, other) {
    return thenIf(_this__u8e3s4, condition, thenIf$lambda(other));
  }
  function ChainedModifier(current, next) {
    this.x26_1 = current;
    this.y26_1 = next;
  }
  ChainedModifier.prototype.v26 = function (initial, operation) {
    return this.y26_1.v26(this.x26_1.v26(initial, operation), operation);
  };
  ChainedModifier.prototype.equals = function (other) {
    var tmp;
    var tmp_0;
    if (other instanceof ChainedModifier) {
      tmp_0 = equals_0(this.x26_1, other.x26_1);
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = equals_0(this.y26_1, other.y26_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  ChainedModifier.prototype.hashCode = function () {
    return hashCode_0(this.x26_1) + imul(31, hashCode_0(this.y26_1)) | 0;
  };
  ChainedModifier.$metadata$ = classMeta('ChainedModifier', [Modifier]);
  function thenIf$lambda($other) {
    return function () {
      return $other;
    };
  }
  function styleModifier(_this__u8e3s4, styles) {
    return _this__u8e3s4.w26(new StyleModifier(styles));
  }
  function toStyles(_this__u8e3s4, finalHandler) {
    var firstModifier = _this__u8e3s4;
    return toStyles$lambda(firstModifier, finalHandler);
  }
  function toStyles$default(_this__u8e3s4, finalHandler, $mask0, $handler) {
    if (!(($mask0 & 1) === 0))
      finalHandler = null;
    return toStyles(_this__u8e3s4, finalHandler);
  }
  function StyleModifier(styles) {
    this.z26_1 = styles;
    this.a27_1 = 0;
  }
  StyleModifier.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof StyleModifier))
      return false;
    var stylesResolved = new ComparableStyleScope();
    this.z26_1(stylesResolved);
    var otherStylesResolved = new ComparableStyleScope();
    other.z26_1(otherStylesResolved);
    return stylesResolved.equals(otherStylesResolved);
  };
  StyleModifier.prototype.hashCode = function () {
    var stylesResolved = new ComparableStyleScope();
    this.z26_1(stylesResolved);
    return stylesResolved.hashCode();
  };
  StyleModifier.$metadata$ = classMeta('StyleModifier', [WebModifier]);
  function toAttrs(_this__u8e3s4, finalHandler) {
    var firstModifier = _this__u8e3s4;
    return toAttrs$lambda(firstModifier, finalHandler);
  }
  function toAttrs$default(_this__u8e3s4, finalHandler, $mask0, $handler) {
    if (!(($mask0 & 1) === 0))
      finalHandler = null;
    return toAttrs(_this__u8e3s4, finalHandler);
  }
  function attrsModifier(_this__u8e3s4, attrs) {
    return _this__u8e3s4.w26(new AttrsModifier(attrs));
  }
  function WebModifier() {
  }
  WebModifier.$metadata$ = interfaceMeta('WebModifier', [Element_1]);
  function AttrsModifier(attrs) {
    this.b27_1 = attrs;
    this.c27_1 = 0;
  }
  AttrsModifier.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof AttrsModifier))
      return false;
    var attrsResolved = ComparableAttrsScope_init_$Create$();
    this.b27_1(attrsResolved);
    var otherAttrsResolved = ComparableAttrsScope_init_$Create$();
    other.b27_1(otherAttrsResolved);
    return attrsResolved.equals(otherAttrsResolved);
  };
  AttrsModifier.prototype.hashCode = function () {
    var attrsResolved = ComparableAttrsScope_init_$Create$();
    this.b27_1(attrsResolved);
    return attrsResolved.hashCode();
  };
  AttrsModifier.$metadata$ = classMeta('AttrsModifier', [WebModifier]);
  function toStyles$lambda$lambda($this_null) {
    return function (_anonymous_parameter_0__qggqh8, element) {
      var tmp;
      if (element instanceof StyleModifier) {
        tmp = element.z26_1($this_null);
      }
      return Unit_getInstance();
    };
  }
  function toStyles$lambda($firstModifier, $finalHandler) {
    return function ($this$null) {
      $firstModifier.v26(Unit_getInstance(), toStyles$lambda$lambda($this$null));
      var tmp0_safe_receiver = $finalHandler;
      if (tmp0_safe_receiver == null)
        null;
      else
        tmp0_safe_receiver($this$null);
      return Unit_getInstance();
    };
  }
  function toAttrs$lambda$lambda$lambda($element) {
    return function ($this$style) {
      $element.z26_1($this$style);
      return Unit_getInstance();
    };
  }
  function toAttrs$lambda$lambda($this_null) {
    return function (_anonymous_parameter_0__qggqh8, element) {
      var tmp;
      if (element instanceof AttrsModifier) {
        tmp = element.b27_1($this_null);
      } else {
        if (element instanceof StyleModifier) {
          $this_null.a1t(toAttrs$lambda$lambda$lambda(element));
          tmp = Unit_getInstance();
        }
      }
      return Unit_getInstance();
    };
  }
  function toAttrs$lambda($firstModifier, $finalHandler) {
    return function ($this$null) {
      $firstModifier.v26(Unit_getInstance(), toAttrs$lambda$lambda($this$null));
      var tmp0_safe_receiver = $finalHandler;
      if (tmp0_safe_receiver == null)
        null;
      else
        tmp0_safe_receiver($this$null);
      return Unit_getInstance();
    };
  }
  function Rgb(value) {
    this.d27_1 = value;
    this.e27_1 = 0;
  }
  Rgb.prototype.f27 = function () {
    return this.d27_1 >> 16 & 255;
  };
  Rgb.prototype.g27 = function () {
    return this.d27_1 >> 8 & 255;
  };
  Rgb.prototype.h27 = function () {
    return this.d27_1 >> 0 & 255;
  };
  Rgb.prototype.i27 = function () {
    return this.d27_1 >> 24 & 255;
  };
  Rgb.prototype.j27 = function () {
    return toColorFloat(this.f27());
  };
  Rgb.prototype.k27 = function () {
    return toColorFloat(this.g27());
  };
  Rgb.prototype.l27 = function () {
    return toColorFloat(this.h27());
  };
  Rgb.prototype.m27 = function () {
    return toColorFloat(this.i27());
  };
  Rgb.prototype.n27 = function () {
    return Companion_getInstance_37().p27(255 - this.f27() | 0, 255 - this.g27() | 0, 255 - this.h27() | 0, this.i27());
  };
  Rgb.prototype.q27 = function (byPercent) {
    // Inline function 'kotlin.require' call
    var tmp0_require = 0.0 <= byPercent ? byPercent <= 1.0 : false;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'com.varabyte.kobweb.compose.ui.graphics.Rgb.darkened.<anonymous>' call
      tmp$ret$0 = 'Invalid color shifting percent. Expected between 0 and 1, got ' + byPercent;
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString_2(message));
    }
    if (byPercent === 0.0)
      return this;
    var darkeningMultiplier = 1.0 - byPercent;
    return Companion_getInstance_37().r27(this.j27() * darkeningMultiplier, this.k27() * darkeningMultiplier, this.l27() * darkeningMultiplier, this.m27());
  };
  Rgb.prototype.toString = function () {
    return this.i27() === 255 ? 'rgb(' + this.f27() + ', ' + this.g27() + ', ' + this.h27() + ')' : 'rgba(' + this.f27() + ', ' + this.g27() + ', ' + this.h27() + ', ' + this.m27() + ')';
  };
  Rgb.prototype.equals = function (other) {
    if (this === other)
      return true;
    var tmp;
    var tmp_0;
    var tmp_1;
    var tmp_2;
    if (other instanceof Rgb) {
      tmp_2 = this.f27() === other.f27();
    } else {
      tmp_2 = false;
    }
    if (tmp_2) {
      tmp_1 = this.g27() === other.g27();
    } else {
      tmp_1 = false;
    }
    if (tmp_1) {
      tmp_0 = this.h27() === other.h27();
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = this.i27() === other.i27();
    } else {
      tmp = false;
    }
    return tmp;
  };
  Rgb.prototype.hashCode = function () {
    var result = this.f27();
    result = imul(31, result) + this.g27() | 0;
    result = imul(31, result) + this.h27() | 0;
    result = imul(31, result) + this.i27() | 0;
    return result;
  };
  Rgb.$metadata$ = classMeta('Rgb', [Color_1]);
  function Companion_37() {
    Companion_instance_37 = this;
    this.o27_1 = 0.3;
  }
  Companion_37.prototype.s27 = function (r, g, b) {
    return this.p27(r, g, b, 255);
  };
  Companion_37.prototype.p27 = function (r, g, b, a) {
    return new Rgb((r & 255) << 16 | (g & 255) << 8 | (b & 255) << 0 | (a & 255) << 24);
  };
  Companion_37.prototype.r27 = function (r, g, b, a) {
    return this.p27(toColorInt(r), toColorInt(g), toColorInt(b), toColorInt(a));
  };
  Companion_37.$metadata$ = objectMeta('Companion');
  var Companion_instance_37;
  function Companion_getInstance_37() {
    if (Companion_instance_37 == null)
      new Companion_37();
    return Companion_instance_37;
  }
  function Color_1() {
  }
  Color_1.$metadata$ = interfaceMeta('Color');
  function Colors() {
    Colors_instance = this;
    this.t27_1 = 0;
  }
  Colors.prototype.u27 = function () {
    return Companion_getInstance_37().s27(0, 0, 0);
  };
  Colors.prototype.v27 = function () {
    return Companion_getInstance_37().s27(0, 0, 255);
  };
  Colors.prototype.w27 = function () {
    return Companion_getInstance_37().s27(0, 255, 255);
  };
  Colors.prototype.x27 = function () {
    return Companion_getInstance_37().s27(128, 0, 128);
  };
  Colors.prototype.y27 = function () {
    return Companion_getInstance_37().s27(238, 130, 238);
  };
  Colors.prototype.z27 = function () {
    return Companion_getInstance_37().s27(255, 255, 255);
  };
  Colors.$metadata$ = objectMeta('Colors');
  var Colors_instance;
  function Colors_getInstance() {
    if (Colors_instance == null)
      new Colors();
    return Colors_instance;
  }
  function lightened(_this__u8e3s4, byPercent) {
    return _this__u8e3s4.n27().q27(byPercent).n27();
  }
  function toColorFloat(_this__u8e3s4) {
    return (_this__u8e3s4 & 255) / 255.0;
  }
  function toColorInt(_this__u8e3s4) {
    return numberToInt(coerceIn_1(_this__u8e3s4, 0.0, 1.0) * 255.0);
  }
  function alignSelf_0(_this__u8e3s4, alignSelf) {
    return styleModifier(_this__u8e3s4, alignSelf$lambda(alignSelf));
  }
  function alignSelf$lambda($alignSelf) {
    return function ($this$styleModifier) {
      alignSelf($this$styleModifier, $alignSelf);
      return Unit_getInstance();
    };
  }
  function backgroundColor_0(_this__u8e3s4, color) {
    return styleModifier(_this__u8e3s4, backgroundColor$lambda(color));
  }
  function backgroundSize_0(_this__u8e3s4, value) {
    return styleModifier(_this__u8e3s4, backgroundSize$lambda(value));
  }
  function backgroundRepeat_0(_this__u8e3s4, value) {
    return styleModifier(_this__u8e3s4, backgroundRepeat$lambda(value));
  }
  function backgroundImage_0(_this__u8e3s4, value) {
    return styleModifier(_this__u8e3s4, backgroundImage$lambda(value));
  }
  function backgroundColor$lambda($color) {
    return function ($this$styleModifier) {
      backgroundColor($this$styleModifier, $color);
      return Unit_getInstance();
    };
  }
  function backgroundSize$lambda($value) {
    return function ($this$styleModifier) {
      backgroundSize($this$styleModifier, $value);
      return Unit_getInstance();
    };
  }
  function backgroundRepeat$lambda($value) {
    return function ($this$styleModifier) {
      backgroundRepeat($this$styleModifier, $value);
      return Unit_getInstance();
    };
  }
  function backgroundImage$lambda($value) {
    return function ($this$styleModifier) {
      backgroundImage($this$styleModifier, $value);
      return Unit_getInstance();
    };
  }
  function borderWidth_0(_this__u8e3s4, width) {
    return styleModifier(_this__u8e3s4, borderWidth$lambda(width));
  }
  function borderRadius_0(_this__u8e3s4, r) {
    return styleModifier(_this__u8e3s4, borderRadius$lambda(r));
  }
  function borderTop_1(_this__u8e3s4, width, style, color) {
    return styleModifier(_this__u8e3s4, borderTop$lambda(width, style, color));
  }
  function borderWidth$lambda($width) {
    return function ($this$styleModifier) {
      borderWidth($this$styleModifier, $width);
      return Unit_getInstance();
    };
  }
  function borderRadius$lambda($r) {
    return function ($this$styleModifier) {
      borderRadius($this$styleModifier, $r);
      return Unit_getInstance();
    };
  }
  function borderTop$lambda($width, $style, $color) {
    return function ($this$styleModifier) {
      borderTop($this$styleModifier, $width, $style, $color);
      return Unit_getInstance();
    };
  }
  function color_1(_this__u8e3s4, color) {
    return styleModifier(_this__u8e3s4, color$lambda(color));
  }
  function opacity_0(_this__u8e3s4, value) {
    return styleModifier(_this__u8e3s4, opacity$lambda(value));
  }
  function color$lambda($color) {
    return function ($this$styleModifier) {
      color_0($this$styleModifier, $color);
      return Unit_getInstance();
    };
  }
  function opacity$lambda($value) {
    return function ($this$styleModifier) {
      opacity($this$styleModifier, $value);
      return Unit_getInstance();
    };
  }
  function display_0(_this__u8e3s4, value) {
    return styleModifier(_this__u8e3s4, display$lambda(value));
  }
  function display$lambda($value) {
    return function ($this$styleModifier) {
      display($this$styleModifier, $value);
      return Unit_getInstance();
    };
  }
  function classNames(_this__u8e3s4, classes) {
    return attrsModifier(_this__u8e3s4, classNames$lambda(classes));
  }
  function classNames$lambda($classes) {
    return function ($this$attrsModifier) {
      $this$attrsModifier.c1t($classes.slice());
      return Unit_getInstance();
    };
  }
  function disabled_0(_this__u8e3s4) {
    return attrsModifier(_this__u8e3s4, disabled$lambda);
  }
  function disabled$lambda($this$attrsModifier) {
    disabled($this$attrsModifier);
    return Unit_getInstance();
  }
  function userSelect_0(_this__u8e3s4, userSelect) {
    return styleModifier(_this__u8e3s4, userSelect$lambda(userSelect));
  }
  function cursor_0(_this__u8e3s4, cursor) {
    return styleModifier(_this__u8e3s4, cursor$lambda(cursor));
  }
  function onKeyDown_0(_this__u8e3s4, onKeyDown) {
    return attrsModifier(_this__u8e3s4, onKeyDown$lambda(onKeyDown));
  }
  function tabIndex_0(_this__u8e3s4, value) {
    return attrsModifier(_this__u8e3s4, tabIndex$lambda(value));
  }
  function onClick_0(_this__u8e3s4, onClick) {
    return attrsModifier(_this__u8e3s4, onClick$lambda(onClick));
  }
  function userSelect$lambda($userSelect) {
    return function ($this$styleModifier) {
      userSelect($this$styleModifier, $userSelect);
      return Unit_getInstance();
    };
  }
  function cursor$lambda($cursor) {
    return function ($this$styleModifier) {
      cursor($this$styleModifier, $cursor);
      return Unit_getInstance();
    };
  }
  function onKeyDown$lambda$lambda($onKeyDown) {
    return function (evt) {
      $onKeyDown(evt);
      return Unit_getInstance();
    };
  }
  function onKeyDown$lambda($onKeyDown) {
    return function ($this$attrsModifier) {
      $this$attrsModifier.h1t(onKeyDown$lambda$lambda($onKeyDown));
      return Unit_getInstance();
    };
  }
  function tabIndex$lambda($value) {
    return function ($this$attrsModifier) {
      $this$attrsModifier.e1t($value);
      return Unit_getInstance();
    };
  }
  function onClick$lambda$lambda($onClick) {
    return function (evt) {
      $onClick(evt);
      return Unit_getInstance();
    };
  }
  function onClick$lambda($onClick) {
    return function ($this$attrsModifier) {
      $this$attrsModifier.g1t(onClick$lambda$lambda($onClick));
      return Unit_getInstance();
    };
  }
  function padding_0(_this__u8e3s4, topBottom, leftRight) {
    return styleModifier(_this__u8e3s4, padding$lambda(topBottom, leftRight));
  }
  function lineHeight_0(_this__u8e3s4, value) {
    return styleModifier(_this__u8e3s4, lineHeight$lambda(value));
  }
  function width_1(_this__u8e3s4, size, type) {
    var tmp0_subject = type;
    var tmp0 = tmp0_subject.o4_1;
    var tmp;
    switch (tmp0) {
      case 0:
        tmp = attrsModifier(_this__u8e3s4, width$lambda(_this__u8e3s4, size));
        break;
      case 1:
        tmp = styleModifier(_this__u8e3s4, width$lambda_0(size));
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    return tmp;
  }
  function width$default(_this__u8e3s4, size, type, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      type = WebModifierType_STYLE_getInstance();
    return width_1(_this__u8e3s4, size, type);
  }
  function fillMaxWidth(_this__u8e3s4, percent) {
    return styleModifier(_this__u8e3s4, fillMaxWidth$lambda(percent));
  }
  function fillMaxWidth$default(_this__u8e3s4, percent, $mask0, $handler) {
    if (!(($mask0 & 1) === 0))
      percent = get_percent(100);
    return fillMaxWidth(_this__u8e3s4, percent);
  }
  function height_0(_this__u8e3s4, size, type) {
    var tmp0_subject = type;
    var tmp0 = tmp0_subject.o4_1;
    var tmp;
    switch (tmp0) {
      case 0:
        tmp = attrsModifier(_this__u8e3s4, height$lambda(_this__u8e3s4, size));
        break;
      case 1:
        tmp = styleModifier(_this__u8e3s4, height$lambda_0(size));
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    return tmp;
  }
  function height$default(_this__u8e3s4, size, type, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      type = WebModifierType_STYLE_getInstance();
    return height_0(_this__u8e3s4, size, type);
  }
  function fillMaxSize(_this__u8e3s4, percent) {
    return styleModifier(_this__u8e3s4, fillMaxSize$lambda(percent));
  }
  function fillMaxSize$default(_this__u8e3s4, percent, $mask0, $handler) {
    if (!(($mask0 & 1) === 0))
      percent = get_percent(100);
    return fillMaxSize(_this__u8e3s4, percent);
  }
  function margin_0(_this__u8e3s4, top, right, bottom, left) {
    return styleModifier(_this__u8e3s4, margin$lambda(top, right, bottom, left));
  }
  function margin$default(_this__u8e3s4, top, right, bottom, left, $mask0, $handler) {
    if (!(($mask0 & 1) === 0))
      top = get_px(0);
    if (!(($mask0 & 2) === 0))
      right = get_px(0);
    if (!(($mask0 & 4) === 0))
      bottom = get_px(0);
    if (!(($mask0 & 8) === 0))
      left = get_px(0);
    return margin_0(_this__u8e3s4, top, right, bottom, left);
  }
  function margin_1(_this__u8e3s4, topBottom, leftRight) {
    return styleModifier(_this__u8e3s4, margin$lambda_0(topBottom, leftRight));
  }
  function margin_2(_this__u8e3s4, all) {
    return styleModifier(_this__u8e3s4, margin$lambda_1(all));
  }
  function padding_1(_this__u8e3s4, all) {
    return styleModifier(_this__u8e3s4, padding$lambda_0(all));
  }
  function padding$lambda($topBottom, $leftRight) {
    return function ($this$styleModifier) {
      padding($this$styleModifier, [$topBottom, $leftRight]);
      return Unit_getInstance();
    };
  }
  function lineHeight$lambda($value) {
    return function ($this$styleModifier) {
      lineHeight($this$styleModifier, toString_2($value));
      return Unit_getInstance();
    };
  }
  function width$lambda($this_width, $size) {
    return function ($this$attrsModifier) {
      width$default($this_width, $size, null, 2, null);
      return Unit_getInstance();
    };
  }
  function width$lambda_0($size) {
    return function ($this$styleModifier) {
      width_0($this$styleModifier, $size);
      return Unit_getInstance();
    };
  }
  function fillMaxWidth$lambda($percent) {
    return function ($this$styleModifier) {
      width_0($this$styleModifier, $percent);
      return Unit_getInstance();
    };
  }
  function height$lambda($this_height, $size) {
    return function ($this$attrsModifier) {
      height$default($this_height, $size, null, 2, null);
      return Unit_getInstance();
    };
  }
  function height$lambda_0($size) {
    return function ($this$styleModifier) {
      height($this$styleModifier, $size);
      return Unit_getInstance();
    };
  }
  function fillMaxSize$lambda($percent) {
    return function ($this$styleModifier) {
      width_0($this$styleModifier, $percent);
      height($this$styleModifier, $percent);
      return Unit_getInstance();
    };
  }
  function margin$lambda($top, $right, $bottom, $left) {
    return function ($this$styleModifier) {
      margin($this$styleModifier, [$top, $right, $bottom, $left]);
      return Unit_getInstance();
    };
  }
  function margin$lambda_0($topBottom, $leftRight) {
    return function ($this$styleModifier) {
      margin($this$styleModifier, [$topBottom, $leftRight]);
      return Unit_getInstance();
    };
  }
  function margin$lambda_1($all) {
    return function ($this$styleModifier) {
      margin($this$styleModifier, [$all]);
      return Unit_getInstance();
    };
  }
  function padding$lambda_0($all) {
    return function ($this$styleModifier) {
      padding($this$styleModifier, [$all]);
      return Unit_getInstance();
    };
  }
  function objectFit_0(_this__u8e3s4, objectFit) {
    return styleModifier(_this__u8e3s4, objectFit$lambda(objectFit));
  }
  function objectFit$lambda($objectFit) {
    return function ($this$styleModifier) {
      objectFit($this$styleModifier, $objectFit);
      return Unit_getInstance();
    };
  }
  function outline_1(_this__u8e3s4, width, style, color) {
    return styleModifier(_this__u8e3s4, outline$lambda(width, style, color));
  }
  function outline$default(_this__u8e3s4, width, style, color, $mask0, $handler) {
    if (!(($mask0 & 1) === 0))
      width = null;
    if (!(($mask0 & 2) === 0))
      style = null;
    if (!(($mask0 & 4) === 0))
      color = null;
    return outline_1(_this__u8e3s4, width, style, color);
  }
  function outline$lambda($width, $style, $color) {
    return function ($this$styleModifier) {
      outline($this$styleModifier, $width, $style, $color);
      return Unit_getInstance();
    };
  }
  function fontSize_0(_this__u8e3s4, value) {
    return styleModifier(_this__u8e3s4, fontSize$lambda(value));
  }
  function textDecorationLine_0(_this__u8e3s4, textDecorationLine) {
    return styleModifier(_this__u8e3s4, textDecorationLine$lambda_0(textDecorationLine));
  }
  function fontFamily_0(_this__u8e3s4, values) {
    return styleModifier(_this__u8e3s4, fontFamily$lambda_0(values));
  }
  function whiteSpace_0(_this__u8e3s4, whiteSpace) {
    return styleModifier(_this__u8e3s4, whiteSpace$lambda(whiteSpace));
  }
  function fontSize$lambda($value) {
    return function ($this$styleModifier) {
      fontSize($this$styleModifier, $value);
      return Unit_getInstance();
    };
  }
  function textDecorationLine$lambda_0($textDecorationLine) {
    return function ($this$styleModifier) {
      textDecorationLine($this$styleModifier, [$textDecorationLine]);
      return Unit_getInstance();
    };
  }
  function fontFamily$lambda_0($values) {
    return function ($this$styleModifier) {
      fontFamily($this$styleModifier, $values.slice());
      return Unit_getInstance();
    };
  }
  function whiteSpace$lambda($whiteSpace) {
    return function ($this$styleModifier) {
      whiteSpace($this$styleModifier, $whiteSpace);
      return Unit_getInstance();
    };
  }
  function transitionDuration_1(_this__u8e3s4, durations) {
    return styleModifier(_this__u8e3s4, transitionDuration$lambda(durations));
  }
  function transitionProperty_1(_this__u8e3s4, properties) {
    return styleModifier(_this__u8e3s4, transitionProperty$lambda(properties));
  }
  function transitionDuration_2(_this__u8e3s4, duration) {
    return styleModifier(_this__u8e3s4, transitionDuration$lambda_0(duration));
  }
  function transitionProperty_2(_this__u8e3s4, property) {
    return styleModifier(_this__u8e3s4, transitionProperty$lambda_0(property));
  }
  function transitionDuration$lambda($durations) {
    return function ($this$styleModifier) {
      transitionDuration($this$styleModifier, $durations.slice());
      return Unit_getInstance();
    };
  }
  function transitionProperty$lambda($properties) {
    return function ($this$styleModifier) {
      transitionProperty($this$styleModifier, $properties.slice());
      return Unit_getInstance();
    };
  }
  function transitionDuration$lambda_0($duration) {
    return function ($this$styleModifier) {
      transitionDuration_0($this$styleModifier, $duration);
      return Unit_getInstance();
    };
  }
  function transitionProperty$lambda_0($property) {
    return function ($this$styleModifier) {
      transitionProperty_0($this$styleModifier, $property);
      return Unit_getInstance();
    };
  }
  var WebModifierType_ATTRS_instance;
  var WebModifierType_STYLE_instance;
  var WebModifierType_entriesInitialized;
  function WebModifierType_initEntries() {
    if (WebModifierType_entriesInitialized)
      return Unit_getInstance();
    WebModifierType_entriesInitialized = true;
    WebModifierType_ATTRS_instance = new WebModifierType('ATTRS', 0);
    WebModifierType_STYLE_instance = new WebModifierType('STYLE', 1);
  }
  function WebModifierType(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  WebModifierType.$metadata$ = classMeta('WebModifierType', undefined, undefined, undefined, undefined, Enum.prototype);
  function WebModifierType_STYLE_getInstance() {
    WebModifierType_initEntries();
    return WebModifierType_STYLE_instance;
  }
  function InitSilkContext(config, theme) {
    this.a28_1 = config;
    this.b28_1 = theme;
    this.c28_1 = 8;
  }
  InitSilkContext.$metadata$ = classMeta('InitSilkContext');
  function initSilk(additionalInit) {
    var mutableTheme = new MutableSilkTheme();
    mutableTheme.k28(get_ButtonStyle());
    mutableTheme.k28(get_CanvasStyle());
    mutableTheme.k28(get_DividerStyle());
    mutableTheme.k28(get_ImageStyle());
    mutableTheme.k28(get_LinkStyle());
    mutableTheme.k28(get_SimpleGridStyle());
    mutableTheme.k28(get_SurfaceStyle());
    mutableTheme.k28(get_SpanTextStyle());
    mutableTheme.k28(get_DisplayIfSmStyle());
    mutableTheme.k28(get_DisplayIfMdStyle());
    mutableTheme.k28(get_DisplayIfLgStyle());
    mutableTheme.k28(get_DisplayIfXlStyle());
    mutableTheme.k28(get_DisplayUntilSmStyle());
    mutableTheme.k28(get_DisplayUntilMdStyle());
    mutableTheme.k28(get_DisplayUntilLgStyle());
    mutableTheme.k28(get_DisplayUntilXlStyle());
    additionalInit(new InitSilkContext(SilkConfigInstance_getInstance(), mutableTheme));
    set__SilkTheme(new ImmutableSilkTheme(mutableTheme));
    SilkConfigInstance_getInstance().n28(SilkStyleSheet_getInstance());
    get_SilkTheme().n28(SilkStyleSheet_getInstance());
  }
  function SilkStyleSheet() {
    SilkStyleSheet_instance = this;
    StyleSheet_init_$Init$(null, false, 3, null, this);
    this.y28_1 = 0;
  }
  SilkStyleSheet.prototype.u1y = function (selector, cssRule) {
    return this.t1y(selector, cssRule);
  };
  SilkStyleSheet.$metadata$ = objectMeta('SilkStyleSheet', undefined, undefined, undefined, undefined, StyleSheet.prototype);
  var SilkStyleSheet_instance;
  function SilkStyleSheet_getInstance() {
    if (SilkStyleSheet_instance == null)
      new SilkStyleSheet();
    return SilkStyleSheet_instance;
  }
  function get_ButtonStyle() {
    init_properties_Button_kt_184xrc();
    return ButtonStyle;
  }
  var ButtonStyle;
  function Button$composable_0(onClick, modifier, variant, enabled, ref, content, $composer, $changed, $default) {
    init_properties_Button_kt_184xrc();
    var modifier_0 = {_v: modifier};
    var variant_0 = {_v: variant};
    var enabled_0 = {_v: enabled};
    var ref_0 = {_v: ref};
    var $composer_0 = $composer;
    $composer_0 = $composer_0.z13(-1693297779);
    sourceInformation($composer_0, 'C(Button$composable)P(3,2,5,1,4)');
    var $dirty = $changed;
    if (!(($default & 1) === 0))
      $dirty = $dirty | 6;
    else if (($changed & 14) === 0)
      $dirty = $dirty | ($composer_0.ps(onClick) ? 4 : 2);
    if (!(($default & 2) === 0))
      $dirty = $dirty | 48;
    else if (($changed & 112) === 0)
      $dirty = $dirty | ($composer_0.ps(modifier_0._v) ? 32 : 16);
    if (!(($default & 4) === 0))
      $dirty = $dirty | 384;
    else if (($changed & 896) === 0)
      $dirty = $dirty | ($composer_0.ps(variant_0._v) ? 256 : 128);
    if (!(($default & 8) === 0))
      $dirty = $dirty | 3072;
    else if (($changed & 7168) === 0)
      $dirty = $dirty | ($composer_0.r13(enabled_0._v) ? 2048 : 1024);
    if (!(($default & 16) === 0))
      $dirty = $dirty | 24576;
    else if (($changed & 57344) === 0)
      $dirty = $dirty | ($composer_0.ps(ref_0._v) ? 16384 : 8192);
    if (!(($default & 32) === 0))
      $dirty = $dirty | 196608;
    else if (($changed & 458752) === 0)
      $dirty = $dirty | ($composer_0.ps(content) ? 131072 : 65536);
    if (!(($dirty & 374491) === 74898) ? true : !$composer_0.d12()) {
      if (!(($default & 2) === 0)) {
        modifier_0._v = Companion_getInstance_36();
      }
      if (!(($default & 4) === 0)) {
        variant_0._v = null;
      }
      if (!(($default & 8) === 0)) {
        enabled_0._v = true;
      }
      if (!(($default & 16) === 0)) {
        ref_0._v = null;
      }
      if (isTraceInProgress()) {
        traceEventStart(-1693297779, $dirty, -1, 'com.varabyte.kobweb.silk.components.forms.Button$composable (Button.kt:67)');
      }
      var tmp = thenIf_0(toModifier$composable(get_ButtonStyle(), variant_0._v, $composer_0, 112 & $dirty >> 3, 0), !enabled_0._v, disabled_0(Companion_getInstance_36())).w26(modifier_0._v);
      var tmp$ret$4;
      // Inline function 'androidx.compose.runtime.remember$composable' call
      var tmp0_remember$composable = enabled_0._v;
      var tmp1_remember$composable = $composer_0;
      var tmp2_remember$composable = 14 & $dirty >> 9 | 112 & $dirty << 3;
      var $composer_1 = tmp1_remember$composable;
      $composer_1.ks(-1124426577);
      sourceInformation($composer_1, 'C(remember$composable)P(1,2):Composables.kt#9igjgp');
      var tmp$ret$3;
      // Inline function 'androidx.compose.runtime.cache' call
      var tmp1_cache = $composer_1;
      var tmp2_cache = !!($composer_1.ps(tmp0_remember$composable) | $composer_1.ps(onClick));
      var tmp$ret$2;
      // Inline function 'kotlin.let' call
      var tmp0_let = tmp1_cache.ls();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
      var tmp_0;
      if (tmp2_cache ? true : tmp0_let === Companion_getInstance_8().ns_1) {
        var tmp$ret$0;
        // Inline function 'com.varabyte.kobweb.silk.components.forms.Button$composable.<anonymous>' call
        tmp$ret$0 = Button$composable$lambda_1(enabled_0, onClick);
        var value = tmp$ret$0;
        tmp1_cache.ms(value);
        tmp_0 = value;
      } else {
        tmp_0 = tmp0_let;
      }
      tmp$ret$1 = tmp_0;
      tmp$ret$2 = tmp$ret$1;
      var tmp_1 = tmp$ret$2;
      tmp$ret$3 = (tmp_1 == null ? true : isObject(tmp_1)) ? tmp_1 : THROW_CCE();
      var tmp0 = tmp$ret$3;
      $composer_1.os();
      tmp$ret$4 = tmp0;
      var tmp_2 = tabIndex_0(onClick_0(tmp, tmp$ret$4), 0);
      var tmp$ret$9;
      // Inline function 'androidx.compose.runtime.remember$composable' call
      var tmp3_remember$composable = enabled_0._v;
      var tmp4_remember$composable = $composer_0;
      var tmp5_remember$composable = 14 & $dirty >> 9 | 112 & $dirty << 3;
      var $composer_2 = tmp4_remember$composable;
      $composer_2.ks(-1124426577);
      sourceInformation($composer_2, 'C(remember$composable)P(1,2):Composables.kt#9igjgp');
      var tmp$ret$8;
      // Inline function 'androidx.compose.runtime.cache' call
      var tmp1_cache_0 = $composer_2;
      var tmp2_cache_0 = !!($composer_2.ps(tmp3_remember$composable) | $composer_2.ps(onClick));
      var tmp$ret$7;
      // Inline function 'kotlin.let' call
      var tmp0_let_0 = tmp1_cache_0.ls();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$6;
      // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
      var tmp_3;
      if (tmp2_cache_0 ? true : tmp0_let_0 === Companion_getInstance_8().ns_1) {
        var tmp$ret$5;
        // Inline function 'com.varabyte.kobweb.silk.components.forms.Button$composable.<anonymous>' call
        tmp$ret$5 = Button$composable$lambda_2(enabled_0, onClick);
        var value_0 = tmp$ret$5;
        tmp1_cache_0.ms(value_0);
        tmp_3 = value_0;
      } else {
        tmp_3 = tmp0_let_0;
      }
      tmp$ret$6 = tmp_3;
      tmp$ret$7 = tmp$ret$6;
      var tmp_4 = tmp$ret$7;
      tmp$ret$8 = (tmp_4 == null ? true : isObject(tmp_4)) ? tmp_4 : THROW_CCE();
      var tmp0_0 = tmp$ret$8;
      $composer_2.os();
      tmp$ret$9 = tmp0_0;
      var tmp_5 = onKeyDown_0(tmp_2, tmp$ret$9);
      var tmp_6 = toAttrs$default(tmp_5, null, 1, null);
      var tmp$ret$16;
      // Inline function 'kotlin.run' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$15;
      // Inline function 'com.varabyte.kobweb.silk.components.forms.Button$composable.<anonymous>' call
      var tmp_7 = $composer_0;
      var dispatchReceiver = composableLambda(tmp_7, -767825468, true, Button$composable$lambda_3(ref_0, $dirty, content));
      var tmp$ret$14;
      // Inline function 'androidx.compose.runtime.remember$composable' call
      var tmp0_remember$composable_0 = $composer_0;
      var $composer_3 = tmp0_remember$composable_0;
      $composer_3.ks(-838505973);
      sourceInformation($composer_3, 'C(remember$composable)P(1):Composables.kt#9igjgp');
      var tmp$ret$13;
      // Inline function 'androidx.compose.runtime.cache' call
      var tmp1_cache_1 = $composer_3;
      var tmp2_cache_1 = $composer_3.ps(dispatchReceiver);
      var tmp$ret$12;
      // Inline function 'kotlin.let' call
      var tmp0_let_1 = tmp1_cache_1.ls();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$11;
      // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
      var tmp_8;
      if (tmp2_cache_1 ? true : tmp0_let_1 === Companion_getInstance_8().ns_1) {
        var tmp$ret$10;
        // Inline function 'com.varabyte.kobweb.silk.components.forms.Button$composable.<anonymous>.<anonymous>' call
        tmp$ret$10 = ComposableLambda$invoke$ref_8(dispatchReceiver);
        var value_1 = tmp$ret$10;
        tmp1_cache_1.ms(value_1);
        tmp_8 = value_1;
      } else {
        tmp_8 = tmp0_let_1;
      }
      tmp$ret$11 = tmp_8;
      tmp$ret$12 = tmp$ret$11;
      var tmp_9 = tmp$ret$12;
      tmp$ret$13 = (tmp_9 == null ? true : isObject(tmp_9)) ? tmp_9 : THROW_CCE();
      var tmp0_1 = tmp$ret$13;
      $composer_3.os();
      tmp$ret$14 = tmp0_1;
      tmp$ret$15 = tmp$ret$14;
      tmp$ret$16 = tmp$ret$15;
      Button$composable(tmp_6, tmp$ret$16, $composer_0, 48, 0);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    var tmp0_safe_receiver = $composer_0.a14();
    if (tmp0_safe_receiver === null)
      null;
    else {
      tmp0_safe_receiver.b15(Button$composable$lambda$ref_0(onClick, modifier_0, variant_0, enabled_0, ref_0, content, $changed, $default));
    }
  }
  function Button$composable$lambda_0($onClick, $modifier, $variant, $enabled, $ref, $content, $$changed, $$default, $composer, $force) {
    return Button$composable_0($onClick, $modifier._v, $variant._v, $enabled._v, $ref._v, $content, $composer, $$changed | 1, $$default);
  }
  function ButtonStyle$lambda($this$$receiver) {
    init_properties_Button_kt_184xrc();
    var palette = toSilkPalette($this$$receiver.c29_1);
    var buttonColors = palette.h29_1;
    $this$$receiver.n29(ButtonStyle$lambda$lambda(palette, buttonColors));
    var tmp = get_hover_0($this$$receiver);
    tmp.s29(ButtonStyle$lambda$lambda_0(buttonColors));
    var tmp_0 = get_focus($this$$receiver);
    tmp_0.s29(ButtonStyle$lambda$lambda_1(buttonColors));
    var tmp_1 = get_active($this$$receiver);
    tmp_1.s29(ButtonStyle$lambda$lambda_2(buttonColors));
    var tmp_2 = get_disabled($this$$receiver);
    tmp_2.s29(ButtonStyle$lambda$lambda_3(buttonColors));
    return Unit_getInstance();
  }
  function ButtonStyle$lambda$lambda($palette, $buttonColors) {
    return function () {
      var tmp = borderWidth_0(borderRadius_0(padding_0(fontSize_0(lineHeight_0(backgroundColor_0(color_1(Companion_getInstance_36(), $palette.f29_1), $buttonColors.t29_1), 1.2), get_px(16)), get_px(8), get_px(16)), get_px(4)), get_px(0));
      var tmp_0 = get_px(0);
      return userSelect_0(outline$default(tmp, tmp_0, null, null, 6, null), Companion_getInstance_31().f1w());
    };
  }
  function ButtonStyle$lambda$lambda_0($buttonColors) {
    return function () {
      return cursor_0(backgroundColor_0(Companion_getInstance_36(), $buttonColors.u29_1), Companion_getInstance_29().b24());
    };
  }
  function ButtonStyle$lambda$lambda_1($buttonColors) {
    return function () {
      return backgroundColor_0(Companion_getInstance_36(), $buttonColors.u29_1);
    };
  }
  function ButtonStyle$lambda$lambda_2($buttonColors) {
    return function () {
      return backgroundColor_0(Companion_getInstance_36(), $buttonColors.v29_1);
    };
  }
  function ButtonStyle$lambda$lambda_3($buttonColors) {
    return function () {
      return opacity_0(cursor_0(backgroundColor_0(Companion_getInstance_36(), $buttonColors.t29_1), Companion_getInstance_29().c24()), 0.5);
    };
  }
  function Button$composable$lambda_1($enabled, $onClick) {
    return function (evt) {
      var tmp;
      if ($enabled._v) {
        var tmp0_safe_receiver = document.activeElement;
        if (tmp0_safe_receiver == null)
          null;
        else {
          clearFocus(tmp0_safe_receiver);
        }
        tmp = $onClick();
      }
      evt.t20();
      return Unit_getInstance();
    };
  }
  function Button$composable$lambda_2($enabled, $onClick) {
    return function (evt) {
      var tmp;
      if (!$enabled._v) {
        return Unit_getInstance();
      }
      var tmp_0;
      if (evt.k21_1) {
        return Unit_getInstance();
      }
      var tmp_1;
      if (evt.l21_1 === 'Enter') {
        $onClick();
        evt.t20();
        tmp_1 = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  function Button$composable$lambda_3($ref, $$dirty, $content) {
    return function ($this$Button, $composer, $changed) {
      var $composer_0 = $composer;
      var $dirty = $changed;
      var tmp;
      if (($changed & 14) === 0) {
        $dirty = $dirty | ($composer_0.ps($this$Button) ? 4 : 2);
        tmp = Unit_getInstance();
      }
      var tmp_0;
      if (!(($dirty & 91) === 18) ? true : !$composer_0.d12()) {
        if (isTraceInProgress()) {
          traceEventStart(-767825468, $dirty, -1, 'com.varabyte.kobweb.silk.components.forms.Button$composable.<anonymous> (Button.kt:95)');
        }
        registerRefScope$composable($this$Button, $ref._v, $composer_0, 14 & $dirty | 112 & $$dirty >> 9);
        var tmp_1 = Center_getInstance_0();
        Box$composable(null, tmp_1, null, $content, $composer_0, 48 | 7168 & $$dirty >> 6, 5);
        var tmp_2;
        if (isTraceInProgress()) {
          traceEventEnd();
          tmp_2 = Unit_getInstance();
        }
        tmp_0 = tmp_2;
      } else {
        $composer_0.hy();
        tmp_0 = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  function ComposableLambda$invoke$ref_8($boundThis) {
    return function (p0, p1, p2) {
      return $boundThis.z1q(p0, p1, p2);
    };
  }
  function Button$composable$lambda$ref_0($onClick, $modifier, $variant, $enabled, $ref, $content, $$changed, $$default) {
    return function (p0, p1) {
      Button$composable$lambda_0($onClick, $modifier, $variant, $enabled, $ref, $content, $$changed, $$default, p0, p1);
      return Unit_getInstance();
    };
  }
  var properties_initialized_Button_kt_yov184;
  function init_properties_Button_kt_184xrc() {
    if (properties_initialized_Button_kt_yov184) {
    } else {
      properties_initialized_Button_kt_yov184 = true;
      ButtonStyle = ComponentStyle_init_$Create$('silk-button', null, ButtonStyle$lambda, 2, null);
    }
  }
  function get_CanvasStyle() {
    init_properties_Canvas_kt_hurlky();
    return CanvasStyle;
  }
  var CanvasStyle;
  function CanvasStyle$lambda($this$$receiver) {
    init_properties_Canvas_kt_hurlky();
    return Unit_getInstance();
  }
  var properties_initialized_Canvas_kt_i28dei;
  function init_properties_Canvas_kt_hurlky() {
    if (properties_initialized_Canvas_kt_i28dei) {
    } else {
      properties_initialized_Canvas_kt_i28dei = true;
      CanvasStyle = ComponentStyle_init_$Create$('silk-canvas', null, CanvasStyle$lambda, 2, null);
    }
  }
  function get_ImageStyle() {
    init_properties_Image_kt_oroe2h();
    return ImageStyle;
  }
  var ImageStyle;
  var FitWidthImageVariant;
  function ImageStyle$lambda($this$$receiver) {
    init_properties_Image_kt_oroe2h();
    return Unit_getInstance();
  }
  function FitWidthImageVariant$lambda($this$addVariantBase) {
    init_properties_Image_kt_oroe2h();
    var tmp = Companion_getInstance_36();
    var tmp_0 = get_percent(100);
    return objectFit_0(width$default(tmp, tmp_0, null, 2, null), Companion_getInstance_30().f24());
  }
  var properties_initialized_Image_kt_7kjzpx;
  function init_properties_Image_kt_oroe2h() {
    if (properties_initialized_Image_kt_7kjzpx) {
    } else {
      properties_initialized_Image_kt_7kjzpx = true;
      ImageStyle = ComponentStyle_init_$Create$('silk-image', null, ImageStyle$lambda, 2, null);
      var tmp = get_ImageStyle();
      FitWidthImageVariant = addVariantBase$default(tmp, 'fit', null, FitWidthImageVariant$lambda, 2, null);
    }
  }
  function get_DividerStyle() {
    init_properties_Divider_kt_318tqd();
    return DividerStyle;
  }
  var DividerStyle;
  function DividerStyle$lambda($this$base) {
    init_properties_Divider_kt_318tqd();
    var tmp = Companion_getInstance_36();
    var tmp_0 = get_px(1);
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.Solid' call
    var tmp0__get_Solid__yuxops = Companion_getInstance_19();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.LineStyle' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'solid';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    return fillMaxWidth(borderTop_1(tmp, tmp_0, tmp$ret$3, toSilkPalette($this$base.x29()).i29_1), get_percent(90));
  }
  var properties_initialized_Divider_kt_k1kxcn;
  function init_properties_Divider_kt_318tqd() {
    if (properties_initialized_Divider_kt_k1kxcn) {
    } else {
      properties_initialized_Divider_kt_k1kxcn = true;
      var tmp = Companion_getInstance_38();
      DividerStyle = base(tmp, 'silk-divider', DividerStyle$lambda);
    }
  }
  function get_SimpleGridStyle() {
    init_properties_SimpleGrid_kt_7z23b2();
    return SimpleGridStyle;
  }
  var SimpleGridStyle;
  var SimpleGridColumnVariants;
  function get_MAX_COLUMN_COUNT() {
    return MAX_COLUMN_COUNT;
  }
  var MAX_COLUMN_COUNT;
  function SimpleGridStyle$lambda($this$base) {
    init_properties_SimpleGrid_kt_7z23b2();
    var tmp = Companion_getInstance_36();
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.Grid' call
    var tmp0__get_Grid__7tebaj = Companion_getInstance_20();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.DisplayStyle' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'grid';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    return display_0(tmp, tmp$ret$3);
  }
  function SimpleGridColumnVariants$lambda($numColumns) {
    return function ($this$styleModifier) {
      gridTemplateColumns($this$styleModifier, 'repeat(' + $numColumns + ', 1fr)');
      return Unit_getInstance();
    };
  }
  function SimpleGridColumnVariants$lambda$lambda($gridModifier) {
    return function () {
      return $gridModifier;
    };
  }
  function SimpleGridColumnVariants$lambda$lambda_0($gridModifier) {
    return function () {
      return $gridModifier;
    };
  }
  function SimpleGridColumnVariants$lambda_0($isBaseVariant, $element, $gridModifier) {
    return function ($this$addVariant) {
      var tmp;
      if ($isBaseVariant) {
        $this$addVariant.n29(SimpleGridColumnVariants$lambda$lambda($gridModifier));
        tmp = Unit_getInstance();
      } else {
        $this$addVariant.y29($element, SimpleGridColumnVariants$lambda$lambda_0($gridModifier));
        tmp = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  var properties_initialized_SimpleGrid_kt_fum19i;
  function init_properties_SimpleGrid_kt_7z23b2() {
    if (properties_initialized_SimpleGrid_kt_fum19i) {
    } else {
      properties_initialized_SimpleGrid_kt_fum19i = true;
      var tmp = Companion_getInstance_38();
      SimpleGridStyle = base(tmp, 'silk-simple-grid', SimpleGridStyle$lambda);
      var tmp$ret$9;
      // Inline function 'kotlin.run' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$8;
      // Inline function 'com.varabyte.kobweb.silk.components.layout.SimpleGridColumnVariants.<anonymous>' call
      var tmp$ret$7;
      // Inline function 'kotlin.collections.associateWith' call
      var tmp0_associateWith = values();
      var result = LinkedHashMap_init_$Create$_1(coerceAtLeast(mapCapacity(tmp0_associateWith.length), 16));
      var tmp$ret$6;
      // Inline function 'kotlin.collections.associateWithTo' call
      var indexedObject = tmp0_associateWith;
      var inductionVariable = 0;
      var last = indexedObject.length;
      while (inductionVariable < last) {
        var element = indexedObject[inductionVariable];
        inductionVariable = inductionVariable + 1 | 0;
        var tmp$ret$5;
        // Inline function 'com.varabyte.kobweb.silk.components.layout.SimpleGridColumnVariants.<anonymous>.<anonymous>' call
        var isBaseVariant = element.equals(Breakpoint_ZERO_getInstance());
        var tmp_0;
        if (isBaseVariant) {
          tmp_0 = 'base';
        } else {
          var tmp$ret$1;
          // Inline function 'kotlin.text.lowercase' call
          var tmp0_lowercase = element.toString();
          var tmp$ret$0;
          // Inline function 'kotlin.js.asDynamic' call
          tmp$ret$0 = tmp0_lowercase;
          tmp$ret$1 = tmp$ret$0.toLowerCase();
          tmp_0 = tmp$ret$1;
        }
        var name = tmp_0;
        var tmp$ret$4;
        // Inline function 'kotlin.collections.associate' call
        var tmp1_associate = until(0, 4);
        var capacity = coerceAtLeast(mapCapacity(collectionSizeOrDefault(tmp1_associate, 10)), 16);
        var tmp$ret$3;
        // Inline function 'kotlin.collections.associateTo' call
        var tmp1_associateTo = LinkedHashMap_init_$Create$_1(capacity);
        var inductionVariable_0 = tmp1_associate.d1_1;
        var last_0 = tmp1_associate.e1_1;
        if (inductionVariable_0 <= last_0)
          do {
            var element_0 = inductionVariable_0;
            inductionVariable_0 = inductionVariable_0 + 1 | 0;
            // Inline function 'kotlin.collections.plusAssign' call
            var tmp$ret$2;
            // Inline function 'com.varabyte.kobweb.silk.components.layout.SimpleGridColumnVariants.<anonymous>.<anonymous>.<anonymous>' call
            var numColumns = element_0 + 1 | 0;
            var tmp_1 = Companion_getInstance_36();
            var gridModifier = styleModifier(tmp_1, SimpleGridColumnVariants$lambda(numColumns));
            var tmp_2 = get_SimpleGridStyle();
            var tmp_3 = name + '-' + numColumns;
            tmp$ret$2 = to(numColumns, tmp_2.e2a(tmp_3, null, SimpleGridColumnVariants$lambda_0(isBaseVariant, element, gridModifier), 2, null));
            var tmp0_plusAssign = tmp$ret$2;
            tmp1_associateTo.a(tmp0_plusAssign.k_1, tmp0_plusAssign.l_1);
          }
           while (!(element_0 === last_0));
        tmp$ret$3 = tmp1_associateTo;
        tmp$ret$4 = tmp$ret$3;
        var variants = tmp$ret$4;
        tmp$ret$5 = variants;
        result.a(element, tmp$ret$5);
      }
      tmp$ret$6 = result;
      tmp$ret$7 = tmp$ret$6;
      tmp$ret$8 = tmp$ret$7;
      tmp$ret$9 = tmp$ret$8;
      SimpleGridColumnVariants = tmp$ret$9;
    }
  }
  function get_SurfaceStyle() {
    init_properties_Surface_kt_30tndl();
    return SurfaceStyle;
  }
  var SurfaceStyle;
  var AnimatedColorSurfaceVariant;
  function Surface$composable(modifier, variant, ref, content, $composer, $changed, $default) {
    init_properties_Surface_kt_30tndl();
    var modifier_0 = {_v: modifier};
    var variant_0 = {_v: variant};
    var ref_0 = {_v: ref};
    var $composer_0 = $composer;
    $composer_0 = $composer_0.z13(-1300234325);
    sourceInformation($composer_0, 'C(Surface$composable)P(1,3,2)');
    var $dirty = $changed;
    if (($changed & 14) === 0)
      $dirty = $dirty | ((($default & 1) === 0 ? $composer_0.ps(modifier_0._v) : false) ? 4 : 2);
    if (!(($default & 2) === 0))
      $dirty = $dirty | 48;
    else if (($changed & 112) === 0)
      $dirty = $dirty | ($composer_0.ps(variant_0._v) ? 32 : 16);
    if (!(($default & 4) === 0))
      $dirty = $dirty | 384;
    else if (($changed & 896) === 0)
      $dirty = $dirty | ($composer_0.ps(ref_0._v) ? 256 : 128);
    if (!(($default & 8) === 0))
      $dirty = $dirty | 3072;
    else if (($changed & 7168) === 0)
      $dirty = $dirty | ($composer_0.ps(content) ? 2048 : 1024);
    if (!(($dirty & 5851) === 1170) ? true : !$composer_0.d12()) {
      $composer_0.e13();
      if (($changed & 1) === 0 ? true : $composer_0.i13()) {
        if (!(($default & 1) === 0)) {
          var tmp = Companion_getInstance_36();
          modifier_0._v = fillMaxSize$default(tmp, null, 1, null);
          $dirty = $dirty & -15;
        }
        if (!(($default & 2) === 0)) {
          variant_0._v = null;
        }
        if (!(($default & 4) === 0)) {
          ref_0._v = null;
        }
      } else {
        $composer_0.hy();
        if (!(($default & 1) === 0))
          $dirty = $dirty & -15;
      }
      $composer_0.f13();
      if (isTraceInProgress()) {
        traceEventStart(-1300234325, $dirty, -1, 'com.varabyte.kobweb.silk.components.layout.Surface$composable (Surface.kt:58)');
      }
      var tmp_0 = toModifier$composable(get_SurfaceStyle(), variant_0._v, $composer_0, 112 & $dirty, 0).w26(modifier_0._v);
      var tmp_1 = ref_0._v;
      var tmp$ret$6;
      // Inline function 'kotlin.run' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$5;
      // Inline function 'com.varabyte.kobweb.silk.components.layout.Surface$composable.<anonymous>' call
      var tmp_2 = $composer_0;
      var dispatchReceiver = composableLambda(tmp_2, 1273996840, true, Surface$composable$lambda_0(content, $dirty));
      var tmp$ret$4;
      // Inline function 'androidx.compose.runtime.remember$composable' call
      var tmp0_remember$composable = $composer_0;
      var $composer_1 = tmp0_remember$composable;
      $composer_1.ks(-838505973);
      sourceInformation($composer_1, 'C(remember$composable)P(1):Composables.kt#9igjgp');
      var tmp$ret$3;
      // Inline function 'androidx.compose.runtime.cache' call
      var tmp1_cache = $composer_1;
      var tmp2_cache = $composer_1.ps(dispatchReceiver);
      var tmp$ret$2;
      // Inline function 'kotlin.let' call
      var tmp0_let = tmp1_cache.ls();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
      var tmp_3;
      if (tmp2_cache ? true : tmp0_let === Companion_getInstance_8().ns_1) {
        var tmp$ret$0;
        // Inline function 'com.varabyte.kobweb.silk.components.layout.Surface$composable.<anonymous>.<anonymous>' call
        tmp$ret$0 = ComposableLambda$invoke$ref_9(dispatchReceiver);
        var value = tmp$ret$0;
        tmp1_cache.ms(value);
        tmp_3 = value;
      } else {
        tmp_3 = tmp0_let;
      }
      tmp$ret$1 = tmp_3;
      tmp$ret$2 = tmp$ret$1;
      var tmp_4 = tmp$ret$2;
      tmp$ret$3 = (tmp_4 == null ? true : isObject(tmp_4)) ? tmp_4 : THROW_CCE();
      var tmp0 = tmp$ret$3;
      $composer_1.os();
      tmp$ret$4 = tmp0;
      tmp$ret$5 = tmp$ret$4;
      tmp$ret$6 = tmp$ret$5;
      Box$composable(tmp_0, null, tmp_1, tmp$ret$6, $composer_0, 3072 | 896 & $dirty, 2);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    var tmp0_safe_receiver = $composer_0.a14();
    if (tmp0_safe_receiver === null)
      null;
    else {
      tmp0_safe_receiver.b15(Surface$composable$lambda$ref(modifier_0, variant_0, ref_0, content, $changed, $default));
    }
  }
  function Surface$composable$lambda($modifier, $variant, $ref, $content, $$changed, $$default, $composer, $force) {
    return Surface$composable($modifier._v, $variant._v, $ref._v, $content, $composer, $$changed | 1, $$default);
  }
  function SurfaceStyle$lambda($this$$receiver) {
    init_properties_Surface_kt_30tndl();
    $this$$receiver.n29(SurfaceStyle$lambda$lambda($this$$receiver));
    return Unit_getInstance();
  }
  function SurfaceStyle$lambda$lambda($this_$receiver) {
    return function () {
      var palette = toSilkPalette($this_$receiver.c29_1);
      return color_1(backgroundColor_0(Companion_getInstance_36(), palette.e29_1), palette.f29_1);
    };
  }
  function AnimatedColorSurfaceVariant$lambda($this$addVariant) {
    init_properties_Surface_kt_30tndl();
    $this$addVariant.n29(AnimatedColorSurfaceVariant$lambda$lambda);
    $this$addVariant.f2a(' *', AnimatedColorSurfaceVariant$lambda$lambda_0);
    return Unit_getInstance();
  }
  function AnimatedColorSurfaceVariant$lambda$lambda() {
    init_properties_Surface_kt_30tndl();
    return transitionDuration_1(transitionProperty_1(Companion_getInstance_36(), ['background-color']), [get_ms(200)]);
  }
  function AnimatedColorSurfaceVariant$lambda$lambda_0() {
    init_properties_Surface_kt_30tndl();
    return transitionDuration_2(transitionProperty_2(Companion_getInstance_36(), Companion_getInstance_35().x24()), Companion_getInstance_34().x24());
  }
  function Surface$composable$lambda_0($content, $$dirty) {
    return function ($this$Box, $composer, $changed) {
      var $composer_0 = $composer;
      var tmp;
      if (!(($changed & 81) === 16) ? true : !$composer_0.d12()) {
        if (isTraceInProgress()) {
          traceEventStart(1273996840, $changed, -1, 'com.varabyte.kobweb.silk.components.layout.Surface$composable.<anonymous> (Surface.kt:67)');
        }
        $content($composer_0, 14 & $$dirty >> 9);
        var tmp_0;
        if (isTraceInProgress()) {
          traceEventEnd();
          tmp_0 = Unit_getInstance();
        }
        tmp = tmp_0;
      } else {
        $composer_0.hy();
        tmp = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  function ComposableLambda$invoke$ref_9($boundThis) {
    return function (p0, p1, p2) {
      return $boundThis.z1q(p0, p1, p2);
    };
  }
  function Surface$composable$lambda$ref($modifier, $variant, $ref, $content, $$changed, $$default) {
    return function (p0, p1) {
      Surface$composable$lambda($modifier, $variant, $ref, $content, $$changed, $$default, p0, p1);
      return Unit_getInstance();
    };
  }
  var properties_initialized_Surface_kt_k203pf;
  function init_properties_Surface_kt_30tndl() {
    if (properties_initialized_Surface_kt_k203pf) {
    } else {
      properties_initialized_Surface_kt_k203pf = true;
      SurfaceStyle = ComponentStyle_init_$Create$('silk-surface', null, SurfaceStyle$lambda, 2, null);
      var tmp = get_SurfaceStyle();
      AnimatedColorSurfaceVariant = tmp.e2a('animated-color', null, AnimatedColorSurfaceVariant$lambda, 2, null);
    }
  }
  function get_DisplayIfSmStyle() {
    init_properties_BreakpointConditions_kt_u1msxd();
    return DisplayIfSmStyle;
  }
  var DisplayIfSmStyle;
  function get_DisplayIfMdStyle() {
    init_properties_BreakpointConditions_kt_u1msxd();
    return DisplayIfMdStyle;
  }
  var DisplayIfMdStyle;
  function get_DisplayIfLgStyle() {
    init_properties_BreakpointConditions_kt_u1msxd();
    return DisplayIfLgStyle;
  }
  var DisplayIfLgStyle;
  function get_DisplayIfXlStyle() {
    init_properties_BreakpointConditions_kt_u1msxd();
    return DisplayIfXlStyle;
  }
  var DisplayIfXlStyle;
  function get_DisplayUntilSmStyle() {
    init_properties_BreakpointConditions_kt_u1msxd();
    return DisplayUntilSmStyle;
  }
  var DisplayUntilSmStyle;
  function get_DisplayUntilMdStyle() {
    init_properties_BreakpointConditions_kt_u1msxd();
    return DisplayUntilMdStyle;
  }
  var DisplayUntilMdStyle;
  function get_DisplayUntilLgStyle() {
    init_properties_BreakpointConditions_kt_u1msxd();
    return DisplayUntilLgStyle;
  }
  var DisplayUntilLgStyle;
  function get_DisplayUntilXlStyle() {
    init_properties_BreakpointConditions_kt_u1msxd();
    return DisplayUntilXlStyle;
  }
  var DisplayUntilXlStyle;
  function invert(_this__u8e3s4) {
    init_properties_BreakpointConditions_kt_u1msxd();
    return new Raw('not all and ' + _this__u8e3s4);
  }
  function DisplayIfSmStyle$lambda($this$$receiver) {
    init_properties_BreakpointConditions_kt_u1msxd();
    var tmp = invert(toMinWidthQuery(Breakpoint_SM_getInstance()));
    $this$$receiver.g2a(tmp, DisplayIfSmStyle$lambda$lambda);
    return Unit_getInstance();
  }
  function DisplayIfSmStyle$lambda$lambda() {
    init_properties_BreakpointConditions_kt_u1msxd();
    var tmp = Companion_getInstance_36();
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.None' call
    var tmp0__get_None__7x727t = Companion_getInstance_20();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.DisplayStyle' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'none';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    return display_0(tmp, tmp$ret$3);
  }
  function DisplayIfMdStyle$lambda($this$$receiver) {
    init_properties_BreakpointConditions_kt_u1msxd();
    var tmp = invert(toMinWidthQuery(Breakpoint_MD_getInstance()));
    $this$$receiver.g2a(tmp, DisplayIfMdStyle$lambda$lambda);
    return Unit_getInstance();
  }
  function DisplayIfMdStyle$lambda$lambda() {
    init_properties_BreakpointConditions_kt_u1msxd();
    var tmp = Companion_getInstance_36();
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.None' call
    var tmp0__get_None__7x727t = Companion_getInstance_20();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.DisplayStyle' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'none';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    return display_0(tmp, tmp$ret$3);
  }
  function DisplayIfLgStyle$lambda($this$$receiver) {
    init_properties_BreakpointConditions_kt_u1msxd();
    var tmp = invert(toMinWidthQuery(Breakpoint_LG_getInstance()));
    $this$$receiver.g2a(tmp, DisplayIfLgStyle$lambda$lambda);
    return Unit_getInstance();
  }
  function DisplayIfLgStyle$lambda$lambda() {
    init_properties_BreakpointConditions_kt_u1msxd();
    var tmp = Companion_getInstance_36();
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.None' call
    var tmp0__get_None__7x727t = Companion_getInstance_20();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.DisplayStyle' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'none';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    return display_0(tmp, tmp$ret$3);
  }
  function DisplayIfXlStyle$lambda($this$$receiver) {
    init_properties_BreakpointConditions_kt_u1msxd();
    var tmp = invert(toMinWidthQuery(Breakpoint_XL_getInstance()));
    $this$$receiver.g2a(tmp, DisplayIfXlStyle$lambda$lambda);
    return Unit_getInstance();
  }
  function DisplayIfXlStyle$lambda$lambda() {
    init_properties_BreakpointConditions_kt_u1msxd();
    var tmp = Companion_getInstance_36();
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.None' call
    var tmp0__get_None__7x727t = Companion_getInstance_20();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.DisplayStyle' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'none';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    return display_0(tmp, tmp$ret$3);
  }
  function DisplayUntilSmStyle$lambda($this$$receiver) {
    init_properties_BreakpointConditions_kt_u1msxd();
    var tmp = Breakpoint_SM_getInstance();
    $this$$receiver.y29(tmp, DisplayUntilSmStyle$lambda$lambda);
    return Unit_getInstance();
  }
  function DisplayUntilSmStyle$lambda$lambda() {
    init_properties_BreakpointConditions_kt_u1msxd();
    var tmp = Companion_getInstance_36();
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.None' call
    var tmp0__get_None__7x727t = Companion_getInstance_20();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.DisplayStyle' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'none';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    return display_0(tmp, tmp$ret$3);
  }
  function DisplayUntilMdStyle$lambda($this$$receiver) {
    init_properties_BreakpointConditions_kt_u1msxd();
    var tmp = Breakpoint_MD_getInstance();
    $this$$receiver.y29(tmp, DisplayUntilMdStyle$lambda$lambda);
    return Unit_getInstance();
  }
  function DisplayUntilMdStyle$lambda$lambda() {
    init_properties_BreakpointConditions_kt_u1msxd();
    var tmp = Companion_getInstance_36();
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.None' call
    var tmp0__get_None__7x727t = Companion_getInstance_20();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.DisplayStyle' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'none';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    return display_0(tmp, tmp$ret$3);
  }
  function DisplayUntilLgStyle$lambda($this$$receiver) {
    init_properties_BreakpointConditions_kt_u1msxd();
    var tmp = Breakpoint_LG_getInstance();
    $this$$receiver.y29(tmp, DisplayUntilLgStyle$lambda$lambda);
    return Unit_getInstance();
  }
  function DisplayUntilLgStyle$lambda$lambda() {
    init_properties_BreakpointConditions_kt_u1msxd();
    var tmp = Companion_getInstance_36();
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.None' call
    var tmp0__get_None__7x727t = Companion_getInstance_20();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.DisplayStyle' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'none';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    return display_0(tmp, tmp$ret$3);
  }
  function DisplayUntilXlStyle$lambda($this$$receiver) {
    init_properties_BreakpointConditions_kt_u1msxd();
    var tmp = Breakpoint_XL_getInstance();
    $this$$receiver.y29(tmp, DisplayUntilXlStyle$lambda$lambda);
    return Unit_getInstance();
  }
  function DisplayUntilXlStyle$lambda$lambda() {
    init_properties_BreakpointConditions_kt_u1msxd();
    var tmp = Companion_getInstance_36();
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.None' call
    var tmp0__get_None__7x727t = Companion_getInstance_20();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.DisplayStyle' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'none';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    return display_0(tmp, tmp$ret$3);
  }
  var properties_initialized_BreakpointConditions_kt_kx7tgr;
  function init_properties_BreakpointConditions_kt_u1msxd() {
    if (properties_initialized_BreakpointConditions_kt_kx7tgr) {
    } else {
      properties_initialized_BreakpointConditions_kt_kx7tgr = true;
      DisplayIfSmStyle = ComponentStyle_init_$Create$('silk-display-if-sm', null, DisplayIfSmStyle$lambda, 2, null);
      DisplayIfMdStyle = ComponentStyle_init_$Create$('silk-display-if-md', null, DisplayIfMdStyle$lambda, 2, null);
      DisplayIfLgStyle = ComponentStyle_init_$Create$('silk-display-if-lg', null, DisplayIfLgStyle$lambda, 2, null);
      DisplayIfXlStyle = ComponentStyle_init_$Create$('silk-display-if-xl', null, DisplayIfXlStyle$lambda, 2, null);
      DisplayUntilSmStyle = ComponentStyle_init_$Create$('silk-display-until-sm', null, DisplayUntilSmStyle$lambda, 2, null);
      DisplayUntilMdStyle = ComponentStyle_init_$Create$('silk-display-until-md', null, DisplayUntilMdStyle$lambda, 2, null);
      DisplayUntilLgStyle = ComponentStyle_init_$Create$('silk-display-until-lg', null, DisplayUntilLgStyle$lambda, 2, null);
      DisplayUntilXlStyle = ComponentStyle_init_$Create$('silk-display-until-xl', null, DisplayUntilXlStyle$lambda, 2, null);
    }
  }
  function get_LinkStyle() {
    init_properties_Link_kt_r3jso0();
    return LinkStyle;
  }
  var LinkStyle;
  function get_UndecoratedLinkVariant() {
    init_properties_Link_kt_r3jso0();
    return UndecoratedLinkVariant;
  }
  var UndecoratedLinkVariant;
  var UncoloredLinkVariant;
  function LinkStyle$lambda($this$$receiver) {
    init_properties_Link_kt_r3jso0();
    $this$$receiver.n29(LinkStyle$lambda$lambda);
    var linkColors = toSilkPalette($this$$receiver.c29_1).g29_1;
    var tmp = get_link($this$$receiver);
    tmp.s29(LinkStyle$lambda$lambda_0(linkColors));
    var tmp_0 = get_visited($this$$receiver);
    tmp_0.s29(LinkStyle$lambda$lambda_1(linkColors));
    var tmp_1 = get_hover_0($this$$receiver);
    tmp_1.s29(LinkStyle$lambda$lambda_2);
    return Unit_getInstance();
  }
  function LinkStyle$lambda$lambda() {
    init_properties_Link_kt_r3jso0();
    return textDecorationLine_0(Companion_getInstance_36(), Companion_getInstance_32().f1w());
  }
  function LinkStyle$lambda$lambda_0($linkColors) {
    return function () {
      return color_1(Companion_getInstance_36(), $linkColors.h2a_1);
    };
  }
  function LinkStyle$lambda$lambda_1($linkColors) {
    return function () {
      return color_1(Companion_getInstance_36(), $linkColors.i2a_1);
    };
  }
  function LinkStyle$lambda$lambda_2() {
    init_properties_Link_kt_r3jso0();
    return textDecorationLine_0(Companion_getInstance_36(), Companion_getInstance_32().r24());
  }
  function UndecoratedLinkVariant$lambda($this$addVariant) {
    init_properties_Link_kt_r3jso0();
    var tmp = get_hover_0($this$addVariant);
    tmp.s29(UndecoratedLinkVariant$lambda$lambda);
    return Unit_getInstance();
  }
  function UndecoratedLinkVariant$lambda$lambda() {
    init_properties_Link_kt_r3jso0();
    return textDecorationLine_0(Companion_getInstance_36(), Companion_getInstance_32().f1w());
  }
  function UncoloredLinkVariant$lambda($this$addVariant) {
    init_properties_Link_kt_r3jso0();
    var textColor = toSilkPalette($this$addVariant.c29_1).f29_1;
    var tmp = get_link($this$addVariant);
    tmp.s29(UncoloredLinkVariant$lambda$lambda(textColor));
    var tmp_0 = get_visited($this$addVariant);
    tmp_0.s29(UncoloredLinkVariant$lambda$lambda_0(textColor));
    return Unit_getInstance();
  }
  function UncoloredLinkVariant$lambda$lambda($textColor) {
    return function () {
      return color_1(Companion_getInstance_36(), $textColor);
    };
  }
  function UncoloredLinkVariant$lambda$lambda_0($textColor) {
    return function () {
      return color_1(Companion_getInstance_36(), $textColor);
    };
  }
  var properties_initialized_Link_kt_5x6v44;
  function init_properties_Link_kt_r3jso0() {
    if (properties_initialized_Link_kt_5x6v44) {
    } else {
      properties_initialized_Link_kt_5x6v44 = true;
      LinkStyle = ComponentStyle_init_$Create$('silk-link', null, LinkStyle$lambda, 2, null);
      var tmp = get_LinkStyle();
      UndecoratedLinkVariant = tmp.e2a('undecorated', null, UndecoratedLinkVariant$lambda, 2, null);
      var tmp_0 = get_LinkStyle();
      UncoloredLinkVariant = tmp_0.e2a('uncolored', null, UncoloredLinkVariant$lambda, 2, null);
    }
  }
  function notifySelectorName($this, selectorName) {
    // Inline function 'kotlin.collections.forEach' call
    var tmp$ret$3;
    // Inline function 'kotlin.collections.filter' call
    var tmp = charArrayOf_0([_Char___init__impl__6a9atx(46)]);
    var tmp0_filter = split$default(selectorName, tmp, false, 0, 6, null);
    var tmp$ret$2;
    // Inline function 'kotlin.collections.filterTo' call
    var tmp0_filterTo = ArrayList_init_$Create$();
    var tmp0_iterator = tmp0_filter.d();
    while (tmp0_iterator.e()) {
      var element = tmp0_iterator.f();
      var tmp$ret$1;
      // Inline function 'com.varabyte.kobweb.silk.components.style.Companion.notifySelectorName.<anonymous>' call
      var tmp$ret$0;
      // Inline function 'kotlin.text.isNotEmpty' call
      tmp$ret$0 = charSequenceLength(element) > 0;
      tmp$ret$1 = tmp$ret$0;
      if (tmp$ret$1) {
        tmp0_filterTo.b(element);
      }
    }
    tmp$ret$2 = tmp0_filterTo;
    tmp$ret$3 = tmp$ret$2;
    var tmp1_forEach = tmp$ret$3;
    var tmp0_iterator_0 = tmp1_forEach.d();
    while (tmp0_iterator_0.e()) {
      var element_0 = tmp0_iterator_0.f();
      // Inline function 'com.varabyte.kobweb.silk.components.style.Companion.notifySelectorName.<anonymous>' call
      Companion_getInstance_38().k2a_1.b(element_0);
    }
  }
  function ComponentStyle_init_$Init$(name, extraModifiers, init, $mask0, $marker, $this) {
    if (!(($mask0 & 2) === 0))
      extraModifiers = Companion_getInstance_36();
    ComponentStyle.call($this, name, extraModifiers, init);
    return $this;
  }
  function ComponentStyle_init_$Create$(name, extraModifiers, init, $mask0, $marker) {
    return ComponentStyle_init_$Init$(name, extraModifiers, init, $mask0, $marker, Object.create(ComponentStyle.prototype));
  }
  function Companion_38() {
    Companion_instance_38 = this;
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableSetOf' call
    tmp$ret$0 = LinkedHashSet_init_$Create$();
    tmp.k2a_1 = tmp$ret$0;
  }
  Companion_38.prototype.l2a = function () {
    return this.k2a_1;
  };
  Companion_38.$metadata$ = objectMeta('Companion');
  var Companion_instance_38;
  function Companion_getInstance_38() {
    if (Companion_instance_38 == null)
      new Companion_38();
    return Companion_instance_38;
  }
  function addStyles(_this__u8e3s4, $this, cssRule, styles) {
    _this__u8e3s4.v1y(cssRule, ComponentStyle$addStyles$lambda(styles));
  }
  function withFinalSelectorName($this, selectorBaseName, group, handler) {
    var tmp0_subject = group;
    if (tmp0_subject instanceof Light)
      handler(selectorBaseName + '-light', group.t2a_1);
    else {
      if (tmp0_subject instanceof Dark)
        handler(selectorBaseName + '-dark', group.r2a_1);
      else {
        if (tmp0_subject instanceof ColorAgnostic)
          handler(selectorBaseName, group.p2a_1);
        else {
          if (tmp0_subject instanceof ColorAware) {
            handler(selectorBaseName + '-light', group.m2a_1);
            handler(selectorBaseName + '-dark', group.n2a_1);
          }
        }
      }
    }
  }
  function ComponentStyle$addStyles$lambda($styles) {
    return function ($this$null) {
      var tmp0_forEach = $styles.y23_1;
      var tmp$ret$0;
      // Inline function 'kotlin.collections.iterator' call
      tmp$ret$0 = tmp0_forEach.t().d();
      var tmp0_iterator = tmp$ret$0;
      while (tmp0_iterator.e()) {
        var element = tmp0_iterator.f();
        // Inline function 'com.varabyte.kobweb.silk.components.style.ComponentStyle.addStyles.<anonymous>.<anonymous>' call
        $this$null.q1x(element.y1(), element.a2());
      }
      var tmp1_forEach = $styles.z23_1;
      var tmp$ret$1;
      // Inline function 'kotlin.collections.iterator' call
      tmp$ret$1 = tmp1_forEach.t().d();
      var tmp0_iterator_0 = tmp$ret$1;
      while (tmp0_iterator_0.e()) {
        var element_0 = tmp0_iterator_0.f();
        // Inline function 'com.varabyte.kobweb.silk.components.style.ComponentStyle.addStyles.<anonymous>.<anonymous>' call
        $this$null.t1x(element_0.y1(), element_0.a2());
      }
      return Unit_getInstance();
    };
  }
  function ComponentStyle$addStylesInto$lambda(this$0, $styleSheet) {
    return function (name, styles) {
      var tmp;
      if (isNotEmpty_2(styles)) {
        notifySelectorName(Companion_getInstance_38(), name);
        addStyles($styleSheet, this$0, name, styles);
        tmp = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  function ComponentStyle$addStylesInto$lambda$lambda(this$0, $cssRule, $styles) {
    return function ($this$media) {
      addStyles($this$media, this$0, $cssRule, $styles);
      return Unit_getInstance();
    };
  }
  function ComponentStyle$addStylesInto$lambda_0($cssRuleKey, $styleSheet, this$0) {
    return function (name, styles) {
      var tmp;
      if (isNotEmpty_2(styles)) {
        notifySelectorName(Companion_getInstance_38(), name);
        var tmp$ret$0;
        // Inline function 'kotlin.text.orEmpty' call
        var tmp0_orEmpty = $cssRuleKey.w2a_1;
        var tmp0_elvis_lhs = tmp0_orEmpty;
        tmp$ret$0 = tmp0_elvis_lhs == null ? '' : tmp0_elvis_lhs;
        var cssRule = name + tmp$ret$0;
        var tmp_0;
        if (!($cssRuleKey.v2a_1 == null)) {
          var tmp$ret$1;
          // Inline function 'kotlin.apply' call
          // Inline function 'kotlin.contracts.contract' call
          // Inline function 'com.varabyte.kobweb.silk.components.style.ComponentStyle.addStylesInto.<anonymous>.<anonymous>.<anonymous>' call
          media($styleSheet, $cssRuleKey.v2a_1, ComponentStyle$addStylesInto$lambda$lambda(this$0, cssRule, styles));
          tmp$ret$1 = $styleSheet;
          tmp_0 = Unit_getInstance();
        } else {
          addStyles($styleSheet, this$0, cssRule, styles);
          tmp_0 = Unit_getInstance();
        }
        tmp = tmp_0;
      }
      return Unit_getInstance();
    };
  }
  function ComponentStyle(name, extraModifiers, init) {
    Companion_getInstance_38();
    this.z29_1 = name;
    this.a2a_1 = extraModifiers;
    this.b2a_1 = init;
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$0 = ArrayList_init_$Create$();
    tmp.c2a_1 = tmp$ret$0;
    this.d2a_1 = 0;
  }
  ComponentStyle.prototype.oc = function () {
    return this.z29_1;
  };
  ComponentStyle.prototype.y2a = function () {
    return this.c2a_1;
  };
  ComponentStyle.prototype.z2a = function (name, extraModifiers, init) {
    var tmp$ret$0;
    // Inline function 'kotlin.also' call
    var tmp0_also = new SimpleComponentVariant(new ComponentStyle(this.z29_1 + '-' + name, extraModifiers, init), this);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'com.varabyte.kobweb.silk.components.style.ComponentStyle.addVariant.<anonymous>' call
    this.c2a_1.b(tmp0_also);
    tmp$ret$0 = tmp0_also;
    return tmp$ret$0;
  };
  ComponentStyle.prototype.e2a = function (name, extraModifiers, init, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      extraModifiers = Companion_getInstance_36();
    return this.z2a(name, extraModifiers, init);
  };
  ComponentStyle.prototype.a2b = function (styleSheet, selectorName) {
    var tmp$ret$3;
    // Inline function 'kotlin.collections.associateBy' call
    var tmp$ret$0;
    // Inline function 'kotlin.apply' call
    var tmp0_apply = new ComponentModifiers(ColorMode_LIGHT_getInstance());
    var tmp1_apply = this.b2a_1;
    // Inline function 'kotlin.contracts.contract' call
    tmp1_apply(tmp0_apply);
    tmp$ret$0 = tmp0_apply;
    var tmp2_associateBy = tmp$ret$0.l29_1;
    var capacity = coerceAtLeast(mapCapacity(collectionSizeOrDefault(tmp2_associateBy, 10)), 16);
    var tmp$ret$2;
    // Inline function 'kotlin.collections.associateByTo' call
    var tmp0_associateByTo = LinkedHashMap_init_$Create$_1(capacity);
    var tmp0_iterator = tmp2_associateBy.d();
    while (tmp0_iterator.e()) {
      var element = tmp0_iterator.f();
      var tmp$ret$1;
      // Inline function 'com.varabyte.kobweb.silk.components.style.ComponentStyle.addStylesInto.<anonymous>' call
      tmp$ret$1 = element.y1();
      tmp0_associateByTo.a(tmp$ret$1, element);
    }
    tmp$ret$2 = tmp0_associateByTo;
    tmp$ret$3 = tmp$ret$2;
    var lightModifiers = tmp$ret$3;
    var tmp$ret$7;
    // Inline function 'kotlin.collections.associateBy' call
    var tmp$ret$4;
    // Inline function 'kotlin.apply' call
    var tmp3_apply = new ComponentModifiers(ColorMode_DARK_getInstance());
    var tmp4_apply = this.b2a_1;
    // Inline function 'kotlin.contracts.contract' call
    tmp4_apply(tmp3_apply);
    tmp$ret$4 = tmp3_apply;
    var tmp5_associateBy = tmp$ret$4.l29_1;
    var capacity_0 = coerceAtLeast(mapCapacity(collectionSizeOrDefault(tmp5_associateBy, 10)), 16);
    var tmp$ret$6;
    // Inline function 'kotlin.collections.associateByTo' call
    var tmp0_associateByTo_0 = LinkedHashMap_init_$Create$_1(capacity_0);
    var tmp0_iterator_0 = tmp5_associateBy.d();
    while (tmp0_iterator_0.e()) {
      var element_0 = tmp0_iterator_0.f();
      var tmp$ret$5;
      // Inline function 'com.varabyte.kobweb.silk.components.style.ComponentStyle.addStylesInto.<anonymous>' call
      tmp$ret$5 = element_0.y1();
      tmp0_associateByTo_0.a(tmp$ret$5, element_0);
    }
    tmp$ret$6 = tmp0_associateByTo_0;
    tmp$ret$7 = tmp$ret$6;
    var darkModifiers = tmp$ret$7;
    var tmp = Companion_getInstance_39();
    var tmp0_safe_receiver = lightModifiers.l2(Companion_getInstance_40().e2b_1);
    var tmp_0 = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.b2b_1;
    var tmp1_safe_receiver = darkModifiers.l2(Companion_getInstance_40().e2b_1);
    var tmp2_safe_receiver = tmp.f2b(tmp_0, tmp1_safe_receiver == null ? null : tmp1_safe_receiver.b2b_1);
    if (tmp2_safe_receiver == null)
      null;
    else {
      var tmp$ret$8;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      withFinalSelectorName(this, selectorName, tmp2_safe_receiver, ComponentStyle$addStylesInto$lambda(this, styleSheet));
      tmp$ret$8 = Unit_getInstance();
    }
    var tmp$ret$11;
    // Inline function 'kotlin.collections.filter' call
    var tmp6_filter = plus_0(lightModifiers.m2(), darkModifiers.m2());
    var tmp$ret$10;
    // Inline function 'kotlin.collections.filterTo' call
    var tmp0_filterTo = ArrayList_init_$Create$();
    var tmp0_iterator_1 = tmp6_filter.d();
    while (tmp0_iterator_1.e()) {
      var element_1 = tmp0_iterator_1.f();
      var tmp$ret$9;
      // Inline function 'com.varabyte.kobweb.silk.components.style.ComponentStyle.addStylesInto.<anonymous>' call
      tmp$ret$9 = !element_1.equals(Companion_getInstance_40().e2b_1);
      if (tmp$ret$9) {
        tmp0_filterTo.b(element_1);
      }
    }
    tmp$ret$10 = tmp0_filterTo;
    tmp$ret$11 = tmp$ret$10;
    var allCssRuleKeys = tmp$ret$11;
    var tmp3_iterator = allCssRuleKeys.d();
    while (tmp3_iterator.e()) {
      var cssRuleKey = tmp3_iterator.f();
      var tmp_1 = Companion_getInstance_39();
      var tmp4_safe_receiver = lightModifiers.l2(cssRuleKey);
      var tmp_2 = tmp4_safe_receiver == null ? null : tmp4_safe_receiver.b2b_1;
      var tmp5_safe_receiver = darkModifiers.l2(cssRuleKey);
      var tmp6_safe_receiver = tmp_1.f2b(tmp_2, tmp5_safe_receiver == null ? null : tmp5_safe_receiver.b2b_1);
      if (tmp6_safe_receiver == null)
        null;
      else {
        var tmp$ret$12;
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        withFinalSelectorName(this, selectorName, tmp6_safe_receiver, ComponentStyle$addStylesInto$lambda_0(cssRuleKey, styleSheet, this));
        tmp$ret$12 = Unit_getInstance();
      }
    }
  };
  ComponentStyle.prototype.g2b = function (styleSheet) {
    this.a2b(styleSheet, '.' + this.z29_1);
  };
  ComponentStyle.prototype.h2b = function () {
    return new ImmutableComponentStyle(this.z29_1, this.a2a_1);
  };
  ComponentStyle.$metadata$ = classMeta('ComponentStyle');
  function ComponentModifiers(colorMode) {
    StyleModifiers.call(this);
    this.c29_1 = colorMode;
    this.d29_1 = 0;
  }
  ComponentModifiers.prototype.x29 = function () {
    return this.c29_1;
  };
  ComponentModifiers.$metadata$ = classMeta('ComponentModifiers', [ComponentModifier], undefined, undefined, undefined, StyleModifiers.prototype);
  function OfPseudoClass(target, pseudoClass) {
    CssRule.call(this, target);
    this.q29_1 = pseudoClass;
    this.r29_1 = 0;
  }
  OfPseudoClass.prototype.s29 = function (createModifier) {
    this.l2b(null, listOf_0(this.q29_1), null, createModifier);
  };
  OfPseudoClass.$metadata$ = classMeta('OfPseudoClass', undefined, undefined, undefined, undefined, CssRule.prototype);
  function CssRule(target) {
    this.j2b_1 = target;
    this.k2b_1 = 0;
  }
  CssRule.prototype.l2b = function (mediaQuery, pseudoClasses, pseudoElement, createModifier) {
    var tmp$ret$4;
    // Inline function 'kotlin.takeIf' call
    var tmp$ret$1;
    // Inline function 'kotlin.text.buildString' call
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'kotlin.apply' call
    var tmp0_apply = StringBuilder_init_$Create$_0();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'com.varabyte.kobweb.silk.components.style.CssRule.addCssRule.<anonymous>' call
    // Inline function 'kotlin.collections.forEach' call
    var tmp0_iterator = pseudoClasses.d();
    while (tmp0_iterator.e()) {
      var element = tmp0_iterator.f();
      // Inline function 'com.varabyte.kobweb.silk.components.style.CssRule.addCssRule.<anonymous>.<anonymous>' call
      tmp0_apply.yb(':' + element);
    }
    if (!(pseudoElement == null)) {
      tmp0_apply.yb('::' + pseudoElement);
    }
    tmp$ret$0 = tmp0_apply;
    tmp$ret$1 = tmp$ret$0.toString();
    var tmp0_takeIf = tmp$ret$1;
    // Inline function 'kotlin.contracts.contract' call
    var tmp;
    var tmp$ret$3;
    // Inline function 'com.varabyte.kobweb.silk.components.style.CssRule.addCssRule.<anonymous>' call
    var tmp$ret$2;
    // Inline function 'kotlin.text.isNotEmpty' call
    tmp$ret$2 = charSequenceLength(tmp0_takeIf) > 0;
    tmp$ret$3 = tmp$ret$2;
    if (tmp$ret$3) {
      tmp = tmp0_takeIf;
    } else {
      tmp = null;
    }
    tmp$ret$4 = tmp;
    var suffix = tmp$ret$4;
    this.j2b_1.i2b(mediaQuery, suffix, createModifier);
  };
  CssRule.$metadata$ = classMeta('CssRule');
  function ComponentVariant() {
    this.m2b_1 = 0;
  }
  ComponentVariant.$metadata$ = classMeta('ComponentVariant');
  function addVariantBase(_this__u8e3s4, name, extraModifiers, init) {
    return _this__u8e3s4.z2a(name, extraModifiers, addVariantBase$lambda(init));
  }
  function addVariantBase$default(_this__u8e3s4, name, extraModifiers, init, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      extraModifiers = Companion_getInstance_36();
    return addVariantBase(_this__u8e3s4, name, extraModifiers, init);
  }
  function ComponentBaseModifier(colorMode) {
    this.o2b_1 = colorMode;
    this.p2b_1 = 0;
  }
  ComponentBaseModifier.prototype.x29 = function () {
    return this.o2b_1;
  };
  ComponentBaseModifier.$metadata$ = classMeta('ComponentBaseModifier', [ComponentModifier]);
  function base(_this__u8e3s4, className, init) {
    return ComponentStyle_init_$Create$(className, null, base$lambda(init), 2, null);
  }
  function ComponentModifier() {
  }
  ComponentModifier.$metadata$ = interfaceMeta('ComponentModifier');
  function SimpleComponentVariant(style, baseStyle) {
    ComponentVariant.call(this);
    this.r2b_1 = style;
    this.s2b_1 = baseStyle;
    this.t2b_1 = 0;
  }
  SimpleComponentVariant.prototype.f1x = function () {
    return this.r2b_1;
  };
  SimpleComponentVariant.prototype.g2b = function (styleSheet) {
    this.r2b_1.a2b(styleSheet, '.' + this.s2b_1.z29_1 + '.' + this.r2b_1.z29_1);
  };
  SimpleComponentVariant.prototype.h2b = function () {
    return this.r2b_1.h2b();
  };
  SimpleComponentVariant.prototype.n2b = function ($composer, $changed) {
    var $composer_0 = $composer;
    $composer_0.ks(-1695500569);
    sourceInformation($composer_0, 'C(toModifier$composable)');
    if (isTraceInProgress()) {
      traceEventStart(-1695500569, $changed, -1, 'com.varabyte.kobweb.silk.components.style.SimpleComponentVariant.toModifier$composable (ComponentStyle.kt:606)');
    }
    var tmp0 = toModifier$composable(this.r2b_1, null, $composer_0, 0, 1);
    if (isTraceInProgress()) {
      traceEventEnd();
    }
    $composer_0.os();
    return tmp0;
  };
  SimpleComponentVariant.$metadata$ = classMeta('SimpleComponentVariant', undefined, undefined, undefined, undefined, ComponentVariant.prototype);
  function Light(styles) {
    this.t2a_1 = styles;
    this.u2a_1 = 0;
  }
  Light.$metadata$ = classMeta('Light', [StyleGroup]);
  function Dark(styles) {
    this.r2a_1 = styles;
    this.s2a_1 = 0;
  }
  Dark.$metadata$ = classMeta('Dark', [StyleGroup]);
  function ColorAgnostic(styles) {
    this.p2a_1 = styles;
    this.q2a_1 = 0;
  }
  ColorAgnostic.$metadata$ = classMeta('ColorAgnostic', [StyleGroup]);
  function ColorAware(lightStyles, darkStyles) {
    this.m2a_1 = lightStyles;
    this.n2a_1 = darkStyles;
    this.o2a_1 = 0;
  }
  ColorAware.$metadata$ = classMeta('ColorAware', [StyleGroup]);
  function Companion_39() {
    Companion_instance_39 = this;
  }
  Companion_39.prototype.f2b = function (lightModifiers, darkModifiers) {
    var tmp0_safe_receiver = lightModifiers;
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      var tmp$ret$2;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$1;
      // Inline function 'com.varabyte.kobweb.silk.components.style.Companion.from.<anonymous>' call
      var tmp$ret$0;
      // Inline function 'kotlin.apply' call
      var tmp0_apply = new ComparableStyleScope();
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'com.varabyte.kobweb.silk.components.style.Companion.from.<anonymous>.<anonymous>' call
      toStyles$default(tmp0_safe_receiver, null, 1, null)(tmp0_apply);
      tmp$ret$0 = tmp0_apply;
      tmp$ret$1 = tmp$ret$0;
      tmp$ret$2 = tmp$ret$1;
      tmp = tmp$ret$2;
    }
    var lightStyles = tmp;
    var tmp1_safe_receiver = darkModifiers;
    var tmp_0;
    if (tmp1_safe_receiver == null) {
      tmp_0 = null;
    } else {
      var tmp$ret$5;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$4;
      // Inline function 'com.varabyte.kobweb.silk.components.style.Companion.from.<anonymous>' call
      var tmp$ret$3;
      // Inline function 'kotlin.apply' call
      var tmp0_apply_0 = new ComparableStyleScope();
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'com.varabyte.kobweb.silk.components.style.Companion.from.<anonymous>.<anonymous>' call
      toStyles$default(tmp1_safe_receiver, null, 1, null)(tmp0_apply_0);
      tmp$ret$3 = tmp0_apply_0;
      tmp$ret$4 = tmp$ret$3;
      tmp$ret$5 = tmp$ret$4;
      tmp_0 = tmp$ret$5;
    }
    var darkStyles = tmp_0;
    if (lightStyles == null ? darkStyles == null : false)
      return null;
    if (!(lightStyles == null) ? darkStyles == null : false)
      return new Light(lightStyles);
    if (lightStyles == null ? !(darkStyles == null) : false)
      return new Dark(darkStyles);
    // Inline function 'kotlin.check' call
    var tmp0_check = !(lightStyles == null) ? !(darkStyles == null) : false;
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.check' call
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_check) {
      var tmp$ret$6;
      // Inline function 'kotlin.check.<anonymous>' call
      tmp$ret$6 = 'Check failed.';
      var message = tmp$ret$6;
      throw IllegalStateException_init_$Create$_0(toString_2(message));
    }
    var tmp_1;
    if (equals_0(lightStyles, darkStyles)) {
      tmp_1 = new ColorAgnostic(lightStyles);
    } else {
      tmp_1 = new ColorAware(lightStyles, darkStyles);
    }
    return tmp_1;
  };
  Companion_39.$metadata$ = objectMeta('Companion');
  var Companion_instance_39;
  function Companion_getInstance_39() {
    if (Companion_instance_39 == null)
      new Companion_39();
    return Companion_instance_39;
  }
  function StyleGroup() {
  }
  StyleGroup.$metadata$ = interfaceMeta('StyleGroup');
  function CssModifier_init_$Init$(modifier, mediaQuery, suffix, $mask0, $marker, $this) {
    if (!(($mask0 & 2) === 0))
      mediaQuery = null;
    if (!(($mask0 & 4) === 0))
      suffix = null;
    CssModifier.call($this, modifier, mediaQuery, suffix);
    return $this;
  }
  function CssModifier_init_$Create$(modifier, mediaQuery, suffix, $mask0, $marker) {
    return CssModifier_init_$Init$(modifier, mediaQuery, suffix, $mask0, $marker, Object.create(CssModifier.prototype));
  }
  function Companion_40() {
    Companion_instance_40 = this;
    this.e2b_1 = new Key_6(null, null);
  }
  Companion_40.prototype.u2b = function () {
    return this.e2b_1;
  };
  Companion_40.$metadata$ = objectMeta('Companion');
  var Companion_instance_40;
  function Companion_getInstance_40() {
    if (Companion_instance_40 == null)
      new Companion_40();
    return Companion_instance_40;
  }
  function Key_6(mediaQuery, suffix) {
    this.v2a_1 = mediaQuery;
    this.w2a_1 = suffix;
    this.x2a_1 = 0;
  }
  Key_6.prototype.v2b = function () {
    return this.v2a_1;
  };
  Key_6.prototype.w2b = function () {
    return this.w2a_1;
  };
  Key_6.prototype.toString = function () {
    return 'Key(mediaQuery=' + this.v2a_1 + ', suffix=' + this.w2a_1 + ')';
  };
  Key_6.prototype.hashCode = function () {
    var result = this.v2a_1 == null ? 0 : getStringHashCode(this.v2a_1);
    result = imul(result, 31) + (this.w2a_1 == null ? 0 : getStringHashCode(this.w2a_1)) | 0;
    return result;
  };
  Key_6.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Key_6))
      return false;
    var tmp0_other_with_cast = other instanceof Key_6 ? other : THROW_CCE();
    if (!(this.v2a_1 == tmp0_other_with_cast.v2a_1))
      return false;
    if (!(this.w2a_1 == tmp0_other_with_cast.w2a_1))
      return false;
    return true;
  };
  Key_6.$metadata$ = classMeta('Key');
  function CssModifier$lambda(_anonymous_parameter_0__qggqh8, currModifier) {
    if (!(currModifier instanceof StyleModifier)) {
      throw IllegalArgumentException_init_$Create$('You are attempting to construct a ComponentStyle or ComponentVariant with a non-style Modifier\n(e.g. `id`, `tabIndex`, etc.). Due to technical limitations in html / css, only `StyleModifier`s\nare allowed in this context.\n\nUnfortunately, at the point this exception is getting thrown, information about the offending\nattribute is not known. Please audit your project\'s ComponentStyle and ComponentVariant\nModifiers, perhaps commenting out recently added ones, until this exception goes away.\n\nOnce the offending modifier is identified, to fix this, you can either call attribute modifiers\ndirectly on the Modifier you pass into some widget, or you can extend this Style or Variant with\nextra modifiers using the `+` syntax:\n\n```\n// Approach #1: Call Attribute Modifiers later\n\nval ExampleStyle = ComponentStyle("ex") {\n   ...\n}\n\nExampleWidget(ExampleStyle.toModifier().tabIndex(0))\n\n// Approach #2: Use `+` to add extra (non-style) modifiers to the style\n\nval ExampleStyle = ComponentStyle("ex") {\n   ...\n} + Modifier.tabIndex(0)\n\nExampleWidget(ExampleStyle.toModifier())\n```');
    }
    return Unit_getInstance();
  }
  function CssModifier(modifier, mediaQuery, suffix) {
    Companion_getInstance_40();
    this.b2b_1 = modifier;
    this.c2b_1 = mediaQuery;
    this.d2b_1 = suffix;
    this.b2b_1.v26(Unit_getInstance(), CssModifier$lambda);
  }
  CssModifier.prototype.y1 = function () {
    var tmp0_safe_receiver = this.c2b_1;
    return new Key_6(tmp0_safe_receiver == null ? null : toString_2(tmp0_safe_receiver), this.d2b_1);
  };
  CssModifier.$metadata$ = classMeta('CssModifier');
  function ImmutableComponentStyle(name, extraModifiers) {
    this.x2b_1 = name;
    this.y2b_1 = extraModifiers;
    this.z2b_1 = 8;
  }
  ImmutableComponentStyle.prototype.n2b = function ($composer, $changed) {
    var $composer_0 = $composer;
    $composer_0.ks(512683125);
    sourceInformation($composer_0, 'C(toModifier$composable)');
    if (isTraceInProgress()) {
      traceEventStart(512683125, $changed, -1, 'com.varabyte.kobweb.silk.components.style.ImmutableComponentStyle.toModifier$composable (ComponentStyle.kt:299)');
    }
    var tmp$ret$4;
    // Inline function 'kotlin.collections.filter' call
    var tmp$ret$1;
    // Inline function 'kotlin.text.lowercase' call
    var tmp0_lowercase = getColorMode$composable($composer_0, 0).n4_1;
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = tmp0_lowercase;
    tmp$ret$1 = tmp$ret$0.toLowerCase();
    var tmp1_filter = listOf([this.x2b_1, this.x2b_1 + '-' + tmp$ret$1]);
    var tmp$ret$3;
    // Inline function 'kotlin.collections.filterTo' call
    var tmp0_filterTo = ArrayList_init_$Create$();
    var tmp0_iterator = tmp1_filter.d();
    while (tmp0_iterator.e()) {
      var element = tmp0_iterator.f();
      var tmp$ret$2;
      // Inline function 'com.varabyte.kobweb.silk.components.style.ImmutableComponentStyle.toModifier$composable.<anonymous>' call
      var tmp0_return = Companion_getInstance_38().k2a_1.j(element);
      tmp$ret$2 = tmp0_return;
      if (tmp$ret$2) {
        tmp0_filterTo.b(element);
      }
    }
    tmp$ret$3 = tmp0_filterTo;
    tmp$ret$4 = tmp$ret$3;
    var classNames_0 = tmp$ret$4;
    var tmp;
    var tmp$ret$5;
    // Inline function 'kotlin.collections.isNotEmpty' call
    tmp$ret$5 = !classNames_0.i();
    if (tmp$ret$5) {
      var tmp_0 = Companion_getInstance_36();
      var tmp$ret$6;
      // Inline function 'kotlin.collections.toTypedArray' call
      tmp$ret$6 = copyToArray(classNames_0);
      tmp = classNames(tmp_0, tmp$ret$6.slice());
    } else {
      tmp = Companion_getInstance_36();
    }
    var tmp0 = tmp.w26(this.y2b_1);
    if (isTraceInProgress()) {
      traceEventEnd();
    }
    $composer_0.os();
    return tmp0;
  };
  ImmutableComponentStyle.$metadata$ = classMeta('ImmutableComponentStyle');
  function StyleModifiers() {
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$0 = ArrayList_init_$Create$();
    tmp.k29_1 = tmp$ret$0;
    this.l29_1 = this.k29_1;
    this.m29_1 = 0;
  }
  StyleModifiers.prototype.n29 = function (createModifier) {
    var tmp = createModifier();
    this.k29_1.b(CssModifier_init_$Create$(tmp, null, null, 6, null));
  };
  StyleModifiers.prototype.i2b = function (mediaQuery, suffix, createModifier) {
    this.k29_1.b(new CssModifier(createModifier(), mediaQuery, suffix));
  };
  StyleModifiers.prototype.f2a = function (suffix, createModifier) {
    this.k29_1.b(new CssModifier(createModifier(), null, suffix));
  };
  StyleModifiers.prototype.g2a = function (mediaQuery, createModifier) {
    var tmp = createModifier();
    this.k29_1.b(CssModifier_init_$Create$(tmp, mediaQuery, null, 4, null));
  };
  StyleModifiers.prototype.y29 = function (_this__u8e3s4, createModifier) {
    this.g2a(toMinWidthQuery(_this__u8e3s4), createModifier);
  };
  StyleModifiers.$metadata$ = classMeta('StyleModifiers');
  function toModifier$composable(_this__u8e3s4, variant, $composer, $changed, $default) {
    var variant_0 = variant;
    var $composer_0 = $composer;
    $composer_0.ks(-139708834);
    sourceInformation($composer_0, 'C(toModifier$composable)');
    if (!(($default & 1) === 0))
      variant_0 = null;
    if (isTraceInProgress()) {
      traceEventStart(-139708834, $changed, -1, 'com.varabyte.kobweb.silk.components.style.toModifier$composable (ComponentStyle.kt:624)');
    }
    var tmp = getValue(get_SilkTheme().s28_1, _this__u8e3s4.z29_1).n2b($composer_0, 0);
    var tmp0_safe_receiver = variant_0;
    var tmp1_group = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.n2b($composer_0, 14 & $changed >> 3);
    var tmp1_elvis_lhs = tmp1_group;
    var tmp0 = tmp.w26(tmp1_elvis_lhs == null ? Companion_getInstance_36() : tmp1_elvis_lhs);
    if (isTraceInProgress()) {
      traceEventEnd();
    }
    $composer_0.os();
    return tmp0;
  }
  function addVariantBase$lambda$lambda($this_addVariant, $init) {
    return function () {
      var tmp$ret$0;
      // Inline function 'kotlin.let' call
      var tmp0_let = new ComponentBaseModifier($this_addVariant.c29_1);
      // Inline function 'kotlin.contracts.contract' call
      tmp$ret$0 = $init(tmp0_let);
      return tmp$ret$0;
    };
  }
  function addVariantBase$lambda($init) {
    return function ($this$addVariant) {
      $this$addVariant.n29(addVariantBase$lambda$lambda($this$addVariant, $init));
      return Unit_getInstance();
    };
  }
  function base$lambda$lambda($this_$receiver, $init) {
    return function () {
      var tmp$ret$0;
      // Inline function 'kotlin.let' call
      var tmp0_let = new ComponentBaseModifier($this_$receiver.c29_1);
      // Inline function 'kotlin.contracts.contract' call
      tmp$ret$0 = $init(tmp0_let);
      return tmp$ret$0;
    };
  }
  function base$lambda($init) {
    return function ($this$$receiver) {
      $this$$receiver.n29(base$lambda$lambda($this$$receiver, $init));
      return Unit_getInstance();
    };
  }
  function get_hover_0(_this__u8e3s4) {
    return new OfPseudoClass(_this__u8e3s4, 'hover');
  }
  function get_focus(_this__u8e3s4) {
    return new OfPseudoClass(_this__u8e3s4, 'focus');
  }
  function get_active(_this__u8e3s4) {
    return new OfPseudoClass(_this__u8e3s4, 'active');
  }
  function get_disabled(_this__u8e3s4) {
    return new OfPseudoClass(_this__u8e3s4, 'disabled');
  }
  function get_link(_this__u8e3s4) {
    return new OfPseudoClass(_this__u8e3s4, 'link');
  }
  function get_visited(_this__u8e3s4) {
    return new OfPseudoClass(_this__u8e3s4, 'visited');
  }
  var Breakpoint_ZERO_instance;
  var Breakpoint_SM_instance;
  var Breakpoint_MD_instance;
  var Breakpoint_LG_instance;
  var Breakpoint_XL_instance;
  function values() {
    return [Breakpoint_ZERO_getInstance(), Breakpoint_SM_getInstance(), Breakpoint_MD_getInstance(), Breakpoint_LG_getInstance(), Breakpoint_XL_getInstance()];
  }
  var Breakpoint_entriesInitialized;
  function Breakpoint_initEntries() {
    if (Breakpoint_entriesInitialized)
      return Unit_getInstance();
    Breakpoint_entriesInitialized = true;
    Breakpoint_ZERO_instance = new Breakpoint('ZERO', 0);
    Breakpoint_SM_instance = new Breakpoint('SM', 1);
    Breakpoint_MD_instance = new Breakpoint('MD', 2);
    Breakpoint_LG_instance = new Breakpoint('LG', 3);
    Breakpoint_XL_instance = new Breakpoint('XL', 4);
  }
  function Breakpoint(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  Breakpoint.$metadata$ = classMeta('Breakpoint', undefined, undefined, undefined, undefined, Enum.prototype);
  function Breakpoint_ZERO_getInstance() {
    Breakpoint_initEntries();
    return Breakpoint_ZERO_instance;
  }
  function Breakpoint_SM_getInstance() {
    Breakpoint_initEntries();
    return Breakpoint_SM_instance;
  }
  function Breakpoint_MD_getInstance() {
    Breakpoint_initEntries();
    return Breakpoint_MD_instance;
  }
  function Breakpoint_LG_getInstance() {
    Breakpoint_initEntries();
    return Breakpoint_LG_instance;
  }
  function Breakpoint_XL_getInstance() {
    Breakpoint_initEntries();
    return Breakpoint_XL_instance;
  }
  function BreakpointValues(sm, md, lg, xl) {
    this.a2c_1 = sm;
    this.b2c_1 = md;
    this.c2c_1 = lg;
    this.d2c_1 = xl;
    this.e2c_1 = 0;
  }
  BreakpointValues.prototype.toString = function () {
    return 'BreakpointValues(sm=' + this.a2c_1 + ', md=' + this.b2c_1 + ', lg=' + this.c2c_1 + ', xl=' + this.d2c_1 + ')';
  };
  BreakpointValues.prototype.hashCode = function () {
    var result = hashCode_0(this.a2c_1);
    result = imul(result, 31) + hashCode_0(this.b2c_1) | 0;
    result = imul(result, 31) + hashCode_0(this.c2c_1) | 0;
    result = imul(result, 31) + hashCode_0(this.d2c_1) | 0;
    return result;
  };
  BreakpointValues.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof BreakpointValues))
      return false;
    var tmp0_other_with_cast = other instanceof BreakpointValues ? other : THROW_CCE();
    if (!equals_0(this.a2c_1, tmp0_other_with_cast.a2c_1))
      return false;
    if (!equals_0(this.b2c_1, tmp0_other_with_cast.b2c_1))
      return false;
    if (!equals_0(this.c2c_1, tmp0_other_with_cast.c2c_1))
      return false;
    if (!equals_0(this.d2c_1, tmp0_other_with_cast.d2c_1))
      return false;
    return true;
  };
  BreakpointValues.$metadata$ = classMeta('BreakpointValues');
  function BreakpointSizes(sm, md, lg, xl) {
    return new BreakpointValues(new Rem(sm), new Rem(md), new Rem(lg), new Rem(xl));
  }
  function Rem(value) {
    BreakpointUnitValue.call(this, value);
    this.h2c_1 = 0;
  }
  Rem.$metadata$ = classMeta('Rem', undefined, undefined, undefined, undefined, BreakpointUnitValue.prototype);
  function BreakpointUnitValue(width) {
    this.i2c_1 = width;
    this.j2c_1 = 0;
  }
  BreakpointUnitValue.$metadata$ = classMeta('BreakpointUnitValue');
  function get_SpanTextStyle() {
    init_properties_SpanText_kt_pgufrx();
    return SpanTextStyle;
  }
  var SpanTextStyle;
  var TextStyle;
  function SpanText$composable(text, modifier, variant, $composer, $changed, $default) {
    init_properties_SpanText_kt_pgufrx();
    var modifier_0 = {_v: modifier};
    var variant_0 = {_v: variant};
    var $composer_0 = $composer;
    $composer_0 = $composer_0.z13(-1925041793);
    sourceInformation($composer_0, 'C(SpanText$composable)P(1)');
    var $dirty = $changed;
    if (!(($default & 1) === 0))
      $dirty = $dirty | 6;
    else if (($changed & 14) === 0)
      $dirty = $dirty | ($composer_0.ps(text) ? 4 : 2);
    if (!(($default & 2) === 0))
      $dirty = $dirty | 48;
    else if (($changed & 112) === 0)
      $dirty = $dirty | ($composer_0.ps(modifier_0._v) ? 32 : 16);
    if (!(($default & 4) === 0))
      $dirty = $dirty | 384;
    else if (($changed & 896) === 0)
      $dirty = $dirty | ($composer_0.ps(variant_0._v) ? 256 : 128);
    if (!(($dirty & 731) === 146) ? true : !$composer_0.d12()) {
      if (!(($default & 2) === 0)) {
        modifier_0._v = Companion_getInstance_36();
      }
      if (!(($default & 4) === 0)) {
        variant_0._v = null;
      }
      if (isTraceInProgress()) {
        traceEventStart(-1925041793, $dirty, -1, 'com.varabyte.kobweb.silk.components.text.SpanText$composable (SpanText.kt:40)');
      }
      var tmp = toModifier$composable(get_SpanTextStyle(), variant_0._v, $composer_0, 112 & $dirty >> 3, 0).w26(modifier_0._v);
      var tmp_0;
      var tmp_1 = _Char___init__impl__6a9atx(32);
      if (startsWith$default(text, tmp_1, false, 2, null)) {
        tmp_0 = true;
      } else {
        var tmp_2 = _Char___init__impl__6a9atx(32);
        tmp_0 = endsWith$default(text, tmp_2, false, 2, null);
      }
      var tmp_3 = tmp_0;
      var tmp$ret$4;
      // Inline function 'androidx.compose.runtime.remember$composable' call
      var tmp0_remember$composable = $composer_0;
      var $composer_1 = tmp0_remember$composable;
      $composer_1.ks(547886695);
      sourceInformation($composer_1, 'C(remember$composable):Composables.kt#9igjgp');
      var tmp$ret$3;
      // Inline function 'androidx.compose.runtime.cache' call
      var tmp1_cache = $composer_1;
      var tmp$ret$2;
      // Inline function 'kotlin.let' call
      var tmp0_let = tmp1_cache.ls();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
      var tmp_4;
      if (false ? true : tmp0_let === Companion_getInstance_8().ns_1) {
        var tmp$ret$0;
        // Inline function 'com.varabyte.kobweb.silk.components.text.SpanText$composable.<anonymous>' call
        tmp$ret$0 = SpanText$composable$lambda_0;
        var value = tmp$ret$0;
        tmp1_cache.ms(value);
        tmp_4 = value;
      } else {
        tmp_4 = tmp0_let;
      }
      tmp$ret$1 = tmp_4;
      tmp$ret$2 = tmp$ret$1;
      var tmp_5 = tmp$ret$2;
      tmp$ret$3 = (tmp_5 == null ? true : isObject(tmp_5)) ? tmp_5 : THROW_CCE();
      var tmp0 = tmp$ret$3;
      $composer_1.os();
      tmp$ret$4 = tmp0;
      var finalModifier = thenIf(tmp, tmp_3, tmp$ret$4);
      var tmp_6 = toAttrs$default(finalModifier, null, 1, null);
      var tmp$ret$11;
      // Inline function 'kotlin.run' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$10;
      // Inline function 'com.varabyte.kobweb.silk.components.text.SpanText$composable.<anonymous>' call
      var tmp_7 = $composer_0;
      var dispatchReceiver = composableLambda(tmp_7, 2111947315, true, SpanText$composable$lambda_1(text, $dirty));
      var tmp$ret$9;
      // Inline function 'androidx.compose.runtime.remember$composable' call
      var tmp0_remember$composable_0 = $composer_0;
      var $composer_2 = tmp0_remember$composable_0;
      $composer_2.ks(-838505973);
      sourceInformation($composer_2, 'C(remember$composable)P(1):Composables.kt#9igjgp');
      var tmp$ret$8;
      // Inline function 'androidx.compose.runtime.cache' call
      var tmp1_cache_0 = $composer_2;
      var tmp2_cache = $composer_2.ps(dispatchReceiver);
      var tmp$ret$7;
      // Inline function 'kotlin.let' call
      var tmp0_let_0 = tmp1_cache_0.ls();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$6;
      // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
      var tmp_8;
      if (tmp2_cache ? true : tmp0_let_0 === Companion_getInstance_8().ns_1) {
        var tmp$ret$5;
        // Inline function 'com.varabyte.kobweb.silk.components.text.SpanText$composable.<anonymous>.<anonymous>' call
        tmp$ret$5 = ComposableLambda$invoke$ref_10(dispatchReceiver);
        var value_0 = tmp$ret$5;
        tmp1_cache_0.ms(value_0);
        tmp_8 = value_0;
      } else {
        tmp_8 = tmp0_let_0;
      }
      tmp$ret$6 = tmp_8;
      tmp$ret$7 = tmp$ret$6;
      var tmp_9 = tmp$ret$7;
      tmp$ret$8 = (tmp_9 == null ? true : isObject(tmp_9)) ? tmp_9 : THROW_CCE();
      var tmp0_0 = tmp$ret$8;
      $composer_2.os();
      tmp$ret$9 = tmp0_0;
      tmp$ret$10 = tmp$ret$9;
      tmp$ret$11 = tmp$ret$10;
      Span$composable(tmp_6, tmp$ret$11, $composer_0, 48, 0);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    var tmp0_safe_receiver = $composer_0.a14();
    if (tmp0_safe_receiver === null)
      null;
    else {
      tmp0_safe_receiver.b15(SpanText$composable$lambda$ref(text, modifier_0, variant_0, $changed, $default));
    }
  }
  function SpanText$composable$lambda($text, $modifier, $variant, $$changed, $$default, $composer, $force) {
    return SpanText$composable($text, $modifier._v, $variant._v, $composer, $$changed | 1, $$default);
  }
  function SpanTextStyle$lambda($this$$receiver) {
    init_properties_SpanText_kt_pgufrx();
    return Unit_getInstance();
  }
  function SpanText$composable$lambda_0() {
    init_properties_SpanText_kt_pgufrx();
    return whiteSpace_0(Companion_getInstance_36(), Companion_getInstance_33().u24());
  }
  function SpanText$composable$lambda_1($text, $$dirty) {
    return function ($this$Span, $composer, $changed) {
      var $composer_0 = $composer;
      var tmp;
      if (!(($changed & 81) === 16) ? true : !$composer_0.d12()) {
        if (isTraceInProgress()) {
          traceEventStart(2111947315, $changed, -1, 'com.varabyte.kobweb.silk.components.text.SpanText$composable.<anonymous> (SpanText.kt:52)');
        }
        Text$composable($text, $composer_0, 14 & $$dirty);
        var tmp_0;
        if (isTraceInProgress()) {
          traceEventEnd();
          tmp_0 = Unit_getInstance();
        }
        tmp = tmp_0;
      } else {
        $composer_0.hy();
        tmp = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  function ComposableLambda$invoke$ref_10($boundThis) {
    return function (p0, p1, p2) {
      return $boundThis.z1q(p0, p1, p2);
    };
  }
  function SpanText$composable$lambda$ref($text, $modifier, $variant, $$changed, $$default) {
    return function (p0, p1) {
      SpanText$composable$lambda($text, $modifier, $variant, $$changed, $$default, p0, p1);
      return Unit_getInstance();
    };
  }
  var properties_initialized_SpanText_kt_kccny1;
  function init_properties_SpanText_kt_pgufrx() {
    if (properties_initialized_SpanText_kt_kccny1) {
    } else {
      properties_initialized_SpanText_kt_kccny1 = true;
      SpanTextStyle = ComponentStyle_init_$Create$('silk-span-text', null, SpanTextStyle$lambda, 2, null);
      TextStyle = get_SpanTextStyle();
    }
  }
  function set__SilkTheme(_set____db54di) {
    _SilkTheme = _set____db54di;
  }
  var _SilkTheme;
  function toSilkPalette(_this__u8e3s4) {
    return get_SilkTheme().p28_1.n2c(_this__u8e3s4);
  }
  function ImmutableSilkTheme(mutableSilkTheme) {
    this.o28_1 = mutableSilkTheme;
    this.p28_1 = this.o28_1.h28_1;
    this.q28_1 = this.o28_1.i28_1;
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableMapOf' call
    tmp$ret$0 = LinkedHashMap_init_$Create$();
    tmp.r28_1 = tmp$ret$0;
    this.s28_1 = this.r28_1;
    this.t28_1 = 8;
  }
  ImmutableSilkTheme.prototype.n28 = function (componentStyleSheet) {
    // Inline function 'kotlin.check' call
    var tmp0_check = !(_SilkTheme == null);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.check' call
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_check) {
      var tmp$ret$0;
      // Inline function 'kotlin.check.<anonymous>' call
      tmp$ret$0 = 'Check failed.';
      var message = tmp$ret$0;
      throw IllegalStateException_init_$Create$_0(toString_2(message));
    }
    // Inline function 'kotlin.collections.forEach' call
    var tmp1_forEach = this.o28_1.d28_1.x7();
    var tmp0_iterator = tmp1_forEach.d();
    while (tmp0_iterator.e()) {
      var element = tmp0_iterator.f();
      // Inline function 'com.varabyte.kobweb.silk.theme.ImmutableSilkTheme.registerStyles.<anonymous>' call
      element.g2b(componentStyleSheet);
      // Inline function 'kotlin.collections.set' call
      var tmp0_set = this.r28_1;
      var tmp1_set = element.z29_1;
      var tmp2_set = element.h2b();
      tmp0_set.a(tmp1_set, tmp2_set);
    }
    // Inline function 'kotlin.collections.forEach' call
    var tmp$ret$2;
    // Inline function 'kotlin.collections.filterIsInstance' call
    var tmp2_filterIsInstance = this.o28_1.f28_1.x7();
    var tmp$ret$1;
    // Inline function 'kotlin.collections.filterIsInstanceTo' call
    var tmp0_filterIsInstanceTo = ArrayList_init_$Create$();
    var tmp0_iterator_0 = tmp2_filterIsInstance.d();
    while (tmp0_iterator_0.e()) {
      var element_0 = tmp0_iterator_0.f();
      if (element_0 instanceof SimpleComponentVariant) {
        tmp0_filterIsInstanceTo.b(element_0);
      }
    }
    tmp$ret$1 = tmp0_filterIsInstanceTo;
    tmp$ret$2 = tmp$ret$1;
    var tmp3_forEach = tmp$ret$2;
    var tmp0_iterator_1 = tmp3_forEach.d();
    while (tmp0_iterator_1.e()) {
      var element_1 = tmp0_iterator_1.f();
      // Inline function 'com.varabyte.kobweb.silk.theme.ImmutableSilkTheme.registerStyles.<anonymous>' call
      element_1.g2b(componentStyleSheet);
      // Inline function 'kotlin.collections.set' call
      var tmp0_set_0 = this.r28_1;
      var tmp1_set_0 = element_1.r2b_1.z29_1;
      var tmp2_set_0 = element_1.h2b();
      tmp0_set_0.a(tmp1_set_0, tmp2_set_0);
    }
  };
  ImmutableSilkTheme.prototype.o2c = function ($composer, $changed) {
    var $composer_0 = $composer;
    if (isTraceInProgress()) {
      traceEventStart(593034641, $changed, -1, 'com.varabyte.kobweb.silk.theme.ImmutableSilkTheme.$get-palette$$composable (SilkTheme.kt:304)');
    }
    var tmp0 = this.p28_1.n2c(getColorMode$composable($composer_0, 0));
    if (isTraceInProgress()) {
      traceEventEnd();
    }
    return tmp0;
  };
  ImmutableSilkTheme.$metadata$ = classMeta('ImmutableSilkTheme');
  function get_SilkTheme() {
    var tmp0_elvis_lhs = _SilkTheme;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throw IllegalStateException_init_$Create$_0("You can't access SilkTheme before first calling SilkApp");
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  }
  function MutableSilkTheme() {
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableMapOf' call
    tmp$ret$0 = LinkedHashMap_init_$Create$();
    tmp.d28_1 = tmp$ret$0;
    var tmp_0 = this;
    var tmp$ret$1;
    // Inline function 'kotlin.collections.mutableSetOf' call
    tmp$ret$1 = LinkedHashSet_init_$Create$();
    tmp_0.e28_1 = tmp$ret$1;
    var tmp_1 = this;
    var tmp$ret$2;
    // Inline function 'kotlin.collections.mutableMapOf' call
    tmp$ret$2 = LinkedHashMap_init_$Create$();
    tmp_1.f28_1 = tmp$ret$2;
    var tmp_2 = this;
    var tmp$ret$3;
    // Inline function 'kotlin.collections.mutableSetOf' call
    tmp$ret$3 = LinkedHashSet_init_$Create$();
    tmp_2.g28_1 = tmp$ret$3;
    this.h28_1 = new SilkPalettes(get_LightSilkPalette(), get_DarkSilkPalette());
    this.i28_1 = BreakpointSizes(get_cssRem(30), get_cssRem(48), get_cssRem(62), get_cssRem(80));
    this.j28_1 = 8;
  }
  MutableSilkTheme.prototype.p2c = function () {
    return this.f28_1;
  };
  MutableSilkTheme.prototype.k28 = function (style) {
    // Inline function 'kotlin.check' call
    var tmp$ret$1;
    // Inline function 'kotlin.let' call
    var tmp0_let = this.d28_1.l2(style.z29_1);
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'com.varabyte.kobweb.silk.theme.MutableSilkTheme.registerComponentStyle.<anonymous>' call
    tmp$ret$0 = tmp0_let == null ? true : tmp0_let === style;
    tmp$ret$1 = tmp$ret$0;
    var tmp1_check = tmp$ret$1;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp1_check) {
      var tmp$ret$2;
      // Inline function 'com.varabyte.kobweb.silk.theme.MutableSilkTheme.registerComponentStyle.<anonymous>' call
      tmp$ret$2 = trimIndent('\n                Attempting to register a second style with a name that\'s already used: "' + style.z29_1 + '"\n\n                If this was an intentional override, you should use `replaceComponentStyle` instead.\n            ');
      var message = tmp$ret$2;
      throw IllegalStateException_init_$Create$_0(toString_2(message));
    }
    // Inline function 'kotlin.collections.set' call
    var tmp2_set = this.d28_1;
    var tmp3_set = style.z29_1;
    tmp2_set.a(tmp3_set, style);
    var tmp$ret$3;
    // Inline function 'kotlin.collections.toTypedArray' call
    var tmp4_toTypedArray = style.c2a_1;
    tmp$ret$3 = copyToArray(tmp4_toTypedArray);
    this.q2c(tmp$ret$3.slice());
  };
  MutableSilkTheme.prototype.q2c = function (variants) {
    // Inline function 'kotlin.collections.forEach' call
    var tmp$ret$1;
    // Inline function 'kotlin.collections.filterIsInstance' call
    var tmp$ret$0;
    // Inline function 'kotlin.collections.filterIsInstanceTo' call
    var tmp0_filterIsInstanceTo = ArrayList_init_$Create$();
    var indexedObject = variants;
    var inductionVariable = 0;
    var last = indexedObject.length;
    while (inductionVariable < last) {
      var element = indexedObject[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      if (element instanceof SimpleComponentVariant) {
        tmp0_filterIsInstanceTo.b(element);
      }
    }
    tmp$ret$0 = tmp0_filterIsInstanceTo;
    tmp$ret$1 = tmp$ret$0;
    var tmp0_forEach = tmp$ret$1;
    var tmp0_iterator = tmp0_forEach.d();
    while (tmp0_iterator.e()) {
      var element_0 = tmp0_iterator.f();
      // Inline function 'com.varabyte.kobweb.silk.theme.MutableSilkTheme.registerComponentVariants.<anonymous>' call
      // Inline function 'kotlin.check' call
      var tmp$ret$3;
      // Inline function 'kotlin.let' call
      var tmp0_let = this.f28_1.l2(element_0.r2b_1.z29_1);
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$2;
      // Inline function 'com.varabyte.kobweb.silk.theme.MutableSilkTheme.registerComponentVariants.<anonymous>.<anonymous>' call
      tmp$ret$2 = tmp0_let == null ? true : tmp0_let === element_0;
      tmp$ret$3 = tmp$ret$2;
      var tmp1_check = tmp$ret$3;
      // Inline function 'kotlin.contracts.contract' call
      if (!tmp1_check) {
        var tmp$ret$4;
        // Inline function 'com.varabyte.kobweb.silk.theme.MutableSilkTheme.registerComponentVariants.<anonymous>.<anonymous>' call
        tmp$ret$4 = trimIndent('\n                Attempting to register a second variant with a name that\'s already used: "' + element_0.r2b_1.z29_1 + "\"\n\n                This isn't allowed. Please choose a different name. If there's a usecase for this I'm unaware of,\n                consider filing an issue at https://github.com/varabyte/kobweb/issues\n            ");
        var message = tmp$ret$4;
        throw IllegalStateException_init_$Create$_0(toString_2(message));
      }
      // Inline function 'kotlin.collections.set' call
      var tmp2_set = this.f28_1;
      var tmp3_set = element_0.r2b_1.z29_1;
      tmp2_set.a(tmp3_set, element_0);
    }
  };
  MutableSilkTheme.$metadata$ = classMeta('MutableSilkTheme');
  function SilkConfigInstance() {
    SilkConfigInstance_instance = this;
    this.l28_1 = ColorMode_LIGHT_getInstance();
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$0 = ArrayList_init_$Create$();
    tmp.m28_1 = tmp$ret$0;
  }
  SilkConfigInstance.prototype.r2c = function (_set____db54di) {
    this.l28_1 = _set____db54di;
  };
  SilkConfigInstance.prototype.s2c = function (className, extraModifiers, init) {
    this.m28_1.b(new ComponentStyle(className, extraModifiers, init));
  };
  SilkConfigInstance.prototype.n28 = function (siteStyleSheet) {
    // Inline function 'kotlin.collections.forEach' call
    var tmp0_forEach = this.m28_1;
    var tmp0_iterator = tmp0_forEach.d();
    while (tmp0_iterator.e()) {
      var element = tmp0_iterator.f();
      // Inline function 'com.varabyte.kobweb.silk.theme.SilkConfigInstance.registerStyles.<anonymous>' call
      element.a2b(siteStyleSheet, element.z29_1);
    }
  };
  SilkConfigInstance.$metadata$ = objectMeta('SilkConfigInstance', [SilkConfig]);
  var SilkConfigInstance_instance;
  function SilkConfigInstance_getInstance() {
    if (SilkConfigInstance_instance == null)
      new SilkConfigInstance();
    return SilkConfigInstance_instance;
  }
  function SilkConfig() {
  }
  SilkConfig.$metadata$ = interfaceMeta('SilkConfig');
  function registerBaseStyle(_this__u8e3s4, className, extraModifiers, init) {
    _this__u8e3s4.s2c(className, extraModifiers, registerBaseStyle$lambda(init));
  }
  function registerBaseStyle$default(_this__u8e3s4, className, extraModifiers, init, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      extraModifiers = Companion_getInstance_36();
    return registerBaseStyle(_this__u8e3s4, className, extraModifiers, init);
  }
  function registerBaseStyle$lambda$lambda($init) {
    return function () {
      return $init();
    };
  }
  function registerBaseStyle$lambda($init) {
    return function ($this$registerStyle) {
      $this$registerStyle.n29(registerBaseStyle$lambda$lambda($init));
      return Unit_getInstance();
    };
  }
  function toMinWidthQuery(_this__u8e3s4) {
    return new MediaFeature('min-width', toWidth(_this__u8e3s4));
  }
  function toWidth(_this__u8e3s4) {
    var tmp0_safe_receiver = toValue(_this__u8e3s4);
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.i2c_1;
    return tmp1_elvis_lhs == null ? get_px(0) : tmp1_elvis_lhs;
  }
  function toValue(_this__u8e3s4) {
    var tmp0_subject = _this__u8e3s4;
    var tmp0 = tmp0_subject.o4_1;
    var tmp;
    switch (tmp0) {
      case 0:
        tmp = null;
        break;
      case 1:
        tmp = get_SilkTheme().q28_1.a2c_1;
        break;
      case 2:
        tmp = get_SilkTheme().q28_1.b2c_1;
        break;
      case 3:
        tmp = get_SilkTheme().q28_1.c2c_1;
        break;
      case 4:
        tmp = get_SilkTheme().q28_1.d2c_1;
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    return tmp;
  }
  function get_colorModeState() {
    init_properties_ColorMode_kt_3ieufi();
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = colorModeState$factory();
    tmp$ret$0 = colorModeState$delegate.a2();
    return tmp$ret$0;
  }
  var colorModeState$delegate;
  var ColorMode_LIGHT_instance;
  var ColorMode_DARK_instance;
  function valueOf(value) {
    switch (value) {
      case 'LIGHT':
        return ColorMode_LIGHT_getInstance();
      case 'DARK':
        return ColorMode_DARK_getInstance();
      default:
        ColorMode_initEntries();
        THROW_ISE();
        break;
    }
  }
  var ColorMode_entriesInitialized;
  function ColorMode_initEntries() {
    if (ColorMode_entriesInitialized)
      return Unit_getInstance();
    ColorMode_entriesInitialized = true;
    ColorMode_LIGHT_instance = new ColorMode('LIGHT', 0);
    ColorMode_DARK_instance = new ColorMode('DARK', 1);
  }
  function ColorMode(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  ColorMode.prototype.v2c = function () {
    var tmp0_subject = this;
    var tmp0 = tmp0_subject.o4_1;
    var tmp;
    switch (tmp0) {
      case 0:
        tmp = ColorMode_DARK_getInstance();
        break;
      case 1:
        tmp = ColorMode_LIGHT_getInstance();
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    return tmp;
  };
  ColorMode.$metadata$ = classMeta('ColorMode', undefined, undefined, undefined, undefined, Enum.prototype);
  function getColorMode$composable($composer, $changed) {
    init_properties_ColorMode_kt_3ieufi();
    var $composer_0 = $composer;
    if (isTraceInProgress()) {
      traceEventStart(-1734567091, $changed, -1, 'com.varabyte.kobweb.silk.theme.colors.getColorMode$composable (ColorMode.kt:51)');
    }
    var tmp0 = get_colorModeState().a2();
    if (isTraceInProgress()) {
      traceEventEnd();
    }
    return tmp0;
  }
  function rememberColorMode$composable($composer, $changed) {
    init_properties_ColorMode_kt_3ieufi();
    var $composer_0 = $composer;
    $composer_0.ks(-1269655540);
    sourceInformation($composer_0, 'C(rememberColorMode$composable)');
    if (isTraceInProgress()) {
      traceEventStart(-1269655540, $changed, -1, 'com.varabyte.kobweb.silk.theme.colors.rememberColorMode$composable (ColorMode.kt:47)');
    }
    var tmp$ret$4;
    // Inline function 'androidx.compose.runtime.remember$composable' call
    var tmp0_remember$composable = $composer_0;
    var $composer_1 = tmp0_remember$composable;
    $composer_1.ks(547886695);
    sourceInformation($composer_1, 'C(remember$composable):Composables.kt#9igjgp');
    var tmp$ret$3;
    // Inline function 'androidx.compose.runtime.cache' call
    var tmp1_cache = $composer_1;
    var tmp$ret$2;
    // Inline function 'kotlin.let' call
    var tmp0_let = tmp1_cache.ls();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
    var tmp;
    if (false ? true : tmp0_let === Companion_getInstance_8().ns_1) {
      var tmp$ret$0;
      // Inline function 'com.varabyte.kobweb.silk.theme.colors.rememberColorMode$composable.<anonymous>' call
      tmp$ret$0 = get_colorModeState();
      var value = tmp$ret$0;
      tmp1_cache.ms(value);
      tmp = value;
    } else {
      tmp = tmp0_let;
    }
    tmp$ret$1 = tmp;
    tmp$ret$2 = tmp$ret$1;
    var tmp_0 = tmp$ret$2;
    tmp$ret$3 = (tmp_0 == null ? true : isObject(tmp_0)) ? tmp_0 : THROW_CCE();
    var tmp0 = tmp$ret$3;
    $composer_1.os();
    tmp$ret$4 = tmp0;
    var tmp0_0 = tmp$ret$4;
    if (isTraceInProgress()) {
      traceEventEnd();
    }
    $composer_0.os();
    return tmp0_0;
  }
  function colorModeState$delegate$lambda() {
    init_properties_ColorMode_kt_3ieufi();
    var tmp = SilkConfigInstance_getInstance().l28_1;
    return mutableStateOf$default(tmp, null, 2, null);
  }
  function ColorMode_LIGHT_getInstance() {
    ColorMode_initEntries();
    return ColorMode_LIGHT_instance;
  }
  function ColorMode_DARK_getInstance() {
    ColorMode_initEntries();
    return ColorMode_DARK_instance;
  }
  function colorModeState$factory() {
    return getPropertyCallableRef('colorModeState', 0, KProperty0, function () {
      return get_colorModeState();
    }, null);
  }
  var properties_initialized_ColorMode_kt_kbhp7u;
  function init_properties_ColorMode_kt_3ieufi() {
    if (properties_initialized_ColorMode_kt_kbhp7u) {
    } else {
      properties_initialized_ColorMode_kt_kbhp7u = true;
      colorModeState$delegate = lazy(colorModeState$delegate$lambda);
    }
  }
  function get_LightSilkPalette() {
    init_properties_SilkPalette_kt_3hcdwy();
    return LightSilkPalette;
  }
  var LightSilkPalette;
  function get_DarkSilkPalette() {
    init_properties_SilkPalette_kt_3hcdwy();
    return DarkSilkPalette;
  }
  var DarkSilkPalette;
  function SilkPalette_init_$Init$(background, color, link, button, border, $mask0, $marker, $this) {
    if (!(($mask0 & 16) === 0))
      border = color;
    SilkPalette.call($this, background, color, link, button, border);
    return $this;
  }
  function SilkPalette_init_$Create$(background, color, link, button, border, $mask0, $marker) {
    return SilkPalette_init_$Init$(background, color, link, button, border, $mask0, $marker, Object.create(SilkPalette.prototype));
  }
  function Link(default_0, visited) {
    this.h2a_1 = default_0;
    this.i2a_1 = visited;
    this.j2a_1 = 0;
  }
  Link.prototype.toString = function () {
    return 'Link(default=' + this.h2a_1 + ', visited=' + this.i2a_1 + ')';
  };
  Link.prototype.hashCode = function () {
    var result = hashCode_0(this.h2a_1);
    result = imul(result, 31) + hashCode_0(this.i2a_1) | 0;
    return result;
  };
  Link.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Link))
      return false;
    var tmp0_other_with_cast = other instanceof Link ? other : THROW_CCE();
    if (!equals_0(this.h2a_1, tmp0_other_with_cast.h2a_1))
      return false;
    if (!equals_0(this.i2a_1, tmp0_other_with_cast.i2a_1))
      return false;
    return true;
  };
  Link.$metadata$ = classMeta('Link');
  function Button_0(default_0, hover, pressed) {
    this.t29_1 = default_0;
    this.u29_1 = hover;
    this.v29_1 = pressed;
    this.w29_1 = 0;
  }
  Button_0.prototype.toString = function () {
    return 'Button(default=' + this.t29_1 + ', hover=' + this.u29_1 + ', pressed=' + this.v29_1 + ')';
  };
  Button_0.prototype.hashCode = function () {
    var result = hashCode_0(this.t29_1);
    result = imul(result, 31) + hashCode_0(this.u29_1) | 0;
    result = imul(result, 31) + hashCode_0(this.v29_1) | 0;
    return result;
  };
  Button_0.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Button_0))
      return false;
    var tmp0_other_with_cast = other instanceof Button_0 ? other : THROW_CCE();
    if (!equals_0(this.t29_1, tmp0_other_with_cast.t29_1))
      return false;
    if (!equals_0(this.u29_1, tmp0_other_with_cast.u29_1))
      return false;
    if (!equals_0(this.v29_1, tmp0_other_with_cast.v29_1))
      return false;
    return true;
  };
  Button_0.$metadata$ = classMeta('Button');
  function SilkPalette(background, color, link, button, border) {
    this.e29_1 = background;
    this.f29_1 = color;
    this.g29_1 = link;
    this.h29_1 = button;
    this.i29_1 = border;
    this.j29_1 = 0;
  }
  SilkPalette.prototype.toString = function () {
    return 'SilkPalette(background=' + this.e29_1 + ', color=' + this.f29_1 + ', link=' + this.g29_1 + ', button=' + this.h29_1 + ', border=' + this.i29_1 + ')';
  };
  SilkPalette.prototype.hashCode = function () {
    var result = hashCode_0(this.e29_1);
    result = imul(result, 31) + hashCode_0(this.f29_1) | 0;
    result = imul(result, 31) + this.g29_1.hashCode() | 0;
    result = imul(result, 31) + this.h29_1.hashCode() | 0;
    result = imul(result, 31) + hashCode_0(this.i29_1) | 0;
    return result;
  };
  SilkPalette.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof SilkPalette))
      return false;
    var tmp0_other_with_cast = other instanceof SilkPalette ? other : THROW_CCE();
    if (!equals_0(this.e29_1, tmp0_other_with_cast.e29_1))
      return false;
    if (!equals_0(this.f29_1, tmp0_other_with_cast.f29_1))
      return false;
    if (!this.g29_1.equals(tmp0_other_with_cast.g29_1))
      return false;
    if (!this.h29_1.equals(tmp0_other_with_cast.h29_1))
      return false;
    if (!equals_0(this.i29_1, tmp0_other_with_cast.i29_1))
      return false;
    return true;
  };
  SilkPalette.$metadata$ = classMeta('SilkPalette');
  function SilkPalettes(light, dark) {
    this.k2c_1 = light;
    this.l2c_1 = dark;
    this.m2c_1 = 0;
  }
  SilkPalettes.prototype.n2c = function (colorMode) {
    var tmp0_subject = colorMode;
    var tmp0 = tmp0_subject.o4_1;
    var tmp;
    switch (tmp0) {
      case 0:
        tmp = this.k2c_1;
        break;
      case 1:
        tmp = this.l2c_1;
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    return tmp;
  };
  SilkPalettes.prototype.toString = function () {
    return 'SilkPalettes(light=' + this.k2c_1 + ', dark=' + this.l2c_1 + ')';
  };
  SilkPalettes.prototype.hashCode = function () {
    var result = this.k2c_1.hashCode();
    result = imul(result, 31) + this.l2c_1.hashCode() | 0;
    return result;
  };
  SilkPalettes.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof SilkPalettes))
      return false;
    var tmp0_other_with_cast = other instanceof SilkPalettes ? other : THROW_CCE();
    if (!this.k2c_1.equals(tmp0_other_with_cast.k2c_1))
      return false;
    if (!this.l2c_1.equals(tmp0_other_with_cast.l2c_1))
      return false;
    return true;
  };
  SilkPalettes.$metadata$ = classMeta('SilkPalettes');
  var properties_initialized_SilkPalette_kt_orb016;
  function init_properties_SilkPalette_kt_3hcdwy() {
    if (properties_initialized_SilkPalette_kt_orb016) {
    } else {
      properties_initialized_SilkPalette_kt_orb016 = true;
      var tmp$ret$1;
      // Inline function 'kotlin.run' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'com.varabyte.kobweb.silk.theme.colors.LightSilkPalette.<anonymous>' call
      var buttonBase = Colors_getInstance().z27().q27(0.2);
      var tmp = Colors_getInstance().z27();
      var tmp_0 = Colors_getInstance().u27();
      var tmp_1 = new Link(Colors_getInstance().v27(), Colors_getInstance().x27());
      var tmp_2 = new Button_0(buttonBase, buttonBase.q27(0.2), buttonBase.q27(0.4));
      tmp$ret$0 = SilkPalette_init_$Create$(tmp, tmp_0, tmp_1, tmp_2, null, 16, null);
      tmp$ret$1 = tmp$ret$0;
      LightSilkPalette = tmp$ret$1;
      var tmp$ret$1_0;
      // Inline function 'kotlin.run' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0_0;
      // Inline function 'com.varabyte.kobweb.silk.theme.colors.DarkSilkPalette.<anonymous>' call
      var buttonBase_0 = lightened(Colors_getInstance().u27(), 0.2);
      var tmp_3 = Colors_getInstance().u27();
      var tmp_4 = Colors_getInstance().z27();
      var tmp_5 = new Link(Colors_getInstance().w27(), Colors_getInstance().y27());
      var tmp_6 = new Button_0(buttonBase_0, lightened(buttonBase_0, 0.2), lightened(buttonBase_0, 0.4));
      tmp$ret$0_0 = SilkPalette_init_$Create$(tmp_3, tmp_4, tmp_5, tmp_6, null, 16, null);
      tmp$ret$1_0 = tmp$ret$0_0;
      DarkSilkPalette = tmp$ret$1_0;
    }
  }
  function clip(_this__u8e3s4, shape) {
    var tmp0_safe_receiver = shape.w2c();
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'com.varabyte.kobweb.silk.theme.shapes.clip.<anonymous>' call
      tmp$ret$0 = styleModifier(_this__u8e3s4, clip$lambda(tmp0_safe_receiver));
      tmp$ret$1 = tmp$ret$0;
      tmp = tmp$ret$1;
    }
    var tmp1_elvis_lhs = tmp;
    return tmp1_elvis_lhs == null ? _this__u8e3s4 : tmp1_elvis_lhs;
  }
  function Circle_init_$Init$(radius, center, $mask0, $marker, $this) {
    if (!(($mask0 & 1) === 0))
      radius = 50;
    if (!(($mask0 & 2) === 0))
      center = to(50, 50);
    Circle.call($this, radius, center);
    return $this;
  }
  function Circle_init_$Create$(radius, center, $mask0, $marker) {
    return Circle_init_$Init$(radius, center, $mask0, $marker, Object.create(Circle.prototype));
  }
  function Circle(radius, center) {
    this.x2c_1 = radius;
    this.y2c_1 = center;
    this.z2c_1 = new CircleF(radius, toFloatPair$accessor$1i35fko(center));
    this.a2d_1 = 0;
  }
  Circle.prototype.w2c = function () {
    return this.z2c_1.w2c();
  };
  Circle.$metadata$ = classMeta('Circle', [Shape]);
  function Shape() {
  }
  Shape.$metadata$ = interfaceMeta('Shape');
  function Path() {
    this.e2d_1 = 0;
  }
  Path.prototype.g2d = function (_this__u8e3s4) {
    return toString_2(_this__u8e3s4) + '%';
  };
  Path.prototype.h2d = function (_this__u8e3s4) {
    return toString_2(_this__u8e3s4.k_1) + '% ' + toString_2(_this__u8e3s4.l_1) + '%';
  };
  Path.$metadata$ = classMeta('Path');
  function CircleF(radius, center) {
    this.b2d_1 = radius;
    this.c2d_1 = center;
    this.d2d_1 = 0;
  }
  CircleF.prototype.w2c = function () {
    return new CirclePath(this.b2d_1, this.c2d_1);
  };
  CircleF.$metadata$ = classMeta('CircleF', [Shape]);
  function toFloatPair(_this__u8e3s4) {
    return to(_this__u8e3s4.k_1, _this__u8e3s4.l_1);
  }
  function CirclePath(radius, center) {
    Path.call(this);
    this.j2d_1 = radius;
    this.k2d_1 = center;
    this.l2d_1 = 0;
  }
  CirclePath.prototype.f2d = function () {
    return 'circle(' + this.g2d(this.j2d_1) + ' at ' + this.h2d(this.k2d_1) + ')';
  };
  CirclePath.$metadata$ = classMeta('CirclePath', undefined, undefined, undefined, undefined, Path.prototype);
  function toFloatPair$accessor$1i35fko(_this__u8e3s4) {
    return toFloatPair(_this__u8e3s4);
  }
  function clip$lambda($tmp0_safe_receiver) {
    return function ($this$styleModifier) {
      $this$styleModifier.q1x('clip-path', $tmp0_safe_receiver.f2d());
      return Unit_getInstance();
    };
  }
  function KobwebApp$composable(content, $composer, $changed) {
    var $composer_0 = $composer;
    $composer_0 = $composer_0.z13(1244630298);
    sourceInformation($composer_0, 'C(KobwebApp$composable)');
    var $dirty = $changed;
    if (($changed & 14) === 0)
      $dirty = $dirty | ($composer_0.ps(content) ? 4 : 2);
    if (!(($dirty & 11) === 2) ? true : !$composer_0.d12()) {
      if (isTraceInProgress()) {
        traceEventStart(1244630298, $dirty, -1, 'com.varabyte.kobweb.core.KobwebApp$composable (App.kt:44)');
      }
      // Inline function 'org.jetbrains.compose.web.css.Style$composable' call
      var tmp0_Style$composable = DefaultStyleSheet_getInstance();
      var tmp1_Style$composable = $composer_0;
      var $composer_1 = tmp1_Style$composable;
      $composer_1.ks(-168645675);
      sourceInformation($composer_1, 'C(Style$composable)');
      Style$composable_0(null, tmp0_Style$composable.q1y(), $composer_1, 0, 1);
      $composer_1.os();
      content($composer_0, 14 & $dirty);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    var tmp0_safe_receiver = $composer_0.a14();
    if (tmp0_safe_receiver === null)
      null;
    else {
      tmp0_safe_receiver.b15(KobwebApp$composable$lambda$ref(content, $changed));
    }
  }
  function DefaultStyleSheet$lambda($this$null) {
    padding($this$null, [get_px(0)]);
    margin($this$null, [get_px(0)]);
    return Unit_getInstance();
  }
  function DefaultStyleSheet$lambda_0($this$null) {
    boxSizing($this$null, 'border-box');
    return Unit_getInstance();
  }
  function DefaultStyleSheet() {
    DefaultStyleSheet_instance = this;
    StyleSheet_init_$Init$(null, false, 3, null, this);
    this.v1y('html, body', DefaultStyleSheet$lambda);
    this.v1y('*', DefaultStyleSheet$lambda_0);
    this.q2d_1 = 0;
  }
  DefaultStyleSheet.prototype.u1y = function (selector, cssRule) {
    return this.t1y(selector, cssRule);
  };
  DefaultStyleSheet.$metadata$ = objectMeta('DefaultStyleSheet', undefined, undefined, undefined, undefined, StyleSheet.prototype);
  var DefaultStyleSheet_instance;
  function DefaultStyleSheet_getInstance() {
    if (DefaultStyleSheet_instance == null)
      new DefaultStyleSheet();
    return DefaultStyleSheet_instance;
  }
  function KobwebApp$composable$lambda($content, $$changed, $composer, $force) {
    return KobwebApp$composable($content, $composer, $$changed | 1);
  }
  function KobwebApp$composable$lambda$ref($content, $$changed) {
    return function (p0, p1) {
      KobwebApp$composable$lambda($content, $$changed, p0, p1);
      return Unit_getInstance();
    };
  }
  function get_AppGlobalsLocal() {
    init_properties_AppGlobals_kt_xlhg2z();
    return AppGlobalsLocal;
  }
  var AppGlobalsLocal;
  function AppGlobalsLocal$lambda() {
    init_properties_AppGlobals_kt_xlhg2z();
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mapOf' call
    tmp$ret$0 = emptyMap();
    return tmp$ret$0;
  }
  var properties_initialized_AppGlobals_kt_dlyhbl;
  function init_properties_AppGlobals_kt_xlhg2z() {
    if (properties_initialized_AppGlobals_kt_dlyhbl) {
    } else {
      properties_initialized_AppGlobals_kt_dlyhbl = true;
      AppGlobalsLocal = compositionLocalOf$default(null, AppGlobalsLocal$lambda, 1, null);
    }
  }
  function PageContext$Companion$active$delegate$lambda() {
    return mutableStateOf$default(null, null, 2, null);
  }
  function Companion_41() {
    Companion_instance_41 = this;
    var tmp = this;
    tmp.r2d_1 = lazy(PageContext$Companion$active$delegate$lambda);
  }
  Companion_41.prototype.s2d = function () {
    var tmp$ret$0;
    // Inline function 'kotlin.getValue' call
    var tmp0_getValue = active$factory();
    tmp$ret$0 = this.r2d_1.a2();
    return tmp$ret$0;
  };
  Companion_41.$metadata$ = objectMeta('Companion');
  var Companion_instance_41;
  function Companion_getInstance_41() {
    if (Companion_instance_41 == null)
      new Companion_41();
    return Companion_instance_41;
  }
  function PageContext(router) {
    Companion_getInstance_41();
    this.t2d_1 = router;
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableMapOf' call
    tmp$ret$0 = LinkedHashMap_init_$Create$();
    tmp.u2d_1 = tmp$ret$0;
    this.v2d_1 = this.u2d_1;
    this.w2d_1 = null;
    this.x2d_1 = 8;
  }
  PageContext.prototype.y2d = function () {
    return this.u2d_1;
  };
  PageContext.prototype.z2d = function (_set____db54di) {
    this.w2d_1 = _set____db54di;
  };
  PageContext.$metadata$ = classMeta('PageContext');
  function rememberPageContext$composable($composer, $changed) {
    var $composer_0 = $composer;
    $composer_0.ks(1885592798);
    sourceInformation($composer_0, 'C(rememberPageContext$composable)');
    if (isTraceInProgress()) {
      traceEventStart(1885592798, $changed, -1, 'com.varabyte.kobweb.core.rememberPageContext$composable (PageContext.kt:62)');
    }
    var tmp$ret$4;
    // Inline function 'androidx.compose.runtime.remember$composable' call
    var tmp0_remember$composable = $composer_0;
    var $composer_1 = tmp0_remember$composable;
    $composer_1.ks(547886695);
    sourceInformation($composer_1, 'C(remember$composable):Composables.kt#9igjgp');
    var tmp$ret$3;
    // Inline function 'androidx.compose.runtime.cache' call
    var tmp1_cache = $composer_1;
    var tmp$ret$2;
    // Inline function 'kotlin.let' call
    var tmp0_let = tmp1_cache.ls();
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$1;
    // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
    var tmp;
    if (false ? true : tmp0_let === Companion_getInstance_8().ns_1) {
      var tmp$ret$0;
      // Inline function 'com.varabyte.kobweb.core.rememberPageContext$composable.<anonymous>' call
      var tmp0_elvis_lhs = Companion_getInstance_41().s2d().a2();
      var tmp_0;
      if (tmp0_elvis_lhs == null) {
        throw IllegalStateException_init_$Create$_0('`rememberPageContext` called outside of the scope of a `@Page` annotated method.');
      } else {
        tmp_0 = tmp0_elvis_lhs;
      }
      tmp$ret$0 = tmp_0;
      var value = tmp$ret$0;
      tmp1_cache.ms(value);
      tmp = value;
    } else {
      tmp = tmp0_let;
    }
    tmp$ret$1 = tmp;
    tmp$ret$2 = tmp$ret$1;
    var tmp_1 = tmp$ret$2;
    tmp$ret$3 = (tmp_1 == null ? true : isObject(tmp_1)) ? tmp_1 : THROW_CCE();
    var tmp0 = tmp$ret$3;
    $composer_1.os();
    tmp$ret$4 = tmp0;
    var tmp0_0 = tmp$ret$4;
    if (isTraceInProgress()) {
      traceEventEnd();
    }
    $composer_0.os();
    return tmp0_0;
  }
  function active$factory() {
    return getPropertyCallableRef('active', 1, KProperty1, function (receiver) {
      return receiver.s2d();
    }, null);
  }
  function Anchor$composable(href, attrs, openInternalLinksStrategy, openExternalLinksStrategy, autoPrefix, content, $composer, $changed, $default) {
    var attrs_0 = {_v: attrs};
    var openInternalLinksStrategy_0 = {_v: openInternalLinksStrategy};
    var openExternalLinksStrategy_0 = {_v: openExternalLinksStrategy};
    var autoPrefix_0 = {_v: autoPrefix};
    var content_0 = {_v: content};
    var $composer_0 = $composer;
    $composer_0 = $composer_0.z13(1487018297);
    sourceInformation($composer_0, 'C(Anchor$composable)P(3!1,5,4)');
    var $dirty = $changed;
    if (!(($default & 1) === 0))
      $dirty = $dirty | 6;
    else if (($changed & 14) === 0)
      $dirty = $dirty | ($composer_0.ps(href) ? 4 : 2);
    if (!(($default & 2) === 0))
      $dirty = $dirty | 48;
    else if (($changed & 112) === 0)
      $dirty = $dirty | ($composer_0.ps(attrs_0._v) ? 32 : 16);
    if (!(($default & 4) === 0))
      $dirty = $dirty | 384;
    else if (($changed & 896) === 0)
      $dirty = $dirty | ($composer_0.ps(openInternalLinksStrategy_0._v) ? 256 : 128);
    if (!(($default & 8) === 0))
      $dirty = $dirty | 3072;
    else if (($changed & 7168) === 0)
      $dirty = $dirty | ($composer_0.ps(openExternalLinksStrategy_0._v) ? 2048 : 1024);
    if (!(($default & 16) === 0))
      $dirty = $dirty | 24576;
    else if (($changed & 57344) === 0)
      $dirty = $dirty | ($composer_0.r13(autoPrefix_0._v) ? 16384 : 8192);
    if (!(($default & 32) === 0))
      $dirty = $dirty | 196608;
    else if (($changed & 458752) === 0)
      $dirty = $dirty | ($composer_0.ps(content_0._v) ? 131072 : 65536);
    if (!(($dirty & 374491) === 74898) ? true : !$composer_0.d12()) {
      if (!(($default & 2) === 0)) {
        attrs_0._v = null;
      }
      if (!(($default & 4) === 0)) {
        openInternalLinksStrategy_0._v = null;
      }
      if (!(($default & 8) === 0)) {
        openExternalLinksStrategy_0._v = null;
      }
      if (!(($default & 16) === 0)) {
        autoPrefix_0._v = true;
      }
      if (!(($default & 32) === 0)) {
        content_0._v = null;
      }
      if (isTraceInProgress()) {
        traceEventStart(1487018297, $dirty, -1, 'com.varabyte.kobweb.navigation.Anchor$composable (Anchor.kt:47)');
      }
      var href_0 = prependIf(Companion_getInstance_43(), autoPrefix_0._v, href);
      var ctx = rememberPageContext$composable($composer_0, 0);
      A$composable(href_0, Anchor$composable$lambda_0(attrs_0, openInternalLinksStrategy_0, openExternalLinksStrategy_0, ctx, href_0), content_0._v, $composer_0, 896 & $dirty >> 9, 0);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    var tmp0_safe_receiver = $composer_0.a14();
    if (tmp0_safe_receiver === null)
      null;
    else {
      tmp0_safe_receiver.b15(Anchor$composable$lambda$ref(href, attrs_0, openInternalLinksStrategy_0, openExternalLinksStrategy_0, autoPrefix_0, content_0, $changed, $default));
    }
  }
  function Anchor$composable$lambda($href, $attrs, $openInternalLinksStrategy, $openExternalLinksStrategy, $autoPrefix, $content, $$changed, $$default, $composer, $force) {
    return Anchor$composable($href, $attrs._v, $openInternalLinksStrategy._v, $openExternalLinksStrategy._v, $autoPrefix._v, $content._v, $composer, $$changed | 1, $$default);
  }
  function Anchor$composable$lambda$lambda($openInternalLinksStrategy, $openExternalLinksStrategy, $ctx, $href) {
    return function (evt) {
      var tmp0_elvis_lhs = $openInternalLinksStrategy._v;
      var openInternalLinksStrategy = tmp0_elvis_lhs == null ? toOpenLinkStrategy(evt) : tmp0_elvis_lhs;
      var tmp;
      if ($openExternalLinksStrategy._v == null) {
        var tmp_0;
        if ($ctx.t2d_1.e2e($href, null, openInternalLinksStrategy, 2, null)) {
          evt.t20();
          tmp_0 = Unit_getInstance();
        }
        tmp = tmp_0;
      } else {
        $ctx.t2d_1.d2e($href, null, openInternalLinksStrategy, $openExternalLinksStrategy._v, 2, null);
        evt.t20();
        tmp = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  function Anchor$composable$lambda_0($attrs, $openInternalLinksStrategy, $openExternalLinksStrategy, $ctx, $href) {
    return function ($this$A) {
      var tmp;
      if (!($attrs._v == null)) {
        tmp = $attrs._v($this$A);
      }
      $this$A.g1t(Anchor$composable$lambda$lambda($openInternalLinksStrategy, $openExternalLinksStrategy, $ctx, $href));
      return Unit_getInstance();
    };
  }
  function Anchor$composable$lambda$ref($href, $attrs, $openInternalLinksStrategy, $openExternalLinksStrategy, $autoPrefix, $content, $$changed, $$default) {
    return function (p0, p1) {
      Anchor$composable$lambda($href, $attrs, $openInternalLinksStrategy, $openExternalLinksStrategy, $autoPrefix, $content, $$changed, $$default, p0, p1);
      return Unit_getInstance();
    };
  }
  var OpenLinkStrategy_IN_PLACE_instance;
  var OpenLinkStrategy_IN_NEW_TAB_BACKGROUND_instance;
  var OpenLinkStrategy_IN_NEW_TAB_FOREGROUND_instance;
  var OpenLinkStrategy_IN_NEW_WINDOW_instance;
  var OpenLinkStrategy_entriesInitialized;
  function OpenLinkStrategy_initEntries() {
    if (OpenLinkStrategy_entriesInitialized)
      return Unit_getInstance();
    OpenLinkStrategy_entriesInitialized = true;
    OpenLinkStrategy_IN_PLACE_instance = new OpenLinkStrategy('IN_PLACE', 0);
    OpenLinkStrategy_IN_NEW_TAB_BACKGROUND_instance = new OpenLinkStrategy('IN_NEW_TAB_BACKGROUND', 1);
    OpenLinkStrategy_IN_NEW_TAB_FOREGROUND_instance = new OpenLinkStrategy('IN_NEW_TAB_FOREGROUND', 2);
    OpenLinkStrategy_IN_NEW_WINDOW_instance = new OpenLinkStrategy('IN_NEW_WINDOW', 3);
  }
  function OpenLinkStrategy(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  OpenLinkStrategy.$metadata$ = classMeta('OpenLinkStrategy', undefined, undefined, undefined, undefined, Enum.prototype);
  function open(_this__u8e3s4, href, strategy) {
    var tmp0_subject = strategy;
    var tmp0 = tmp0_subject.o4_1;
    switch (tmp0) {
      case 0:
        _this__u8e3s4.open(href, '_self');
        ;
        break;
      case 1:
        _this__u8e3s4.open(href, '_blank');
        ;
        break;
      case 2:
        var tmp$ret$0;
        // Inline function 'kotlin.also' call
        var tmp0_also = _this__u8e3s4.open(href, '_blank');
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'com.varabyte.kobweb.navigation.open.<anonymous>' call
        var tmp0_safe_receiver = tmp0_also;
        if (tmp0_safe_receiver == null)
          null;
        else {
          tmp0_safe_receiver.focus();
        }
        tmp$ret$0 = tmp0_also;

        ;
        break;
      case 3:
        _this__u8e3s4.open(href);
        ;
        break;
    }
  }
  function toOpenLinkStrategy(_this__u8e3s4) {
    return (_this__u8e3s4.k22_1 ? _this__u8e3s4.w22_1 : false) ? OpenLinkStrategy_IN_NEW_TAB_FOREGROUND_getInstance() : _this__u8e3s4.k22_1 ? OpenLinkStrategy_IN_NEW_TAB_BACKGROUND_getInstance() : _this__u8e3s4.w22_1 ? OpenLinkStrategy_IN_NEW_WINDOW_getInstance() : OpenLinkStrategy_IN_PLACE_getInstance();
  }
  function OpenLinkStrategy_IN_PLACE_getInstance() {
    OpenLinkStrategy_initEntries();
    return OpenLinkStrategy_IN_PLACE_instance;
  }
  function OpenLinkStrategy_IN_NEW_TAB_BACKGROUND_getInstance() {
    OpenLinkStrategy_initEntries();
    return OpenLinkStrategy_IN_NEW_TAB_BACKGROUND_instance;
  }
  function OpenLinkStrategy_IN_NEW_TAB_FOREGROUND_getInstance() {
    OpenLinkStrategy_initEntries();
    return OpenLinkStrategy_IN_NEW_TAB_FOREGROUND_instance;
  }
  function OpenLinkStrategy_IN_NEW_WINDOW_getInstance() {
    OpenLinkStrategy_initEntries();
    return OpenLinkStrategy_IN_NEW_WINDOW_instance;
  }
  function Companion_42() {
    Companion_instance_42 = this;
  }
  Companion_42.prototype.f2e = function (path) {
    return !(this.g2e(path) == null);
  };
  Companion_42.prototype.g2e = function (path) {
    var tmp;
    try {
      tmp = new Route(path);
    } catch ($p) {
      var tmp_0;
      if ($p instanceof RouteException) {
        tmp_0 = null;
      } else {
        throw $p;
      }
      tmp = tmp_0;
    }
    return tmp;
  };
  Companion_42.prototype.h2e = function (url) {
    var tmp0_elvis_lhs = this.g2e(removePrefix(url.href, url.origin));
    return tmp0_elvis_lhs == null ? new Route('') : tmp0_elvis_lhs;
  };
  Companion_42.$metadata$ = objectMeta('Companion');
  var Companion_instance_42;
  function Companion_getInstance_42() {
    if (Companion_instance_42 == null)
      new Companion_42();
    return Companion_instance_42;
  }
  function Route(value) {
    Companion_getInstance_42();
    var tmp;
    try {
      new URL(value);
      tmp = false;
    } catch ($p) {
      var tmp_0;
      if ($p instanceof Error) {
        tmp_0 = true;
      } else {
        throw $p;
      }
      tmp = tmp_0;
    }
    var isValidRoute = tmp;
    if (!isValidRoute) {
      throw new RouteException(value);
    }
    var tmp_1 = this;
    tmp_1.i2e_1 = startsWith$default_1(value, '/', false, 2, null);
    this.j2e_1 = new URL(value, 'http://unused.com');
    this.k2e_1 = 0;
  }
  Route.prototype.l2e = function () {
    var tmp;
    if (this.i2e_1) {
      tmp = this.j2e_1.pathname;
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.also' call
      var tmp0_also = drop(this.j2e_1.pathname, 1);
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'com.varabyte.kobweb.navigation.Route.<get-pathname>.<anonymous>' call
      // Inline function 'kotlin.check' call
      var tmp0_check = tmp0_also === '/';
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlin.check' call
      // Inline function 'kotlin.contracts.contract' call
      if (!tmp0_check) {
        var tmp$ret$0;
        // Inline function 'kotlin.check.<anonymous>' call
        tmp$ret$0 = 'Check failed.';
        var message = tmp$ret$0;
        throw IllegalStateException_init_$Create$_0(toString_2(message));
      }
      tmp$ret$1 = tmp0_also;
      tmp = tmp$ret$1;
    }
    return tmp;
  };
  Route.prototype.m2e = function () {
    return this.j2e_1.search;
  };
  Route.prototype.n2e = function () {
    return this.j2e_1.hash;
  };
  Route.prototype.toString = function () {
    return this.l2e() + this.m2e() + this.n2e();
  };
  Route.$metadata$ = classMeta('Route');
  function RouteException(value) {
    Exception_init_$Init$_0('Failed to create route for incoming value: ' + value, this);
    this.o2e_1 = 0;
    captureStack(this, RouteException);
  }
  RouteException.$metadata$ = classMeta('RouteException', undefined, undefined, undefined, undefined, Exception.prototype);
  function prependIf(_this__u8e3s4, condition, path) {
    return condition ? Companion_getInstance_43().p2e(path) : path;
  }
  function Companion_43() {
    Companion_instance_43 = this;
  }
  Companion_43.prototype.q2e = function (value) {
    Companion_getInstance_44().s2e(new RoutePrefixImpl(value));
  };
  Companion_43.prototype.p2e = function (path) {
    return Companion_getInstance_44().t2e().p2e(path);
  };
  Companion_43.$metadata$ = objectMeta('Companion', [RoutePrefix]);
  var Companion_instance_43;
  function Companion_getInstance_43() {
    if (Companion_instance_43 == null)
      new Companion_43();
    return Companion_instance_43;
  }
  function RoutePrefix() {
  }
  RoutePrefix.$metadata$ = interfaceMeta('RoutePrefix');
  function Companion_44() {
    Companion_instance_44 = this;
    this.r2e_1 = null;
  }
  Companion_44.prototype.s2e = function (value) {
    // Inline function 'kotlin.check' call
    var tmp0_check = this.r2e_1 == null;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_check) {
      var tmp$ret$0;
      // Inline function 'com.varabyte.kobweb.navigation.Companion.<set-_instance>.<anonymous>' call
      tmp$ret$0 = 'Cannot overwrite route prefix once set';
      var message = tmp$ret$0;
      throw IllegalStateException_init_$Create$_0(toString_2(message));
    }
    this.r2e_1 = value;
  };
  Companion_44.prototype.v2e = function () {
    if (this.r2e_1 == null) {
      this.r2e_1 = new RoutePrefixImpl('');
    }
    return this.r2e_1;
  };
  Companion_44.prototype.t2e = function () {
    return ensureNotNull(this.v2e());
  };
  Companion_44.$metadata$ = objectMeta('Companion');
  var Companion_instance_44;
  function Companion_getInstance_44() {
    if (Companion_instance_44 == null)
      new Companion_44();
    return Companion_instance_44;
  }
  function RoutePrefixImpl(value) {
    Companion_getInstance_44();
    var tmp = this;
    var tmp$ret$2;
    // Inline function 'kotlin.takeIf' call
    // Inline function 'kotlin.contracts.contract' call
    var tmp_0;
    var tmp$ret$1;
    // Inline function 'com.varabyte.kobweb.navigation.RoutePrefixImpl.value.<anonymous>' call
    var tmp$ret$0;
    // Inline function 'kotlin.text.isNotBlank' call
    tmp$ret$0 = !isBlank(value);
    tmp$ret$1 = tmp$ret$0;
    if (tmp$ret$1) {
      tmp_0 = value;
    } else {
      tmp_0 = null;
    }
    tmp$ret$2 = tmp_0;
    var tmp0_safe_receiver = tmp$ret$2;
    var tmp_1;
    if (tmp0_safe_receiver == null) {
      tmp_1 = null;
    } else {
      var tmp$ret$4;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$3;
      // Inline function 'com.varabyte.kobweb.navigation.RoutePrefixImpl.value.<anonymous>' call
      var tmp_2;
      var tmp_3 = _Char___init__impl__6a9atx(47);
      if (startsWith$default(tmp0_safe_receiver, tmp_3, false, 2, null)) {
        tmp_2 = tmp0_safe_receiver;
      } else {
        tmp_2 = '/' + tmp0_safe_receiver;
      }
      tmp$ret$3 = tmp_2;
      tmp$ret$4 = tmp$ret$3;
      tmp_1 = tmp$ret$4;
    }
    var tmp1_safe_receiver = tmp_1;
    var tmp_4;
    if (tmp1_safe_receiver == null) {
      tmp_4 = null;
    } else {
      var tmp$ret$6;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$5;
      // Inline function 'com.varabyte.kobweb.navigation.RoutePrefixImpl.value.<anonymous>' call
      var tmp_5;
      var tmp_6 = _Char___init__impl__6a9atx(47);
      if (endsWith$default(tmp1_safe_receiver, tmp_6, false, 2, null)) {
        tmp_5 = tmp1_safe_receiver;
      } else {
        tmp_5 = '' + tmp1_safe_receiver + '/';
      }
      tmp$ret$5 = tmp_5;
      tmp$ret$6 = tmp$ret$5;
      tmp_4 = tmp$ret$6;
    }
    var tmp2_elvis_lhs = tmp_4;
    tmp.u2e_1 = tmp2_elvis_lhs == null ? '' : tmp2_elvis_lhs;
  }
  RoutePrefixImpl.prototype.p2e = function (path) {
    if (isBlank(this.u2e_1))
      return path;
    if (!startsWith$default_1(path, '/', false, 2, null))
      return path;
    return dropLast(this.u2e_1, 1) + path;
  };
  RoutePrefixImpl.prototype.toString = function () {
    return this.u2e_1;
  };
  RoutePrefixImpl.$metadata$ = classMeta('RoutePrefixImpl', [RoutePrefix]);
  function PageData(pageMethod, pageContext) {
    this.w2e_1 = pageMethod;
    this.x2e_1 = pageContext;
  }
  PageData.$metadata$ = classMeta('PageData');
  Node.prototype.oc = function () {
    return this.y2e_1;
  };
  Node.prototype.c2f = function (name) {
    return this.y2e_1 === name;
  };
  Node.prototype.d2f = function (routePart) {
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.collections.firstOrNull' call
      var tmp0_firstOrNull = this.a2f_1;
      var tmp0_iterator = tmp0_firstOrNull.d();
      while (tmp0_iterator.e()) {
        var element = tmp0_iterator.f();
        var tmp$ret$0;
        // Inline function 'com.varabyte.kobweb.navigation.Node.findChild.<anonymous>' call
        tmp$ret$0 = element.c2f(routePart);
        if (tmp$ret$0) {
          tmp$ret$1 = element;
          break $l$block;
        }
      }
      tmp$ret$1 = null;
    }
    return tmp$ret$1;
  };
  function Node(name, method) {
    this.y2e_1 = name;
    this.z2e_1 = method;
    var tmp = this;
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$0 = ArrayList_init_$Create$();
    tmp.a2f_1 = tmp$ret$0;
    this.b2f_1 = 8;
  }
  Node.prototype.e2f = function (routePart, method) {
    var tmp;
    var tmp_0;
    var tmp_1 = _Char___init__impl__6a9atx(123);
    if (startsWith$default(routePart, tmp_1, false, 2, null)) {
      var tmp_2 = _Char___init__impl__6a9atx(125);
      tmp_0 = endsWith$default(routePart, tmp_2, false, 2, null);
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      var tmp$ret$1;
      // Inline function 'kotlin.text.substring' call
      var tmp0_substring = routePart.length - 1 | 0;
      var tmp$ret$0;
      // Inline function 'kotlin.js.asDynamic' call
      tmp$ret$0 = routePart;
      tmp$ret$1 = tmp$ret$0.substring(1, tmp0_substring);
      tmp = new DynamicNode(tmp$ret$1, method);
    } else {
      tmp = new StaticNode(routePart, method);
    }
    var node = tmp;
    this.a2f_1.b(node);
    return node;
  };
  Node.$metadata$ = classMeta('Node');
  function RootNode() {
    Node.call(this, '', null);
    this.j2f_1 = 0;
  }
  RootNode.$metadata$ = classMeta('RootNode', undefined, undefined, undefined, undefined, Node.prototype);
  function StaticNode(name, method) {
    Node.call(this, name, method);
    this.o2f_1 = 0;
  }
  StaticNode.$metadata$ = classMeta('StaticNode', undefined, undefined, undefined, undefined, Node.prototype);
  DynamicNode.prototype.c2f = function (name) {
    return true;
  };
  function DynamicNode(name, method) {
    Node.call(this, name, method);
    this.t2f_1 = 0;
  }
  DynamicNode.$metadata$ = classMeta('DynamicNode', undefined, undefined, undefined, undefined, Node.prototype);
  function ResolvedEntry(node, routePart) {
    this.u2f_1 = node;
    this.v2f_1 = routePart;
  }
  ResolvedEntry.prototype.s1k = function () {
    return this.u2f_1;
  };
  ResolvedEntry.prototype.w2f = function () {
    return this.v2f_1;
  };
  ResolvedEntry.$metadata$ = classMeta('ResolvedEntry');
  function resolve($this, route) {
    var tmp = charArrayOf_0([_Char___init__impl__6a9atx(47)]);
    var routeParts = split$default(route, tmp, false, 0, 6, null);
    var tmp$ret$0;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp$ret$0 = ArrayList_init_$Create$();
    var resolved = tmp$ret$0;
    var currNode = $this.x2f_1;
    // Inline function 'kotlin.require' call
    var tmp0_require = routeParts.h(0) === $this.x2f_1.y2e_1;
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$1;
      // Inline function 'kotlin.require.<anonymous>' call
      tmp$ret$1 = 'Failed requirement.';
      var message = tmp$ret$1;
      throw IllegalArgumentException_init_$Create$(toString_2(message));
    }
    var inductionVariable = 1;
    var last = routeParts.g();
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var routePart = routeParts.h(i);
        var tmp1_elvis_lhs = currNode.d2f(routePart);
        var tmp_0;
        if (tmp1_elvis_lhs == null) {
          return null;
        } else {
          tmp_0 = tmp1_elvis_lhs;
        }
        currNode = tmp_0;
        resolved.b(new ResolvedEntry(currNode, routePart));
      }
       while (inductionVariable < last);
    return resolved;
  }
  function ComposableLambda$invoke$ref_11($boundThis) {
    return function (p0, p1) {
      return $boundThis.b12(p0, p1);
    };
  }
  function RouteTree$createPageData$lambda(this$0) {
    return function ($composer, $changed) {
      var $composer_0 = $composer;
      var tmp;
      if (!(($changed & 11) === 2) ? true : !$composer_0.d12()) {
        if (isTraceInProgress()) {
          traceEventStart(-196737177, $changed, -1, 'com.varabyte.kobweb.navigation.RouteTree.createPageData.<anonymous> (RouteTree.kt:133)');
        }
        this$0.y2f_1(404, $composer_0, 6);
        var tmp_0;
        if (isTraceInProgress()) {
          traceEventEnd();
          tmp_0 = Unit_getInstance();
        }
        tmp = tmp_0;
      } else {
        $composer_0.hy();
        tmp = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  function RouteTree() {
    this.x2f_1 = new RootNode();
    this.y2f_1 = ComposableSingletons$RouteTreeKt_getInstance().z2f_1;
  }
  RouteTree.prototype.a2g = function (router, route, query, fragment) {
    var resolvedEntries = resolve(this, route);
    var tmp0_safe_receiver = resolvedEntries;
    var tmp1_safe_receiver = tmp0_safe_receiver == null ? null : last(tmp0_safe_receiver);
    var tmp2_safe_receiver = tmp1_safe_receiver == null ? null : tmp1_safe_receiver.u2f_1;
    var tmp3_elvis_lhs = tmp2_safe_receiver == null ? null : tmp2_safe_receiver.z2e_1;
    var tmp;
    if (tmp3_elvis_lhs == null) {
      tmp = ComposableLambda$invoke$ref_11(composableLambdaInstance(-196737177, true, RouteTree$createPageData$lambda(this)));
    } else {
      tmp = tmp3_elvis_lhs;
    }
    var pageMethod = tmp;
    var tmp$ret$0;
    // Inline function 'kotlin.apply' call
    var tmp0_apply = new PageContext(router);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'com.varabyte.kobweb.navigation.RouteTree.createPageData.<anonymous>' call
    tmp0_apply.w2d_1 = fragment;
    tmp$ret$0 = tmp0_apply;
    var ctx = tmp$ret$0;
    var tmp4_safe_receiver = resolvedEntries;
    if (tmp4_safe_receiver == null)
      null;
    else {
      // Inline function 'kotlin.collections.forEach' call
      var tmp0_iterator = tmp4_safe_receiver.d();
      while (tmp0_iterator.e()) {
        var element = tmp0_iterator.f();
        // Inline function 'com.varabyte.kobweb.navigation.RouteTree.createPageData.<anonymous>' call
        var tmp_0 = element.u2f_1;
        if (tmp_0 instanceof DynamicNode) {
          // Inline function 'kotlin.collections.set' call
          var tmp0_set = ctx.u2d_1;
          var tmp1_set = element.u2f_1.y2e_1;
          var tmp2_set = element.v2f_1;
          tmp0_set.a(tmp1_set, tmp2_set);
        }
      }
    }
    var tmp5_safe_receiver = query;
    var tmp_1;
    if (tmp5_safe_receiver == null) {
      tmp_1 = null;
    } else {
      tmp_1 = split$default_0(tmp5_safe_receiver, ['&'], false, 0, 6, null);
    }
    var tmp6_safe_receiver = tmp_1;
    if (tmp6_safe_receiver == null)
      null;
    else {
      // Inline function 'kotlin.collections.forEach' call
      var tmp0_iterator_0 = tmp6_safe_receiver.d();
      while (tmp0_iterator_0.e()) {
        var element_0 = tmp0_iterator_0.f();
        // Inline function 'com.varabyte.kobweb.navigation.RouteTree.createPageData.<anonymous>' call
        var tmp_2 = charArrayOf_0([_Char___init__impl__6a9atx(61)]);
        var keyValue = split$default(element_0, tmp_2, false, 2, 2, null);
        var key = keyValue.h(0);
        var tmp$ret$1;
        // Inline function 'kotlin.collections.elementAtOrNull' call
        tmp$ret$1 = getOrNull(keyValue, 1);
        var tmp0_elvis_lhs = tmp$ret$1;
        var value = tmp0_elvis_lhs == null ? '' : tmp0_elvis_lhs;
        // Inline function 'kotlin.collections.set' call
        var tmp0_set_0 = ctx.u2d_1;
        tmp0_set_0.a(key, value);
      }
    }
    return new PageData(pageMethod, ctx);
  };
  RouteTree.prototype.b2g = function (route, method) {
    if (!(resolve(this, route) == null))
      return false;
    var tmp = charArrayOf_0([_Char___init__impl__6a9atx(47)]);
    var routeParts = split$default(route, tmp, false, 0, 6, null);
    var currNode = this.x2f_1;
    // Inline function 'kotlin.require' call
    var tmp0_require = routeParts.h(0) === this.x2f_1.y2e_1;
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'kotlin.require.<anonymous>' call
      tmp$ret$0 = 'Failed requirement.';
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString_2(message));
    }
    var inductionVariable = 1;
    var last = routeParts.g();
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var routePart = routeParts.h(i);
        var tmp1_elvis_lhs = currNode.d2f(routePart);
        var tmp_0;
        if (tmp1_elvis_lhs == null) {
          var tmp_1 = currNode;
          var tmp$ret$2;
          // Inline function 'kotlin.takeIf' call
          // Inline function 'kotlin.contracts.contract' call
          var tmp_2;
          var tmp$ret$1;
          // Inline function 'com.varabyte.kobweb.navigation.RouteTree.register$composable.<anonymous>' call
          tmp$ret$1 = i === get_lastIndex_0(routeParts);
          if (tmp$ret$1) {
            tmp_2 = method;
          } else {
            tmp_2 = null;
          }
          tmp$ret$2 = tmp_2;
          tmp_0 = tmp_1.e2f(routePart, tmp$ret$2);
        } else {
          tmp_0 = tmp1_elvis_lhs;
        }
        currNode = tmp_0;
      }
       while (inductionVariable < last);
    return true;
  };
  RouteTree.$metadata$ = classMeta('RouteTree');
  function ComposableLambda$invoke$ref_12($boundThis) {
    return function (p0, p1, p2) {
      return $boundThis.z1q(p0, p1, p2);
    };
  }
  function ComposableSingletons$RouteTreeKt$lambda_1$lambda_h43un7(errorCode, $composer, $changed) {
    var $composer_0 = $composer;
    var $dirty = $changed;
    if (($changed & 14) === 0)
      $dirty = $dirty | ($composer_0.s13(errorCode) ? 4 : 2);
    if (!(($dirty & 91) === 18) ? true : !$composer_0.d12()) {
      if (isTraceInProgress()) {
        traceEventStart(-557678680, $dirty, -1, 'com.varabyte.kobweb.navigation.ComposableSingletons$RouteTreeKt.lambda-1.<anonymous> (RouteTree.kt:84)');
      }
      ErrorPage$composable(errorCode, $composer_0, 14 & $dirty);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    return Unit_getInstance();
  }
  function ComposableSingletons$RouteTreeKt() {
    ComposableSingletons$RouteTreeKt_instance = this;
    var tmp = this;
    tmp.z2f_1 = ComposableLambda$invoke$ref_12(composableLambdaInstance(-557678680, false, ComposableSingletons$RouteTreeKt$lambda_1$lambda_h43un7));
  }
  ComposableSingletons$RouteTreeKt.$metadata$ = objectMeta('ComposableSingletons$RouteTreeKt');
  var ComposableSingletons$RouteTreeKt_instance;
  function ComposableSingletons$RouteTreeKt_getInstance() {
    if (ComposableSingletons$RouteTreeKt_instance == null)
      new ComposableSingletons$RouteTreeKt();
    return ComposableSingletons$RouteTreeKt_instance;
  }
  function ErrorPage$composable(errorCode, $composer, $changed) {
    var $composer_0 = $composer;
    $composer_0 = $composer_0.z13(24844165);
    var $dirty = $changed;
    if (($changed & 14) === 0)
      $dirty = $dirty | ($composer_0.s13(errorCode) ? 4 : 2);
    if (!(($dirty & 11) === 2) ? true : !$composer_0.d12()) {
      if (isTraceInProgress()) {
        traceEventStart(24844165, $changed, -1, 'com.varabyte.kobweb.navigation.ErrorPage$composable (RouteTree.kt:21)');
      }
      var tmp$ret$6;
      // Inline function 'kotlin.run' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$5;
      // Inline function 'com.varabyte.kobweb.navigation.ErrorPage$composable.<anonymous>' call
      var tmp = $composer_0;
      var dispatchReceiver = composableLambda(tmp, 542436721, true, ErrorPage$composable$lambda_0(errorCode));
      var tmp$ret$4;
      // Inline function 'androidx.compose.runtime.remember$composable' call
      var tmp0_remember$composable = $composer_0;
      var $composer_1 = tmp0_remember$composable;
      $composer_1.ks(-838505973);
      sourceInformation($composer_1, 'C(remember$composable)P(1):Composables.kt#9igjgp');
      var tmp$ret$3;
      // Inline function 'androidx.compose.runtime.cache' call
      var tmp1_cache = $composer_1;
      var tmp2_cache = $composer_1.ps(dispatchReceiver);
      var tmp$ret$2;
      // Inline function 'kotlin.let' call
      var tmp0_let = tmp1_cache.ls();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
      var tmp_0;
      if (tmp2_cache ? true : tmp0_let === Companion_getInstance_8().ns_1) {
        var tmp$ret$0;
        // Inline function 'com.varabyte.kobweb.navigation.ErrorPage$composable.<anonymous>.<anonymous>' call
        tmp$ret$0 = ComposableLambda$invoke$ref_13(dispatchReceiver);
        var value = tmp$ret$0;
        tmp1_cache.ms(value);
        tmp_0 = value;
      } else {
        tmp_0 = tmp0_let;
      }
      tmp$ret$1 = tmp_0;
      tmp$ret$2 = tmp$ret$1;
      var tmp_1 = tmp$ret$2;
      tmp$ret$3 = (tmp_1 == null ? true : isObject(tmp_1)) ? tmp_1 : THROW_CCE();
      var tmp0 = tmp$ret$3;
      $composer_1.os();
      tmp$ret$4 = tmp0;
      tmp$ret$5 = tmp$ret$4;
      tmp$ret$6 = tmp$ret$5;
      Div$composable(null, tmp$ret$6, $composer_0, 48, 1);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    var tmp0_safe_receiver = $composer_0.a14();
    if (tmp0_safe_receiver === null)
      null;
    else {
      tmp0_safe_receiver.b15(ErrorPage$composable$lambda$ref(errorCode, $changed));
    }
  }
  function ErrorPage$composable$lambda($errorCode, $$changed, $composer, $force) {
    return ErrorPage$composable($errorCode, $composer, $$changed | 1);
  }
  function ErrorPage$composable$lambda_0($errorCode) {
    return function ($this$Div, $composer, $changed) {
      var $composer_0 = $composer;
      var tmp;
      if (!(($changed & 81) === 16) ? true : !$composer_0.d12()) {
        if (isTraceInProgress()) {
          traceEventStart(542436721, $changed, -1, 'com.varabyte.kobweb.navigation.ErrorPage$composable.<anonymous> (RouteTree.kt:22)');
        }
        Text$composable('Error code: ' + $errorCode, $composer_0, 0);
        var tmp_0;
        if (isTraceInProgress()) {
          traceEventEnd();
          tmp_0 = Unit_getInstance();
        }
        tmp = tmp_0;
      } else {
        $composer_0.hy();
        tmp = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  function ComposableLambda$invoke$ref_13($boundThis) {
    return function (p0, p1, p2) {
      return $boundThis.z1q(p0, p1, p2);
    };
  }
  function ErrorPage$composable$lambda$ref($errorCode, $$changed) {
    return function (p0, p1) {
      ErrorPage$composable$lambda($errorCode, $$changed, p0, p1);
      return Unit_getInstance();
    };
  }
  function updateActivePage($this, pathQueryAndFragment) {
    var tmp$ret$1;
    // Inline function 'kotlin.let' call
    var tmp = charArrayOf_0([_Char___init__impl__6a9atx(35)]);
    var tmp0_let = split$default(pathQueryAndFragment, tmp, false, 2, 2, null);
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$0;
    // Inline function 'com.varabyte.kobweb.navigation.Router.updateActivePage.<anonymous>' call
    var tmp_0;
    if (tmp0_let.g() === 1) {
      tmp_0 = to(tmp0_let.h(0), null);
    } else {
      tmp_0 = to(tmp0_let.h(0), tmp0_let.h(1));
    }
    tmp$ret$0 = tmp_0;
    tmp$ret$1 = tmp$ret$0;
    var tmp0_container = tmp$ret$1;
    var pathAndQuery = tmp0_container.a3();
    var fragment = tmp0_container.b3();
    var tmp$ret$5;
    // Inline function 'kotlin.let' call
    var tmp$ret$3;
    // Inline function 'kotlin.let' call
    var tmp_1 = charArrayOf_0([_Char___init__impl__6a9atx(63)]);
    var tmp1_let = split$default(pathAndQuery, tmp_1, false, 2, 2, null);
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$2;
    // Inline function 'com.varabyte.kobweb.navigation.Router.updateActivePage.<anonymous>' call
    var tmp_2;
    if (tmp1_let.g() === 1) {
      tmp_2 = to(tmp1_let.h(0), null);
    } else {
      tmp_2 = to(tmp1_let.h(0), tmp1_let.h(1));
    }
    tmp$ret$2 = tmp_2;
    tmp$ret$3 = tmp$ret$2;
    var tmp2_let = tmp$ret$3;
    // Inline function 'kotlin.contracts.contract' call
    var tmp$ret$4;
    // Inline function 'com.varabyte.kobweb.navigation.Router.updateActivePage.<anonymous>' call
    var tmp_3;
    if (isBlank(tmp2_let.k_1) ? !(fragment == null) : false) {
      tmp_3 = to(window.location.pathname, tmp2_let.l_1);
    } else {
      tmp_3 = tmp2_let;
    }
    tmp$ret$4 = tmp_3;
    tmp$ret$5 = tmp$ret$4;
    var tmp1_container = tmp$ret$5;
    var path = tmp1_container.a3();
    var query = tmp1_container.b3();
    var tmp_4;
    if (Companion_getInstance_42().f2e(path)) {
      $this.a2e_1.po($this.b2e_1.a2g($this, path, query, fragment));
      tmp_4 = true;
    } else {
      tmp_4 = false;
    }
    return tmp_4;
  }
  function normalize(_this__u8e3s4, $this) {
    if (!Companion_getInstance_42().f2e(_this__u8e3s4))
      return _this__u8e3s4;
    var hrefResolved = new URL(_this__u8e3s4, window.location.href);
    return Companion_getInstance_42().h2e(hrefResolved).toString();
  }
  function renderActivePage$composable$lambda($tmp0_rcvr, $$changed, $composer, $force) {
    return $tmp0_rcvr.c2g($composer, $$changed | 1);
  }
  function Router$lambda(this$0) {
    return function (it) {
      return updateActivePage(this$0, ensureNotNull(document.location).pathname);
    };
  }
  function Router$renderActivePage$composable$lambda$ref($tmp0_rcvr, $$changed) {
    return function (p0, p1) {
      renderActivePage$composable$lambda($tmp0_rcvr, $$changed, p0, p1);
      return Unit_getInstance();
    };
  }
  function Router() {
    var tmp = this;
    tmp.a2e_1 = mutableStateOf$default(null, null, 2, null);
    this.b2e_1 = new RouteTree();
    var tmp_0 = window;
    tmp_0.onpopstate = Router$lambda(this);
    this.c2e_1 = 8;
  }
  Router.prototype.d2g = function (pathQueryAndFragment, updateHistoryMode, openLinkStrategy) {
    var pathQueryAndFragment_0 = normalize(pathQueryAndFragment, this);
    if (!openLinkStrategy.equals(OpenLinkStrategy_IN_PLACE_getInstance())) {
      open(window, pathQueryAndFragment_0, openLinkStrategy);
      return true;
    }
    var tmp;
    if (updateActivePage(this, pathQueryAndFragment_0)) {
      var tmp$ret$0;
      // Inline function 'kotlin.let' call
      var tmp0_let = window.location.origin + pathQueryAndFragment_0;
      // Inline function 'kotlin.contracts.contract' call
      if (!(window.location.href === tmp0_let)) {
        var newPathname = !(window.location.pathname === Companion_getInstance_42().h2e(new URL(tmp0_let)).l2e());
        var tmp0_subject = updateHistoryMode;
        var tmp0 = tmp0_subject.o4_1;
        if (tmp0 === 0) {
          window.history.pushState(window.history.state, '', tmp0_let);
        } else if (tmp0 === 1) {
          window.history.replaceState(window.history.state, '', tmp0_let);
        }
        if (newPathname) {
          var tmp1_safe_receiver = document.documentElement;
          if (tmp1_safe_receiver == null) {
          } else {
            tmp1_safe_receiver.scrollTop = 0.0;
          }
        }
      }
      var tmp_0;
      var tmp_1 = _Char___init__impl__6a9atx(35);
      if (contains$default(tmp0_let, tmp_1, false, 2, null)) {
        var tmp_2 = document;
        var tmp_3 = _Char___init__impl__6a9atx(35);
        var tmp2_safe_receiver = tmp_2.getElementById(substringAfter$default(tmp0_let, tmp_3, null, 2, null));
        if (tmp2_safe_receiver == null)
          null;
        else {
          tmp2_safe_receiver.scrollIntoView({behavior: 'smooth'});
        }
        tmp_0 = Unit_getInstance();
      }
      tmp$ret$0 = tmp_0;
      tmp = true;
    } else {
      tmp = false;
    }
    return tmp;
  };
  Router.prototype.e2e = function (pathQueryAndFragment, updateHistoryMode, openLinkStrategy, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      updateHistoryMode = UpdateHistoryMode_PUSH_getInstance();
    if (!(($mask0 & 4) === 0))
      openLinkStrategy = OpenLinkStrategy_IN_PLACE_getInstance();
    return this.d2g(pathQueryAndFragment, updateHistoryMode, openLinkStrategy);
  };
  Router.prototype.e2g = function (pathQueryAndFragment, updateHistoryMode, openInternalLinksStrategy, openExternalLinksStrategy) {
    if (!this.d2g(pathQueryAndFragment, updateHistoryMode, openInternalLinksStrategy)) {
      open(window, pathQueryAndFragment, openExternalLinksStrategy);
    }
  };
  Router.prototype.d2e = function (pathQueryAndFragment, updateHistoryMode, openInternalLinksStrategy, openExternalLinksStrategy, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      updateHistoryMode = UpdateHistoryMode_PUSH_getInstance();
    if (!(($mask0 & 4) === 0))
      openInternalLinksStrategy = OpenLinkStrategy_IN_PLACE_getInstance();
    if (!(($mask0 & 8) === 0))
      openExternalLinksStrategy = OpenLinkStrategy_IN_NEW_TAB_FOREGROUND_getInstance();
    return this.e2g(pathQueryAndFragment, updateHistoryMode, openInternalLinksStrategy, openExternalLinksStrategy);
  };
  Router.prototype.c2g = function ($composer, $changed) {
    var $composer_0 = $composer;
    $composer_0 = $composer_0.z13(916530159);
    sourceInformation($composer_0, 'C(renderActivePage$composable)');
    if (isTraceInProgress()) {
      traceEventStart(916530159, $changed, -1, 'com.varabyte.kobweb.navigation.Router.renderActivePage$composable (Router.kt:71)');
    }
    var tmp0_elvis_lhs = this.a2e_1.a2();
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throw IllegalStateException_init_$Create$_0("Call 'navigateTo' at least once before calling 'renderActivePage'");
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var data = tmp;
    Companion_getInstance_41().s2d().po(data.x2e_1);
    data.w2e_1($composer_0, 0);
    if (isTraceInProgress()) {
      traceEventEnd();
    }
    var tmp0_rcvr = this;
    var tmp1_safe_receiver = $composer_0.a14();
    if (tmp1_safe_receiver === null)
      null;
    else {
      tmp1_safe_receiver.b15(Router$renderActivePage$composable$lambda$ref(tmp0_rcvr, $changed));
    }
  };
  Router.prototype.f2g = function (route, autoPrefix, pageMethod) {
    // Inline function 'kotlin.require' call
    var tmp;
    if (Companion_getInstance_42().f2e(route)) {
      var tmp_0 = _Char___init__impl__6a9atx(47);
      tmp = startsWith$default(route, tmp_0, false, 2, null);
    } else {
      tmp = false;
    }
    var tmp0_require = tmp;
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp0_require) {
      var tmp$ret$0;
      // Inline function 'com.varabyte.kobweb.navigation.Router.register$composable.<anonymous>' call
      tmp$ret$0 = 'Registration only allowed for internal, rooted routes, e.g. /example/path. Got: ' + route;
      var message = tmp$ret$0;
      throw IllegalArgumentException_init_$Create$(toString_2(message));
    }
    // Inline function 'kotlin.require' call
    var tmp1_require = this.b2e_1.b2g(prependIf(Companion_getInstance_43(), autoPrefix, route), pageMethod);
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp1_require) {
      var tmp$ret$1;
      // Inline function 'com.varabyte.kobweb.navigation.Router.register$composable.<anonymous>' call
      tmp$ret$1 = 'Registration failure. Path is already registered: ' + route;
      var message_0 = tmp$ret$1;
      throw IllegalArgumentException_init_$Create$(toString_2(message_0));
    }
  };
  Router.prototype.g2g = function (route, autoPrefix, pageMethod, $mask0, $handler) {
    if (!(($mask0 & 2) === 0))
      autoPrefix = true;
    return this.f2g(route, autoPrefix, pageMethod);
  };
  Router.$metadata$ = classMeta('Router');
  var UpdateHistoryMode_PUSH_instance;
  var UpdateHistoryMode_REPLACE_instance;
  var UpdateHistoryMode_entriesInitialized;
  function UpdateHistoryMode_initEntries() {
    if (UpdateHistoryMode_entriesInitialized)
      return Unit_getInstance();
    UpdateHistoryMode_entriesInitialized = true;
    UpdateHistoryMode_PUSH_instance = new UpdateHistoryMode('PUSH', 0);
    UpdateHistoryMode_REPLACE_instance = new UpdateHistoryMode('REPLACE', 1);
  }
  function UpdateHistoryMode(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  UpdateHistoryMode.$metadata$ = classMeta('UpdateHistoryMode', undefined, undefined, undefined, undefined, Enum.prototype);
  function UpdateHistoryMode_PUSH_getInstance() {
    UpdateHistoryMode_initEntries();
    return UpdateHistoryMode_PUSH_instance;
  }
  function set_initSilkHook(_set____db54di) {
    init_properties_InitSilk_kt_e1q1aj();
    initSilkHook = _set____db54di;
  }
  function get_initSilkHook() {
    init_properties_InitSilk_kt_e1q1aj();
    return initSilkHook;
  }
  var initSilkHook;
  function initSilkHook$lambda(it) {
    init_properties_InitSilk_kt_e1q1aj();
    return Unit_getInstance();
  }
  var properties_initialized_InitSilk_kt_8x89gn;
  function init_properties_InitSilk_kt_e1q1aj() {
    if (properties_initialized_InitSilk_kt_8x89gn) {
    } else {
      properties_initialized_InitSilk_kt_8x89gn = true;
      initSilkHook = initSilkHook$lambda;
    }
  }
  function SilkApp$composable(content, $composer, $changed) {
    var $composer_0 = $composer;
    $composer_0 = $composer_0.z13(766681329);
    sourceInformation($composer_0, 'C(SilkApp$composable)');
    var $dirty = $changed;
    if (($changed & 14) === 0)
      $dirty = $dirty | ($composer_0.ps(content) ? 4 : 2);
    if (!(($dirty & 11) === 2) ? true : !$composer_0.d12()) {
      if (isTraceInProgress()) {
        traceEventStart(766681329, $dirty, -1, 'com.varabyte.kobweb.silk.SilkApp$composable (SilkApp.kt:8)');
      }
      var tmp$ret$3;
      // Inline function 'androidx.compose.runtime.remember$composable' call
      var tmp0_remember$composable = $composer_0;
      var $composer_1 = tmp0_remember$composable;
      $composer_1.ks(547886695);
      sourceInformation($composer_1, 'C(remember$composable):Composables.kt#9igjgp');
      var tmp$ret$2;
      // Inline function 'androidx.compose.runtime.cache' call
      var tmp1_cache = $composer_1;
      var tmp$ret$1;
      // Inline function 'kotlin.let' call
      var tmp0_let = tmp1_cache.ls();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
      var tmp;
      if (false ? true : tmp0_let === Companion_getInstance_8().ns_1) {
        initSilk(SilkApp$composable$lambda_0);
        var value = Unit_getInstance();
        tmp1_cache.ms(Unit_getInstance());
        tmp = Unit_getInstance();
      } else {
        tmp = tmp0_let;
      }
      tmp$ret$0 = tmp;
      tmp$ret$1 = tmp$ret$0;
      var tmp_0 = tmp$ret$1;
      tmp$ret$2 = (tmp_0 == null ? true : isObject(tmp_0)) ? tmp_0 : THROW_CCE();
      var tmp0 = tmp$ret$2;
      $composer_1.os();
      tmp$ret$3 = tmp0;
      var tmp$ret$10;
      // Inline function 'kotlin.run' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$9;
      // Inline function 'com.varabyte.kobweb.silk.SilkApp$composable.<anonymous>' call
      var tmp_1 = $composer_0;
      var dispatchReceiver = composableLambda(tmp_1, 1100068428, true, SilkApp$composable$lambda_1(content, $dirty));
      var tmp$ret$8;
      // Inline function 'androidx.compose.runtime.remember$composable' call
      var tmp0_remember$composable_0 = $composer_0;
      var $composer_2 = tmp0_remember$composable_0;
      $composer_2.ks(-838505973);
      sourceInformation($composer_2, 'C(remember$composable)P(1):Composables.kt#9igjgp');
      var tmp$ret$7;
      // Inline function 'androidx.compose.runtime.cache' call
      var tmp1_cache_0 = $composer_2;
      var tmp2_cache = $composer_2.ps(dispatchReceiver);
      var tmp$ret$6;
      // Inline function 'kotlin.let' call
      var tmp0_let_0 = tmp1_cache_0.ls();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$5;
      // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
      var tmp_2;
      if (tmp2_cache ? true : tmp0_let_0 === Companion_getInstance_8().ns_1) {
        var tmp$ret$4;
        // Inline function 'com.varabyte.kobweb.silk.SilkApp$composable.<anonymous>.<anonymous>' call
        tmp$ret$4 = ComposableLambda$invoke$ref_14(dispatchReceiver);
        var value_0 = tmp$ret$4;
        tmp1_cache_0.ms(value_0);
        tmp_2 = value_0;
      } else {
        tmp_2 = tmp0_let_0;
      }
      tmp$ret$5 = tmp_2;
      tmp$ret$6 = tmp$ret$5;
      var tmp_3 = tmp$ret$6;
      tmp$ret$7 = (tmp_3 == null ? true : isObject(tmp_3)) ? tmp_3 : THROW_CCE();
      var tmp0_0 = tmp$ret$7;
      $composer_2.os();
      tmp$ret$8 = tmp0_0;
      tmp$ret$9 = tmp$ret$8;
      tmp$ret$10 = tmp$ret$9;
      KobwebApp$composable(tmp$ret$10, $composer_0, 6);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    var tmp0_safe_receiver = $composer_0.a14();
    if (tmp0_safe_receiver === null)
      null;
    else {
      tmp0_safe_receiver.b15(SilkApp$composable$lambda$ref(content, $changed));
    }
  }
  function SilkApp$composable$lambda($content, $$changed, $composer, $force) {
    return SilkApp$composable($content, $composer, $$changed | 1);
  }
  function SilkApp$composable$lambda_0(ctx) {
    get_initSilkHook()(ctx);
    return Unit_getInstance();
  }
  function SilkApp$composable$lambda_1($content, $$dirty) {
    return function ($composer, $changed) {
      var $composer_0 = $composer;
      var tmp;
      if (!(($changed & 11) === 2) ? true : !$composer_0.d12()) {
        if (isTraceInProgress()) {
          traceEventStart(1100068428, $changed, -1, 'com.varabyte.kobweb.silk.SilkApp$composable.<anonymous> (SilkApp.kt:14)');
        }
        // Inline function 'org.jetbrains.compose.web.css.Style$composable' call
        var tmp0_Style$composable = KobwebComposeStyleSheet_getInstance();
        var tmp1_Style$composable = $composer_0;
        var $composer_1 = tmp1_Style$composable;
        $composer_1.ks(-168645675);
        sourceInformation($composer_1, 'C(Style$composable)');
        Style$composable_0(null, tmp0_Style$composable.q1y(), $composer_1, 0, 1);
        $composer_1.os();
        // Inline function 'org.jetbrains.compose.web.css.Style$composable' call
        var tmp2_Style$composable = SilkStyleSheet_getInstance();
        var tmp3_Style$composable = $composer_0;
        var $composer_2 = tmp3_Style$composable;
        $composer_2.ks(-168645675);
        sourceInformation($composer_2, 'C(Style$composable)');
        Style$composable_0(null, tmp2_Style$composable.q1y(), $composer_2, 0, 1);
        $composer_2.os();
        $content($composer_0, 14 & $$dirty);
        var tmp_0;
        if (isTraceInProgress()) {
          traceEventEnd();
          tmp_0 = Unit_getInstance();
        }
        tmp = tmp_0;
      } else {
        $composer_0.hy();
        tmp = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  function ComposableLambda$invoke$ref_14($boundThis) {
    return function (p0, p1) {
      return $boundThis.b12(p0, p1);
    };
  }
  function SilkApp$composable$lambda$ref($content, $$changed) {
    return function (p0, p1) {
      SilkApp$composable$lambda($content, $$changed, p0, p1);
      return Unit_getInstance();
    };
  }
  function Link$composable(path, text, modifier, variant, openInternalLinksStrategy, openExternalLinksStrategy, autoPrefix, ref, $composer, $changed, $default) {
    var text_0 = {_v: text};
    var modifier_0 = {_v: modifier};
    var variant_0 = {_v: variant};
    var openInternalLinksStrategy_0 = {_v: openInternalLinksStrategy};
    var openExternalLinksStrategy_0 = {_v: openExternalLinksStrategy};
    var autoPrefix_0 = {_v: autoPrefix};
    var ref_0 = {_v: ref};
    var $composer_0 = $composer;
    $composer_0 = $composer_0.z13(1950033137);
    sourceInformation($composer_0, 'C(Link$composable)P(4,6,1,7,3,2)');
    var $dirty = $changed;
    if (!(($default & 1) === 0))
      $dirty = $dirty | 6;
    else if (($changed & 14) === 0)
      $dirty = $dirty | ($composer_0.ps(path) ? 4 : 2);
    if (!(($default & 2) === 0))
      $dirty = $dirty | 48;
    else if (($changed & 112) === 0)
      $dirty = $dirty | ($composer_0.ps(text_0._v) ? 32 : 16);
    if (!(($default & 4) === 0))
      $dirty = $dirty | 384;
    else if (($changed & 896) === 0)
      $dirty = $dirty | ($composer_0.ps(modifier_0._v) ? 256 : 128);
    if (!(($default & 8) === 0))
      $dirty = $dirty | 3072;
    else if (($changed & 7168) === 0)
      $dirty = $dirty | ($composer_0.ps(variant_0._v) ? 2048 : 1024);
    if (!(($default & 16) === 0))
      $dirty = $dirty | 24576;
    else if (($changed & 57344) === 0)
      $dirty = $dirty | ($composer_0.ps(openInternalLinksStrategy_0._v) ? 16384 : 8192);
    if (!(($default & 32) === 0))
      $dirty = $dirty | 196608;
    else if (($changed & 458752) === 0)
      $dirty = $dirty | ($composer_0.ps(openExternalLinksStrategy_0._v) ? 131072 : 65536);
    if (!(($default & 64) === 0))
      $dirty = $dirty | 1572864;
    else if (($changed & 3670016) === 0)
      $dirty = $dirty | ($composer_0.r13(autoPrefix_0._v) ? 1048576 : 524288);
    if (!(($default & 128) === 0))
      $dirty = $dirty | 12582912;
    else if (($changed & 29360128) === 0)
      $dirty = $dirty | ($composer_0.ps(ref_0._v) ? 8388608 : 4194304);
    if (!(($dirty & 23967451) === 4793490) ? true : !$composer_0.d12()) {
      if (!(($default & 2) === 0)) {
        text_0._v = null;
      }
      if (!(($default & 4) === 0)) {
        modifier_0._v = Companion_getInstance_36();
      }
      if (!(($default & 8) === 0)) {
        variant_0._v = null;
      }
      if (!(($default & 16) === 0)) {
        openInternalLinksStrategy_0._v = null;
      }
      if (!(($default & 32) === 0)) {
        openExternalLinksStrategy_0._v = null;
      }
      if (!(($default & 64) === 0)) {
        autoPrefix_0._v = true;
      }
      if (!(($default & 128) === 0)) {
        ref_0._v = null;
      }
      if (isTraceInProgress()) {
        traceEventStart(1950033137, $dirty, -1, 'com.varabyte.kobweb.silk.components.navigation.Link$composable (Link.kt:35)');
      }
      var tmp = modifier_0._v;
      var tmp_0 = variant_0._v;
      var tmp_1 = openInternalLinksStrategy_0._v;
      var tmp_2 = openExternalLinksStrategy_0._v;
      var tmp_3 = autoPrefix_0._v;
      var tmp_4 = ref_0._v;
      var tmp$ret$6;
      // Inline function 'kotlin.run' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$5;
      // Inline function 'com.varabyte.kobweb.silk.components.navigation.Link$composable.<anonymous>' call
      var tmp_5 = $composer_0;
      var dispatchReceiver = composableLambda(tmp_5, 1642222480, true, Link$composable$lambda_1(text_0, path));
      var tmp$ret$4;
      // Inline function 'androidx.compose.runtime.remember$composable' call
      var tmp0_remember$composable = $composer_0;
      var $composer_1 = tmp0_remember$composable;
      $composer_1.ks(-838505973);
      sourceInformation($composer_1, 'C(remember$composable)P(1):Composables.kt#9igjgp');
      var tmp$ret$3;
      // Inline function 'androidx.compose.runtime.cache' call
      var tmp1_cache = $composer_1;
      var tmp2_cache = $composer_1.ps(dispatchReceiver);
      var tmp$ret$2;
      // Inline function 'kotlin.let' call
      var tmp0_let = tmp1_cache.ls();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
      var tmp_6;
      if (tmp2_cache ? true : tmp0_let === Companion_getInstance_8().ns_1) {
        var tmp$ret$0;
        // Inline function 'com.varabyte.kobweb.silk.components.navigation.Link$composable.<anonymous>.<anonymous>' call
        tmp$ret$0 = ComposableLambda$invoke$ref_16(dispatchReceiver);
        var value = tmp$ret$0;
        tmp1_cache.ms(value);
        tmp_6 = value;
      } else {
        tmp_6 = tmp0_let;
      }
      tmp$ret$1 = tmp_6;
      tmp$ret$2 = tmp$ret$1;
      var tmp_7 = tmp$ret$2;
      tmp$ret$3 = (tmp_7 == null ? true : isObject(tmp_7)) ? tmp_7 : THROW_CCE();
      var tmp0 = tmp$ret$3;
      $composer_1.os();
      tmp$ret$4 = tmp0;
      tmp$ret$5 = tmp$ret$4;
      tmp$ret$6 = tmp$ret$5;
      Link$composable_0(path, tmp, tmp_0, tmp_1, tmp_2, tmp_3, tmp_4, tmp$ret$6, $composer_0, 12582912 | 14 & $dirty | 112 & $dirty >> 3 | 896 & $dirty >> 3 | 7168 & $dirty >> 3 | 57344 & $dirty >> 3 | 458752 & $dirty >> 3 | 3670016 & $dirty >> 3, 0);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    var tmp0_safe_receiver = $composer_0.a14();
    if (tmp0_safe_receiver === null)
      null;
    else {
      tmp0_safe_receiver.b15(Link$composable$lambda$ref(path, text_0, modifier_0, variant_0, openInternalLinksStrategy_0, openExternalLinksStrategy_0, autoPrefix_0, ref_0, $changed, $default));
    }
  }
  function Link$composable_0(path, modifier, variant, openInternalLinksStrategy, openExternalLinksStrategy, autoPrefix, ref, content, $composer, $changed, $default) {
    var modifier_0 = {_v: modifier};
    var variant_0 = {_v: variant};
    var openInternalLinksStrategy_0 = {_v: openInternalLinksStrategy};
    var openExternalLinksStrategy_0 = {_v: openExternalLinksStrategy};
    var autoPrefix_0 = {_v: autoPrefix};
    var ref_0 = {_v: ref};
    var content_0 = {_v: content};
    var $composer_0 = $composer;
    $composer_0 = $composer_0.z13(231966754);
    sourceInformation($composer_0, 'C(Link$composable)P(5,2,7,4,3!1,6)');
    var $dirty = $changed;
    if (!(($default & 1) === 0))
      $dirty = $dirty | 6;
    else if (($changed & 14) === 0)
      $dirty = $dirty | ($composer_0.ps(path) ? 4 : 2);
    if (!(($default & 2) === 0))
      $dirty = $dirty | 48;
    else if (($changed & 112) === 0)
      $dirty = $dirty | ($composer_0.ps(modifier_0._v) ? 32 : 16);
    if (!(($default & 4) === 0))
      $dirty = $dirty | 384;
    else if (($changed & 896) === 0)
      $dirty = $dirty | ($composer_0.ps(variant_0._v) ? 256 : 128);
    if (!(($default & 8) === 0))
      $dirty = $dirty | 3072;
    else if (($changed & 7168) === 0)
      $dirty = $dirty | ($composer_0.ps(openInternalLinksStrategy_0._v) ? 2048 : 1024);
    if (!(($default & 16) === 0))
      $dirty = $dirty | 24576;
    else if (($changed & 57344) === 0)
      $dirty = $dirty | ($composer_0.ps(openExternalLinksStrategy_0._v) ? 16384 : 8192);
    if (!(($default & 32) === 0))
      $dirty = $dirty | 196608;
    else if (($changed & 458752) === 0)
      $dirty = $dirty | ($composer_0.r13(autoPrefix_0._v) ? 131072 : 65536);
    if (!(($default & 64) === 0))
      $dirty = $dirty | 1572864;
    else if (($changed & 3670016) === 0)
      $dirty = $dirty | ($composer_0.ps(ref_0._v) ? 1048576 : 524288);
    if (!(($default & 128) === 0))
      $dirty = $dirty | 12582912;
    else if (($changed & 29360128) === 0)
      $dirty = $dirty | ($composer_0.ps(content_0._v) ? 8388608 : 4194304);
    if (!(($dirty & 23967451) === 4793490) ? true : !$composer_0.d12()) {
      if (!(($default & 2) === 0)) {
        modifier_0._v = Companion_getInstance_36();
      }
      if (!(($default & 4) === 0)) {
        variant_0._v = null;
      }
      if (!(($default & 8) === 0)) {
        openInternalLinksStrategy_0._v = null;
      }
      if (!(($default & 16) === 0)) {
        openExternalLinksStrategy_0._v = null;
      }
      if (!(($default & 32) === 0)) {
        autoPrefix_0._v = true;
      }
      if (!(($default & 64) === 0)) {
        ref_0._v = null;
      }
      if (!(($default & 128) === 0)) {
        content_0._v = ComposableSingletons$LinkKt_getInstance().h2g_1;
      }
      if (isTraceInProgress()) {
        traceEventStart(231966754, $dirty, -1, 'com.varabyte.kobweb.silk.components.navigation.Link$composable (Link.kt:56)');
      }
      var tmp = toModifier$composable(get_LinkStyle(), variant_0._v, $composer_0, 112 & $dirty >> 3, 0).w26(modifier_0._v);
      var tmp_0 = toAttrs$default(tmp, null, 1, null);
      var tmp_1 = openInternalLinksStrategy_0._v;
      var tmp_2 = openExternalLinksStrategy_0._v;
      var tmp_3 = autoPrefix_0._v;
      var tmp$ret$6;
      // Inline function 'kotlin.run' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$5;
      // Inline function 'com.varabyte.kobweb.silk.components.navigation.Link$composable.<anonymous>' call
      var tmp_4 = $composer_0;
      var dispatchReceiver = composableLambda(tmp_4, 2134514244, true, Link$composable$lambda_2(ref_0, $dirty, content_0));
      var tmp$ret$4;
      // Inline function 'androidx.compose.runtime.remember$composable' call
      var tmp0_remember$composable = $composer_0;
      var $composer_1 = tmp0_remember$composable;
      $composer_1.ks(-838505973);
      sourceInformation($composer_1, 'C(remember$composable)P(1):Composables.kt#9igjgp');
      var tmp$ret$3;
      // Inline function 'androidx.compose.runtime.cache' call
      var tmp1_cache = $composer_1;
      var tmp2_cache = $composer_1.ps(dispatchReceiver);
      var tmp$ret$2;
      // Inline function 'kotlin.let' call
      var tmp0_let = tmp1_cache.ls();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
      var tmp_5;
      if (tmp2_cache ? true : tmp0_let === Companion_getInstance_8().ns_1) {
        var tmp$ret$0;
        // Inline function 'com.varabyte.kobweb.silk.components.navigation.Link$composable.<anonymous>.<anonymous>' call
        tmp$ret$0 = ComposableLambda$invoke$ref_17(dispatchReceiver);
        var value = tmp$ret$0;
        tmp1_cache.ms(value);
        tmp_5 = value;
      } else {
        tmp_5 = tmp0_let;
      }
      tmp$ret$1 = tmp_5;
      tmp$ret$2 = tmp$ret$1;
      var tmp_6 = tmp$ret$2;
      tmp$ret$3 = (tmp_6 == null ? true : isObject(tmp_6)) ? tmp_6 : THROW_CCE();
      var tmp0 = tmp$ret$3;
      $composer_1.os();
      tmp$ret$4 = tmp0;
      tmp$ret$5 = tmp$ret$4;
      tmp$ret$6 = tmp$ret$5;
      Anchor$composable(path, tmp_0, tmp_1, tmp_2, tmp_3, tmp$ret$6, $composer_0, 196608 | 14 & $dirty | 896 & $dirty >> 3 | 7168 & $dirty >> 3 | 57344 & $dirty >> 3, 0);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    var tmp0_safe_receiver = $composer_0.a14();
    if (tmp0_safe_receiver === null)
      null;
    else {
      tmp0_safe_receiver.b15(Link$composable$lambda$ref_0(path, modifier_0, variant_0, openInternalLinksStrategy_0, openExternalLinksStrategy_0, autoPrefix_0, ref_0, content_0, $changed, $default));
    }
  }
  function ComposableLambda$invoke$ref_15($boundThis) {
    return function (p0, p1) {
      return $boundThis.b12(p0, p1);
    };
  }
  function ComposableSingletons$LinkKt$lambda_1$lambda_r3z1n2($composer, $changed) {
    var $composer_0 = $composer;
    if (!(($changed & 11) === 2) ? true : !$composer_0.d12()) {
      if (isTraceInProgress()) {
        traceEventStart(669257316, $changed, -1, 'com.varabyte.kobweb.silk.components.navigation.ComposableSingletons$LinkKt.lambda-1.<anonymous> (Link.kt:64)');
      }
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    return Unit_getInstance();
  }
  function ComposableSingletons$LinkKt() {
    ComposableSingletons$LinkKt_instance = this;
    var tmp = this;
    tmp.h2g_1 = ComposableLambda$invoke$ref_15(composableLambdaInstance(669257316, false, ComposableSingletons$LinkKt$lambda_1$lambda_r3z1n2));
  }
  ComposableSingletons$LinkKt.$metadata$ = objectMeta('ComposableSingletons$LinkKt');
  var ComposableSingletons$LinkKt_instance;
  function ComposableSingletons$LinkKt_getInstance() {
    if (ComposableSingletons$LinkKt_instance == null)
      new ComposableSingletons$LinkKt();
    return ComposableSingletons$LinkKt_instance;
  }
  function Link$composable$lambda($path, $text, $modifier, $variant, $openInternalLinksStrategy, $openExternalLinksStrategy, $autoPrefix, $ref, $$changed, $$default, $composer, $force) {
    return Link$composable($path, $text._v, $modifier._v, $variant._v, $openInternalLinksStrategy._v, $openExternalLinksStrategy._v, $autoPrefix._v, $ref._v, $composer, $$changed | 1, $$default);
  }
  function Link$composable$lambda_0($path, $modifier, $variant, $openInternalLinksStrategy, $openExternalLinksStrategy, $autoPrefix, $ref, $content, $$changed, $$default, $composer, $force) {
    return Link$composable_0($path, $modifier._v, $variant._v, $openInternalLinksStrategy._v, $openExternalLinksStrategy._v, $autoPrefix._v, $ref._v, $content._v, $composer, $$changed | 1, $$default);
  }
  function Link$composable$lambda_1($text, $path) {
    return function ($composer, $changed) {
      var $composer_0 = $composer;
      var tmp;
      if (!(($changed & 11) === 2) ? true : !$composer_0.d12()) {
        if (isTraceInProgress()) {
          traceEventStart(1642222480, $changed, -1, 'com.varabyte.kobweb.silk.components.navigation.Link$composable.<anonymous> (Link.kt:45)');
        }
        var tmp0_elvis_lhs = $text._v;
        Text$composable(tmp0_elvis_lhs == null ? $path : tmp0_elvis_lhs, $composer_0, 0);
        var tmp_0;
        if (isTraceInProgress()) {
          traceEventEnd();
          tmp_0 = Unit_getInstance();
        }
        tmp = tmp_0;
      } else {
        $composer_0.hy();
        tmp = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  function ComposableLambda$invoke$ref_16($boundThis) {
    return function (p0, p1) {
      return $boundThis.b12(p0, p1);
    };
  }
  function Link$composable$lambda$ref($path, $text, $modifier, $variant, $openInternalLinksStrategy, $openExternalLinksStrategy, $autoPrefix, $ref, $$changed, $$default) {
    return function (p0, p1) {
      Link$composable$lambda($path, $text, $modifier, $variant, $openInternalLinksStrategy, $openExternalLinksStrategy, $autoPrefix, $ref, $$changed, $$default, p0, p1);
      return Unit_getInstance();
    };
  }
  function Link$composable$lambda_2($ref, $$dirty, $content) {
    return function ($this$Anchor, $composer, $changed) {
      var $composer_0 = $composer;
      var $dirty = $changed;
      var tmp;
      if (($changed & 14) === 0) {
        $dirty = $dirty | ($composer_0.ps($this$Anchor) ? 4 : 2);
        tmp = Unit_getInstance();
      }
      var tmp_0;
      if (!(($dirty & 91) === 18) ? true : !$composer_0.d12()) {
        if (isTraceInProgress()) {
          traceEventStart(2134514244, $dirty, -1, 'com.varabyte.kobweb.silk.components.navigation.Link$composable.<anonymous> (Link.kt:72)');
        }
        registerRefScope$composable($this$Anchor, $ref._v, $composer_0, 14 & $dirty | 112 & $$dirty >> 15);
        $content._v($composer_0, 14 & $$dirty >> 21);
        var tmp_1;
        if (isTraceInProgress()) {
          traceEventEnd();
          tmp_1 = Unit_getInstance();
        }
        tmp_0 = tmp_1;
      } else {
        $composer_0.hy();
        tmp_0 = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  function ComposableLambda$invoke$ref_17($boundThis) {
    return function (p0, p1, p2) {
      return $boundThis.z1q(p0, p1, p2);
    };
  }
  function Link$composable$lambda$ref_0($path, $modifier, $variant, $openInternalLinksStrategy, $openExternalLinksStrategy, $autoPrefix, $ref, $content, $$changed, $$default) {
    return function (p0, p1) {
      Link$composable$lambda_0($path, $modifier, $variant, $openInternalLinksStrategy, $openExternalLinksStrategy, $autoPrefix, $ref, $content, $$changed, $$default, p0, p1);
      return Unit_getInstance();
    };
  }
  function FaSun$composable(modifier, style, $composer, $changed, $default) {
    var modifier_0 = {_v: modifier};
    var style_0 = {_v: style};
    var $composer_0 = $composer;
    $composer_0 = $composer_0.z13(596910706);
    sourceInformation($composer_0, 'C(FaSun$composable)');
    var $dirty = $changed;
    if (!(($default & 1) === 0))
      $dirty = $dirty | 6;
    else if (($changed & 14) === 0)
      $dirty = $dirty | ($composer_0.ps(modifier_0._v) ? 4 : 2);
    if (!(($default & 2) === 0))
      $dirty = $dirty | 48;
    else if (($changed & 112) === 0)
      $dirty = $dirty | ($composer_0.ps(style_0._v) ? 32 : 16);
    if (!(($dirty & 91) === 18) ? true : !$composer_0.d12()) {
      if (!(($default & 1) === 0)) {
        modifier_0._v = Companion_getInstance_36();
      }
      if (!(($default & 2) === 0)) {
        style_0._v = IconStyle_OUTLINE_getInstance();
      }
      if (isTraceInProgress()) {
        traceEventStart(596910706, $dirty, -1, 'com.varabyte.kobweb.silk.components.icons.fa.FaSun$composable (FaIcons.kt:1215)');
      }
      FaIcon$composable('sun', modifier_0._v, style_0._v.k2g_1, $composer_0, 6 | 112 & $dirty << 3, 0);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    var tmp0_safe_receiver = $composer_0.a14();
    if (tmp0_safe_receiver === null)
      null;
    else {
      tmp0_safe_receiver.b15(FaSun$composable$lambda$ref(modifier_0, style_0, $changed, $default));
    }
  }
  function FaMoon$composable(modifier, style, $composer, $changed, $default) {
    var modifier_0 = {_v: modifier};
    var style_0 = {_v: style};
    var $composer_0 = $composer;
    $composer_0 = $composer_0.z13(-745235925);
    sourceInformation($composer_0, 'C(FaMoon$composable)');
    var $dirty = $changed;
    if (!(($default & 1) === 0))
      $dirty = $dirty | 6;
    else if (($changed & 14) === 0)
      $dirty = $dirty | ($composer_0.ps(modifier_0._v) ? 4 : 2);
    if (!(($default & 2) === 0))
      $dirty = $dirty | 48;
    else if (($changed & 112) === 0)
      $dirty = $dirty | ($composer_0.ps(style_0._v) ? 32 : 16);
    if (!(($dirty & 91) === 18) ? true : !$composer_0.d12()) {
      if (!(($default & 1) === 0)) {
        modifier_0._v = Companion_getInstance_36();
      }
      if (!(($default & 2) === 0)) {
        style_0._v = IconStyle_OUTLINE_getInstance();
      }
      if (isTraceInProgress()) {
        traceEventStart(-745235925, $dirty, -1, 'com.varabyte.kobweb.silk.components.icons.fa.FaMoon$composable (FaIcons.kt:884)');
      }
      FaIcon$composable('moon', modifier_0._v, style_0._v.k2g_1, $composer_0, 6 | 112 & $dirty << 3, 0);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    var tmp0_safe_receiver = $composer_0.a14();
    if (tmp0_safe_receiver === null)
      null;
    else {
      tmp0_safe_receiver.b15(FaMoon$composable$lambda$ref(modifier_0, style_0, $changed, $default));
    }
  }
  var IconStyle_FILLED_instance;
  var IconStyle_OUTLINE_instance;
  var IconStyle_entriesInitialized;
  function IconStyle_initEntries() {
    if (IconStyle_entriesInitialized)
      return Unit_getInstance();
    IconStyle_entriesInitialized = true;
    IconStyle_FILLED_instance = new IconStyle('FILLED', 0, IconCategory_SOLID_getInstance());
    IconStyle_OUTLINE_instance = new IconStyle('OUTLINE', 1, IconCategory_REGULAR_getInstance());
  }
  function IconStyle(name, ordinal, category) {
    Enum.call(this, name, ordinal);
    this.k2g_1 = category;
  }
  IconStyle.$metadata$ = classMeta('IconStyle', undefined, undefined, undefined, undefined, Enum.prototype);
  function FaIcon$composable(name, modifier, style, $composer, $changed, $default) {
    var style_0 = {_v: style};
    var $composer_0 = $composer;
    $composer_0 = $composer_0.z13(735097568);
    sourceInformation($composer_0, 'C(FaIcon$composable)P(1)');
    var $dirty = $changed;
    if (!(($default & 1) === 0))
      $dirty = $dirty | 6;
    else if (($changed & 14) === 0)
      $dirty = $dirty | ($composer_0.ps(name) ? 4 : 2);
    if (!(($default & 2) === 0))
      $dirty = $dirty | 48;
    else if (($changed & 112) === 0)
      $dirty = $dirty | ($composer_0.ps(modifier) ? 32 : 16);
    if (!(($default & 4) === 0))
      $dirty = $dirty | 384;
    else if (($changed & 896) === 0)
      $dirty = $dirty | ($composer_0.ps(style_0._v) ? 256 : 128);
    if (!(($dirty & 731) === 146) ? true : !$composer_0.d12()) {
      if (!(($default & 4) === 0)) {
        style_0._v = IconCategory_REGULAR_getInstance();
      }
      if (isTraceInProgress()) {
        traceEventStart(735097568, $dirty, -1, 'com.varabyte.kobweb.silk.components.icons.fa.FaIcon$composable (FaIcons.kt:28)');
      }
      var tmp$ret$4;
      // Inline function 'androidx.compose.runtime.remember$composable' call
      var tmp0_remember$composable = style_0._v;
      var tmp1_remember$composable = $composer_0;
      var tmp2_remember$composable = 14 & $dirty >> 6 | 112 & $dirty << 3;
      var $composer_1 = tmp1_remember$composable;
      $composer_1.ks(-1124426577);
      sourceInformation($composer_1, 'C(remember$composable)P(1,2):Composables.kt#9igjgp');
      var tmp$ret$3;
      // Inline function 'androidx.compose.runtime.cache' call
      var tmp1_cache = $composer_1;
      var tmp2_cache = !!($composer_1.ps(tmp0_remember$composable) | $composer_1.ps(name));
      var tmp$ret$2;
      // Inline function 'kotlin.let' call
      var tmp0_let = tmp1_cache.ls();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
      var tmp;
      if (tmp2_cache ? true : tmp0_let === Companion_getInstance_8().ns_1) {
        var tmp$ret$0;
        // Inline function 'com.varabyte.kobweb.silk.components.icons.fa.FaIcon$composable.<anonymous>' call
        tmp$ret$0 = FaIcon$composable$lambda_0(style_0, name);
        var value = tmp$ret$0;
        tmp1_cache.ms(value);
        tmp = value;
      } else {
        tmp = tmp0_let;
      }
      tmp$ret$1 = tmp;
      tmp$ret$2 = tmp$ret$1;
      var tmp_0 = tmp$ret$2;
      tmp$ret$3 = (tmp_0 == null ? true : isObject(tmp_0)) ? tmp_0 : THROW_CCE();
      var tmp0 = tmp$ret$3;
      $composer_1.os();
      tmp$ret$4 = tmp0;
      var tmp_1 = toAttrs(modifier, tmp$ret$4);
      Span$composable(tmp_1, null, $composer_0, 0, 2);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    var tmp0_safe_receiver = $composer_0.a14();
    if (tmp0_safe_receiver === null)
      null;
    else {
      tmp0_safe_receiver.b15(FaIcon$composable$lambda$ref(name, modifier, style_0, $changed, $default));
    }
  }
  var IconCategory_REGULAR_instance;
  var IconCategory_SOLID_instance;
  var IconCategory_BRAND_instance;
  var IconCategory_entriesInitialized;
  function IconCategory_initEntries() {
    if (IconCategory_entriesInitialized)
      return Unit_getInstance();
    IconCategory_entriesInitialized = true;
    IconCategory_REGULAR_instance = new IconCategory('REGULAR', 0, 'far');
    IconCategory_SOLID_instance = new IconCategory('SOLID', 1, 'fas');
    IconCategory_BRAND_instance = new IconCategory('BRAND', 2, 'fab');
  }
  function IconCategory(name, ordinal, className) {
    Enum.call(this, name, ordinal);
    this.n2g_1 = className;
  }
  IconCategory.prototype.o2g = function () {
    return this.n2g_1;
  };
  IconCategory.$metadata$ = classMeta('IconCategory', undefined, undefined, undefined, undefined, Enum.prototype);
  function FaSun$composable$lambda($modifier, $style, $$changed, $$default, $composer, $force) {
    return FaSun$composable($modifier._v, $style._v, $composer, $$changed | 1, $$default);
  }
  function FaMoon$composable$lambda($modifier, $style, $$changed, $$default, $composer, $force) {
    return FaMoon$composable($modifier._v, $style._v, $composer, $$changed | 1, $$default);
  }
  function FaIcon$composable$lambda($name, $modifier, $style, $$changed, $$default, $composer, $force) {
    return FaIcon$composable($name, $modifier, $style._v, $composer, $$changed | 1, $$default);
  }
  function FaSun$composable$lambda$ref($modifier, $style, $$changed, $$default) {
    return function (p0, p1) {
      FaSun$composable$lambda($modifier, $style, $$changed, $$default, p0, p1);
      return Unit_getInstance();
    };
  }
  function FaMoon$composable$lambda$ref($modifier, $style, $$changed, $$default) {
    return function (p0, p1) {
      FaMoon$composable$lambda($modifier, $style, $$changed, $$default, p0, p1);
      return Unit_getInstance();
    };
  }
  function FaIcon$composable$lambda_0($style, $name) {
    return function ($this$toAttrs) {
      $this$toAttrs.c1t([$style._v.n2g_1, 'fa-' + $name]);
      return Unit_getInstance();
    };
  }
  function FaIcon$composable$lambda$ref($name, $modifier, $style, $$changed, $$default) {
    return function (p0, p1) {
      FaIcon$composable$lambda($name, $modifier, $style, $$changed, $$default, p0, p1);
      return Unit_getInstance();
    };
  }
  function IconStyle_OUTLINE_getInstance() {
    IconStyle_initEntries();
    return IconStyle_OUTLINE_instance;
  }
  function IconCategory_REGULAR_getInstance() {
    IconCategory_initEntries();
    return IconCategory_REGULAR_instance;
  }
  function IconCategory_SOLID_getInstance() {
    IconCategory_initEntries();
    return IconCategory_SOLID_instance;
  }
  function ComposableLambda$invoke$ref_18($boundThis) {
    return function (p0, p1, p2) {
      return $boundThis.z1q(p0, p1, p2);
    };
  }
  function ComposableSingletons$BlogKt$lambda_1$lambda_2fft56($this$H2, $composer, $changed) {
    var $composer_0 = $composer;
    if (!(($changed & 81) === 16) ? true : !$composer_0.d12()) {
      if (isTraceInProgress()) {
        traceEventStart(-1855739242, $changed, -1, 'com.gunnarss.kobweb.pages.ComposableSingletons$BlogKt.lambda-1.<anonymous> (Blog.kt:10)');
      }
      Text$composable('Blog', $composer_0, 6);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    return Unit_getInstance();
  }
  function ComposableLambda$invoke$ref_19($boundThis) {
    return function (p0, p1, p2) {
      return $boundThis.z1q(p0, p1, p2);
    };
  }
  function ComposableSingletons$BlogKt$lambda_2$lambda_qe6nx1($this$P, $composer, $changed) {
    var $composer_0 = $composer;
    if (!(($changed & 81) === 16) ? true : !$composer_0.d12()) {
      if (isTraceInProgress()) {
        traceEventStart(1583634710, $changed, -1, 'com.gunnarss.kobweb.pages.ComposableSingletons$BlogKt.lambda-2.<anonymous> (Blog.kt:13)');
      }
      Text$composable('Kotlin multiplatform at Festina: ', $composer_0, 6);
      Link$composable('https://www.festinasweden.se/kotlin-multiplatform/', 'https://www.festinasweden.se/kotlin-multiplatform/', null, null, null, null, false, null, $composer_0, 54, 252);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    return Unit_getInstance();
  }
  function ComposableLambda$invoke$ref_20($boundThis) {
    return function (p0, p1) {
      return $boundThis.b12(p0, p1);
    };
  }
  function ComposableSingletons$BlogKt$lambda_3$lambda_ftawzw($composer, $changed) {
    var $composer_0 = $composer;
    if (!(($changed & 11) === 2) ? true : !$composer_0.d12()) {
      if (isTraceInProgress()) {
        traceEventStart(-1497272584, $changed, -1, 'com.gunnarss.kobweb.pages.ComposableSingletons$BlogKt.lambda-3.<anonymous> (Blog.kt:9)');
      }
      var tmp$ret$4;
      // Inline function 'androidx.compose.runtime.remember$composable' call
      var tmp0_remember$composable = $composer_0;
      var $composer_1 = tmp0_remember$composable;
      $composer_1.ks(547886695);
      sourceInformation($composer_1, 'C(remember$composable):Composables.kt#9igjgp');
      var tmp$ret$3;
      // Inline function 'androidx.compose.runtime.cache' call
      var tmp1_cache = $composer_1;
      var tmp$ret$2;
      // Inline function 'kotlin.let' call
      var tmp0_let = tmp1_cache.ls();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
      var tmp;
      if (false ? true : tmp0_let === Companion_getInstance_8().ns_1) {
        var tmp$ret$0;
        // Inline function 'com.gunnarss.kobweb.pages.ComposableSingletons$BlogKt.lambda-3.<anonymous>.<anonymous>' call
        tmp$ret$0 = ComposableSingletons$BlogKt$lambda_3$lambda$lambda_6ovoc7;
        var value = tmp$ret$0;
        tmp1_cache.ms(value);
        tmp = value;
      } else {
        tmp = tmp0_let;
      }
      tmp$ret$1 = tmp;
      tmp$ret$2 = tmp$ret$1;
      var tmp_0 = tmp$ret$2;
      tmp$ret$3 = (tmp_0 == null ? true : isObject(tmp_0)) ? tmp_0 : THROW_CCE();
      var tmp0 = tmp$ret$3;
      $composer_1.os();
      tmp$ret$4 = tmp0;
      H2$composable(tmp$ret$4, ComposableSingletons$BlogKt_getInstance().p2g_1, $composer_0, 48, 0);
      P$composable(null, ComposableSingletons$BlogKt_getInstance().q2g_1, $composer_0, 48, 1);
      GoHomeLink$composable($composer_0, 0);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    return Unit_getInstance();
  }
  function ComposableSingletons$BlogKt$lambda_3$lambda$lambda_6ovoc7($this$H2) {
    $this$H2.d1t('blog');
    return Unit_getInstance();
  }
  function ComposableSingletons$BlogKt() {
    ComposableSingletons$BlogKt_instance = this;
    var tmp = this;
    tmp.p2g_1 = ComposableLambda$invoke$ref_18(composableLambdaInstance(-1855739242, false, ComposableSingletons$BlogKt$lambda_1$lambda_2fft56));
    var tmp_0 = this;
    tmp_0.q2g_1 = ComposableLambda$invoke$ref_19(composableLambdaInstance(1583634710, false, ComposableSingletons$BlogKt$lambda_2$lambda_qe6nx1));
    var tmp_1 = this;
    tmp_1.r2g_1 = ComposableLambda$invoke$ref_20(composableLambdaInstance(-1497272584, false, ComposableSingletons$BlogKt$lambda_3$lambda_ftawzw));
  }
  ComposableSingletons$BlogKt.$metadata$ = objectMeta('ComposableSingletons$BlogKt');
  var ComposableSingletons$BlogKt_instance;
  function ComposableSingletons$BlogKt_getInstance() {
    if (ComposableSingletons$BlogKt_instance == null)
      new ComposableSingletons$BlogKt();
    return ComposableSingletons$BlogKt_instance;
  }
  function BlogPage$composable($composer, $changed) {
    var $composer_0 = $composer;
    $composer_0 = $composer_0.z13(-1228946447);
    sourceInformation($composer_0, 'C(BlogPage$composable)');
    if (!($changed === 0) ? true : !$composer_0.d12()) {
      if (isTraceInProgress()) {
        traceEventStart(-1228946447, $changed, -1, 'com.gunnarss.kobweb.pages.BlogPage$composable (Blog.kt:8)');
      }
      PageLayout$composable('MARKDOWN', ComposableSingletons$BlogKt_getInstance().r2g_1, $composer_0, 54);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    var tmp0_safe_receiver = $composer_0.a14();
    if (tmp0_safe_receiver === null)
      null;
    else {
      tmp0_safe_receiver.b15(BlogPage$composable$lambda$ref($changed));
    }
  }
  function BlogPage$composable$lambda($$changed, $composer, $force) {
    return BlogPage$composable($composer, $$changed | 1);
  }
  function BlogPage$composable$lambda$ref($$changed) {
    return function (p0, p1) {
      BlogPage$composable$lambda($$changed, p0, p1);
      return Unit_getInstance();
    };
  }
  function main() {
    Companion_getInstance_43().q2e('');
    var router = new Router();
    router.g2g('/', false, ComposableSingletons$MainKt_getInstance().s2g_1, 2, null);
    router.g2g('/about', false, ComposableSingletons$MainKt_getInstance().t2g_1, 2, null);
    router.g2g('/blog', false, ComposableSingletons$MainKt_getInstance().u2g_1, 2, null);
    set_initSilkHook(main$lambda);
    var tmp = removePrefix(window.location.href, window.location.origin);
    router.d2e(tmp, null, null, null, 14, null);
    var root = ensureNotNull(document.getElementById('root'));
    while (!(root.firstChild == null)) {
      root.removeChild(ensureNotNull(root.firstChild));
    }
    renderComposable$composable('root', ComposableLambda$invoke$ref_24(composableLambdaInstance(1108811911, true, main$lambda_0(router))));
  }
  function ComposableLambda$invoke$ref_21($boundThis) {
    return function (p0, p1) {
      return $boundThis.b12(p0, p1);
    };
  }
  function ComposableSingletons$MainKt$lambda_1$lambda_sdpc0d($composer, $changed) {
    var $composer_0 = $composer;
    if (!(($changed & 11) === 2) ? true : !$composer_0.d12()) {
      if (isTraceInProgress()) {
        traceEventStart(-246886394, $changed, -1, 'ComposableSingletons$MainKt.lambda-1.<anonymous> (main.kt:12)');
      }
      HomePage$composable($composer_0, 0);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    return Unit_getInstance();
  }
  function ComposableLambda$invoke$ref_22($boundThis) {
    return function (p0, p1) {
      return $boundThis.b12(p0, p1);
    };
  }
  function ComposableSingletons$MainKt$lambda_2$lambda_dts8wk($composer, $changed) {
    var $composer_0 = $composer;
    if (!(($changed & 11) === 2) ? true : !$composer_0.d12()) {
      if (isTraceInProgress()) {
        traceEventStart(-1639541457, $changed, -1, 'ComposableSingletons$MainKt.lambda-2.<anonymous> (main.kt:13)');
      }
      AboutPage$composable($composer_0, 0);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    return Unit_getInstance();
  }
  function ComposableLambda$invoke$ref_23($boundThis) {
    return function (p0, p1) {
      return $boundThis.b12(p0, p1);
    };
  }
  function ComposableSingletons$MainKt$lambda_3$lambda_ezu85n($composer, $changed) {
    var $composer_0 = $composer;
    if (!(($changed & 11) === 2) ? true : !$composer_0.d12()) {
      if (isTraceInProgress()) {
        traceEventStart(-177961458, $changed, -1, 'ComposableSingletons$MainKt.lambda-3.<anonymous> (main.kt:14)');
      }
      BlogPage$composable($composer_0, 0);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    return Unit_getInstance();
  }
  function ComposableSingletons$MainKt() {
    ComposableSingletons$MainKt_instance = this;
    var tmp = this;
    tmp.s2g_1 = ComposableLambda$invoke$ref_21(composableLambdaInstance(-246886394, false, ComposableSingletons$MainKt$lambda_1$lambda_sdpc0d));
    var tmp_0 = this;
    tmp_0.t2g_1 = ComposableLambda$invoke$ref_22(composableLambdaInstance(-1639541457, false, ComposableSingletons$MainKt$lambda_2$lambda_dts8wk));
    var tmp_1 = this;
    tmp_1.u2g_1 = ComposableLambda$invoke$ref_23(composableLambdaInstance(-177961458, false, ComposableSingletons$MainKt$lambda_3$lambda_ezu85n));
  }
  ComposableSingletons$MainKt.$metadata$ = objectMeta('ComposableSingletons$MainKt');
  var ComposableSingletons$MainKt_instance;
  function ComposableSingletons$MainKt_getInstance() {
    if (ComposableSingletons$MainKt_instance == null)
      new ComposableSingletons$MainKt();
    return ComposableSingletons$MainKt_instance;
  }
  function main$lambda(ctx) {
    ctx.b28_1.k28(get_FooterStyle());
    registerGlobalStyles(ctx);
    return Unit_getInstance();
  }
  function ComposableLambda$invoke$ref_24($boundThis) {
    return function (p0, p1, p2) {
      return $boundThis.z1q(p0, p1, p2);
    };
  }
  function main$lambda$lambda$lambda($router) {
    return function ($composer, $changed) {
      var $composer_0 = $composer;
      var tmp;
      if (!(($changed & 11) === 2) ? true : !$composer_0.d12()) {
        if (isTraceInProgress()) {
          traceEventStart(-1432601359, $changed, -1, 'main.<anonymous>.<anonymous>.<anonymous> (main.kt:34)');
        }
        $router.c2g($composer_0, 0);
        var tmp_0;
        if (isTraceInProgress()) {
          traceEventEnd();
          tmp_0 = Unit_getInstance();
        }
        tmp = tmp_0;
      } else {
        $composer_0.hy();
        tmp = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  function ComposableLambda$invoke$ref_25($boundThis) {
    return function (p0, p1) {
      return $boundThis.b12(p0, p1);
    };
  }
  function main$lambda$lambda($router) {
    return function ($composer, $changed) {
      var $composer_0 = $composer;
      var tmp;
      if (!(($changed & 11) === 2) ? true : !$composer_0.d12()) {
        if (isTraceInProgress()) {
          traceEventStart(1953125703, $changed, -1, 'main.<anonymous>.<anonymous> (main.kt:33)');
        }
        var tmp$ret$6;
        // Inline function 'kotlin.run' call
        // Inline function 'kotlin.contracts.contract' call
        var tmp$ret$5;
        // Inline function 'main.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
        var tmp_0 = $composer_0;
        var dispatchReceiver = composableLambda(tmp_0, -1432601359, true, main$lambda$lambda$lambda($router));
        var tmp$ret$4;
        // Inline function 'androidx.compose.runtime.remember$composable' call
        var tmp0_remember$composable = $composer_0;
        var $composer_1 = tmp0_remember$composable;
        $composer_1.ks(-838505973);
        sourceInformation($composer_1, 'C(remember$composable)P(1):Composables.kt#9igjgp');
        var tmp$ret$3;
        // Inline function 'androidx.compose.runtime.cache' call
        var tmp1_cache = $composer_1;
        var tmp2_cache = $composer_1.ps(dispatchReceiver);
        var tmp$ret$2;
        // Inline function 'kotlin.let' call
        var tmp0_let = tmp1_cache.ls();
        // Inline function 'kotlin.contracts.contract' call
        var tmp$ret$1;
        // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
        var tmp_1;
        if (tmp2_cache ? true : tmp0_let === Companion_getInstance_8().ns_1) {
          var tmp$ret$0;
          // Inline function 'main.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
          tmp$ret$0 = ComposableLambda$invoke$ref_25(dispatchReceiver);
          var value = tmp$ret$0;
          tmp1_cache.ms(value);
          tmp_1 = value;
        } else {
          tmp_1 = tmp0_let;
        }
        tmp$ret$1 = tmp_1;
        tmp$ret$2 = tmp$ret$1;
        var tmp_2 = tmp$ret$2;
        tmp$ret$3 = (tmp_2 == null ? true : isObject(tmp_2)) ? tmp_2 : THROW_CCE();
        var tmp0 = tmp$ret$3;
        $composer_1.os();
        tmp$ret$4 = tmp0;
        tmp$ret$5 = tmp$ret$4;
        tmp$ret$6 = tmp$ret$5;
        MyApp$composable(tmp$ret$6, $composer_0, 6);
        var tmp_3;
        if (isTraceInProgress()) {
          traceEventEnd();
          tmp_3 = Unit_getInstance();
        }
        tmp = tmp_3;
      } else {
        $composer_0.hy();
        tmp = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  function ComposableLambda$invoke$ref_26($boundThis) {
    return function (p0, p1) {
      return $boundThis.b12(p0, p1);
    };
  }
  function main$lambda_0($router) {
    return function ($this$renderComposable, $composer, $changed) {
      var $composer_0 = $composer;
      var tmp;
      if (!(($changed & 81) === 16) ? true : !$composer_0.d12()) {
        if (isTraceInProgress()) {
          traceEventStart(1108811911, $changed, -1, 'main.<anonymous> (main.kt:32)');
        }
        var tmp_0 = [get_AppGlobalsLocal().i18(mapOf_0(to('title', 'Gunnarss')))];
        var tmp$ret$6;
        // Inline function 'kotlin.run' call
        // Inline function 'kotlin.contracts.contract' call
        var tmp$ret$5;
        // Inline function 'main.<anonymous>.<anonymous>' call
        var tmp_1 = $composer_0;
        var dispatchReceiver = composableLambda(tmp_1, 1953125703, true, main$lambda$lambda($router));
        var tmp$ret$4;
        // Inline function 'androidx.compose.runtime.remember$composable' call
        var tmp0_remember$composable = $composer_0;
        var $composer_1 = tmp0_remember$composable;
        $composer_1.ks(-838505973);
        sourceInformation($composer_1, 'C(remember$composable)P(1):Composables.kt#9igjgp');
        var tmp$ret$3;
        // Inline function 'androidx.compose.runtime.cache' call
        var tmp1_cache = $composer_1;
        var tmp2_cache = $composer_1.ps(dispatchReceiver);
        var tmp$ret$2;
        // Inline function 'kotlin.let' call
        var tmp0_let = tmp1_cache.ls();
        // Inline function 'kotlin.contracts.contract' call
        var tmp$ret$1;
        // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
        var tmp_2;
        if (tmp2_cache ? true : tmp0_let === Companion_getInstance_8().ns_1) {
          var tmp$ret$0;
          // Inline function 'main.<anonymous>.<anonymous>.<anonymous>' call
          tmp$ret$0 = ComposableLambda$invoke$ref_26(dispatchReceiver);
          var value = tmp$ret$0;
          tmp1_cache.ms(value);
          tmp_2 = value;
        } else {
          tmp_2 = tmp0_let;
        }
        tmp$ret$1 = tmp_2;
        tmp$ret$2 = tmp$ret$1;
        var tmp_3 = tmp$ret$2;
        tmp$ret$3 = (tmp_3 == null ? true : isObject(tmp_3)) ? tmp_3 : THROW_CCE();
        var tmp0 = tmp$ret$3;
        $composer_1.os();
        tmp$ret$4 = tmp0;
        tmp$ret$5 = tmp$ret$4;
        tmp$ret$6 = tmp$ret$5;
        CompositionLocalProvider$composable(tmp_0, tmp$ret$6, $composer_0, 48);
        var tmp_4;
        if (isTraceInProgress()) {
          traceEventEnd();
          tmp_4 = Unit_getInstance();
        }
        tmp = tmp_4;
      } else {
        $composer_0.hy();
        tmp = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  function get_COLOR_MODE_KEY() {
    return COLOR_MODE_KEY;
  }
  var COLOR_MODE_KEY;
  function registerGlobalStyles(ctx) {
    var tmp$ret$2;
    // Inline function 'kotlin.apply' call
    var tmp0_apply = ctx.a28_1;
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'com.gunnarss.kobweb.registerGlobalStyles.<anonymous>' call
    var tmp0_safe_receiver = localStorage.getItem('websitekobweb:app:colorMode');
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      var tmp$ret$1;
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$0;
      // Inline function 'com.gunnarss.kobweb.registerGlobalStyles.<anonymous>.<anonymous>' call
      tmp$ret$0 = valueOf(tmp0_safe_receiver);
      tmp$ret$1 = tmp$ret$0;
      tmp = tmp$ret$1;
    }
    var tmp1_elvis_lhs = tmp;
    tmp0_apply.r2c(tmp1_elvis_lhs == null ? ColorMode_LIGHT_getInstance() : tmp1_elvis_lhs);
    registerBaseStyle$default(tmp0_apply, 'body', null, registerGlobalStyles$lambda, 2, null);
    tmp$ret$2 = tmp0_apply;
    return tmp$ret$2;
  }
  function MyApp$composable(content, $composer, $changed) {
    var $composer_0 = $composer;
    $composer_0 = $composer_0.z13(-163993532);
    sourceInformation($composer_0, 'C(MyApp$composable)');
    var $dirty = $changed;
    if (($changed & 14) === 0)
      $dirty = $dirty | ($composer_0.ps(content) ? 4 : 2);
    if (!(($dirty & 11) === 2) ? true : !$composer_0.d12()) {
      if (isTraceInProgress()) {
        traceEventStart(-163993532, $dirty, -1, 'com.gunnarss.kobweb.MyApp$composable (MyApp.kt:35)');
      }
      var tmp$ret$6;
      // Inline function 'kotlin.run' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$5;
      // Inline function 'com.gunnarss.kobweb.MyApp$composable.<anonymous>' call
      var tmp = $composer_0;
      var dispatchReceiver = composableLambda(tmp, 587191681, true, MyApp$composable$lambda_0(content, $dirty));
      var tmp$ret$4;
      // Inline function 'androidx.compose.runtime.remember$composable' call
      var tmp0_remember$composable = $composer_0;
      var $composer_1 = tmp0_remember$composable;
      $composer_1.ks(-838505973);
      sourceInformation($composer_1, 'C(remember$composable)P(1):Composables.kt#9igjgp');
      var tmp$ret$3;
      // Inline function 'androidx.compose.runtime.cache' call
      var tmp1_cache = $composer_1;
      var tmp2_cache = $composer_1.ps(dispatchReceiver);
      var tmp$ret$2;
      // Inline function 'kotlin.let' call
      var tmp0_let = tmp1_cache.ls();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
      var tmp_0;
      if (tmp2_cache ? true : tmp0_let === Companion_getInstance_8().ns_1) {
        var tmp$ret$0;
        // Inline function 'com.gunnarss.kobweb.MyApp$composable.<anonymous>.<anonymous>' call
        tmp$ret$0 = ComposableLambda$invoke$ref_28(dispatchReceiver);
        var value = tmp$ret$0;
        tmp1_cache.ms(value);
        tmp_0 = value;
      } else {
        tmp_0 = tmp0_let;
      }
      tmp$ret$1 = tmp_0;
      tmp$ret$2 = tmp$ret$1;
      var tmp_1 = tmp$ret$2;
      tmp$ret$3 = (tmp_1 == null ? true : isObject(tmp_1)) ? tmp_1 : THROW_CCE();
      var tmp0 = tmp$ret$3;
      $composer_1.os();
      tmp$ret$4 = tmp0;
      tmp$ret$5 = tmp$ret$4;
      tmp$ret$6 = tmp$ret$5;
      SilkApp$composable(tmp$ret$6, $composer_0, 6);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    var tmp0_safe_receiver = $composer_0.a14();
    if (tmp0_safe_receiver === null)
      null;
    else {
      tmp0_safe_receiver.b15(MyApp$composable$lambda$ref(content, $changed));
    }
  }
  function MyApp$composable$lambda($content, $$changed, $composer, $force) {
    return MyApp$composable($content, $composer, $$changed | 1);
  }
  function registerGlobalStyles$lambda() {
    return backgroundSize_0(backgroundRepeat_0(backgroundImage_0(fontFamily_0(Companion_getInstance_36(), ['-apple-system', 'BlinkMacSystemFont', 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', 'sans-serif']), 'url(images/bg.png)'), 'no-repeat'), 'cover');
  }
  function MyApp$composable$lambda$slambda($colorMode, resultContinuation) {
    this.d2h_1 = $colorMode;
    CoroutineImpl.call(this, resultContinuation);
  }
  MyApp$composable$lambda$slambda.prototype.n1a = function ($this$LaunchedEffect, $cont) {
    var tmp = this.o1a($this$LaunchedEffect, $cont);
    tmp.jd_1 = Unit_getInstance();
    tmp.kd_1 = null;
    return tmp.qd();
  };
  MyApp$composable$lambda$slambda.prototype.rd = function (p1, $cont) {
    return this.n1a((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $cont);
  };
  MyApp$composable$lambda$slambda.prototype.qd = function () {
    var suspendResult = this.jd_1;
    $sm: do
      try {
        var tmp = this.hd_1;
        if (tmp === 0) {
          this.id_1 = 1;
          localStorage.setItem('websitekobweb:app:colorMode', this.d2h_1.n4_1);
          return Unit_getInstance();
        } else if (tmp === 1) {
          throw this.kd_1;
        }
      } catch ($p) {
        throw $p;
      }
     while (true);
  };
  MyApp$composable$lambda$slambda.prototype.o1a = function ($this$LaunchedEffect, completion) {
    var i = new MyApp$composable$lambda$slambda(this.d2h_1, completion);
    i.e2h_1 = $this$LaunchedEffect;
    return i;
  };
  MyApp$composable$lambda$slambda.$metadata$ = classMeta('MyApp$composable$lambda$slambda', undefined, undefined, undefined, [1], CoroutineImpl.prototype);
  function MyApp$composable$lambda$slambda_0($colorMode, resultContinuation) {
    var i = new MyApp$composable$lambda$slambda($colorMode, resultContinuation);
    var l = function ($this$LaunchedEffect, $cont) {
      return i.n1a($this$LaunchedEffect, $cont);
    };
    l.$arity = 1;
    return l;
  }
  function MyApp$composable$lambda$lambda($content, $$dirty) {
    return function ($composer, $changed) {
      var $composer_0 = $composer;
      var tmp;
      if (!(($changed & 11) === 2) ? true : !$composer_0.d12()) {
        if (isTraceInProgress()) {
          traceEventStart(-972293920, $changed, -1, 'com.gunnarss.kobweb.MyApp$composable.<anonymous>.<anonymous> (MyApp.kt:41)');
        }
        $content($composer_0, 14 & $$dirty);
        var tmp_0;
        if (isTraceInProgress()) {
          traceEventEnd();
          tmp_0 = Unit_getInstance();
        }
        tmp = tmp_0;
      } else {
        $composer_0.hy();
        tmp = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  function ComposableLambda$invoke$ref_27($boundThis) {
    return function (p0, p1) {
      return $boundThis.b12(p0, p1);
    };
  }
  function MyApp$composable$lambda_0($content, $$dirty) {
    return function ($composer, $changed) {
      var $composer_0 = $composer;
      var tmp;
      if (!(($changed & 11) === 2) ? true : !$composer_0.d12()) {
        if (isTraceInProgress()) {
          traceEventStart(587191681, $changed, -1, 'com.gunnarss.kobweb.MyApp$composable.<anonymous> (MyApp.kt:36)');
        }
        var colorMode = getColorMode$composable($composer_0, 0);
        var tmp$ret$4;
        // Inline function 'androidx.compose.runtime.remember$composable' call
        var tmp0_remember$composable = $composer_0;
        var $composer_1 = tmp0_remember$composable;
        $composer_1.ks(-838505973);
        sourceInformation($composer_1, 'C(remember$composable)P(1):Composables.kt#9igjgp');
        var tmp$ret$3;
        // Inline function 'androidx.compose.runtime.cache' call
        var tmp1_cache = $composer_1;
        var tmp2_cache = $composer_1.ps(colorMode);
        var tmp$ret$2;
        // Inline function 'kotlin.let' call
        var tmp0_let = tmp1_cache.ls();
        // Inline function 'kotlin.contracts.contract' call
        var tmp$ret$1;
        // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
        var tmp_0;
        if (tmp2_cache ? true : tmp0_let === Companion_getInstance_8().ns_1) {
          var tmp$ret$0;
          // Inline function 'com.gunnarss.kobweb.MyApp$composable.<anonymous>.<anonymous>.<anonymous>' call
          tmp$ret$0 = MyApp$composable$lambda$slambda_0(colorMode, null);
          var value = tmp$ret$0;
          tmp1_cache.ms(value);
          tmp_0 = value;
        } else {
          tmp_0 = tmp0_let;
        }
        tmp$ret$1 = tmp_0;
        tmp$ret$2 = tmp$ret$1;
        var tmp_1 = tmp$ret$2;
        tmp$ret$3 = (tmp_1 == null ? true : isObject(tmp_1)) ? tmp_1 : THROW_CCE();
        var tmp0 = tmp$ret$3;
        $composer_1.os();
        tmp$ret$4 = tmp0;
        LaunchedEffect$composable(colorMode, tmp$ret$4, $composer_0, 0);
        var tmp_2 = Companion_getInstance_36();
        var tmp_3 = get_vw(100);
        var tmp_4 = width$default(tmp_2, tmp_3, null, 2, null);
        var tmp_5 = get_vh(100);
        var tmp_6 = height$default(tmp_4, tmp_5, null, 2, null);
        var tmp$ret$5;
        // Inline function 'org.jetbrains.compose.web.css.Color.transparent' call
        var tmp1__get_transparent__7emq9y = Color_getInstance();
        tmp$ret$5 = Color_0('transparent');
        var tmp_7 = backgroundColor_0(tmp_6, tmp$ret$5);
        var tmp$ret$12;
        // Inline function 'kotlin.run' call
        // Inline function 'kotlin.contracts.contract' call
        var tmp$ret$11;
        // Inline function 'com.gunnarss.kobweb.MyApp$composable.<anonymous>.<anonymous>.<anonymous>' call
        var tmp_8 = $composer_0;
        var dispatchReceiver = composableLambda(tmp_8, -972293920, true, MyApp$composable$lambda$lambda($content, $$dirty));
        var tmp$ret$10;
        // Inline function 'androidx.compose.runtime.remember$composable' call
        var tmp0_remember$composable_0 = $composer_0;
        var $composer_2 = tmp0_remember$composable_0;
        $composer_2.ks(-838505973);
        sourceInformation($composer_2, 'C(remember$composable)P(1):Composables.kt#9igjgp');
        var tmp$ret$9;
        // Inline function 'androidx.compose.runtime.cache' call
        var tmp1_cache_0 = $composer_2;
        var tmp2_cache_0 = $composer_2.ps(dispatchReceiver);
        var tmp$ret$8;
        // Inline function 'kotlin.let' call
        var tmp0_let_0 = tmp1_cache_0.ls();
        // Inline function 'kotlin.contracts.contract' call
        var tmp$ret$7;
        // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
        var tmp_9;
        if (tmp2_cache_0 ? true : tmp0_let_0 === Companion_getInstance_8().ns_1) {
          var tmp$ret$6;
          // Inline function 'com.gunnarss.kobweb.MyApp$composable.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
          tmp$ret$6 = ComposableLambda$invoke$ref_27(dispatchReceiver);
          var value_0 = tmp$ret$6;
          tmp1_cache_0.ms(value_0);
          tmp_9 = value_0;
        } else {
          tmp_9 = tmp0_let_0;
        }
        tmp$ret$7 = tmp_9;
        tmp$ret$8 = tmp$ret$7;
        var tmp_10 = tmp$ret$8;
        tmp$ret$9 = (tmp_10 == null ? true : isObject(tmp_10)) ? tmp_10 : THROW_CCE();
        var tmp0_0 = tmp$ret$9;
        $composer_2.os();
        tmp$ret$10 = tmp0_0;
        tmp$ret$11 = tmp$ret$10;
        tmp$ret$12 = tmp$ret$11;
        Surface$composable(tmp_7, null, null, tmp$ret$12, $composer_0, 3072, 6);
        var tmp_11;
        if (isTraceInProgress()) {
          traceEventEnd();
          tmp_11 = Unit_getInstance();
        }
        tmp = tmp_11;
      } else {
        $composer_0.hy();
        tmp = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  function ComposableLambda$invoke$ref_28($boundThis) {
    return function (p0, p1) {
      return $boundThis.b12(p0, p1);
    };
  }
  function MyApp$composable$lambda$ref($content, $$changed) {
    return function (p0, p1) {
      MyApp$composable$lambda($content, $$changed, p0, p1);
      return Unit_getInstance();
    };
  }
  function PageLayout$composable(title, content, $composer, $changed) {
    var $composer_0 = $composer;
    $composer_0 = $composer_0.z13(1286488111);
    sourceInformation($composer_0, 'C(PageLayout$composable)P(1)');
    var $dirty = $changed;
    if (($changed & 14) === 0)
      $dirty = $dirty | ($composer_0.ps(title) ? 4 : 2);
    if (($changed & 112) === 0)
      $dirty = $dirty | ($composer_0.ps(content) ? 32 : 16);
    if (!(($dirty & 91) === 18) ? true : !$composer_0.d12()) {
      if (isTraceInProgress()) {
        traceEventStart(1286488111, $dirty, -1, 'com.gunnarss.kobweb.components.layouts.PageLayout$composable (PageLayout.kt:13)');
      }
      var tmp$ret$4;
      // Inline function 'androidx.compose.runtime.remember$composable' call
      var tmp0_remember$composable = $composer_0;
      var tmp1_remember$composable = 14 & $dirty;
      var $composer_1 = tmp0_remember$composable;
      $composer_1.ks(-838505973);
      sourceInformation($composer_1, 'C(remember$composable)P(1):Composables.kt#9igjgp');
      var tmp$ret$3;
      // Inline function 'androidx.compose.runtime.cache' call
      var tmp1_cache = $composer_1;
      var tmp2_cache = $composer_1.ps(title);
      var tmp$ret$2;
      // Inline function 'kotlin.let' call
      var tmp0_let = tmp1_cache.ls();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
      var tmp;
      if (tmp2_cache ? true : tmp0_let === Companion_getInstance_8().ns_1) {
        var tmp$ret$0;
        // Inline function 'com.gunnarss.kobweb.components.layouts.PageLayout$composable.<anonymous>' call
        tmp$ret$0 = PageLayout$composable$slambda_0(title, null);
        var value = tmp$ret$0;
        tmp1_cache.ms(value);
        tmp = value;
      } else {
        tmp = tmp0_let;
      }
      tmp$ret$1 = tmp;
      tmp$ret$2 = tmp$ret$1;
      var tmp_0 = tmp$ret$2;
      tmp$ret$3 = (tmp_0 == null ? true : isObject(tmp_0)) ? tmp_0 : THROW_CCE();
      var tmp0 = tmp$ret$3;
      $composer_1.os();
      tmp$ret$4 = tmp0;
      LaunchedEffect$composable(title, tmp$ret$4, $composer_0, 14 & $dirty);
      var tmp_1 = Companion_getInstance_36();
      var tmp_2 = fillMaxSize$default(tmp_1, null, 1, null);
      var tmp_3 = Start_getInstance_0();
      var tmp$ret$11;
      // Inline function 'kotlin.run' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$10;
      // Inline function 'com.gunnarss.kobweb.components.layouts.PageLayout$composable.<anonymous>' call
      var tmp_4 = $composer_0;
      var dispatchReceiver = composableLambda(tmp_4, 1373438589, true, PageLayout$composable$lambda_0(content, $dirty));
      var tmp$ret$9;
      // Inline function 'androidx.compose.runtime.remember$composable' call
      var tmp0_remember$composable_0 = $composer_0;
      var $composer_2 = tmp0_remember$composable_0;
      $composer_2.ks(-838505973);
      sourceInformation($composer_2, 'C(remember$composable)P(1):Composables.kt#9igjgp');
      var tmp$ret$8;
      // Inline function 'androidx.compose.runtime.cache' call
      var tmp1_cache_0 = $composer_2;
      var tmp2_cache_0 = $composer_2.ps(dispatchReceiver);
      var tmp$ret$7;
      // Inline function 'kotlin.let' call
      var tmp0_let_0 = tmp1_cache_0.ls();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$6;
      // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
      var tmp_5;
      if (tmp2_cache_0 ? true : tmp0_let_0 === Companion_getInstance_8().ns_1) {
        var tmp$ret$5;
        // Inline function 'com.gunnarss.kobweb.components.layouts.PageLayout$composable.<anonymous>.<anonymous>' call
        tmp$ret$5 = ComposableLambda$invoke$ref_29(dispatchReceiver);
        var value_0 = tmp$ret$5;
        tmp1_cache_0.ms(value_0);
        tmp_5 = value_0;
      } else {
        tmp_5 = tmp0_let_0;
      }
      tmp$ret$6 = tmp_5;
      tmp$ret$7 = tmp$ret$6;
      var tmp_6 = tmp$ret$7;
      tmp$ret$8 = (tmp_6 == null ? true : isObject(tmp_6)) ? tmp_6 : THROW_CCE();
      var tmp0_0 = tmp$ret$8;
      $composer_2.os();
      tmp$ret$9 = tmp0_0;
      tmp$ret$10 = tmp$ret$9;
      tmp$ret$11 = tmp$ret$10;
      Column$composable(tmp_2, null, tmp_3, null, tmp$ret$11, $composer_0, 24960, 10);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    var tmp0_safe_receiver = $composer_0.a14();
    if (tmp0_safe_receiver === null)
      null;
    else {
      tmp0_safe_receiver.b15(PageLayout$composable$lambda$ref(title, content, $changed));
    }
  }
  function PageLayout$composable$lambda($title, $content, $$changed, $composer, $force) {
    return PageLayout$composable($title, $content, $composer, $$changed | 1);
  }
  function PageLayout$composable$slambda($title, resultContinuation) {
    this.n2h_1 = $title;
    CoroutineImpl.call(this, resultContinuation);
  }
  PageLayout$composable$slambda.prototype.n1a = function ($this$LaunchedEffect, $cont) {
    var tmp = this.o1a($this$LaunchedEffect, $cont);
    tmp.jd_1 = Unit_getInstance();
    tmp.kd_1 = null;
    return tmp.qd();
  };
  PageLayout$composable$slambda.prototype.rd = function (p1, $cont) {
    return this.n1a((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $cont);
  };
  PageLayout$composable$slambda.prototype.qd = function () {
    var suspendResult = this.jd_1;
    $sm: do
      try {
        var tmp = this.hd_1;
        if (tmp === 0) {
          this.id_1 = 1;
          document.title = this.n2h_1;
          return Unit_getInstance();
        } else if (tmp === 1) {
          throw this.kd_1;
        }
      } catch ($p) {
        throw $p;
      }
     while (true);
  };
  PageLayout$composable$slambda.prototype.o1a = function ($this$LaunchedEffect, completion) {
    var i = new PageLayout$composable$slambda(this.n2h_1, completion);
    i.o2h_1 = $this$LaunchedEffect;
    return i;
  };
  PageLayout$composable$slambda.$metadata$ = classMeta('PageLayout$composable$slambda', undefined, undefined, undefined, [1], CoroutineImpl.prototype);
  function PageLayout$composable$slambda_0($title, resultContinuation) {
    var i = new PageLayout$composable$slambda($title, resultContinuation);
    var l = function ($this$LaunchedEffect, $cont) {
      return i.n1a($this$LaunchedEffect, $cont);
    };
    l.$arity = 1;
    return l;
  }
  function PageLayout$composable$lambda_0($content, $$dirty) {
    return function ($this$Column, $composer, $changed) {
      var $composer_0 = $composer;
      var tmp;
      if (!(($changed & 81) === 16) ? true : !$composer_0.d12()) {
        if (isTraceInProgress()) {
          traceEventStart(1373438589, $changed, -1, 'com.gunnarss.kobweb.components.layouts.PageLayout$composable.<anonymous> (PageLayout.kt:21)');
        }
        NavHeader$composable($composer_0, 0);
        $content($composer_0, 14 & $$dirty >> 3);
        var tmp_0;
        if (isTraceInProgress()) {
          traceEventEnd();
          tmp_0 = Unit_getInstance();
        }
        tmp = tmp_0;
      } else {
        $composer_0.hy();
        tmp = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  function ComposableLambda$invoke$ref_29($boundThis) {
    return function (p0, p1, p2) {
      return $boundThis.z1q(p0, p1, p2);
    };
  }
  function PageLayout$composable$lambda$ref($title, $content, $$changed) {
    return function (p0, p1) {
      PageLayout$composable$lambda($title, $content, $$changed, p0, p1);
      return Unit_getInstance();
    };
  }
  function get_FooterStyle() {
    init_properties_Footer_kt_9nwizl();
    return FooterStyle;
  }
  var FooterStyle;
  function FooterStyle$lambda($this$base) {
    init_properties_Footer_kt_9nwizl();
    var tmp = Companion_getInstance_36();
    var tmp_0 = get_cssRem(2);
    var tmp_1 = margin$default(tmp, tmp_0, null, null, null, 14, null);
    var tmp_2 = get_px(1);
    var tmp$ret$3;
    // Inline function 'org.jetbrains.compose.web.css.Companion.Solid' call
    var tmp0__get_Solid__yuxops = Companion_getInstance_19();
    var tmp$ret$2;
    // Inline function 'org.jetbrains.compose.web.css.LineStyle' call
    var tmp$ret$1;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$0 = 'solid';
    tmp$ret$1 = tmp$ret$0;
    tmp$ret$2 = tmp$ret$1;
    tmp$ret$3 = tmp$ret$2;
    var tmp_3 = padding_0(borderTop_1(tmp_1, tmp_2, tmp$ret$3, get_SilkTheme().p28_1.n2c($this$base.x29()).i29_1), get_cssRem(1), get_cssRem(4));
    var tmp$ret$7;
    // Inline function 'org.jetbrains.compose.web.css.Companion.Center' call
    var tmp1__get_Center__jmuch1 = Companion_getInstance_21();
    var tmp$ret$6;
    // Inline function 'org.jetbrains.compose.web.css.AlignSelf' call
    var tmp$ret$5;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$4;
    // Inline function 'kotlin.js.asDynamic' call
    tmp$ret$4 = 'center';
    tmp$ret$5 = tmp$ret$4;
    tmp$ret$6 = tmp$ret$5;
    tmp$ret$7 = tmp$ret$6;
    return alignSelf_0(tmp_3, tmp$ret$7);
  }
  var properties_initialized_Footer_kt_pg7k03;
  function init_properties_Footer_kt_9nwizl() {
    if (properties_initialized_Footer_kt_pg7k03) {
    } else {
      properties_initialized_Footer_kt_pg7k03 = true;
      var tmp = Companion_getInstance_38();
      FooterStyle = base(tmp, 'footer', FooterStyle$lambda);
    }
  }
  function get_margin() {
    init_properties_NavHeader_kt_1n33bw();
    return margin_3;
  }
  var margin_3;
  function NavLink$composable(path, text, ref, $composer, $changed, $default) {
    init_properties_NavHeader_kt_1n33bw();
    var ref_0 = {_v: ref};
    var $composer_0 = $composer;
    $composer_0 = $composer_0.z13(-1433433322);
    var $dirty = $changed;
    if (!(($default & 1) === 0))
      $dirty = $dirty | 6;
    else if (($changed & 14) === 0)
      $dirty = $dirty | ($composer_0.ps(path) ? 4 : 2);
    if (!(($default & 2) === 0))
      $dirty = $dirty | 48;
    else if (($changed & 112) === 0)
      $dirty = $dirty | ($composer_0.ps(text) ? 32 : 16);
    if (!(($default & 4) === 0))
      $dirty = $dirty | 384;
    else if (($changed & 896) === 0)
      $dirty = $dirty | ($composer_0.ps(ref_0._v) ? 256 : 128);
    if (!(($dirty & 731) === 146) ? true : !$composer_0.d12()) {
      if (!(($default & 4) === 0)) {
        ref_0._v = null;
      }
      if (isTraceInProgress()) {
        traceEventStart(-1433433322, $dirty, -1, 'com.gunnarss.kobweb.components.sections.NavLink$composable (NavHeader.kt:27)');
      }
      var tmp = color_1(get_margin(), get_SilkTheme().o2c($composer_0, 0).e29_1);
      var tmp_0 = get_UndecoratedLinkVariant();
      Link$composable(path, text, tmp, tmp_0, null, null, false, ref_0._v, $composer_0, 14 & $dirty | 112 & $dirty | 29360128 & $dirty << 15, 112);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    var tmp0_safe_receiver = $composer_0.a14();
    if (tmp0_safe_receiver === null)
      null;
    else {
      tmp0_safe_receiver.b15(NavLink$composable$lambda$ref(path, text, ref_0, $changed, $default));
    }
  }
  function NavHeader$composable($composer, $changed) {
    init_properties_NavHeader_kt_1n33bw();
    var $composer_0 = $composer;
    $composer_0 = $composer_0.z13(-2048659790);
    sourceInformation($composer_0, 'C(NavHeader$composable)');
    if (!($changed === 0) ? true : !$composer_0.d12()) {
      if (isTraceInProgress()) {
        traceEventStart(-2048659790, $changed, -1, 'com.gunnarss.kobweb.components.sections.NavHeader$composable (NavHeader.kt:39)');
      }
      var colorMode$delegate = rememberColorMode$composable($composer_0, 0);
      var palette = get_SilkTheme().o2c($composer_0, 0);
      var tmp = Companion_getInstance_36();
      var tmp_0 = fillMaxWidth$default(tmp, null, 1, null);
      var tmp_1 = get_px(50);
      var tmp_2 = backgroundColor_0(height$default(tmp_0, tmp_1, null, 2, null), palette.f29_1);
      var tmp$ret$6;
      // Inline function 'kotlin.run' call
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$5;
      // Inline function 'com.gunnarss.kobweb.components.sections.NavHeader$composable.<anonymous>' call
      var tmp_3 = $composer_0;
      var dispatchReceiver = composableLambda(tmp_3, -634359146, true, NavHeader$composable$lambda_2(colorMode$delegate));
      var tmp$ret$4;
      // Inline function 'androidx.compose.runtime.remember$composable' call
      var tmp0_remember$composable = $composer_0;
      var $composer_1 = tmp0_remember$composable;
      $composer_1.ks(-838505973);
      sourceInformation($composer_1, 'C(remember$composable)P(1):Composables.kt#9igjgp');
      var tmp$ret$3;
      // Inline function 'androidx.compose.runtime.cache' call
      var tmp1_cache = $composer_1;
      var tmp2_cache = $composer_1.ps(dispatchReceiver);
      var tmp$ret$2;
      // Inline function 'kotlin.let' call
      var tmp0_let = tmp1_cache.ls();
      // Inline function 'kotlin.contracts.contract' call
      var tmp$ret$1;
      // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
      var tmp_4;
      if (tmp2_cache ? true : tmp0_let === Companion_getInstance_8().ns_1) {
        var tmp$ret$0;
        // Inline function 'com.gunnarss.kobweb.components.sections.NavHeader$composable.<anonymous>.<anonymous>' call
        tmp$ret$0 = ComposableLambda$invoke$ref_33(dispatchReceiver);
        var value = tmp$ret$0;
        tmp1_cache.ms(value);
        tmp_4 = value;
      } else {
        tmp_4 = tmp0_let;
      }
      tmp$ret$1 = tmp_4;
      tmp$ret$2 = tmp$ret$1;
      var tmp_5 = tmp$ret$2;
      tmp$ret$3 = (tmp_5 == null ? true : isObject(tmp_5)) ? tmp_5 : THROW_CCE();
      var tmp0 = tmp$ret$3;
      $composer_1.os();
      tmp$ret$4 = tmp0;
      tmp$ret$5 = tmp$ret$4;
      tmp$ret$6 = tmp$ret$5;
      Box$composable(tmp_2, null, null, tmp$ret$6, $composer_0, 3072, 6);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    var tmp0_safe_receiver = $composer_0.a14();
    if (tmp0_safe_receiver === null)
      null;
    else {
      tmp0_safe_receiver.b15(NavHeader$composable$lambda$ref($changed));
    }
  }
  function NavLink$composable$lambda($path, $text, $ref, $$changed, $$default, $composer, $force) {
    return NavLink$composable($path, $text, $ref._v, $composer, $$changed | 1, $$default);
  }
  function NavHeader$composable$lambda($colorMode$delegate) {
    init_properties_NavHeader_kt_1n33bw();
    var tmp$ret$0;
    // Inline function 'androidx.compose.runtime.getValue' call
    var tmp0_getValue = getLocalDelegateReference('colorMode', KMutableProperty0, true, function () {
      return THROW_ISE();
    });
    tmp$ret$0 = $colorMode$delegate.a2();
    return tmp$ret$0;
  }
  function NavHeader$composable$lambda_0($colorMode$delegate, value) {
    init_properties_NavHeader_kt_1n33bw();
    var tmp0_setValue = getLocalDelegateReference('colorMode', KMutableProperty0, true, function () {
      return THROW_ISE();
    });
    return $colorMode$delegate.po(value);
  }
  function NavHeader$composable$lambda_1($$changed, $composer, $force) {
    return NavHeader$composable($composer, $$changed | 1);
  }
  function NavLink$composable$lambda$ref($path, $text, $ref, $$changed, $$default) {
    return function (p0, p1) {
      NavLink$composable$lambda($path, $text, $ref, $$changed, $$default, p0, p1);
      return Unit_getInstance();
    };
  }
  function NavHeader$composable$lambda$lambda$lambda(it) {
    init_properties_NavHeader_kt_1n33bw();
    it.setAttribute('rel', 'me');
    return Unit_getInstance();
  }
  function NavHeader$composable$lambda$lambda$lambda_0($colorMode$delegate) {
    return function () {
      NavHeader$composable$lambda_0($colorMode$delegate, NavHeader$composable$lambda($colorMode$delegate).v2c());
      return Unit_getInstance();
    };
  }
  function NavHeader$composable$lambda$lambda$lambda$lambda($colorMode$delegate) {
    return function ($this$Box, $composer, $changed) {
      var $composer_0 = $composer;
      var tmp;
      if (!(($changed & 81) === 16) ? true : !$composer_0.d12()) {
        if (isTraceInProgress()) {
          traceEventStart(630905262, $changed, -1, 'com.gunnarss.kobweb.components.sections.NavHeader$composable.<anonymous>.<anonymous>.<anonymous>.<anonymous> (NavHeader.kt:69)');
        }
        var tmp0_subject = NavHeader$composable$lambda($colorMode$delegate);
        var tmp0 = tmp0_subject.o4_1;
        switch (tmp0) {
          case 0:
            $composer_0.ks(-728753610);
            FaSun$composable(null, null, $composer_0, 0, 3);
            $composer_0.os();
            ;
            break;
          case 1:
            $composer_0.ks(-728753560);
            FaMoon$composable(null, null, $composer_0, 0, 3);
            $composer_0.os();
            ;
            break;
          default:
            $composer_0.ks(-728753530);
            $composer_0.os();
            break;
        }
        var tmp_0;
        if (isTraceInProgress()) {
          traceEventEnd();
          tmp_0 = Unit_getInstance();
        }
        tmp = tmp_0;
      } else {
        $composer_0.hy();
        tmp = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  function ComposableLambda$invoke$ref_30($boundThis) {
    return function (p0, p1, p2) {
      return $boundThis.z1q(p0, p1, p2);
    };
  }
  function NavHeader$composable$lambda$lambda$lambda_1($colorMode$delegate) {
    return function ($this$Button, $composer, $changed) {
      var $composer_0 = $composer;
      var tmp;
      if (!(($changed & 81) === 16) ? true : !$composer_0.d12()) {
        if (isTraceInProgress()) {
          traceEventStart(-572800268, $changed, -1, 'com.gunnarss.kobweb.components.sections.NavHeader$composable.<anonymous>.<anonymous>.<anonymous> (NavHeader.kt:68)');
        }
        var tmp_0 = margin_2(Companion_getInstance_36(), get_px(6));
        var tmp$ret$6;
        // Inline function 'kotlin.run' call
        // Inline function 'kotlin.contracts.contract' call
        var tmp$ret$5;
        // Inline function 'com.gunnarss.kobweb.components.sections.NavHeader$composable.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
        var tmp_1 = $composer_0;
        var dispatchReceiver = composableLambda(tmp_1, 630905262, true, NavHeader$composable$lambda$lambda$lambda$lambda($colorMode$delegate));
        var tmp$ret$4;
        // Inline function 'androidx.compose.runtime.remember$composable' call
        var tmp0_remember$composable = $composer_0;
        var $composer_1 = tmp0_remember$composable;
        $composer_1.ks(-838505973);
        sourceInformation($composer_1, 'C(remember$composable)P(1):Composables.kt#9igjgp');
        var tmp$ret$3;
        // Inline function 'androidx.compose.runtime.cache' call
        var tmp1_cache = $composer_1;
        var tmp2_cache = $composer_1.ps(dispatchReceiver);
        var tmp$ret$2;
        // Inline function 'kotlin.let' call
        var tmp0_let = tmp1_cache.ls();
        // Inline function 'kotlin.contracts.contract' call
        var tmp$ret$1;
        // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
        var tmp_2;
        if (tmp2_cache ? true : tmp0_let === Companion_getInstance_8().ns_1) {
          var tmp$ret$0;
          // Inline function 'com.gunnarss.kobweb.components.sections.NavHeader$composable.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
          tmp$ret$0 = ComposableLambda$invoke$ref_30(dispatchReceiver);
          var value = tmp$ret$0;
          tmp1_cache.ms(value);
          tmp_2 = value;
        } else {
          tmp_2 = tmp0_let;
        }
        tmp$ret$1 = tmp_2;
        tmp$ret$2 = tmp$ret$1;
        var tmp_3 = tmp$ret$2;
        tmp$ret$3 = (tmp_3 == null ? true : isObject(tmp_3)) ? tmp_3 : THROW_CCE();
        var tmp0 = tmp$ret$3;
        $composer_1.os();
        tmp$ret$4 = tmp0;
        tmp$ret$5 = tmp$ret$4;
        tmp$ret$6 = tmp$ret$5;
        Box$composable(tmp_0, null, null, tmp$ret$6, $composer_0, 3072, 6);
        var tmp_4;
        if (isTraceInProgress()) {
          traceEventEnd();
          tmp_4 = Unit_getInstance();
        }
        tmp = tmp_4;
      } else {
        $composer_0.hy();
        tmp = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  function ComposableLambda$invoke$ref_31($boundThis) {
    return function (p0, p1, p2) {
      return $boundThis.z1q(p0, p1, p2);
    };
  }
  function NavHeader$composable$lambda$lambda($colorMode$delegate) {
    return function ($this$Row, $composer, $changed) {
      var $composer_0 = $composer;
      var tmp;
      if (!(($changed & 81) === 16) ? true : !$composer_0.d12()) {
        if (isTraceInProgress()) {
          traceEventStart(-763522791, $changed, -1, 'com.gunnarss.kobweb.components.sections.NavHeader$composable.<anonymous>.<anonymous> (NavHeader.kt:52)');
        }
        NavLink$composable('/', 'Home', null, $composer_0, 54, 4);
        NavLink$composable('https://github.com/sigurdurrafn/', 'Code', null, $composer_0, 54, 4);
        NavLink$composable('https://www.twitter.com/sigurdur', 'Twitter', null, $composer_0, 54, 4);
        NavLink$composable('https://www.linkedin.com/in/sigurdurrafn/', 'LinkedIn', null, $composer_0, 54, 4);
        NavLink$composable('https://www.festinasweden.se/', 'Join me!', null, $composer_0, 54, 4);
        NavLink$composable('/blog', 'Blog', null, $composer_0, 54, 4);
        var tmp$ret$4;
        // Inline function 'androidx.compose.runtime.remember$composable' call
        var tmp0_remember$composable = $composer_0;
        var $composer_1 = tmp0_remember$composable;
        $composer_1.ks(547886695);
        sourceInformation($composer_1, 'C(remember$composable):Composables.kt#9igjgp');
        var tmp$ret$3;
        // Inline function 'androidx.compose.runtime.cache' call
        var tmp1_cache = $composer_1;
        var tmp$ret$2;
        // Inline function 'kotlin.let' call
        var tmp0_let = tmp1_cache.ls();
        // Inline function 'kotlin.contracts.contract' call
        var tmp$ret$1;
        // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
        var tmp_0;
        if (false ? true : tmp0_let === Companion_getInstance_8().ns_1) {
          var tmp$ret$0;
          // Inline function 'com.gunnarss.kobweb.components.sections.NavHeader$composable.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
          tmp$ret$0 = NavHeader$composable$lambda$lambda$lambda;
          var value = tmp$ret$0;
          tmp1_cache.ms(value);
          tmp_0 = value;
        } else {
          tmp_0 = tmp0_let;
        }
        tmp$ret$1 = tmp_0;
        tmp$ret$2 = tmp$ret$1;
        var tmp_1 = tmp$ret$2;
        tmp$ret$3 = (tmp_1 == null ? true : isObject(tmp_1)) ? tmp_1 : THROW_CCE();
        var tmp0 = tmp$ret$3;
        $composer_1.os();
        tmp$ret$4 = tmp0;
        NavLink$composable('https://mastodon.online/@sigurdur', 'Mastodon', ref([], tmp$ret$4), $composer_0, 54, 0);
        Spacer$composable($composer_0, 0);
        var tmp$ret$9;
        // Inline function 'androidx.compose.runtime.remember$composable' call
        var tmp1_remember$composable = $composer_0;
        var $composer_2 = tmp1_remember$composable;
        $composer_2.ks(-838505973);
        sourceInformation($composer_2, 'C(remember$composable)P(1):Composables.kt#9igjgp');
        var tmp$ret$8;
        // Inline function 'androidx.compose.runtime.cache' call
        var tmp1_cache_0 = $composer_2;
        var tmp2_cache = $composer_2.ps($colorMode$delegate);
        var tmp$ret$7;
        // Inline function 'kotlin.let' call
        var tmp0_let_0 = tmp1_cache_0.ls();
        // Inline function 'kotlin.contracts.contract' call
        var tmp$ret$6;
        // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
        var tmp_2;
        if (tmp2_cache ? true : tmp0_let_0 === Companion_getInstance_8().ns_1) {
          var tmp$ret$5;
          // Inline function 'com.gunnarss.kobweb.components.sections.NavHeader$composable.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
          tmp$ret$5 = NavHeader$composable$lambda$lambda$lambda_0($colorMode$delegate);
          var value_0 = tmp$ret$5;
          tmp1_cache_0.ms(value_0);
          tmp_2 = value_0;
        } else {
          tmp_2 = tmp0_let_0;
        }
        tmp$ret$6 = tmp_2;
        tmp$ret$7 = tmp$ret$6;
        var tmp_3 = tmp$ret$7;
        tmp$ret$8 = (tmp_3 == null ? true : isObject(tmp_3)) ? tmp_3 : THROW_CCE();
        var tmp0_0 = tmp$ret$8;
        $composer_2.os();
        tmp$ret$9 = tmp0_0;
        var tmp_4 = tmp$ret$9;
        var tmp_5 = get_margin();
        var tmp_6 = clip(tmp_5, Circle_init_$Create$(0, null, 3, null));
        var tmp$ret$16;
        // Inline function 'kotlin.run' call
        // Inline function 'kotlin.contracts.contract' call
        var tmp$ret$15;
        // Inline function 'com.gunnarss.kobweb.components.sections.NavHeader$composable.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
        var tmp_7 = $composer_0;
        var dispatchReceiver = composableLambda(tmp_7, -572800268, true, NavHeader$composable$lambda$lambda$lambda_1($colorMode$delegate));
        var tmp$ret$14;
        // Inline function 'androidx.compose.runtime.remember$composable' call
        var tmp0_remember$composable_0 = $composer_0;
        var $composer_3 = tmp0_remember$composable_0;
        $composer_3.ks(-838505973);
        sourceInformation($composer_3, 'C(remember$composable)P(1):Composables.kt#9igjgp');
        var tmp$ret$13;
        // Inline function 'androidx.compose.runtime.cache' call
        var tmp1_cache_1 = $composer_3;
        var tmp2_cache_0 = $composer_3.ps(dispatchReceiver);
        var tmp$ret$12;
        // Inline function 'kotlin.let' call
        var tmp0_let_1 = tmp1_cache_1.ls();
        // Inline function 'kotlin.contracts.contract' call
        var tmp$ret$11;
        // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
        var tmp_8;
        if (tmp2_cache_0 ? true : tmp0_let_1 === Companion_getInstance_8().ns_1) {
          var tmp$ret$10;
          // Inline function 'com.gunnarss.kobweb.components.sections.NavHeader$composable.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
          tmp$ret$10 = ComposableLambda$invoke$ref_31(dispatchReceiver);
          var value_1 = tmp$ret$10;
          tmp1_cache_1.ms(value_1);
          tmp_8 = value_1;
        } else {
          tmp_8 = tmp0_let_1;
        }
        tmp$ret$11 = tmp_8;
        tmp$ret$12 = tmp$ret$11;
        var tmp_9 = tmp$ret$12;
        tmp$ret$13 = (tmp_9 == null ? true : isObject(tmp_9)) ? tmp_9 : THROW_CCE();
        var tmp0_1 = tmp$ret$13;
        $composer_3.os();
        tmp$ret$14 = tmp0_1;
        tmp$ret$15 = tmp$ret$14;
        tmp$ret$16 = tmp$ret$15;
        Button$composable_0(tmp_4, tmp_6, null, false, null, tmp$ret$16, $composer_0, 196608, 28);
        var tmp_10;
        if (isTraceInProgress()) {
          traceEventEnd();
          tmp_10 = Unit_getInstance();
        }
        tmp = tmp_10;
      } else {
        $composer_0.hy();
        tmp = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  function ComposableLambda$invoke$ref_32($boundThis) {
    return function (p0, p1, p2) {
      return $boundThis.z1q(p0, p1, p2);
    };
  }
  function NavHeader$composable$lambda_2($colorMode$delegate) {
    return function ($this$Box, $composer, $changed) {
      var $composer_0 = $composer;
      var tmp;
      if (!(($changed & 81) === 16) ? true : !$composer_0.d12()) {
        if (isTraceInProgress()) {
          traceEventStart(-634359146, $changed, -1, 'com.gunnarss.kobweb.components.sections.NavHeader$composable.<anonymous> (NavHeader.kt:48)');
        }
        var tmp_0 = Companion_getInstance_36();
        var tmp_1 = fillMaxSize$default(tmp_0, null, 1, null);
        var tmp_2 = CenterVertically_getInstance();
        var tmp$ret$6;
        // Inline function 'kotlin.run' call
        // Inline function 'kotlin.contracts.contract' call
        var tmp$ret$5;
        // Inline function 'com.gunnarss.kobweb.components.sections.NavHeader$composable.<anonymous>.<anonymous>.<anonymous>' call
        var tmp_3 = $composer_0;
        var dispatchReceiver = composableLambda(tmp_3, -763522791, true, NavHeader$composable$lambda$lambda($colorMode$delegate));
        var tmp$ret$4;
        // Inline function 'androidx.compose.runtime.remember$composable' call
        var tmp0_remember$composable = $composer_0;
        var $composer_1 = tmp0_remember$composable;
        $composer_1.ks(-838505973);
        sourceInformation($composer_1, 'C(remember$composable)P(1):Composables.kt#9igjgp');
        var tmp$ret$3;
        // Inline function 'androidx.compose.runtime.cache' call
        var tmp1_cache = $composer_1;
        var tmp2_cache = $composer_1.ps(dispatchReceiver);
        var tmp$ret$2;
        // Inline function 'kotlin.let' call
        var tmp0_let = tmp1_cache.ls();
        // Inline function 'kotlin.contracts.contract' call
        var tmp$ret$1;
        // Inline function 'androidx.compose.runtime.cache.<anonymous>' call
        var tmp_4;
        if (tmp2_cache ? true : tmp0_let === Companion_getInstance_8().ns_1) {
          var tmp$ret$0;
          // Inline function 'com.gunnarss.kobweb.components.sections.NavHeader$composable.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
          tmp$ret$0 = ComposableLambda$invoke$ref_32(dispatchReceiver);
          var value = tmp$ret$0;
          tmp1_cache.ms(value);
          tmp_4 = value;
        } else {
          tmp_4 = tmp0_let;
        }
        tmp$ret$1 = tmp_4;
        tmp$ret$2 = tmp$ret$1;
        var tmp_5 = tmp$ret$2;
        tmp$ret$3 = (tmp_5 == null ? true : isObject(tmp_5)) ? tmp_5 : THROW_CCE();
        var tmp0 = tmp$ret$3;
        $composer_1.os();
        tmp$ret$4 = tmp0;
        tmp$ret$5 = tmp$ret$4;
        tmp$ret$6 = tmp$ret$5;
        Row$composable(tmp_1, null, tmp_2, null, tmp$ret$6, $composer_0, 24960, 10);
        var tmp_6;
        if (isTraceInProgress()) {
          traceEventEnd();
          tmp_6 = Unit_getInstance();
        }
        tmp = tmp_6;
      } else {
        $composer_0.hy();
        tmp = Unit_getInstance();
      }
      return Unit_getInstance();
    };
  }
  function ComposableLambda$invoke$ref_33($boundThis) {
    return function (p0, p1, p2) {
      return $boundThis.z1q(p0, p1, p2);
    };
  }
  function NavHeader$composable$lambda$ref($$changed) {
    return function (p0, p1) {
      NavHeader$composable$lambda_1($$changed, p0, p1);
      return Unit_getInstance();
    };
  }
  var properties_initialized_NavHeader_kt_f5zrgg;
  function init_properties_NavHeader_kt_1n33bw() {
    if (properties_initialized_NavHeader_kt_f5zrgg) {
    } else {
      properties_initialized_NavHeader_kt_f5zrgg = true;
      margin_3 = margin_1(Companion_getInstance_36(), get_px(0), get_px(15));
    }
  }
  function GoHomeLink$composable($composer, $changed) {
    var $composer_0 = $composer;
    $composer_0 = $composer_0.z13(-871490494);
    sourceInformation($composer_0, 'C(GoHomeLink$composable)');
    if (!($changed === 0) ? true : !$composer_0.d12()) {
      if (isTraceInProgress()) {
        traceEventStart(-871490494, $changed, -1, 'com.gunnarss.kobweb.components.widgets.GoHomeLink$composable (GoHomeLink.kt:6)');
      }
      Link$composable('/', 'Go Home', null, null, null, null, false, null, $composer_0, 54, 252);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    var tmp0_safe_receiver = $composer_0.a14();
    if (tmp0_safe_receiver === null)
      null;
    else {
      tmp0_safe_receiver.b15(GoHomeLink$composable$lambda$ref($changed));
    }
  }
  function GoHomeLink$composable$lambda($$changed, $composer, $force) {
    return GoHomeLink$composable($composer, $$changed | 1);
  }
  function GoHomeLink$composable$lambda$ref($$changed) {
    return function (p0, p1) {
      GoHomeLink$composable$lambda($$changed, p0, p1);
      return Unit_getInstance();
    };
  }
  function ComposableLambda$invoke$ref_34($boundThis) {
    return function (p0, p1) {
      return $boundThis.b12(p0, p1);
    };
  }
  function ComposableSingletons$AboutKt$lambda_1$lambda_irurs3($composer, $changed) {
    var $composer_0 = $composer;
    if (!(($changed & 11) === 2) ? true : !$composer_0.d12()) {
      if (isTraceInProgress()) {
        traceEventStart(69041220, $changed, -1, 'com.gunnarss.kobweb.pages.ComposableSingletons$AboutKt.lambda-1.<anonymous> (About.kt:12)');
      }
      SpanText$composable('This is a very basic site made using Kobweb', null, null, $composer_0, 6, 6);
      P$composable(null, null, $composer_0, 0, 3);
      Link$composable('/', 'Go Home', null, null, null, null, false, null, $composer_0, 54, 252);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    return Unit_getInstance();
  }
  function ComposableSingletons$AboutKt() {
    ComposableSingletons$AboutKt_instance = this;
    var tmp = this;
    tmp.p2h_1 = ComposableLambda$invoke$ref_34(composableLambdaInstance(69041220, false, ComposableSingletons$AboutKt$lambda_1$lambda_irurs3));
  }
  ComposableSingletons$AboutKt.$metadata$ = objectMeta('ComposableSingletons$AboutKt');
  var ComposableSingletons$AboutKt_instance;
  function ComposableSingletons$AboutKt_getInstance() {
    if (ComposableSingletons$AboutKt_instance == null)
      new ComposableSingletons$AboutKt();
    return ComposableSingletons$AboutKt_instance;
  }
  function AboutPage$composable($composer, $changed) {
    var $composer_0 = $composer;
    $composer_0 = $composer_0.z13(-909899748);
    sourceInformation($composer_0, 'C(AboutPage$composable)');
    if (!($changed === 0) ? true : !$composer_0.d12()) {
      if (isTraceInProgress()) {
        traceEventStart(-909899748, $changed, -1, 'com.gunnarss.kobweb.pages.AboutPage$composable (About.kt:11)');
      }
      PageLayout$composable('ABOUT', ComposableSingletons$AboutKt_getInstance().p2h_1, $composer_0, 54);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    var tmp0_safe_receiver = $composer_0.a14();
    if (tmp0_safe_receiver === null)
      null;
    else {
      tmp0_safe_receiver.b15(AboutPage$composable$lambda$ref($changed));
    }
  }
  function AboutPage$composable$lambda($$changed, $composer, $force) {
    return AboutPage$composable($composer, $$changed | 1);
  }
  function AboutPage$composable$lambda$ref($$changed) {
    return function (p0, p1) {
      AboutPage$composable$lambda($$changed, p0, p1);
      return Unit_getInstance();
    };
  }
  function ComposableLambda$invoke$ref_35($boundThis) {
    return function (p0, p1, p2) {
      return $boundThis.z1q(p0, p1, p2);
    };
  }
  function ComposableSingletons$IndexKt$lambda_1$lambda_5yb608($this$H1, $composer, $changed) {
    var $composer_0 = $composer;
    if (!(($changed & 81) === 16) ? true : !$composer_0.d12()) {
      if (isTraceInProgress()) {
        traceEventStart(1833499874, $changed, -1, 'com.gunnarss.kobweb.pages.ComposableSingletons$IndexKt.lambda-1.<anonymous> (Index.kt:19)');
      }
      SpanText$composable('Siggi Gunnarss', null, null, $composer_0, 6, 6);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    return Unit_getInstance();
  }
  function ComposableLambda$invoke$ref_36($boundThis) {
    return function (p0, p1, p2) {
      return $boundThis.z1q(p0, p1, p2);
    };
  }
  function ComposableSingletons$IndexKt$lambda_2$lambda_yrxn2f($this$Row, $composer, $changed) {
    var $composer_0 = $composer;
    if (!(($changed & 81) === 16) ? true : !$composer_0.d12()) {
      if (isTraceInProgress()) {
        traceEventStart(1299655612, $changed, -1, 'com.gunnarss.kobweb.pages.ComposableSingletons$IndexKt.lambda-2.<anonymous> (Index.kt:21)');
      }
      SpanText$composable('made with ', null, null, $composer_0, 6, 6);
      Link$composable('https://github.com/varabyte/kobweb', 'Kobweb', null, null, null, null, false, null, $composer_0, 54, 252);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    return Unit_getInstance();
  }
  function ComposableLambda$invoke$ref_37($boundThis) {
    return function (p0, p1) {
      return $boundThis.b12(p0, p1);
    };
  }
  function ComposableSingletons$IndexKt$lambda_3$lambda_7fjxui($composer, $changed) {
    var $composer_0 = $composer;
    if (!(($changed & 11) === 2) ? true : !$composer_0.d12()) {
      if (isTraceInProgress()) {
        traceEventStart(-925518305, $changed, -1, 'com.gunnarss.kobweb.pages.ComposableSingletons$IndexKt.lambda-3.<anonymous> (Index.kt:18)');
      }
      var tmp = padding_1(Companion_getInstance_36(), get_px(16));
      H1$composable(toAttrs$default(tmp, null, 1, null), ComposableSingletons$IndexKt_getInstance().q2h_1, $composer_0, 48, 0);
      Spacer$composable($composer_0, 0);
      var tmp_0 = padding_1(Companion_getInstance_36(), get_px(16));
      Row$composable(tmp_0, null, null, null, ComposableSingletons$IndexKt_getInstance().r2h_1, $composer_0, 24576, 14);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    return Unit_getInstance();
  }
  function ComposableSingletons$IndexKt() {
    ComposableSingletons$IndexKt_instance = this;
    var tmp = this;
    tmp.q2h_1 = ComposableLambda$invoke$ref_35(composableLambdaInstance(1833499874, false, ComposableSingletons$IndexKt$lambda_1$lambda_5yb608));
    var tmp_0 = this;
    tmp_0.r2h_1 = ComposableLambda$invoke$ref_36(composableLambdaInstance(1299655612, false, ComposableSingletons$IndexKt$lambda_2$lambda_yrxn2f));
    var tmp_1 = this;
    tmp_1.s2h_1 = ComposableLambda$invoke$ref_37(composableLambdaInstance(-925518305, false, ComposableSingletons$IndexKt$lambda_3$lambda_7fjxui));
  }
  ComposableSingletons$IndexKt.$metadata$ = objectMeta('ComposableSingletons$IndexKt');
  var ComposableSingletons$IndexKt_instance;
  function ComposableSingletons$IndexKt_getInstance() {
    if (ComposableSingletons$IndexKt_instance == null)
      new ComposableSingletons$IndexKt();
    return ComposableSingletons$IndexKt_instance;
  }
  function HomePage$composable($composer, $changed) {
    var $composer_0 = $composer;
    $composer_0 = $composer_0.z13(536156526);
    sourceInformation($composer_0, 'C(HomePage$composable)');
    if (!($changed === 0) ? true : !$composer_0.d12()) {
      if (isTraceInProgress()) {
        traceEventStart(536156526, $changed, -1, 'com.gunnarss.kobweb.pages.HomePage$composable (Index.kt:17)');
      }
      PageLayout$composable('Siggi Gunnarss', ComposableSingletons$IndexKt_getInstance().s2h_1, $composer_0, 54);
      if (isTraceInProgress()) {
        traceEventEnd();
      }
    } else {
      $composer_0.hy();
    }
    var tmp0_safe_receiver = $composer_0.a14();
    if (tmp0_safe_receiver === null)
      null;
    else {
      tmp0_safe_receiver.b15(HomePage$composable$lambda$ref($changed));
    }
  }
  function HomePage$composable$lambda($$changed, $composer, $force) {
    return HomePage$composable($composer, $$changed | 1);
  }
  function HomePage$composable$lambda$ref($$changed) {
    return function (p0, p1) {
      HomePage$composable$lambda($$changed, p0, p1);
      return Unit_getInstance();
    };
  }
  //region block: post-declaration
  CombinedContext.prototype.i4 = plus;
  AbstractCoroutineContextElement.prototype.b4 = get;
  AbstractCoroutineContextElement.prototype.h4 = fold;
  AbstractCoroutineContextElement.prototype.g4 = minusKey;
  AbstractCoroutineContextElement.prototype.i4 = plus;
  InternalHashCodeMap.prototype.z8 = createJsMap;
  JobSupport.prototype.fg = invokeOnCompletion$default;
  JobSupport.prototype.jg = cancel$default;
  JobSupport.prototype.i4 = plus;
  JobSupport.prototype.b4 = get;
  JobSupport.prototype.h4 = fold;
  JobSupport.prototype.g4 = minusKey;
  AbstractCoroutine.prototype.fg = invokeOnCompletion$default;
  AbstractCoroutine.prototype.jg = cancel$default;
  AbstractCoroutine.prototype.i4 = plus;
  AbstractCoroutine.prototype.b4 = get;
  AbstractCoroutine.prototype.h4 = fold;
  AbstractCoroutine.prototype.g4 = minusKey;
  StandaloneCoroutine.prototype.fg = invokeOnCompletion$default;
  StandaloneCoroutine.prototype.jg = cancel$default;
  StandaloneCoroutine.prototype.i4 = plus;
  StandaloneCoroutine.prototype.b4 = get;
  StandaloneCoroutine.prototype.h4 = fold;
  StandaloneCoroutine.prototype.g4 = minusKey;
  LazyStandaloneCoroutine.prototype.fg = invokeOnCompletion$default;
  LazyStandaloneCoroutine.prototype.jg = cancel$default;
  LazyStandaloneCoroutine.prototype.i4 = plus;
  LazyStandaloneCoroutine.prototype.b4 = get;
  LazyStandaloneCoroutine.prototype.h4 = fold;
  LazyStandaloneCoroutine.prototype.g4 = minusKey;
  ScopeCoroutine.prototype.fg = invokeOnCompletion$default;
  ScopeCoroutine.prototype.jg = cancel$default;
  ScopeCoroutine.prototype.i4 = plus;
  ScopeCoroutine.prototype.b4 = get;
  ScopeCoroutine.prototype.h4 = fold;
  ScopeCoroutine.prototype.g4 = minusKey;
  DispatchedCoroutine.prototype.fg = invokeOnCompletion$default;
  DispatchedCoroutine.prototype.jg = cancel$default;
  DispatchedCoroutine.prototype.i4 = plus;
  DispatchedCoroutine.prototype.b4 = get;
  DispatchedCoroutine.prototype.h4 = fold;
  DispatchedCoroutine.prototype.g4 = minusKey;
  CancellableContinuationImpl.prototype.ph = cancel$default_0;
  CoroutineDispatcher.prototype.b4 = get_0;
  CoroutineDispatcher.prototype.h4 = fold;
  CoroutineDispatcher.prototype.g4 = minusKey_0;
  CoroutineDispatcher.prototype.i4 = plus;
  EventLoop.prototype.i4 = plus;
  EventLoop.prototype.b4 = get_0;
  EventLoop.prototype.h4 = fold;
  EventLoop.prototype.g4 = minusKey_0;
  JobImpl.prototype.fg = invokeOnCompletion$default;
  JobImpl.prototype.jg = cancel$default;
  JobImpl.prototype.i4 = plus;
  JobImpl.prototype.b4 = get;
  JobImpl.prototype.h4 = fold;
  JobImpl.prototype.g4 = minusKey;
  MainCoroutineDispatcher.prototype.i4 = plus;
  MainCoroutineDispatcher.prototype.b4 = get_0;
  MainCoroutineDispatcher.prototype.h4 = fold;
  MainCoroutineDispatcher.prototype.g4 = minusKey_0;
  SupervisorJobImpl.prototype.fg = invokeOnCompletion$default;
  SupervisorJobImpl.prototype.jg = cancel$default;
  SupervisorJobImpl.prototype.i4 = plus;
  SupervisorJobImpl.prototype.b4 = get;
  SupervisorJobImpl.prototype.h4 = fold;
  SupervisorJobImpl.prototype.g4 = minusKey;
  Unconfined.prototype.i4 = plus;
  Unconfined.prototype.b4 = get_0;
  Unconfined.prototype.h4 = fold;
  Unconfined.prototype.g4 = minusKey_0;
  UndispatchedCoroutine.prototype.fg = invokeOnCompletion$default;
  UndispatchedCoroutine.prototype.jg = cancel$default;
  UndispatchedCoroutine.prototype.i4 = plus;
  UndispatchedCoroutine.prototype.b4 = get;
  UndispatchedCoroutine.prototype.h4 = fold;
  UndispatchedCoroutine.prototype.g4 = minusKey;
  JsMainDispatcher.prototype.i4 = plus;
  JsMainDispatcher.prototype.b4 = get_0;
  JsMainDispatcher.prototype.h4 = fold;
  JsMainDispatcher.prototype.g4 = minusKey_0;
  UnconfinedEventLoop.prototype.i4 = plus;
  UnconfinedEventLoop.prototype.b4 = get_0;
  UnconfinedEventLoop.prototype.h4 = fold;
  UnconfinedEventLoop.prototype.g4 = minusKey_0;
  SetTimeoutBasedDispatcher.prototype.i4 = plus;
  SetTimeoutBasedDispatcher.prototype.b4 = get_0;
  SetTimeoutBasedDispatcher.prototype.h4 = fold;
  SetTimeoutBasedDispatcher.prototype.g4 = minusKey_0;
  NodeDispatcher.prototype.i4 = plus;
  NodeDispatcher.prototype.b4 = get_0;
  NodeDispatcher.prototype.h4 = fold;
  NodeDispatcher.prototype.g4 = minusKey_0;
  SetTimeoutDispatcher.prototype.i4 = plus;
  SetTimeoutDispatcher.prototype.b4 = get_0;
  SetTimeoutDispatcher.prototype.h4 = fold;
  SetTimeoutDispatcher.prototype.g4 = minusKey_0;
  WindowDispatcher.prototype.i4 = plus;
  WindowDispatcher.prototype.b4 = get_0;
  WindowDispatcher.prototype.h4 = fold;
  WindowDispatcher.prototype.g4 = minusKey_0;
  OffsetApplier.prototype.gr = onBeginChanges;
  OffsetApplier.prototype.hr = onEndChanges;
  AbstractApplier.prototype.gr = onBeginChanges;
  AbstractApplier.prototype.hr = onEndChanges;
  BroadcastFrameClock.prototype.y1 = get_key;
  BroadcastFrameClock.prototype.b4 = get;
  BroadcastFrameClock.prototype.h4 = fold;
  BroadcastFrameClock.prototype.g4 = minusKey;
  BroadcastFrameClock.prototype.i4 = plus;
  StructuralEqualityPolicy.prototype.l1e = merge;
  SnapshotStateList.prototype.d1f = mergeRecords;
  MonotonicClockImpl.prototype.y1 = get_key;
  MonotonicClockImpl.prototype.b4 = get;
  MonotonicClockImpl.prototype.h4 = fold;
  MonotonicClockImpl.prototype.g4 = minusKey;
  MonotonicClockImpl.prototype.i4 = plus;
  DomApplier.prototype.gr = onBeginChanges;
  DomApplier.prototype.hr = onEndChanges;
  JsMicrotasksDispatcher.prototype.i4 = plus;
  JsMicrotasksDispatcher.prototype.b4 = get_0;
  JsMicrotasksDispatcher.prototype.h4 = fold;
  JsMicrotasksDispatcher.prototype.g4 = minusKey_0;
  AttrsScopeBuilder.prototype.d1t = id;
  AttrsScopeBuilder.prototype.e1t = tabIndex;
  EventsListenerScopeBuilder.prototype.g1t = onClick;
  EventsListenerScopeBuilder.prototype.h1t = onKeyDown;
  StyleScopeBuilder.prototype.q1x = property;
  StyleScopeBuilder.prototype.r1x = property_0;
  StyleScopeBuilder.prototype.t1x = variable;
  CSSRuleBuilderImpl.prototype.q1x = property;
  CSSRuleBuilderImpl.prototype.r1x = property_0;
  CSSRuleBuilderImpl.prototype.t1x = variable;
  StyleSheet.prototype.t1y = style_0;
  StyleSheet.prototype.v1y = style;
  StyleSheet.prototype.returnUniversalSelector = returnUniversalSelector;
  StyleSheet.prototype.returnHoverSelector = returnHoverSelector;
  StyleSheet.prototype.w1y = get_hover;
  CSSRulesHolderState.prototype.r1y = add;
  ComparableAttrsScope.prototype.c1t = classes;
  ComparableAttrsScope.prototype.d1t = id;
  ComparableAttrsScope.prototype.e1t = tabIndex;
  ComparableAttrsScope.prototype.g1t = onClick;
  ComparableAttrsScope.prototype.h1t = onKeyDown;
  DummyAttrsScope.prototype.c1t = classes;
  DummyAttrsScope.prototype.d1t = id;
  DummyAttrsScope.prototype.e1t = tabIndex;
  DummyAttrsScope.prototype.g1t = onClick;
  DummyAttrsScope.prototype.h1t = onKeyDown;
  ComparableStyleScope.prototype.q1x = property;
  ComparableStyleScope.prototype.r1x = property_0;
  ComparableStyleScope.prototype.t1x = variable;
  KobwebComposeStyleSheet.prototype.t1y = style_0;
  KobwebComposeStyleSheet.prototype.v1y = style;
  KobwebComposeStyleSheet.prototype.e1z = invoke;
  KobwebComposeStyleSheet.prototype.returnUniversalSelector = returnUniversalSelector;
  KobwebComposeStyleSheet.prototype.returnHoverSelector = returnHoverSelector;
  KobwebComposeStyleSheet.prototype.w1y = get_hover;
  ChainedModifier.prototype.w26 = then;
  StyleModifier.prototype.v26 = fold_0;
  StyleModifier.prototype.w26 = then;
  AttrsModifier.prototype.v26 = fold_0;
  AttrsModifier.prototype.w26 = then;
  SilkStyleSheet.prototype.t1y = style_0;
  SilkStyleSheet.prototype.v1y = style;
  SilkStyleSheet.prototype.returnUniversalSelector = returnUniversalSelector;
  SilkStyleSheet.prototype.returnHoverSelector = returnHoverSelector;
  SilkStyleSheet.prototype.w1y = get_hover;
  DefaultStyleSheet.prototype.t1y = style_0;
  DefaultStyleSheet.prototype.v1y = style;
  DefaultStyleSheet.prototype.returnUniversalSelector = returnUniversalSelector;
  DefaultStyleSheet.prototype.returnHoverSelector = returnHoverSelector;
  DefaultStyleSheet.prototype.w1y = get_hover;
  //endregion
  //region block: init
  _stableSortingIsSupported = null;
  interfacesCounter = 0;
  UNDECIDED = 0;
  SUSPENDED = 1;
  RESUMED = 2;
  UNDECIDED_0 = 0;
  SUSPENDED_0 = 1;
  RESUMED_0 = 2;
  FALSE = 0;
  TRUE = 1;
  MODE_CANCELLABLE = 1;
  MODE_UNINITIALIZED = -1;
  MODE_ATOMIC = 0;
  counter = 0;
  DEBUG = false;
  reuseKey = 207;
  movableContentKey = 126665345;
  Aux_Shift = 28;
  GroupInfo_Offset = 1;
  ObjectKey_Shift = 29;
  DataAnchor_Offset = 4;
  Slots_Shift = 28;
  MAX_BUFFER_SIZE = 32;
  MAX_BUFFER_SIZE_MINUS_ONE = 31;
  LOG_MAX_BUFFER_SIZE = 5;
  MUTABLE_BUFFER_SIZE = 33;
  TRIE_MAX_HEIGHT = 7;
  ENTRY_SIZE = 2;
  LOG_MAX_BRANCHING_FACTOR = 5;
  MAX_SHIFT = 30;
  MAX_COLUMN_COUNT = 4;
  _SilkTheme = null;
  COLOR_MODE_KEY = 'websitekobweb:app:colorMode';
  //endregion
  main();
  return _;
}));

//# sourceMappingURL=gunnarss.js.map
